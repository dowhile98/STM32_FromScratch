
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd8  08006cd8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce0  08006ce0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08006ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          0000430c  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004508  20004508  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a35f  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e8f  00000000  00000000  0003a58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  0003fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026056  00000000  00000000  00040ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019724  00000000  00000000  0006704e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9d1  00000000  00000000  00080772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160143  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006198  00000000  00000000  00160194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006be8 	.word	0x08006be8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08006be8 	.word	0x08006be8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <__NVIC_GetPriorityGrouping+0x18>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	f003 0307 	and.w	r3, r3, #7
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	db0b      	blt.n	800051a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	f003 021f 	and.w	r2, r3, #31
 8000508:	4907      	ldr	r1, [pc, #28]	; (8000528 <__NVIC_EnableIRQ+0x38>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	095b      	lsrs	r3, r3, #5
 8000510:	2001      	movs	r0, #1
 8000512:	fa00 f202 	lsl.w	r2, r0, r2
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e100 	.word	0xe000e100

0800052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db0a      	blt.n	8000556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	490c      	ldr	r1, [pc, #48]	; (8000578 <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000554:	e00a      	b.n	800056c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	0112      	lsls	r2, r2, #4
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	440b      	add	r3, r1
 800056a:	761a      	strb	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	f1c3 0307 	rsb	r3, r3, #7
 800059a:	2b04      	cmp	r3, #4
 800059c:	bf28      	it	cs
 800059e:	2304      	movcs	r3, #4
 80005a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d902      	bls.n	80005b0 <NVIC_EncodePriority+0x30>
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3b03      	subs	r3, #3
 80005ae:	e000      	b.n	80005b2 <NVIC_EncodePriority+0x32>
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43da      	mvns	r2, r3
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	401a      	ands	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43d9      	mvns	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4313      	orrs	r3, r2
         );
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3724      	adds	r7, #36	; 0x24
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40023800 	.word	0x40023800

08000618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800061c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000620:	f7ff ffe2 	bl	80005e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000624:	f7ff ff56 	bl	80004d4 <__NVIC_GetPriorityGrouping>
 8000628:	4603      	mov	r3, r0
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ffa6 	bl	8000580 <NVIC_EncodePriority>
 8000634:	4603      	mov	r3, r0
 8000636:	4619      	mov	r1, r3
 8000638:	2044      	movs	r0, #68	; 0x44
 800063a:	f7ff ff77 	bl	800052c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800063e:	2044      	movs	r0, #68	; 0x44
 8000640:	f7ff ff56 	bl	80004f0 <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000644:	f7ff ff46 	bl	80004d4 <__NVIC_GetPriorityGrouping>
 8000648:	4603      	mov	r3, r0
 800064a:	2200      	movs	r2, #0
 800064c:	2105      	movs	r1, #5
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff96 	bl	8000580 <NVIC_EncodePriority>
 8000654:	4603      	mov	r3, r0
 8000656:	4619      	mov	r1, r3
 8000658:	2046      	movs	r0, #70	; 0x46
 800065a:	f7ff ff67 	bl	800052c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800065e:	2046      	movs	r0, #70	; 0x46
 8000660:	f7ff ff46 	bl	80004f0 <__NVIC_EnableIRQ>

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <vApplicationGetIdleTaskMemory+0x2c>)
 8000678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <vApplicationGetIdleTaskMemory+0x30>)
 800067e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000220 	.word	0x20000220
 8000698:	200002d4 	.word	0x200002d4

0800069c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b08e      	sub	sp, #56	; 0x38
 80006a0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_FREERTOS_Init+0x58>)
 80006a4:	f107 041c 	add.w	r4, r7, #28
 80006a8:	461d      	mov	r5, r3
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 ff3c 	bl	800553a <osThreadCreate>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a0c      	ldr	r2, [pc, #48]	; (80006f8 <MX_FREERTOS_Init+0x5c>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of HMI */
  osThreadDef(HMI, HMI_Task, osPriorityIdle, 0, 128);
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_FREERTOS_Init+0x60>)
 80006ca:	463c      	mov	r4, r7
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HMIHandle = osThreadCreate(osThread(HMI), NULL);
 80006da:	463b      	mov	r3, r7
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 ff2b 	bl	800553a <osThreadCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a06      	ldr	r2, [pc, #24]	; (8000700 <MX_FREERTOS_Init+0x64>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	; 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	08006c10 	.word	0x08006c10
 80006f8:	20000218 	.word	0x20000218
 80006fc:	08006c2c 	.word	0x08006c2c
 8000700:	2000021c 	.word	0x2000021c

08000704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f004 ff60 	bl	80055d2 <osDelay>
 8000712:	e7fb      	b.n	800070c <StartDefaultTask+0x8>

08000714 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_GPIO_Init+0x9c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_GPIO_Init+0x9c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <MX_GPIO_Init+0x9c>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <MX_GPIO_Init+0xa0>)
 8000786:	f001 fa21 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800078a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xa0>)
 80007a4:	f001 f876 	bl	8001894 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020c00 	.word	0x40020c00

080007b8 <LL_DMA_IsActiveFlag_HT5>:
  * @rmtoll HISR  HTIF0    LL_DMA_IsActiveFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF5)==(DMA_HISR_HTIF5));
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007cc:	bf0c      	ite	eq
 80007ce:	2301      	moveq	r3, #1
 80007d0:	2300      	movne	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <LL_DMA_IsActiveFlag_HT7>:
  * @rmtoll HISR  HTIF7    LL_DMA_IsActiveFlag_HT7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_HTIF7)==(DMA_HISR_HTIF7));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80007f4:	bf0c      	ite	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	2300      	movne	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
} 
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800081c:	bf0c      	ite	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	2300      	movne	r3, #0
 8000822:	b2db      	uxtb	r3, r3
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll HISR  TCIF7    LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF7)==(DMA_HISR_TCIF7));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3
} 
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_DMA_ClearFlag_HT5>:
  * @rmtoll HIFCR  CHTIF5    LL_DMA_ClearFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF5);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000866:	60da      	str	r2, [r3, #12]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_DMA_ClearFlag_HT7>:
  * @rmtoll HIFCR  CHTIF7    LL_DMA_ClearFlag_HT7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF7);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000882:	60da      	str	r2, [r3, #12]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800089e:	60da      	str	r2, [r3, #12]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <LL_DMA_ClearFlag_TC7>:
  * @rmtoll HIFCR  CTCIF7    LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF7);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ba:	60da      	str	r2, [r3, #12]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <buffer_u16>:
#define SWP16(pt) (pt>>8) | (pt<<8)                            /**< Swap XY bytes to be YX */
#define SWP32(i) ((i&0xff000000)>>24)| ((i&0xff0000)>>8) | ((i&0xff00)<<8) | ((i&0xff)<<24) /**< Swap all bytes in a u32 to be le order */
#define HEADER0 	0x5A
#define HEADER1 	0xA5

void buffer_u16(packet_t *p, uint16_t *data, size_t len){
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	for(uint8_t i = 0; i<len; i++){
 80008d4:	2300      	movs	r3, #0
 80008d6:	75fb      	strb	r3, [r7, #23]
 80008d8:	e024      	b.n	8000924 <buffer_u16+0x5c>
		uint16_t pt = data[i];
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4413      	add	r3, r2
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	82bb      	strh	r3, [r7, #20]
		uint16_t pn = SWP16(pt);
 80008e6:	8abb      	ldrh	r3, [r7, #20]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	b21a      	sxth	r2, r3
 80008ee:	8abb      	ldrh	r3, [r7, #20]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	827b      	strh	r3, [r7, #18]
		memcpy(&p->data.cdata[p->len], &pn, 2);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	3304      	adds	r3, #4
 800090a:	8a7a      	ldrh	r2, [r7, #18]
 800090c:	801a      	strh	r2, [r3, #0]
		p->len += 2;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000914:	3302      	adds	r3, #2
 8000916:	b2da      	uxtb	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	for(uint8_t i = 0; i<len; i++){
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	3301      	adds	r3, #1
 8000922:	75fb      	strb	r3, [r7, #23]
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8d6      	bhi.n	80008da <buffer_u16+0x12>
	}
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	371c      	adds	r7, #28
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <buffer_u32>:

void buffer_u32(packet_t *p, uint32_t *data, size_t len){
 800093a:	b480      	push	{r7}
 800093c:	b087      	sub	sp, #28
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
	for(uint8_t i = 0; i<len; i++){
 8000946:	2300      	movs	r3, #0
 8000948:	75fb      	strb	r3, [r7, #23]
 800094a:	e033      	b.n	80009b4 <buffer_u32+0x7a>
		uint32_t t = SWP32(data[i]);
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	4413      	add	r3, r2
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	0e1a      	lsrs	r2, r3, #24
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	440b      	add	r3, r1
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000968:	431a      	orrs	r2, r3
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	68b9      	ldr	r1, [r7, #8]
 8000970:	440b      	add	r3, r1
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800097a:	431a      	orrs	r2, r3
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	440b      	add	r3, r1
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	061b      	lsls	r3, r3, #24
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
		memcpy(&p->data.cdata[p->len], &t, 4);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	3304      	adds	r3, #4
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	601a      	str	r2, [r3, #0]
		p->len += 4;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009a4:	3304      	adds	r3, #4
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	for(uint8_t i = 0; i<len; i++){
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	3301      	adds	r3, #1
 80009b2:	75fb      	strb	r3, [r7, #23]
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d8c7      	bhi.n	800094c <buffer_u32+0x12>
	}
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <packet_init>:
packet_t * packet_init(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	static packet_t p = {0};
	memset(&p, 0, sizeof(packet_t));
 80009d0:	2248      	movs	r2, #72	; 0x48
 80009d2:	2100      	movs	r1, #0
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <packet_init+0x14>)
 80009d6:	f006 f83d 	bl	8006a54 <memset>
	return &p;
 80009da:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <packet_init+0x14>)
}
 80009dc:	4618      	mov	r0, r3
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200006d4 	.word	0x200006d4

080009e4 <hmi_send_data>:

/**
 * @brief
 */
uint8_t hmi_send_data(HMI_Cmd_t cmd, packet_t *p){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
	//header init
	p->H.frameH = HEADER0;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	225a      	movs	r2, #90	; 0x5a
 80009f4:	701a      	strb	r2, [r3, #0]
	p->H.frameL = HEADER1;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	22a5      	movs	r2, #165	; 0xa5
 80009fa:	705a      	strb	r2, [r3, #1]
	p->H.len = p->len + 1;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	709a      	strb	r2, [r3, #2]
	p->H.cmd = cmd;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	70da      	strb	r2, [r3, #3]

	//Datos
	rbuart_send(&rb_tx, (uint8_t*)p, sizeof(p->H) + p->len);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a16:	3304      	adds	r3, #4
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6839      	ldr	r1, [r7, #0]
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <hmi_send_data+0x48>)
 8000a1e:	f004 fd47 	bl	80054b0 <rbuart_send>

	//habilitar la bandera de respuesta

	return 0;
 8000a22:	2300      	movs	r3, #0
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000c4 	.word	0x200000c4

08000a30 <dgus_var_write>:
uint8_t dgus_var_write(uint16_t addr, uint32_t val){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
	packet_t *p = packet_init();
 8000a3c:	f7ff ffc6 	bl	80009cc <packet_init>
 8000a40:	60f8      	str	r0, [r7, #12]
	//addr
	buffer_u16(p, &addr, 1);
 8000a42:	1dbb      	adds	r3, r7, #6
 8000a44:	2201      	movs	r2, #1
 8000a46:	4619      	mov	r1, r3
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff ff3d 	bl	80008c8 <buffer_u16>
	if(val< 0xFFFF){
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d806      	bhi.n	8000a66 <dgus_var_write+0x36>
		buffer_u16(p, (uint16_t*)&val, 1);
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f7ff ff32 	bl	80008c8 <buffer_u16>
 8000a64:	e005      	b.n	8000a72 <dgus_var_write+0x42>
	}else{
		buffer_u32(p, &val, 1);
 8000a66:	463b      	mov	r3, r7
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff ff64 	bl	800093a <buffer_u32>
	}
	return hmi_send_data(CMD_VAR_W, p);
 8000a72:	68f9      	ldr	r1, [r7, #12]
 8000a74:	2082      	movs	r0, #130	; 0x82
 8000a76:	f7ff ffb5 	bl	80009e4 <hmi_send_data>
 8000a7a:	4603      	mov	r3, r0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HMI_Task>:


void HMI_Task(void const * argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN HMI_Task */
	rbuart_tx_init(&rb_tx, tx_data, MAX_TX_SIZE);
 8000a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a90:	491a      	ldr	r1, [pc, #104]	; (8000afc <HMI_Task+0x78>)
 8000a92:	481b      	ldr	r0, [pc, #108]	; (8000b00 <HMI_Task+0x7c>)
 8000a94:	f004 fb00 	bl	8005098 <rbuart_tx_init>
	rbuart_rx_init(&rb_rx, rx_data, MAX_RX_SIZE);
 8000a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9c:	4919      	ldr	r1, [pc, #100]	; (8000b04 <HMI_Task+0x80>)
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <HMI_Task+0x84>)
 8000aa0:	f004 fb94 	bl	80051cc <rbuart_rx_init>
	rbuart_start_receive(&rb_rx);
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <HMI_Task+0x84>)
 8000aa6:	f004 fd18 	bl	80054da <rbuart_start_receive>
	uint16_t count = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	81fb      	strh	r3, [r7, #14]

	dgus_var_write(0x5004, 0x0050);
 8000aae:	2150      	movs	r1, #80	; 0x50
 8000ab0:	f245 0004 	movw	r0, #20484	; 0x5004
 8000ab4:	f7ff ffbc 	bl	8000a30 <dgus_var_write>
  /* Infinite loop */
  for(;;)
  {
	  count += 1;
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	3301      	adds	r3, #1
 8000abc:	81fb      	strh	r3, [r7, #14]
	  count = (count>999) ? 0 : count;
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac4:	d201      	bcs.n	8000aca <HMI_Task+0x46>
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	e000      	b.n	8000acc <HMI_Task+0x48>
 8000aca:	2300      	movs	r3, #0
 8000acc:	81fb      	strh	r3, [r7, #14]
	  dgus_var_write(0x1000, count);
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ad6:	f7ff ffab 	bl	8000a30 <dgus_var_write>
	  osDelay(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f004 fd79 	bl	80055d2 <osDelay>
	  dgus_var_write(0x5000 + 0x3, count * 30);
 8000ae0:	89fa      	ldrh	r2, [r7, #14]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	011b      	lsls	r3, r3, #4
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4619      	mov	r1, r3
 8000aec:	f245 0003 	movw	r0, #20483	; 0x5003
 8000af0:	f7ff ff9e 	bl	8000a30 <dgus_var_write>
	  osDelay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f004 fd6c 	bl	80055d2 <osDelay>
	  count += 1;
 8000afa:	e7dd      	b.n	8000ab8 <HMI_Task+0x34>
 8000afc:	200005d4 	.word	0x200005d4
 8000b00:	200000c4 	.word	0x200000c4
 8000b04:	200004d4 	.word	0x200004d4
 8000b08:	20000000 	.word	0x20000000

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fd0a 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f80e 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff fdfc 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1c:	f7ff fd7c 	bl	8000618 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b20:	f000 fc5e 	bl	80013e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000b24:	f000 fb9e 	bl	8001264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b28:	f7ff fdb8 	bl	800069c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b2c:	f004 fcfe 	bl	800552c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <main+0x24>
	...

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 ff86 	bl	8006a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <SystemClock_Config+0xb4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <SystemClock_Config+0xb8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <SystemClock_Config+0xb8>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <SystemClock_Config+0xb8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 f82b 	bl	8001c00 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000bb0:	f000 f830 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fa8e 	bl	80020f0 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bda:	f000 f81b 	bl	8000c14 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3750      	adds	r7, #80	; 0x50
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f000 fcb3 	bl	800156c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40001000 	.word	0x40001000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_MspInit+0x54>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_MspInit+0x54>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x54>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_MspInit+0x54>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_MspInit+0x54>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_MspInit+0x54>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210f      	movs	r1, #15
 8000c62:	f06f 0001 	mvn.w	r0, #1
 8000c66:	f000 fd59 	bl	800171c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_InitTick+0xe4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a32      	ldr	r2, [pc, #200]	; (8000d5c <HAL_InitTick+0xe4>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_InitTick+0xe4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 0310 	and.w	r3, r3, #16
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fbfe 	bl	80024b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cbe:	f001 fbcf 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8000cc2:	6378      	str	r0, [r7, #52]	; 0x34
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cc6:	f001 fbcb 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <HAL_InitTick+0xe8>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	0c9b      	lsrs	r3, r3, #18
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HAL_InitTick+0xec>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <HAL_InitTick+0xf0>)
 8000ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_InitTick+0xec>)
 8000ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_InitTick+0xec>)
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_InitTick+0xec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_InitTick+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_InitTick+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <HAL_InitTick+0xec>)
 8000d06:	f001 fc05 	bl	8002514 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d11b      	bne.n	8000d50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <HAL_InitTick+0xec>)
 8000d1a:	f001 fc55 	bl	80025c8 <HAL_TIM_Base_Start_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d2c:	2036      	movs	r0, #54	; 0x36
 8000d2e:	f000 fd11 	bl	8001754 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d808      	bhi.n	8000d4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	2036      	movs	r0, #54	; 0x36
 8000d3e:	f000 fced 	bl	800171c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_InitTick+0xf4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e002      	b.n	8000d50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3738      	adds	r7, #56	; 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	431bde83 	.word	0x431bde83
 8000d64:	2000071c 	.word	0x2000071c
 8000d68:	40001000 	.word	0x40001000
 8000d6c:	2000018c 	.word	0x2000018c

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	rbuart_usart_IDLE_callback(&rb_rx);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <USART1_IRQHandler+0x10>)
 8000da2:	f004 fb65 	bl	8005470 <rbuart_usart_IDLE_callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000

08000db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <USART2_IRQHandler+0x10>)
 8000db6:	f001 fea9 	bl	8002b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000764 	.word	0x20000764

08000dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <TIM6_DAC_IRQHandler+0x10>)
 8000dca:	f001 fc6d 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000071c 	.word	0x2000071c

08000dd8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */
	rbuart_rx_callback(&rb_rx);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <DMA2_Stream5_IRQHandler+0x10>)
 8000dde:	f004 fb04 	bl	80053ea <rbuart_rx_callback>
  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000000 	.word	0x20000000

08000dec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
	rbuart_tx_callback(&rb_tx);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <DMA2_Stream7_IRQHandler+0x10>)
 8000df2:	f004 fac6 	bl	8005382 <rbuart_tx_callback>
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000c4 	.word	0x200000c4

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <LL_DMA_SetDataTransferDirection>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <LL_DMA_SetDataTransferDirection+0x44>)
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000f58:	4908      	ldr	r1, [pc, #32]	; (8000f7c <LL_DMA_SetDataTransferDirection+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	440b      	add	r3, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	440b      	add	r3, r1
 8000f66:	4619      	mov	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	08006c68 	.word	0x08006c68

08000f80 <LL_DMA_SetMode>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LL_DMA_SetMode+0x44>)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000fa0:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <LL_DMA_SetMode+0x44>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	440b      	add	r3, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	440b      	add	r3, r1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	08006c68 	.word	0x08006c68

08000fc8 <LL_DMA_SetPeriphIncMode>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <LL_DMA_SetPeriphIncMode+0x44>)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000fe8:	4908      	ldr	r1, [pc, #32]	; (800100c <LL_DMA_SetPeriphIncMode+0x44>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	440b      	add	r3, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	08006c68 	.word	0x08006c68

08001010 <LL_DMA_SetMemoryIncMode>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <LL_DMA_SetMemoryIncMode+0x44>)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001030:	4908      	ldr	r1, [pc, #32]	; (8001054 <LL_DMA_SetMemoryIncMode+0x44>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	440b      	add	r3, r1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	440b      	add	r3, r1
 800103e:	4619      	mov	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	08006c68 	.word	0x08006c68

08001058 <LL_DMA_SetPeriphSize>:
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LL_DMA_SetPeriphSize+0x44>)
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001078:	4908      	ldr	r1, [pc, #32]	; (800109c <LL_DMA_SetPeriphSize+0x44>)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	440b      	add	r3, r1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	440b      	add	r3, r1
 8001086:	4619      	mov	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	08006c68 	.word	0x08006c68

080010a0 <LL_DMA_SetMemorySize>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <LL_DMA_SetMemorySize+0x44>)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <LL_DMA_SetMemorySize+0x44>)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	440b      	add	r3, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	440b      	add	r3, r1
 80010ce:	4619      	mov	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	08006c68 	.word	0x08006c68

080010e8 <LL_DMA_SetStreamPriorityLevel>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <LL_DMA_SetStreamPriorityLevel+0x44>)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001108:	4908      	ldr	r1, [pc, #32]	; (800112c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	440b      	add	r3, r1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	440b      	add	r3, r1
 8001116:	4619      	mov	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	08006c68 	.word	0x08006c68

08001130 <LL_DMA_SetChannelSelection>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LL_DMA_SetChannelSelection+0x44>)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001150:	4908      	ldr	r1, [pc, #32]	; (8001174 <LL_DMA_SetChannelSelection+0x44>)
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	440b      	add	r3, r1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	440b      	add	r3, r1
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	08006c68 	.word	0x08006c68

08001178 <LL_DMA_DisableFifoMode>:
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <LL_DMA_DisableFifoMode+0x3c>)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <LL_DMA_DisableFifoMode+0x3c>)
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	440a      	add	r2, r1
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	440a      	add	r2, r1
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	6153      	str	r3, [r2, #20]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	08006c68 	.word	0x08006c68

080011b8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60da      	str	r2, [r3, #12]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	615a      	str	r2, [r3, #20]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_AHB1_GRP1_EnableClock>:
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800120e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800121a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4013      	ands	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40023800 	.word	0x40023800

08001234 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LL_APB2_GRP1_EnableClock+0x2c>)
 800123e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <LL_APB2_GRP1_EnableClock+0x2c>)
 800124a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4013      	ands	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40023800 	.word	0x40023800

08001264 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800128e:	2010      	movs	r0, #16
 8001290:	f7ff ffd0 	bl	8001234 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001294:	2002      	movs	r0, #2
 8001296:	f7ff ffb5 	bl	8001204 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800129a:	23c0      	movs	r3, #192	; 0xc0
 800129c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800129e:	2302      	movs	r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4847      	ldr	r0, [pc, #284]	; (80013d4 <MX_USART1_UART_Init+0x170>)
 80012b8:	f002 fbf3 	bl	8003aa2 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 80012bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012c0:	2105      	movs	r1, #5
 80012c2:	4845      	ldr	r0, [pc, #276]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 80012c4:	f7ff ff34 	bl	8001130 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2105      	movs	r1, #5
 80012cc:	4842      	ldr	r0, [pc, #264]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 80012ce:	f7ff fe33 	bl	8000f38 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	4840      	ldr	r0, [pc, #256]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 80012d8:	f7ff ff06 	bl	80010e8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 80012dc:	2200      	movs	r2, #0
 80012de:	2105      	movs	r1, #5
 80012e0:	483d      	ldr	r0, [pc, #244]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 80012e2:	f7ff fe4d 	bl	8000f80 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	483b      	ldr	r0, [pc, #236]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 80012ec:	f7ff fe6c 	bl	8000fc8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 80012f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f4:	2105      	movs	r1, #5
 80012f6:	4838      	ldr	r0, [pc, #224]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 80012f8:	f7ff fe8a 	bl	8001010 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2105      	movs	r1, #5
 8001300:	4835      	ldr	r0, [pc, #212]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001302:	f7ff fea9 	bl	8001058 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8001306:	2200      	movs	r2, #0
 8001308:	2105      	movs	r1, #5
 800130a:	4833      	ldr	r0, [pc, #204]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 800130c:	f7ff fec8 	bl	80010a0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_5);
 8001310:	2105      	movs	r1, #5
 8001312:	4831      	ldr	r0, [pc, #196]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001314:	f7ff ff30 	bl	8001178 <LL_DMA_DisableFifoMode>

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 8001318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800131c:	2107      	movs	r1, #7
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001320:	f7ff ff06 	bl	8001130 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001324:	2240      	movs	r2, #64	; 0x40
 8001326:	2107      	movs	r1, #7
 8001328:	482b      	ldr	r0, [pc, #172]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 800132a:	f7ff fe05 	bl	8000f38 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 800132e:	2200      	movs	r2, #0
 8001330:	2107      	movs	r1, #7
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001334:	f7ff fed8 	bl	80010e8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 8001338:	2200      	movs	r2, #0
 800133a:	2107      	movs	r1, #7
 800133c:	4826      	ldr	r0, [pc, #152]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 800133e:	f7ff fe1f 	bl	8000f80 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 8001342:	2200      	movs	r2, #0
 8001344:	2107      	movs	r1, #7
 8001346:	4824      	ldr	r0, [pc, #144]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001348:	f7ff fe3e 	bl	8000fc8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 800134c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001350:	2107      	movs	r1, #7
 8001352:	4821      	ldr	r0, [pc, #132]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001354:	f7ff fe5c 	bl	8001010 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8001358:	2200      	movs	r2, #0
 800135a:	2107      	movs	r1, #7
 800135c:	481e      	ldr	r0, [pc, #120]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 800135e:	f7ff fe7b 	bl	8001058 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8001362:	2200      	movs	r2, #0
 8001364:	2107      	movs	r1, #7
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001368:	f7ff fe9a 	bl	80010a0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 800136c:	2107      	movs	r1, #7
 800136e:	481a      	ldr	r0, [pc, #104]	; (80013d8 <MX_USART1_UART_Init+0x174>)
 8001370:	f7ff ff02 	bl	8001178 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001374:	f7ff fd56 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8001378:	4603      	mov	r3, r0
 800137a:	2200      	movs	r2, #0
 800137c:	2105      	movs	r1, #5
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fda6 	bl	8000ed0 <NVIC_EncodePriority>
 8001384:	4603      	mov	r3, r0
 8001386:	4619      	mov	r1, r3
 8001388:	2025      	movs	r0, #37	; 0x25
 800138a:	f7ff fd77 	bl	8000e7c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800138e:	2025      	movs	r0, #37	; 0x25
 8001390:	f7ff fd56 	bl	8000e40 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001394:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001398:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013a6:	230c      	movs	r3, #12
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x178>)
 80013ba:	f002 ff85 	bl	80042c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_USART1_UART_Init+0x178>)
 80013c0:	f7ff ff0a 	bl	80011d8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x178>)
 80013c6:	f7ff fef7 	bl	80011b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40026400 	.word	0x40026400
 80013dc:	40011000 	.word	0x40011000

080013e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_USART2_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001418:	f001 fb2a 	bl	8002a70 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f7ff fbf7 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000764 	.word	0x20000764
 8001430:	40004400 	.word	0x40004400

08001434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0x94>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d133      	bne.n	80014be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_UART_MspInit+0x98>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_UART_MspInit+0x98>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800148e:	230c      	movs	r3, #12
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	2307      	movs	r3, #7
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 80014aa:	f000 f9f3 	bl	8001894 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	2026      	movs	r0, #38	; 0x26
 80014b4:	f000 f932 	bl	800171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014b8:	2026      	movs	r0, #38	; 0x26
 80014ba:	f000 f94b 	bl	8001754 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fe:	f7ff fc7f 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f005 fa73 	bl	80069ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fb01 	bl	8000b0c <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800150c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001518:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 800151c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001520:	20004508 	.word	0x20004508

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f8d8 	bl	8001706 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f7ff fb8e 	bl	8000c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fb60 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000190 	.word	0x20000190
 8001590:	200007a8 	.word	0x200007a8

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200007a8 	.word	0x200007a8

080015ac <__NVIC_SetPriorityGrouping>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_EnableIRQ>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db0b      	blt.n	800163a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <__NVIC_EnableIRQ+0x38>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	2001      	movs	r0, #1
 8001632:	fa00 f202 	lsl.w	r2, r0, r2
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ff4c 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172e:	f7ff ff61 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001732:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	6978      	ldr	r0, [r7, #20]
 800173a:	f7ff ffb1 	bl	80016a0 <NVIC_EncodePriority>
 800173e:	4602      	mov	r2, r0
 8001740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff80 	bl	800164c <__NVIC_SetPriority>
}
 800174c:	bf00      	nop
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff54 	bl	8001610 <__NVIC_EnableIRQ>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800177e:	f7ff ff09 	bl	8001594 <HAL_GetTick>
 8001782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d008      	beq.n	80017a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e052      	b.n	8001848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0216 	bic.w	r2, r2, #22
 80017b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <HAL_DMA_Abort+0x62>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	e013      	b.n	800181c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f4:	f7ff fece 	bl	8001594 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b05      	cmp	r3, #5
 8001800:	d90c      	bls.n	800181c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2220      	movs	r2, #32
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2203      	movs	r2, #3
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e015      	b.n	8001848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1e4      	bne.n	80017f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d004      	beq.n	800186e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00c      	b.n	8001888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e16b      	b.n	8001b88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 815a 	bne.w	8001b82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d005      	beq.n	80018e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d130      	bne.n	8001948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 0201 	and.w	r2, r3, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b03      	cmp	r3, #3
 8001952:	d017      	beq.n	8001984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80b4 	beq.w	8001b82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a5f      	ldr	r2, [pc, #380]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_GPIO_Init+0x30c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_GPIO_Init+0x310>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a52      	ldr	r2, [pc, #328]	; (8001ba8 <HAL_GPIO_Init+0x314>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02b      	beq.n	8001aba <HAL_GPIO_Init+0x226>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_GPIO_Init+0x318>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d025      	beq.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a50      	ldr	r2, [pc, #320]	; (8001bb0 <HAL_GPIO_Init+0x31c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x21e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <HAL_GPIO_Init+0x320>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x21a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x216>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_GPIO_Init+0x328>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x212>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x32c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4b      	ldr	r2, [pc, #300]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x20a>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x228>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	; (8001ba4 <HAL_GPIO_Init+0x310>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae90 	bls.w	80018b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	041a      	lsls	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	619a      	str	r2, [r3, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e267      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d075      	beq.n	8001d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1e:	4b88      	ldr	r3, [pc, #544]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d00c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c36:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b7e      	ldr	r3, [pc, #504]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d157      	bne.n	8001d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e242      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x74>
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x98>
 8001c7e:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6f      	ldr	r2, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6c      	ldr	r2, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c98:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b66      	ldr	r3, [pc, #408]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a65      	ldr	r2, [pc, #404]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc6c 	bl	8001594 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fc68 	bl	8001594 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e207      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fc58 	bl	8001594 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fc54 	bl	8001594 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1f3      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xe8>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1c7      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4937      	ldr	r1, [pc, #220]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_OscConfig+0x244>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff fc0d 	bl	8001594 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fc09 	bl	8001594 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1a8      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4925      	ldr	r1, [pc, #148]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x244>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fbec 	bl	8001594 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fbe8 	bl	8001594 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e187      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d036      	beq.n	8001e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_RCC_OscConfig+0x248>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff fbcc 	bl	8001594 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fbc8 	bl	8001594 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e167      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_OscConfig+0x240>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x200>
 8001e1e:	e01b      	b.n	8001e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_OscConfig+0x248>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fbb5 	bl	8001594 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e00e      	b.n	8001e4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fbb1 	bl	8001594 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d907      	bls.n	8001e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e150      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470000 	.word	0x42470000
 8001e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ea      	bne.n	8001e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8097 	beq.w	8001f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b7d      	ldr	r3, [pc, #500]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a7c      	ldr	r2, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x474>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x474>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x474>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb71 	bl	8001594 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff fb6d 	bl	8001594 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e10c      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x474>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x2ea>
 8001edc:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a63      	ldr	r2, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x324>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x30c>
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	4a5e      	ldr	r2, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	; 0x70
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x324>
 8001f0c:	4b58      	ldr	r3, [pc, #352]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	4b55      	ldr	r3, [pc, #340]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	4a54      	ldr	r2, [pc, #336]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fb32 	bl	8001594 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7ff fb2e 	bl	8001594 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0cb      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ee      	beq.n	8001f34 <HAL_RCC_OscConfig+0x334>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fb1c 	bl	8001594 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7ff fb18 	bl	8001594 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0b5      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ee      	bne.n	8001f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a38      	ldr	r2, [pc, #224]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a1 	beq.w	80020e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d05c      	beq.n	8002064 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d141      	bne.n	8002036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_RCC_OscConfig+0x478>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff faec 	bl	8001594 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff fae8 	bl	8001594 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e087      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	491b      	ldr	r1, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x478>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fac1 	bl	8001594 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff fabd 	bl	8001594 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e05c      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x416>
 8002034:	e054      	b.n	80020e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x478>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff faaa 	bl	8001594 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7ff faa6 	bl	8001594 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e045      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_OscConfig+0x470>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x444>
 8002062:	e03d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e038      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000
 8002078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x4ec>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d028      	beq.n	80020dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d121      	bne.n	80020dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d11a      	bne.n	80020dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ac:	4013      	ands	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0cc      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d90c      	bls.n	800212c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b65      	ldr	r3, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800214e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d044      	beq.n	8002210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d119      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d003      	beq.n	80021ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e067      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ce:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4934      	ldr	r1, [pc, #208]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e0:	f7ff f9d8 	bl	8001594 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e8:	f7ff f9d4 	bl	8001594 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e04f      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 020c 	and.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1eb      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d20c      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fcee 	bl	8000c78 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00
 80022ac:	40023800 	.word	0x40023800
 80022b0:	08006c50 	.word	0x08006c50
 80022b4:	20000188 	.word	0x20000188
 80022b8:	2000018c 	.word	0x2000018c

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c0:	b090      	sub	sp, #64	; 0x40
 80022c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
 80022c8:	2300      	movs	r3, #0
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022cc:	2300      	movs	r3, #0
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_GetSysClockFreq+0x180>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d00d      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x40>
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	f200 80a1 	bhi.w	8002428 <HAL_RCC_GetSysClockFreq+0x16c>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ee:	e09b      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_GetSysClockFreq+0x184>)
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022f4:	e09b      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022fa:	e098      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fc:	4b4f      	ldr	r3, [pc, #316]	; (800243c <HAL_RCC_GetSysClockFreq+0x180>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_RCC_GetSysClockFreq+0x180>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d028      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_GetSysClockFreq+0x180>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	099b      	lsrs	r3, r3, #6
 8002318:	2200      	movs	r2, #0
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	627a      	str	r2, [r7, #36]	; 0x24
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002324:	2100      	movs	r1, #0
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCC_GetSysClockFreq+0x188>)
 8002328:	fb03 f201 	mul.w	r2, r3, r1
 800232c:	2300      	movs	r3, #0
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	4413      	add	r3, r2
 8002334:	4a43      	ldr	r2, [pc, #268]	; (8002444 <HAL_RCC_GetSysClockFreq+0x188>)
 8002336:	fba0 1202 	umull	r1, r2, r0, r2
 800233a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800233c:	460a      	mov	r2, r1
 800233e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002342:	4413      	add	r3, r2
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002348:	2200      	movs	r2, #0
 800234a:	61bb      	str	r3, [r7, #24]
 800234c:	61fa      	str	r2, [r7, #28]
 800234e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002352:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002356:	f7fd ff3b 	bl	80001d0 <__aeabi_uldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4613      	mov	r3, r2
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002362:	e053      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_RCC_GetSysClockFreq+0x180>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	2200      	movs	r2, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	617a      	str	r2, [r7, #20]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002376:	f04f 0b00 	mov.w	fp, #0
 800237a:	4652      	mov	r2, sl
 800237c:	465b      	mov	r3, fp
 800237e:	f04f 0000 	mov.w	r0, #0
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	0159      	lsls	r1, r3, #5
 8002388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238c:	0150      	lsls	r0, r2, #5
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	ebb2 080a 	subs.w	r8, r2, sl
 8002396:	eb63 090b 	sbc.w	r9, r3, fp
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ae:	ebb2 0408 	subs.w	r4, r2, r8
 80023b2:	eb63 0509 	sbc.w	r5, r3, r9
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	00eb      	lsls	r3, r5, #3
 80023c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c4:	00e2      	lsls	r2, r4, #3
 80023c6:	4614      	mov	r4, r2
 80023c8:	461d      	mov	r5, r3
 80023ca:	eb14 030a 	adds.w	r3, r4, sl
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	eb45 030b 	adc.w	r3, r5, fp
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e2:	4629      	mov	r1, r5
 80023e4:	028b      	lsls	r3, r1, #10
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ec:	4621      	mov	r1, r4
 80023ee:	028a      	lsls	r2, r1, #10
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	2200      	movs	r2, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002400:	f7fd fee6 	bl	80001d0 <__aeabi_uldivmod>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4613      	mov	r3, r2
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_GetSysClockFreq+0x180>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800241c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002426:	e002      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_RCC_GetSysClockFreq+0x184>)
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002430:	4618      	mov	r0, r3
 8002432:	3740      	adds	r7, #64	; 0x40
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	00f42400 	.word	0x00f42400
 8002444:	017d7840 	.word	0x017d7840

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_GetHCLKFreq+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000188 	.word	0x20000188

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002464:	f7ff fff0 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0a9b      	lsrs	r3, r3, #10
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08006c60 	.word	0x08006c60

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800248c:	f7ff ffdc 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0b5b      	lsrs	r3, r3, #13
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4903      	ldr	r1, [pc, #12]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08006c60 	.word	0x08006c60

080024b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	220f      	movs	r2, #15
 80024be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_GetClockConfig+0x5c>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_RCC_GetClockConfig+0x60>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0207 	and.w	r2, r3, #7
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e041      	b.n	80025aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f839 	bl	80025b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f000 f9d8 	bl	8002908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e04e      	b.n	800267e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_TIM_Base_Start_IT+0xc4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d022      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260a:	d01d      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_TIM_Base_Start_IT+0xc8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_TIM_Base_Start_IT+0xcc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_TIM_Base_Start_IT+0xd0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1b      	ldr	r2, [pc, #108]	; (800269c <HAL_TIM_Base_Start_IT+0xd4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_TIM_Base_Start_IT+0x80>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d111      	bne.n	800266c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d010      	beq.n	800267c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	e007      	b.n	800267c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40010400 	.word	0x40010400
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40001800 	.word	0x40001800

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0202 	mvn.w	r2, #2
 80026d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8ee 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8e0 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f8f1 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0204 	mvn.w	r2, #4
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8c4 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8b6 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8c7 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0208 	mvn.w	r2, #8
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f89a 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f88c 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f89d 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d122      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0210 	mvn.w	r2, #16
 80027d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2208      	movs	r2, #8
 80027d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f870 	bl	80028cc <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f862 	bl	80028b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f873 	bl	80028e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0201 	mvn.w	r2, #1
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe f9e2 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f902 	bl	8002a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f838 	bl	80028f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b20      	cmp	r3, #32
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0220 	mvn.w	r2, #32
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8cc 	bl	8002a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <TIM_Base_SetConfig+0x114>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d00f      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3d      	ldr	r2, [pc, #244]	; (8002a20 <TIM_Base_SetConfig+0x118>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3c      	ldr	r2, [pc, #240]	; (8002a24 <TIM_Base_SetConfig+0x11c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3b      	ldr	r2, [pc, #236]	; (8002a28 <TIM_Base_SetConfig+0x120>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <TIM_Base_SetConfig+0x124>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <TIM_Base_SetConfig+0x114>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002968:	d027      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <TIM_Base_SetConfig+0x118>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d023      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <TIM_Base_SetConfig+0x11c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <TIM_Base_SetConfig+0x120>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01b      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <TIM_Base_SetConfig+0x124>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d017      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <TIM_Base_SetConfig+0x128>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <TIM_Base_SetConfig+0x12c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00f      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <TIM_Base_SetConfig+0x130>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <TIM_Base_SetConfig+0x134>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <TIM_Base_SetConfig+0x138>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <TIM_Base_SetConfig+0x13c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <TIM_Base_SetConfig+0x114>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0xf8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <TIM_Base_SetConfig+0x124>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d103      	bne.n	8002a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	615a      	str	r2, [r3, #20]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40010000 	.word	0x40010000
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40014400 	.word	0x40014400
 8002a38:	40014800 	.word	0x40014800
 8002a3c:	40001800 	.word	0x40001800
 8002a40:	40001c00 	.word	0x40001c00
 8002a44:	40002000 	.word	0x40002000

08002a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e03f      	b.n	8002b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fccc 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fc7b 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695a      	ldr	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0ba      	sub	sp, #232	; 0xe8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_UART_IRQHandler+0x66>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fb65 	bl	800323a <UART_Receive_IT>
      return;
 8002b70:	e256      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80de 	beq.w	8002d38 <HAL_UART_IRQHandler+0x22c>
 8002b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80d1 	beq.w	8002d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_UART_IRQHandler+0xae>
 8002ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0xd2>
 8002bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_UART_IRQHandler+0xf6>
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d011      	beq.n	8002c32 <HAL_UART_IRQHandler+0x126>
 8002c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f043 0208 	orr.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 81ed 	beq.w	8003016 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_UART_IRQHandler+0x14e>
 8002c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 faf0 	bl	800323a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_UART_IRQHandler+0x17a>
 8002c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04f      	beq.n	8002d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9f8 	bl	800307c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d141      	bne.n	8002d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1d9      	bne.n	8002c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d013      	beq.n	8002d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4a7d      	ldr	r2, [pc, #500]	; (8002ee8 <HAL_UART_IRQHandler+0x3dc>)
 8002cf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fda8 	bl	8001850 <HAL_DMA_Abort_IT>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d10:	4610      	mov	r0, r2
 8002d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	e00e      	b.n	8002d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f99a 	bl	8003050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e00a      	b.n	8002d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f996 	bl	8003050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	e006      	b.n	8002d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f992 	bl	8003050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d32:	e170      	b.n	8003016 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d34:	bf00      	nop
    return;
 8002d36:	e16e      	b.n	8003016 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	f040 814a 	bne.w	8002fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8143 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 813c 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	f040 80b4 	bne.w	8002eec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8140 	beq.w	800301a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f080 8139 	bcs.w	800301a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	f000 8088 	beq.w	8002ece <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1d9      	bne.n	8002dbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e1      	bne.n	8002e0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3314      	adds	r3, #20
 8002e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e3      	bne.n	8002e46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002eb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e3      	bne.n	8002e8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fc51 	bl	8001770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8c0 	bl	8003064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ee4:	e099      	b.n	800301a <HAL_UART_IRQHandler+0x50e>
 8002ee6:	bf00      	nop
 8002ee8:	08003143 	.word	0x08003143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 808b 	beq.w	800301e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8086 	beq.w	800301e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	330c      	adds	r3, #12
 8002f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f36:	647a      	str	r2, [r7, #68]	; 0x44
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e3      	bne.n	8002f12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	623b      	str	r3, [r7, #32]
   return(result);
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3314      	adds	r3, #20
 8002f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e3      	bne.n	8002f4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0310 	bic.w	r3, r3, #16
 8002fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fb4:	61fa      	str	r2, [r7, #28]
 8002fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e3      	bne.n	8002f90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f848 	bl	8003064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fd4:	e023      	b.n	800301e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x4ea>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8bb 	bl	800316a <UART_Transmit_IT>
    return;
 8002ff4:	e014      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00e      	beq.n	8003020 <HAL_UART_IRQHandler+0x514>
 8003002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8fb 	bl	800320a <UART_EndTransmit_IT>
    return;
 8003014:	e004      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
    return;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
      return;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <HAL_UART_IRQHandler+0x514>
      return;
 800301e:	bf00      	nop
  }
}
 8003020:	37e8      	adds	r7, #232	; 0xe8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop

08003028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b095      	sub	sp, #84	; 0x54
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a4:	643a      	str	r2, [r7, #64]	; 0x40
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d119      	bne.n	8003128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	60bb      	str	r3, [r7, #8]
   return(result);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003114:	61ba      	str	r2, [r7, #24]
 8003116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	613b      	str	r3, [r7, #16]
   return(result);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003136:	bf00      	nop
 8003138:	3754      	adds	r7, #84	; 0x54
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff ff77 	bl	8003050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b21      	cmp	r3, #33	; 0x21
 800317c:	d13e      	bne.n	80031fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	d114      	bne.n	80031b2 <UART_Transmit_IT+0x48>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d110      	bne.n	80031b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]
 80031b0:	e008      	b.n	80031c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6211      	str	r1, [r2, #32]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fefc 	bl	8003028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08c      	sub	sp, #48	; 0x30
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b22      	cmp	r3, #34	; 0x22
 800324c:	f040 80ab 	bne.w	80033a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d117      	bne.n	800328a <UART_Receive_IT+0x50>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003278:	b29a      	uxth	r2, r3
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	1c9a      	adds	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e026      	b.n	80032d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d007      	beq.n	80032ae <UART_Receive_IT+0x74>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <UART_Receive_IT+0x82>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e008      	b.n	80032ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15a      	bne.n	80033a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0220 	bic.w	r2, r2, #32
 80032fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	d135      	bne.n	8003398 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 0310 	bic.w	r3, r3, #16
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	623a      	str	r2, [r7, #32]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d10a      	bne.n	800338a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fe67 	bl	8003064 <HAL_UARTEx_RxEventCallback>
 8003396:	e002      	b.n	800339e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fe4f 	bl	800303c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b0c0      	sub	sp, #256	; 0x100
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	68d9      	ldr	r1, [r3, #12]
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	ea40 0301 	orr.w	r3, r0, r1
 80033d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003408:	f021 010c 	bic.w	r1, r1, #12
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003416:	430b      	orrs	r3, r1
 8003418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	6999      	ldr	r1, [r3, #24]
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	ea40 0301 	orr.w	r3, r0, r1
 8003436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b8f      	ldr	r3, [pc, #572]	; (800367c <UART_SetConfig+0x2cc>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d005      	beq.n	8003450 <UART_SetConfig+0xa0>
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b8d      	ldr	r3, [pc, #564]	; (8003680 <UART_SetConfig+0x2d0>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d104      	bne.n	800345a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003450:	f7ff f81a 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003454:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003458:	e003      	b.n	8003462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800345a:	f7ff f801 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 800345e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346c:	f040 810c 	bne.w	8003688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800347a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800347e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	1891      	adds	r1, r2, r2
 8003488:	65b9      	str	r1, [r7, #88]	; 0x58
 800348a:	415b      	adcs	r3, r3
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800348e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003492:	4621      	mov	r1, r4
 8003494:	eb12 0801 	adds.w	r8, r2, r1
 8003498:	4629      	mov	r1, r5
 800349a:	eb43 0901 	adc.w	r9, r3, r1
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034b2:	4690      	mov	r8, r2
 80034b4:	4699      	mov	r9, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	eb18 0303 	adds.w	r3, r8, r3
 80034bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034c0:	462b      	mov	r3, r5
 80034c2:	eb49 0303 	adc.w	r3, r9, r3
 80034c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034de:	460b      	mov	r3, r1
 80034e0:	18db      	adds	r3, r3, r3
 80034e2:	653b      	str	r3, [r7, #80]	; 0x50
 80034e4:	4613      	mov	r3, r2
 80034e6:	eb42 0303 	adc.w	r3, r2, r3
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
 80034ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034f4:	f7fc fe6c 	bl	80001d0 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <UART_SetConfig+0x2d4>)
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	011c      	lsls	r4, r3, #4
 8003506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003510:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003518:	4642      	mov	r2, r8
 800351a:	464b      	mov	r3, r9
 800351c:	1891      	adds	r1, r2, r2
 800351e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003520:	415b      	adcs	r3, r3
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003528:	4641      	mov	r1, r8
 800352a:	eb12 0a01 	adds.w	sl, r2, r1
 800352e:	4649      	mov	r1, r9
 8003530:	eb43 0b01 	adc.w	fp, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003548:	4692      	mov	sl, r2
 800354a:	469b      	mov	fp, r3
 800354c:	4643      	mov	r3, r8
 800354e:	eb1a 0303 	adds.w	r3, sl, r3
 8003552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003556:	464b      	mov	r3, r9
 8003558:	eb4b 0303 	adc.w	r3, fp, r3
 800355c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800356c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003574:	460b      	mov	r3, r1
 8003576:	18db      	adds	r3, r3, r3
 8003578:	643b      	str	r3, [r7, #64]	; 0x40
 800357a:	4613      	mov	r3, r2
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
 8003582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800358a:	f7fc fe21 	bl	80001d0 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4611      	mov	r1, r2
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <UART_SetConfig+0x2d4>)
 8003596:	fba3 2301 	umull	r2, r3, r3, r1
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2264      	movs	r2, #100	; 0x64
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	1acb      	subs	r3, r1, r3
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <UART_SetConfig+0x2d4>)
 80035ac:	fba3 2302 	umull	r2, r3, r3, r2
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035b8:	441c      	add	r4, r3
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035d4:	415b      	adcs	r3, r3
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035dc:	4641      	mov	r1, r8
 80035de:	1851      	adds	r1, r2, r1
 80035e0:	6339      	str	r1, [r7, #48]	; 0x30
 80035e2:	4649      	mov	r1, r9
 80035e4:	414b      	adcs	r3, r1
 80035e6:	637b      	str	r3, [r7, #52]	; 0x34
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035f4:	4659      	mov	r1, fp
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4651      	mov	r1, sl
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4642      	mov	r2, r8
 800360a:	189b      	adds	r3, r3, r2
 800360c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003610:	464b      	mov	r3, r9
 8003612:	460a      	mov	r2, r1
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003628:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800362c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003630:	460b      	mov	r3, r1
 8003632:	18db      	adds	r3, r3, r3
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 8003636:	4613      	mov	r3, r2
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003646:	f7fc fdc3 	bl	80001d0 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <UART_SetConfig+0x2d4>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <UART_SetConfig+0x2d4>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	f003 0207 	and.w	r2, r3, #7
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4422      	add	r2, r4
 8003676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003678:	e105      	b.n	8003886 <UART_SetConfig+0x4d6>
 800367a:	bf00      	nop
 800367c:	40011000 	.word	0x40011000
 8003680:	40011400 	.word	0x40011400
 8003684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800368c:	2200      	movs	r2, #0
 800368e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003692:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	1891      	adds	r1, r2, r2
 80036a0:	6239      	str	r1, [r7, #32]
 80036a2:	415b      	adcs	r3, r3
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036aa:	4641      	mov	r1, r8
 80036ac:	1854      	adds	r4, r2, r1
 80036ae:	4649      	mov	r1, r9
 80036b0:	eb43 0501 	adc.w	r5, r3, r1
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	00eb      	lsls	r3, r5, #3
 80036be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c2:	00e2      	lsls	r2, r4, #3
 80036c4:	4614      	mov	r4, r2
 80036c6:	461d      	mov	r5, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	18e3      	adds	r3, r4, r3
 80036cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d0:	464b      	mov	r3, r9
 80036d2:	eb45 0303 	adc.w	r3, r5, r3
 80036d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036f6:	4629      	mov	r1, r5
 80036f8:	008b      	lsls	r3, r1, #2
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003700:	4621      	mov	r1, r4
 8003702:	008a      	lsls	r2, r1, #2
 8003704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003708:	f7fc fd62 	bl	80001d0 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b60      	ldr	r3, [pc, #384]	; (8003894 <UART_SetConfig+0x4e4>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	011c      	lsls	r4, r3, #4
 800371a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371e:	2200      	movs	r2, #0
 8003720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	61b9      	str	r1, [r7, #24]
 8003734:	415b      	adcs	r3, r3
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800373c:	4641      	mov	r1, r8
 800373e:	1851      	adds	r1, r2, r1
 8003740:	6139      	str	r1, [r7, #16]
 8003742:	4649      	mov	r1, r9
 8003744:	414b      	adcs	r3, r1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003754:	4659      	mov	r1, fp
 8003756:	00cb      	lsls	r3, r1, #3
 8003758:	4651      	mov	r1, sl
 800375a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375e:	4651      	mov	r1, sl
 8003760:	00ca      	lsls	r2, r1, #3
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	4603      	mov	r3, r0
 8003768:	4642      	mov	r2, r8
 800376a:	189b      	adds	r3, r3, r2
 800376c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003770:	464b      	mov	r3, r9
 8003772:	460a      	mov	r2, r1
 8003774:	eb42 0303 	adc.w	r3, r2, r3
 8003778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	67bb      	str	r3, [r7, #120]	; 0x78
 8003786:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003794:	4649      	mov	r1, r9
 8003796:	008b      	lsls	r3, r1, #2
 8003798:	4641      	mov	r1, r8
 800379a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379e:	4641      	mov	r1, r8
 80037a0:	008a      	lsls	r2, r1, #2
 80037a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037a6:	f7fc fd13 	bl	80001d0 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4b39      	ldr	r3, [pc, #228]	; (8003894 <UART_SetConfig+0x4e4>)
 80037b0:	fba3 1302 	umull	r1, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	2164      	movs	r1, #100	; 0x64
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	4a34      	ldr	r2, [pc, #208]	; (8003894 <UART_SetConfig+0x4e4>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ce:	441c      	add	r4, r3
 80037d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d4:	2200      	movs	r2, #0
 80037d6:	673b      	str	r3, [r7, #112]	; 0x70
 80037d8:	677a      	str	r2, [r7, #116]	; 0x74
 80037da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037de:	4642      	mov	r2, r8
 80037e0:	464b      	mov	r3, r9
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	415b      	adcs	r3, r3
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ee:	4641      	mov	r1, r8
 80037f0:	1851      	adds	r1, r2, r1
 80037f2:	6039      	str	r1, [r7, #0]
 80037f4:	4649      	mov	r1, r9
 80037f6:	414b      	adcs	r3, r1
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003806:	4659      	mov	r1, fp
 8003808:	00cb      	lsls	r3, r1, #3
 800380a:	4651      	mov	r1, sl
 800380c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003810:	4651      	mov	r1, sl
 8003812:	00ca      	lsls	r2, r1, #3
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	4603      	mov	r3, r0
 800381a:	4642      	mov	r2, r8
 800381c:	189b      	adds	r3, r3, r2
 800381e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	663b      	str	r3, [r7, #96]	; 0x60
 8003834:	667a      	str	r2, [r7, #100]	; 0x64
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003842:	4649      	mov	r1, r9
 8003844:	008b      	lsls	r3, r1, #2
 8003846:	4641      	mov	r1, r8
 8003848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384c:	4641      	mov	r1, r8
 800384e:	008a      	lsls	r2, r1, #2
 8003850:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003854:	f7fc fcbc 	bl	80001d0 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <UART_SetConfig+0x4e4>)
 800385e:	fba3 1302 	umull	r1, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2164      	movs	r1, #100	; 0x64
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <UART_SetConfig+0x4e4>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4422      	add	r2, r4
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	bf00      	nop
 8003888:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	51eb851f 	.word	0x51eb851f

08003898 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	613b      	str	r3, [r7, #16]
  return result;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	2103      	movs	r1, #3
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	61bb      	str	r3, [r7, #24]
  return result;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	43db      	mvns	r3, r3
 800390a:	401a      	ands	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003926:	b480      	push	{r7}
 8003928:	b089      	sub	sp, #36	; 0x24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	613b      	str	r3, [r7, #16]
  return result;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	fab3 f383 	clz	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2103      	movs	r1, #3
 800394e:	fa01 f303 	lsl.w	r3, r1, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	401a      	ands	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	61bb      	str	r3, [r7, #24]
  return result;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	431a      	orrs	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003978:	bf00      	nop
 800397a:	3724      	adds	r7, #36	; 0x24
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	613b      	str	r3, [r7, #16]
  return result;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2103      	movs	r1, #3
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	61bb      	str	r3, [r7, #24]
  return result;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	60da      	str	r2, [r3, #12]
}
 80039d6:	bf00      	nop
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b089      	sub	sp, #36	; 0x24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	613b      	str	r3, [r7, #16]
  return result;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	210f      	movs	r1, #15
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	401a      	ands	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	61bb      	str	r3, [r7, #24]
  return result;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003a34:	bf00      	nop
 8003a36:	3724      	adds	r7, #36	; 0x24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	613b      	str	r3, [r7, #16]
  return result;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	210f      	movs	r1, #15
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
  return result;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003a96:	bf00      	nop
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b088      	sub	sp, #32
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	613b      	str	r3, [r7, #16]
  return result;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003acc:	e050      	b.n	8003b70 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d042      	beq.n	8003b6a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d003      	beq.n	8003af4 <LL_GPIO_Init+0x52>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d10d      	bne.n	8003b10 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	461a      	mov	r2, r3
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff12 	bl	8003926 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	461a      	mov	r2, r3
 8003b08:	69b9      	ldr	r1, [r7, #24]
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fef3 	bl	80038f6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	461a      	mov	r2, r3
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff33 	bl	8003984 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d11a      	bne.n	8003b5c <LL_GPIO_Init+0xba>
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	60bb      	str	r3, [r7, #8]
  return result;
 8003b32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d807      	bhi.n	8003b4e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	461a      	mov	r2, r3
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ff4b 	bl	80039e2 <LL_GPIO_SetAFPin_0_7>
 8003b4c:	e006      	b.n	8003b5c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	461a      	mov	r2, r3
 8003b54:	69b9      	ldr	r1, [r7, #24]
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ff72 	bl	8003a40 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461a      	mov	r2, r3
 8003b62:	69b9      	ldr	r1, [r7, #24]
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fe97 	bl	8003898 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1a7      	bne.n	8003ace <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <LL_RCC_GetSysClkSource+0x18>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800

08003ba4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <LL_RCC_GetAHBPrescaler+0x18>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800

08003bdc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800

08003bf8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <LL_RCC_PLL_GetMainSource+0x18>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <LL_RCC_PLL_GetN+0x18>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	099b      	lsrs	r3, r3, #6
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40023800 	.word	0x40023800

08003c30 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <LL_RCC_PLL_GetP+0x18>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <LL_RCC_PLL_GetDivider+0x18>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003c70:	f000 f820 	bl	8003cb4 <RCC_GetSystemClockFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f840 	bl	8003d04 <RCC_GetHCLKClockFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f84e 	bl	8003d30 <RCC_GetPCLK1ClockFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f85a 	bl	8003d58 <RCC_GetPCLK2ClockFreq>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	60da      	str	r2, [r3, #12]
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003cbe:	f7ff ff63 	bl	8003b88 <LL_RCC_GetSysClkSource>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d00c      	beq.n	8003ce2 <RCC_GetSystemClockFreq+0x2e>
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d80f      	bhi.n	8003cec <RCC_GetSystemClockFreq+0x38>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <RCC_GetSystemClockFreq+0x22>
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d003      	beq.n	8003cdc <RCC_GetSystemClockFreq+0x28>
 8003cd4:	e00a      	b.n	8003cec <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <RCC_GetSystemClockFreq+0x48>)
 8003cd8:	607b      	str	r3, [r7, #4]
      break;
 8003cda:	e00a      	b.n	8003cf2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <RCC_GetSystemClockFreq+0x4c>)
 8003cde:	607b      	str	r3, [r7, #4]
      break;
 8003ce0:	e007      	b.n	8003cf2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003ce2:	2008      	movs	r0, #8
 8003ce4:	f000 f84c 	bl	8003d80 <RCC_PLL_GetFreqDomain_SYS>
 8003ce8:	6078      	str	r0, [r7, #4]
      break;
 8003cea:	e002      	b.n	8003cf2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <RCC_GetSystemClockFreq+0x48>)
 8003cee:	607b      	str	r3, [r7, #4]
      break;
 8003cf0:	bf00      	nop
  }

  return frequency;
 8003cf2:	687b      	ldr	r3, [r7, #4]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	017d7840 	.word	0x017d7840

08003d04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003d0c:	f7ff ff4a 	bl	8003ba4 <LL_RCC_GetAHBPrescaler>
 8003d10:	4603      	mov	r3, r0
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <RCC_GetHCLKClockFreq+0x28>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	40d3      	lsrs	r3, r2
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08006c50 	.word	0x08006c50

08003d30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003d38:	f7ff ff42 	bl	8003bc0 <LL_RCC_GetAPB1Prescaler>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	0a9b      	lsrs	r3, r3, #10
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <RCC_GetPCLK1ClockFreq+0x24>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	461a      	mov	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	40d3      	lsrs	r3, r2
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	08006c60 	.word	0x08006c60

08003d58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003d60:	f7ff ff3c 	bl	8003bdc <LL_RCC_GetAPB2Prescaler>
 8003d64:	4603      	mov	r3, r0
 8003d66:	0b5b      	lsrs	r3, r3, #13
 8003d68:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <RCC_GetPCLK2ClockFreq+0x24>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	40d3      	lsrs	r3, r2
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08006c60 	.word	0x08006c60

08003d80 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003d94:	f7ff ff30 	bl	8003bf8 <LL_RCC_PLL_GetMainSource>
 8003d98:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da6:	d003      	beq.n	8003db0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003da8:	e005      	b.n	8003db6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003dac:	617b      	str	r3, [r7, #20]
      break;
 8003dae:	e005      	b.n	8003dbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003db2:	617b      	str	r3, [r7, #20]
      break;
 8003db4:	e002      	b.n	8003dbc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003db8:	617b      	str	r3, [r7, #20]
      break;
 8003dba:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d113      	bne.n	8003dea <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003dc2:	f7ff ff43 	bl	8003c4c <LL_RCC_PLL_GetDivider>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fbb3 f4f2 	udiv	r4, r3, r2
 8003dce:	f7ff ff21 	bl	8003c14 <LL_RCC_PLL_GetN>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	fb03 f404 	mul.w	r4, r3, r4
 8003dd8:	f7ff ff2a 	bl	8003c30 <LL_RCC_PLL_GetP>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	3301      	adds	r3, #1
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fbb4 f3f3 	udiv	r3, r4, r3
 8003de8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003dea:	693b      	ldr	r3, [r7, #16]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}
 8003df4:	00f42400 	.word	0x00f42400
 8003df8:	017d7840 	.word	0x017d7840

08003dfc <LL_USART_IsEnabled>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_USART_SetStopBitsLength>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_USART_SetHWFlowCtrl>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	615a      	str	r2, [r3, #20]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_USART_SetBaudRate>:
{
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b0c0      	sub	sp, #256	; 0x100
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e7c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003e80:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003e84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e90:	f040 810c 	bne.w	80040ac <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003e94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	1891      	adds	r1, r2, r2
 8003eac:	6639      	str	r1, [r7, #96]	; 0x60
 8003eae:	415b      	adcs	r3, r3
 8003eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	eb12 0801 	adds.w	r8, r2, r1
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	eb43 0901 	adc.w	r9, r3, r1
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ed6:	4690      	mov	r8, r2
 8003ed8:	4699      	mov	r9, r3
 8003eda:	4623      	mov	r3, r4
 8003edc:	eb18 0303 	adds.w	r3, r8, r3
 8003ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	eb49 0303 	adc.w	r3, r9, r3
 8003eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	4693      	mov	fp, r2
 8003ef8:	eb1a 030a 	adds.w	r3, sl, sl
 8003efc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003efe:	eb4b 030b 	adc.w	r3, fp, fp
 8003f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f0c:	f7fc f960 	bl	80001d0 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4b64      	ldr	r3, [pc, #400]	; (80040a8 <LL_USART_SetBaudRate+0x238>)
 8003f16:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	b29c      	uxth	r4, r3
 8003f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f2c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f30:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	6539      	str	r1, [r7, #80]	; 0x50
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003f84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f8e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003f92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f96:	460b      	mov	r3, r1
 8003f98:	18db      	adds	r3, r3, r3
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	eb42 0303 	adc.w	r3, r2, r3
 8003fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fa8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003fac:	f7fc f910 	bl	80001d0 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <LL_USART_SetBaudRate+0x238>)
 8003fb8:	fba3 2301 	umull	r2, r3, r3, r1
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2264      	movs	r2, #100	; 0x64
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	1acb      	subs	r3, r1, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <LL_USART_SetBaudRate+0x238>)
 8003fce:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4423      	add	r3, r4
 8003fe2:	b29c      	uxth	r4, r3
 8003fe4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fee:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ff2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	1891      	adds	r1, r2, r2
 8003ffc:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ffe:	415b      	adcs	r3, r3
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004002:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004006:	4641      	mov	r1, r8
 8004008:	1851      	adds	r1, r2, r1
 800400a:	6339      	str	r1, [r7, #48]	; 0x30
 800400c:	4649      	mov	r1, r9
 800400e:	414b      	adcs	r3, r1
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800401e:	4659      	mov	r1, fp
 8004020:	00cb      	lsls	r3, r1, #3
 8004022:	4651      	mov	r1, sl
 8004024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004028:	4651      	mov	r1, sl
 800402a:	00ca      	lsls	r2, r1, #3
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	4603      	mov	r3, r0
 8004032:	4642      	mov	r2, r8
 8004034:	189b      	adds	r3, r3, r2
 8004036:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800403a:	464b      	mov	r3, r9
 800403c:	460a      	mov	r2, r1
 800403e:	eb42 0303 	adc.w	r3, r2, r3
 8004042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004046:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004050:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004054:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004058:	460b      	mov	r3, r1
 800405a:	18db      	adds	r3, r3, r3
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
 800405e:	4613      	mov	r3, r2
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800406a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800406e:	f7fc f8af 	bl	80001d0 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <LL_USART_SetBaudRate+0x238>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <LL_USART_SetBaudRate+0x238>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b29b      	uxth	r3, r3
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	b29b      	uxth	r3, r3
 800409a:	4423      	add	r3, r4
 800409c:	b29b      	uxth	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a4:	609a      	str	r2, [r3, #8]
}
 80040a6:	e107      	b.n	80042b8 <LL_USART_SetBaudRate+0x448>
 80040a8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80040ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040ba:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80040be:	4642      	mov	r2, r8
 80040c0:	464b      	mov	r3, r9
 80040c2:	1891      	adds	r1, r2, r2
 80040c4:	6239      	str	r1, [r7, #32]
 80040c6:	415b      	adcs	r3, r3
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ce:	4641      	mov	r1, r8
 80040d0:	1854      	adds	r4, r2, r1
 80040d2:	4649      	mov	r1, r9
 80040d4:	eb43 0501 	adc.w	r5, r3, r1
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040f4:	464b      	mov	r3, r9
 80040f6:	eb45 0303 	adc.w	r3, r5, r3
 80040fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004108:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004118:	4629      	mov	r1, r5
 800411a:	008b      	lsls	r3, r1, #2
 800411c:	4621      	mov	r1, r4
 800411e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004122:	4621      	mov	r1, r4
 8004124:	008a      	lsls	r2, r1, #2
 8004126:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800412a:	f7fc f851 	bl	80001d0 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4b64      	ldr	r3, [pc, #400]	; (80042c4 <LL_USART_SetBaudRate+0x454>)
 8004134:	fba3 2302 	umull	r2, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	b29b      	uxth	r3, r3
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	b29c      	uxth	r4, r3
 8004140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004144:	2200      	movs	r2, #0
 8004146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800414a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800414e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004152:	4642      	mov	r2, r8
 8004154:	464b      	mov	r3, r9
 8004156:	1891      	adds	r1, r2, r2
 8004158:	61b9      	str	r1, [r7, #24]
 800415a:	415b      	adcs	r3, r3
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004162:	4641      	mov	r1, r8
 8004164:	1851      	adds	r1, r2, r1
 8004166:	6139      	str	r1, [r7, #16]
 8004168:	4649      	mov	r1, r9
 800416a:	414b      	adcs	r3, r1
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800417a:	4659      	mov	r1, fp
 800417c:	00cb      	lsls	r3, r1, #3
 800417e:	4651      	mov	r1, sl
 8004180:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004184:	4651      	mov	r1, sl
 8004186:	00ca      	lsls	r2, r1, #3
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	4603      	mov	r3, r0
 800418e:	4642      	mov	r2, r8
 8004190:	189b      	adds	r3, r3, r2
 8004192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004196:	464b      	mov	r3, r9
 8004198:	460a      	mov	r2, r1
 800419a:	eb42 0303 	adc.w	r3, r2, r3
 800419e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80041bc:	4649      	mov	r1, r9
 80041be:	008b      	lsls	r3, r1, #2
 80041c0:	4641      	mov	r1, r8
 80041c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c6:	4641      	mov	r1, r8
 80041c8:	008a      	lsls	r2, r1, #2
 80041ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80041ce:	f7fb ffff 	bl	80001d0 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <LL_USART_SetBaudRate+0x454>)
 80041d8:	fba3 1302 	umull	r1, r3, r3, r2
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	2164      	movs	r1, #100	; 0x64
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	3332      	adds	r3, #50	; 0x32
 80041ea:	4a36      	ldr	r2, [pc, #216]	; (80042c4 <LL_USART_SetBaudRate+0x454>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	4423      	add	r3, r4
 80041fc:	b29c      	uxth	r4, r3
 80041fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004202:	2200      	movs	r2, #0
 8004204:	67bb      	str	r3, [r7, #120]	; 0x78
 8004206:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	415b      	adcs	r3, r3
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421c:	4641      	mov	r1, r8
 800421e:	1851      	adds	r1, r2, r1
 8004220:	6039      	str	r1, [r7, #0]
 8004222:	4649      	mov	r1, r9
 8004224:	414b      	adcs	r3, r1
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004234:	4659      	mov	r1, fp
 8004236:	00cb      	lsls	r3, r1, #3
 8004238:	4651      	mov	r1, sl
 800423a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423e:	4651      	mov	r1, sl
 8004240:	00ca      	lsls	r2, r1, #3
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4603      	mov	r3, r0
 8004248:	4642      	mov	r2, r8
 800424a:	189b      	adds	r3, r3, r2
 800424c:	673b      	str	r3, [r7, #112]	; 0x70
 800424e:	464b      	mov	r3, r9
 8004250:	460a      	mov	r2, r1
 8004252:	eb42 0303 	adc.w	r3, r2, r3
 8004256:	677b      	str	r3, [r7, #116]	; 0x74
 8004258:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800425c:	2200      	movs	r2, #0
 800425e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004260:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800426e:	4649      	mov	r1, r9
 8004270:	008b      	lsls	r3, r1, #2
 8004272:	4641      	mov	r1, r8
 8004274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004278:	4641      	mov	r1, r8
 800427a:	008a      	lsls	r2, r1, #2
 800427c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004280:	f7fb ffa6 	bl	80001d0 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <LL_USART_SetBaudRate+0x454>)
 800428a:	fba3 1302 	umull	r1, r3, r3, r2
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2164      	movs	r1, #100	; 0x64
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	3332      	adds	r3, #50	; 0x32
 800429c:	4a09      	ldr	r2, [pc, #36]	; (80042c4 <LL_USART_SetBaudRate+0x454>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4423      	add	r3, r4
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042be:	46bd      	mov	sp, r7
 80042c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c4:	51eb851f 	.word	0x51eb851f

080042c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fd8e 	bl	8003dfc <LL_USART_IsEnabled>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d15e      	bne.n	80043a4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042ee:	f023 030c 	bic.w	r3, r3, #12
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	6851      	ldr	r1, [r2, #4]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	4311      	orrs	r1, r2
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	6912      	ldr	r2, [r2, #16]
 8004300:	4311      	orrs	r1, r2
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	6992      	ldr	r2, [r2, #24]
 8004306:	430a      	orrs	r2, r1
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fd85 	bl	8003e24 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff fd92 	bl	8003e4a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fc9c 	bl	8003c68 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <LL_USART_Init+0xe8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d102      	bne.n	800433e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e021      	b.n	8004382 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <LL_USART_Init+0xec>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d102      	bne.n	800434c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e01a      	b.n	8004382 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <LL_USART_Init+0xf0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d102      	bne.n	800435a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e013      	b.n	8004382 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a17      	ldr	r2, [pc, #92]	; (80043bc <LL_USART_Init+0xf4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d102      	bne.n	8004368 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e00c      	b.n	8004382 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <LL_USART_Init+0xf8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d102      	bne.n	8004376 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e005      	b.n	8004382 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <LL_USART_Init+0xfc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69b9      	ldr	r1, [r7, #24]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fd66 	bl	8003e70 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80043a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40011000 	.word	0x40011000
 80043b4:	40004400 	.word	0x40004400
 80043b8:	40004800 	.word	0x40004800
 80043bc:	40011400 	.word	0x40011400
 80043c0:	40004c00 	.word	0x40004c00
 80043c4:	40005000 	.word	0x40005000

080043c8 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <lwrb_init+0x1e>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <lwrb_init+0x1e>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <lwrb_init+0x22>
        return 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e019      	b.n	800441e <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	611a      	str	r2, [r3, #16]
    buff->size = size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	330c      	adds	r3, #12
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3308      	adds	r3, #8
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	601a      	str	r2, [r3, #0]
    return 1;
 800441c:	2301      	movs	r3, #1
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 800442a:	b580      	push	{r7, lr}
 800442c:	b08c      	sub	sp, #48	; 0x30
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
    size_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <lwrb_write+0x32>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <lwrb_write+0x32>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <lwrb_write+0x32>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <lwrb_write+0x32>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <lwrb_write+0x36>
        return 0;
 800445c:	2300      	movs	r3, #0
 800445e:	e060      	b.n	8004522 <lwrb_write+0xf8>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f862 	bl	800452a <lwrb_get_free>
 8004466:	6278      	str	r0, [r7, #36]	; 0x24
    btw = BUF_MIN(free, btw);
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	4293      	cmp	r3, r2
 800446e:	bf28      	it	cs
 8004470:	4613      	movcs	r3, r2
 8004472:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <lwrb_write+0x54>
        return 0;
 800447a:	2300      	movs	r3, #0
 800447c:	e051      	b.n	8004522 <lwrb_write+0xf8>
    }
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	330c      	adds	r3, #12
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3bf 8f5b 	dmb	ish
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4293      	cmp	r3, r2
 800449e:	bf28      	it	cs
 80044a0:	4613      	movcs	r3, r2
 80044a2:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	4413      	add	r3, r2
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 fac1 	bl	8006a38 <memcpy>
    buff_w_ptr += tocopy;
 80044b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <lwrb_write+0xb8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4619      	mov	r1, r3
 80044da:	f002 faad 	bl	8006a38 <memcpy>
        buff_w_ptr = btw;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d301      	bcc.n	80044f0 <lwrb_write+0xc6>
        buff_w_ptr = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	330c      	adds	r3, #12
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	f3bf 8f5b 	dmb	ish
 8004502:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <lwrb_write+0xf2>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	69f9      	ldr	r1, [r7, #28]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	440a      	add	r2, r1
 8004516:	2101      	movs	r1, #1
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	4798      	blx	r3
    return tocopy + btw;
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	; 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 800452a:	b480      	push	{r7}
 800452c:	b08b      	sub	sp, #44	; 0x2c
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <lwrb_get_free+0x1e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <lwrb_get_free+0x1e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <lwrb_get_free+0x22>
        return 0;
 8004548:	2300      	movs	r3, #0
 800454a:	e029      	b.n	80045a0 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	330c      	adds	r3, #12
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3308      	adds	r3, #8
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d103      	bne.n	800457c <lwrb_get_free+0x52>
        size = buff->size;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e00f      	b.n	800459c <lwrb_get_free+0x72>
    } else if (r > w) {
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	429a      	cmp	r2, r3
 8004582:	d904      	bls.n	800458e <lwrb_get_free+0x64>
        size = r - w;
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e006      	b.n	800459c <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	6979      	ldr	r1, [r7, #20]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	1acb      	subs	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3b01      	subs	r3, #1
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	372c      	adds	r7, #44	; 0x2c
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 80045ac:	b480      	push	{r7}
 80045ae:	b08b      	sub	sp, #44	; 0x2c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <lwrb_get_full+0x1e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <lwrb_get_full+0x1e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <lwrb_get_full+0x22>
        return 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e027      	b.n	800461e <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	330c      	adds	r3, #12
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3308      	adds	r3, #8
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	617b      	str	r3, [r7, #20]

    if (w == r) {
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d102      	bne.n	80045fc <lwrb_get_full+0x50>
        size = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e00f      	b.n	800461c <lwrb_get_full+0x70>
    } else if (w > r) {
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d904      	bls.n	800460e <lwrb_get_full+0x62>
        size = w - r;
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	e006      	b.n	800461c <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	69f9      	ldr	r1, [r7, #28]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1acb      	subs	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800461e:	4618      	mov	r0, r3
 8004620:	372c      	adds	r7, #44	; 0x2c
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(const lwrb_t* buff) {
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <lwrb_get_linear_block_read_address+0x1e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <lwrb_get_linear_block_read_address+0x1e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	e004      	b.n	8004656 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4413      	add	r3, r2
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(const lwrb_t* buff) {
 8004662:	b480      	push	{r7}
 8004664:	b08b      	sub	sp, #44	; 0x2c
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
    size_t len;
    volatile size_t w, r;

    if (!BUF_IS_VALID(buff)) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <lwrb_get_linear_block_read_length+0x1e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <lwrb_get_linear_block_read_length+0x1e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 8004680:	2300      	movs	r3, #0
 8004682:	e025      	b.n	80046d0 <lwrb_get_linear_block_read_length+0x6e>

    /*
     * Use temporary values in case they are changed during operations.
     * See lwrb_buff_free or lwrb_buff_full functions for more information why this is OK.
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	330c      	adds	r3, #12
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	61bb      	str	r3, [r7, #24]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3308      	adds	r3, #8
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	617b      	str	r3, [r7, #20]

    if (w > r) {
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d904      	bls.n	80046b6 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
 80046b4:	e00b      	b.n	80046ce <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d905      	bls.n	80046ca <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
 80046c8:	e001      	b.n	80046ce <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return len;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	372c      	adds	r7, #44	; 0x2c
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(lwrb_t* buff, size_t len) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
    size_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <lwrb_skip+0x26>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <lwrb_skip+0x26>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <lwrb_skip+0x26>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <lwrb_skip+0x2a>
        return 0;
 8004702:	2300      	movs	r3, #0
 8004704:	e034      	b.n	8004770 <lwrb_skip+0x94>
    }

    full = lwrb_get_full(buff);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ff50 	bl	80045ac <lwrb_get_full>
 800470c:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	4293      	cmp	r3, r2
 8004714:	bf28      	it	cs
 8004716:	4613      	movcs	r3, r2
 8004718:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3308      	adds	r3, #8
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	61fb      	str	r3, [r7, #28]
    r += len;
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4413      	add	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	429a      	cmp	r2, r3
 800473a:	d304      	bcc.n	8004746 <lwrb_skip+0x6a>
        r -= buff->size;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3308      	adds	r3, #8
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f3bf 8f5b 	dmb	ish
 8004758:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <lwrb_skip+0x92>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	2100      	movs	r1, #0
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
    return len;
 800476e:	683b      	ldr	r3, [r7, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <__NVIC_GetPriorityGrouping>:
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <__NVIC_GetPriorityGrouping+0x18>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0307 	and.w	r3, r3, #7
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_EnableIRQ>:
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	db0b      	blt.n	80047be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	f003 021f 	and.w	r2, r3, #31
 80047ac:	4907      	ldr	r1, [pc, #28]	; (80047cc <__NVIC_EnableIRQ+0x38>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2001      	movs	r0, #1
 80047b6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000e100 	.word	0xe000e100

080047d0 <__NVIC_SetPriority>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	db0a      	blt.n	80047fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	490c      	ldr	r1, [pc, #48]	; (800481c <__NVIC_SetPriority+0x4c>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	0112      	lsls	r2, r2, #4
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	440b      	add	r3, r1
 80047f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047f8:	e00a      	b.n	8004810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4908      	ldr	r1, [pc, #32]	; (8004820 <__NVIC_SetPriority+0x50>)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3b04      	subs	r3, #4
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	440b      	add	r3, r1
 800480e:	761a      	strb	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000e100 	.word	0xe000e100
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <NVIC_EncodePriority>:
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f1c3 0307 	rsb	r3, r3, #7
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf28      	it	cs
 8004842:	2304      	movcs	r3, #4
 8004844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3304      	adds	r3, #4
 800484a:	2b06      	cmp	r3, #6
 800484c:	d902      	bls.n	8004854 <NVIC_EncodePriority+0x30>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3b03      	subs	r3, #3
 8004852:	e000      	b.n	8004856 <NVIC_EncodePriority+0x32>
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	401a      	ands	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800486c:	f04f 31ff 	mov.w	r1, #4294967295
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43d9      	mvns	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800487c:	4313      	orrs	r3, r2
}
 800487e:	4618      	mov	r0, r3
 8004880:	3724      	adds	r7, #36	; 0x24
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <LL_DMA_EnableStream>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <LL_DMA_EnableStream+0x3c>)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4908      	ldr	r1, [pc, #32]	; (80048c8 <LL_DMA_EnableStream+0x3c>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	440a      	add	r2, r1
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	4611      	mov	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	440a      	add	r2, r1
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	08006c70 	.word	0x08006c70

080048cc <LL_DMA_DisableStream>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80048d6:	4a0c      	ldr	r2, [pc, #48]	; (8004908 <LL_DMA_DisableStream+0x3c>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4908      	ldr	r1, [pc, #32]	; (8004908 <LL_DMA_DisableStream+0x3c>)
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	440a      	add	r2, r1
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	4611      	mov	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	440a      	add	r2, r1
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	08006c70 	.word	0x08006c70

0800490c <LL_DMA_SetDataTransferDirection>:
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8004918:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <LL_DMA_SetDataTransferDirection+0x44>)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4413      	add	r3, r2
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800492c:	4908      	ldr	r1, [pc, #32]	; (8004950 <LL_DMA_SetDataTransferDirection+0x44>)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	440b      	add	r3, r1
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4619      	mov	r1, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	440b      	add	r3, r1
 800493a:	4619      	mov	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	08006c70 	.word	0x08006c70

08004954 <LL_DMA_SetMode>:
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <LL_DMA_SetMode+0x44>)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4413      	add	r3, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8004974:	4908      	ldr	r1, [pc, #32]	; (8004998 <LL_DMA_SetMode+0x44>)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	440b      	add	r3, r1
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	440b      	add	r3, r1
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	08006c70 	.word	0x08006c70

0800499c <LL_DMA_SetPeriphIncMode>:
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4413      	add	r3, r2
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049bc:	4908      	ldr	r1, [pc, #32]	; (80049e0 <LL_DMA_SetPeriphIncMode+0x44>)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	440b      	add	r3, r1
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	440b      	add	r3, r1
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	08006c70 	.word	0x08006c70

080049e4 <LL_DMA_SetMemoryIncMode>:
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80049f0:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <LL_DMA_SetMemoryIncMode+0x44>)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4413      	add	r3, r2
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a04:	4908      	ldr	r1, [pc, #32]	; (8004a28 <LL_DMA_SetMemoryIncMode+0x44>)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	440b      	add	r3, r1
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	440b      	add	r3, r1
 8004a12:	4619      	mov	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	08006c70 	.word	0x08006c70

08004a2c <LL_DMA_SetPeriphSize>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8004a38:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <LL_DMA_SetPeriphSize+0x44>)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004a4c:	4908      	ldr	r1, [pc, #32]	; (8004a70 <LL_DMA_SetPeriphSize+0x44>)
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	440b      	add	r3, r1
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	4619      	mov	r1, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	440b      	add	r3, r1
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	08006c70 	.word	0x08006c70

08004a74 <LL_DMA_SetMemorySize>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8004a80:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <LL_DMA_SetMemorySize+0x44>)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4413      	add	r3, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8004a94:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <LL_DMA_SetMemorySize+0x44>)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	440b      	add	r3, r1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	440b      	add	r3, r1
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	08006c70 	.word	0x08006c70

08004abc <LL_DMA_SetStreamPriorityLevel>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8004ac8:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004adc:	4908      	ldr	r1, [pc, #32]	; (8004b00 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	440b      	add	r3, r1
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	440b      	add	r3, r1
 8004aea:	4619      	mov	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	08006c70 	.word	0x08006c70

08004b04 <LL_DMA_SetDataLength>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <LL_DMA_SetDataLength+0x44>)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4413      	add	r3, r2
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	4908      	ldr	r1, [pc, #32]	; (8004b48 <LL_DMA_SetDataLength+0x44>)
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	440a      	add	r2, r1
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	440a      	add	r2, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	604b      	str	r3, [r1, #4]
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	08006c70 	.word	0x08006c70

08004b4c <LL_DMA_GetDataLength>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <LL_DMA_GetDataLength+0x28>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b29b      	uxth	r3, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	08006c70 	.word	0x08006c70

08004b78 <LL_DMA_SetChannelSelection>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8004b84:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <LL_DMA_SetChannelSelection+0x44>)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004b98:	4908      	ldr	r1, [pc, #32]	; (8004bbc <LL_DMA_SetChannelSelection+0x44>)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	440b      	add	r3, r1
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	440b      	add	r3, r1
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	08006c70 	.word	0x08006c70

08004bc0 <LL_DMA_DisableFifoMode>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8004bca:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <LL_DMA_DisableFifoMode+0x3c>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	4908      	ldr	r1, [pc, #32]	; (8004bfc <LL_DMA_DisableFifoMode+0x3c>)
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	440a      	add	r2, r1
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	4611      	mov	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	440a      	add	r2, r1
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	6153      	str	r3, [r2, #20]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	08006c70 	.word	0x08006c70

08004c00 <LL_DMA_SetMemoryAddress>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004c0c:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <LL_DMA_SetMemoryAddress+0x2c>)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60d3      	str	r3, [r2, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	08006c70 	.word	0x08006c70

08004c30 <LL_DMA_SetPeriphAddress>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004c3c:	4a07      	ldr	r2, [pc, #28]	; (8004c5c <LL_DMA_SetPeriphAddress+0x2c>)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4413      	add	r3, r2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6093      	str	r3, [r2, #8]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	08006c70 	.word	0x08006c70

08004c60 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE);
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <LL_DMA_EnableIT_HT+0x3c>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4908      	ldr	r1, [pc, #32]	; (8004c9c <LL_DMA_EnableIT_HT+0x3c>)
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	440a      	add	r2, r1
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	4611      	mov	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	440a      	add	r2, r1
 8004c88:	f043 0308 	orr.w	r3, r3, #8
 8004c8c:	6013      	str	r3, [r2, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	08006c70 	.word	0x08006c70

08004ca0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8004caa:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <LL_DMA_EnableIT_TC+0x3c>)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4908      	ldr	r1, [pc, #32]	; (8004cdc <LL_DMA_EnableIT_TC+0x3c>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f043 0310 	orr.w	r3, r3, #16
 8004ccc:	6013      	str	r3, [r2, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	08006c70 	.word	0x08006c70

08004ce0 <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE);
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <LL_DMA_IsEnabledIT_HT+0x34>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	bf0c      	ite	eq
 8004d02:	2301      	moveq	r3, #1
 8004d04:	2300      	movne	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	08006c70 	.word	0x08006c70

08004d18 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 8004d22:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <LL_DMA_IsEnabledIT_TC+0x34>)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	08006c70 	.word	0x08006c70

08004d50 <LL_USART_Enable>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_USART_ConfigAsyncMode>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	615a      	str	r2, [r3, #20]
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	bf0c      	ite	eq
 8004db0:	2301      	moveq	r3, #1
 8004db2:	2300      	movne	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b089      	sub	sp, #36	; 0x24
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	330c      	adds	r3, #12
 8004df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f043 0310 	orr.w	r3, r3, #16
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	330c      	adds	r3, #12
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	61ba      	str	r2, [r7, #24]
 8004e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6979      	ldr	r1, [r7, #20]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e7      	bne.n	8004dee <LL_USART_EnableIT_IDLE+0x8>
}
 8004e1e:	bf00      	nop
 8004e20:	bf00      	nop
 8004e22:	3724      	adds	r7, #36	; 0x24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b089      	sub	sp, #36	; 0x24
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3314      	adds	r3, #20
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	61ba      	str	r2, [r7, #24]
 8004e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e7      	bne.n	8004e5a <LL_USART_EnableDMAReq_RX+0x8>
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	3724      	adds	r7, #36	; 0x24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	61ba      	str	r2, [r7, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6979      	ldr	r1, [r7, #20]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e7      	bne.n	8004ea0 <LL_USART_EnableDMAReq_TX+0x8>
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3724      	adds	r7, #36	; 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <usart_process_data>:
 */

/*Includes ------------------------------------------------------------------------*/
#include "rbuart.h"
/*Private function ----------------------------------------------------------------*/
static void  usart_process_data(rbuart_t *rb, const void* data, size_t len){
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
	lwrb_write(&rb->buff, data, len);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	33ac      	adds	r3, #172	; 0xac
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fa8d 	bl	800442a <lwrb_write>
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <usart_rx_check>:

static void usart_rx_check(rbuart_t *rb){
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	 rb->data.pos = ARRAY_LEN(rb->data.dma_buffer) - LL_DMA_GetDataLength(rb->dma, rb->stream);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7ff fe0e 	bl	8004b4c <LL_DMA_GetDataLength>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	 if(rb->data.pos != rb->data.old_pos){
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d03e      	beq.n	8004fca <usart_rx_check+0xb2>
		 if(rb->data.pos > rb->data.old_pos){
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d911      	bls.n	8004f80 <usart_rx_check+0x68>
			 usart_process_data(rb,&rb->data.dma_buffer[rb->data.old_pos], rb->data.pos - rb->data.old_pos);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f62:	3320      	adds	r3, #32
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	18d1      	adds	r1, r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ffbc 	bl	8004ef6 <usart_process_data>
 8004f7e:	e01d      	b.n	8004fbc <usart_rx_check+0xa4>
		 }else{
			 usart_process_data(rb,&rb->data.dma_buffer[rb->data.old_pos], ARRAY_LEN(rb->data.dma_buffer) - rb->data.old_pos);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f86:	3320      	adds	r3, #32
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	18d1      	adds	r1, r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f92:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004f96:	461a      	mov	r2, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ffac 	bl	8004ef6 <usart_process_data>
			 if(rb->data.pos >0){
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <usart_rx_check+0xa4>
				 usart_process_data(rb,&rb->data.dma_buffer[0], rb->data.pos);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f103 0120 	add.w	r1, r3, #32
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff ff9d 	bl	8004ef6 <usart_process_data>
			 }
		 }
		 rb->data.old_pos = rb->data.pos;                          /* Save current position as old for next transfers */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 }
	 return;
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
}
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <usart_start_tx_dma_transfer>:
uint8_t
usart_start_tx_dma_transfer(rbuart_t *rb){
 8004fd2:	b5b0      	push	{r4, r5, r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
    uint32_t primask;
    uint8_t started = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    primask = __get_PRIMASK();
 8004fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fe8:	b672      	cpsid	i
}
 8004fea:	bf00      	nop
    __disable_irq();
    if((rb->data.len == 0) && (rb->data.len = lwrb_get_linear_block_read_length(&rb->buff)) > 0){
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d145      	bne.n	8005082 <usart_start_tx_dma_transfer+0xb0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	33ac      	adds	r3, #172	; 0xac
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fb31 	bl	8004662 <lwrb_get_linear_block_read_length>
 8005000:	4603      	mov	r3, r0
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d036      	beq.n	8005082 <usart_start_tx_dma_transfer+0xb0>
    	 LL_DMA_DisableStream(rb->dma, rb->stream);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7ff fc54 	bl	80048cc <LL_DMA_DisableStream>
    	 /* Clear all flags */
    	 rb->clear_ht(rb->dma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6852      	ldr	r2, [r2, #4]
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
    	 rb->clear_tc(rb->dma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6852      	ldr	r2, [r2, #4]
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
    	 /* Prepare DMA data and length */
         LL_DMA_SetDataLength(rb->dma, rb->stream, rb->data.len);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6858      	ldr	r0, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6899      	ldr	r1, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800504a:	461a      	mov	r2, r3
 800504c:	f7ff fd5a 	bl	8004b04 <LL_DMA_SetDataLength>
         LL_DMA_SetMemoryAddress(rb->dma, rb->stream, (uint32_t)lwrb_get_linear_block_read_address(&rb->buff));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685c      	ldr	r4, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689d      	ldr	r5, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	33ac      	adds	r3, #172	; 0xac
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fae4 	bl	800462a <lwrb_get_linear_block_read_address>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	4629      	mov	r1, r5
 8005068:	4620      	mov	r0, r4
 800506a:	f7ff fdc9 	bl	8004c00 <LL_DMA_SetMemoryAddress>

         /* Start transfer */

		LL_DMA_EnableStream(rb->dma, rb->stream);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f7ff fc07 	bl	800488c <LL_DMA_EnableStream>
		started = 1;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f383 8810 	msr	PRIMASK, r3
}
 800508c:	bf00      	nop
    }
    __set_PRIMASK(primask);
    return started;
 800508e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bdb0      	pop	{r4, r5, r7, pc}

08005098 <rbuart_tx_init>:
 * @param UARTx: Puntero al uart utilizarse
 * @param bufferData: puntero para los datos del buffer circular
 * @param size: tamaño maximo del puntero de datos
 * @return RBUART_Result_t
 */
RBUART_Result_t rbuart_tx_init(rbuart_t *rb, void* buffdata, size_t size){
 8005098:	b5b0      	push	{r4, r5, r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
	/**
	 * DMA
	 */
    LL_DMA_SetChannelSelection(rb->dma, rb->stream, rb->channel);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6858      	ldr	r0, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6899      	ldr	r1, [r3, #8]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	461a      	mov	r2, r3
 80050b2:	f7ff fd61 	bl	8004b78 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(rb->dma, rb->stream, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6858      	ldr	r0, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	4619      	mov	r1, r3
 80050c2:	f7ff fc23 	bl	800490c <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetStreamPriorityLevel(rb->dma, rb->stream, LL_DMA_PRIORITY_HIGH);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6858      	ldr	r0, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050d2:	4619      	mov	r1, r3
 80050d4:	f7ff fcf2 	bl	8004abc <LL_DMA_SetStreamPriorityLevel>
    LL_DMA_SetMode(rb->dma, rb->stream, LL_DMA_MODE_NORMAL);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6858      	ldr	r0, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2200      	movs	r2, #0
 80050e2:	4619      	mov	r1, r3
 80050e4:	f7ff fc36 	bl	8004954 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(rb->dma, rb->stream, LL_DMA_PERIPH_NOINCREMENT);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6858      	ldr	r0, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	4619      	mov	r1, r3
 80050f4:	f7ff fc52 	bl	800499c <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(rb->dma, rb->stream, LL_DMA_MEMORY_INCREMENT);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6858      	ldr	r0, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005104:	4619      	mov	r1, r3
 8005106:	f7ff fc6d 	bl	80049e4 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(rb->dma, rb->stream, LL_DMA_PDATAALIGN_BYTE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6858      	ldr	r0, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	4619      	mov	r1, r3
 8005116:	f7ff fc89 	bl	8004a2c <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(rb->dma, rb->stream, LL_DMA_MDATAALIGN_BYTE);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6858      	ldr	r0, [r3, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	4619      	mov	r1, r3
 8005126:	f7ff fca5 	bl	8004a74 <LL_DMA_SetMemorySize>
    LL_DMA_DisableFifoMode(rb->dma, rb->stream);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7ff fd43 	bl	8004bc0 <LL_DMA_DisableFifoMode>
    LL_DMA_SetPeriphAddress(rb->dma, rb->stream, LL_USART_DMA_GetRegAddr(rb->rbuart));
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685c      	ldr	r4, [r3, #4]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689d      	ldr	r5, [r3, #8]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fec9 	bl	8004ede <LL_USART_DMA_GetRegAddr>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	4629      	mov	r1, r5
 8005152:	4620      	mov	r0, r4
 8005154:	f7ff fd6c 	bl	8004c30 <LL_DMA_SetPeriphAddress>

    /* Enable HT & TC interrupts */
    LL_DMA_EnableIT_TC(rb->dma, rb->stream);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7ff fd9c 	bl	8004ca0 <LL_DMA_EnableIT_TC>

    NVIC_SetPriority(rb->stream_irq, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), rb->prio, 0));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f993 40c0 	ldrsb.w	r4, [r3, #192]	; 0xc0
 800516e:	f7ff fb03 	bl	8004778 <__NVIC_GetPriorityGrouping>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005178:	2200      	movs	r2, #0
 800517a:	4619      	mov	r1, r3
 800517c:	f7ff fb52 	bl	8004824 <NVIC_EncodePriority>
 8005180:	4603      	mov	r3, r0
 8005182:	4619      	mov	r1, r3
 8005184:	4620      	mov	r0, r4
 8005186:	f7ff fb23 	bl	80047d0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(rb->stream_irq);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f993 30c0 	ldrsb.w	r3, [r3, #192]	; 0xc0
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff faff 	bl	8004794 <__NVIC_EnableIRQ>

    /**
     * USART
     */
    LL_USART_EnableDMAReq_TX(rb->rbuart);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fe7c 	bl	8004e98 <LL_USART_EnableDMAReq_TX>

    /* Enable USART and DMA */
    LL_USART_Enable(rb->rbuart);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fdd3 	bl	8004d50 <LL_USART_Enable>

    if(lwrb_init(&rb->buff, buffdata, size) == 1){
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	33ac      	adds	r3, #172	; 0xac
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff f908 	bl	80043c8 <lwrb_init>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <rbuart_tx_init+0x12a>
    	return RBUART_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <rbuart_tx_init+0x12c>
    }
	return RBUART_ERROR;
 80051c2:	2301      	movs	r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bdb0      	pop	{r4, r5, r7, pc}

080051cc <rbuart_rx_init>:

RBUART_Result_t rbuart_rx_init(rbuart_t *rb, void* buffdata, size_t size){
 80051cc:	b5b0      	push	{r4, r5, r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
	/**
	 * DMA
	 */
    LL_DMA_SetChannelSelection(rb->dma, rb->stream, rb->channel);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6858      	ldr	r0, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6899      	ldr	r1, [r3, #8]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f7ff fcc7 	bl	8004b78 <LL_DMA_SetChannelSelection>
    LL_DMA_SetDataTransferDirection(rb->dma, rb->stream, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6858      	ldr	r0, [r3, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	4619      	mov	r1, r3
 80051f6:	f7ff fb89 	bl	800490c <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetStreamPriorityLevel(rb->dma, rb->stream, LL_DMA_PRIORITY_HIGH);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6858      	ldr	r0, [r3, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005206:	4619      	mov	r1, r3
 8005208:	f7ff fc58 	bl	8004abc <LL_DMA_SetStreamPriorityLevel>
    LL_DMA_SetMode(rb->dma, rb->stream, LL_DMA_MODE_CIRCULAR);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6858      	ldr	r0, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005218:	4619      	mov	r1, r3
 800521a:	f7ff fb9b 	bl	8004954 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(rb->dma, rb->stream, LL_DMA_PERIPH_NOINCREMENT);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6858      	ldr	r0, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2200      	movs	r2, #0
 8005228:	4619      	mov	r1, r3
 800522a:	f7ff fbb7 	bl	800499c <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(rb->dma, rb->stream, LL_DMA_MEMORY_INCREMENT);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6858      	ldr	r0, [r3, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800523a:	4619      	mov	r1, r3
 800523c:	f7ff fbd2 	bl	80049e4 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(rb->dma, rb->stream, LL_DMA_PDATAALIGN_BYTE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6858      	ldr	r0, [r3, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2200      	movs	r2, #0
 800524a:	4619      	mov	r1, r3
 800524c:	f7ff fbee 	bl	8004a2c <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(rb->dma, rb->stream, LL_DMA_MDATAALIGN_BYTE);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6858      	ldr	r0, [r3, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2200      	movs	r2, #0
 800525a:	4619      	mov	r1, r3
 800525c:	f7ff fc0a 	bl	8004a74 <LL_DMA_SetMemorySize>
    LL_DMA_DisableFifoMode(rb->dma, rb->stream);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f7ff fca8 	bl	8004bc0 <LL_DMA_DisableFifoMode>
    LL_DMA_SetPeriphAddress(rb->dma, rb->stream, LL_USART_DMA_GetRegAddr(rb->rbuart));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685c      	ldr	r4, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689d      	ldr	r5, [r3, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fe2e 	bl	8004ede <LL_USART_DMA_GetRegAddr>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	4629      	mov	r1, r5
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff fcd1 	bl	8004c30 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetMemoryAddress(rb->dma, rb->stream, (uint32_t)rb->data.dma_buffer);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6858      	ldr	r0, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3320      	adds	r3, #32
 800529a:	461a      	mov	r2, r3
 800529c:	f7ff fcb0 	bl	8004c00 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(rb->dma, rb->stream, ARRAY_LEN(rb->data.dma_buffer));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6858      	ldr	r0, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2280      	movs	r2, #128	; 0x80
 80052aa:	4619      	mov	r1, r3
 80052ac:	f7ff fc2a 	bl	8004b04 <LL_DMA_SetDataLength>

    /* Enable HT & TC interrupts */
    LL_DMA_EnableIT_HT(rb->dma, rb->stream);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7ff fcd0 	bl	8004c60 <LL_DMA_EnableIT_HT>
    LL_DMA_EnableIT_TC(rb->dma, rb->stream);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7ff fce8 	bl	8004ca0 <LL_DMA_EnableIT_TC>

    NVIC_SetPriority(rb->stream_irq, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 0));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f993 40c0 	ldrsb.w	r4, [r3, #192]	; 0xc0
 80052d6:	f7ff fa4f 	bl	8004778 <__NVIC_GetPriorityGrouping>
 80052da:	4603      	mov	r3, r0
 80052dc:	2200      	movs	r2, #0
 80052de:	2105      	movs	r1, #5
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fa9f 	bl	8004824 <NVIC_EncodePriority>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4619      	mov	r1, r3
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff fa70 	bl	80047d0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(rb->stream_irq);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f993 30c0 	ldrsb.w	r3, [r3, #192]	; 0xc0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fa4c 	bl	8004794 <__NVIC_EnableIRQ>

    /**
     * USART
     */
    LL_USART_ConfigAsyncMode(rb->rbuart);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fd35 	bl	8004d70 <LL_USART_ConfigAsyncMode>
    LL_USART_EnableDMAReq_RX(rb->rbuart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fda1 	bl	8004e52 <LL_USART_EnableDMAReq_RX>
    LL_USART_EnableIT_IDLE(rb->rbuart);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff fd66 	bl	8004de6 <LL_USART_EnableIT_IDLE>

    /* USART interrupt */
    NVIC_SetPriority(rb->usart_irq, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 5, 1));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f993 40c1 	ldrsb.w	r4, [r3, #193]	; 0xc1
 8005320:	f7ff fa2a 	bl	8004778 <__NVIC_GetPriorityGrouping>
 8005324:	4603      	mov	r3, r0
 8005326:	2201      	movs	r2, #1
 8005328:	2105      	movs	r1, #5
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fa7a 	bl	8004824 <NVIC_EncodePriority>
 8005330:	4603      	mov	r3, r0
 8005332:	4619      	mov	r1, r3
 8005334:	4620      	mov	r0, r4
 8005336:	f7ff fa4b 	bl	80047d0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(rb->usart_irq);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f993 30c1 	ldrsb.w	r3, [r3, #193]	; 0xc1
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fa27 	bl	8004794 <__NVIC_EnableIRQ>

    /* Enable USART and DMA */
    LL_DMA_EnableStream(rb->dma, rb->stream);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7ff fa9b 	bl	800488c <LL_DMA_EnableStream>
    LL_USART_Enable(rb->rbuart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fcf8 	bl	8004d50 <LL_USART_Enable>

    if(lwrb_init(&rb->buff, buffdata, size) == 1){
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	33ac      	adds	r3, #172	; 0xac
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff f82d 	bl	80043c8 <lwrb_init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <rbuart_rx_init+0x1ac>
    	return RBUART_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	e000      	b.n	800537a <rbuart_rx_init+0x1ae>
    }
	return RBUART_ERROR;
 8005378:	2301      	movs	r3, #1
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bdb0      	pop	{r4, r5, r7, pc}

08005382 <rbuart_tx_callback>:

/**
 * @brief callback para transmitir datos del del buffer circular
 * @param rb: puntero al buffer circular
 */
RBUART_Result_t rbuart_tx_callback(rbuart_t *rb){
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]

	if (LL_DMA_IsEnabledIT_TC(rb->dma, rb->stream) && rb->is_tc(rb->dma)){
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f7ff fcbf 	bl	8004d18 <LL_DMA_IsEnabledIT_TC>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01f      	beq.n	80053e0 <rbuart_tx_callback+0x5e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6852      	ldr	r2, [r2, #4]
 80053a8:	4610      	mov	r0, r2
 80053aa:	4798      	blx	r3
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <rbuart_tx_callback+0x5e>
		rb->clear_tc(rb->dma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6852      	ldr	r2, [r2, #4]
 80053ba:	4610      	mov	r0, r2
 80053bc:	4798      	blx	r3
		//todo
		lwrb_skip(&rb->buff, rb->data.len);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7ff f985 	bl	80046dc <lwrb_skip>
		rb->data.len = 0;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		usart_start_tx_dma_transfer(rb);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fdf9 	bl	8004fd2 <usart_start_tx_dma_transfer>
	}
	return RBUART_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <rbuart_rx_callback>:
/**
 * @brief callback para recibir datos a un buffer circular
 * @param rb: puntero al buffer circular
 */
RBUART_Result_t rbuart_rx_callback(rbuart_t *rb){
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
	/**
	 * half transfer complet
	 */
	if(LL_DMA_IsEnabledIT_HT(rb->dma, rb->stream) && rb->is_ht(rb->dma)){
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7ff fc6f 	bl	8004ce0 <LL_DMA_IsEnabledIT_HT>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <rbuart_rx_callback+0x42>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	4610      	mov	r0, r2
 8005412:	4798      	blx	r3
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <rbuart_rx_callback+0x42>
		  rb->clear_ht(rb->dma); /* Clear half-transfer complete flag */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6852      	ldr	r2, [r2, #4]
 8005422:	4610      	mov	r0, r2
 8005424:	4798      	blx	r3
		  //todo
		  usart_rx_check(rb);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fd76 	bl	8004f18 <usart_rx_check>
	}
	/**
	 * transfer complet
	 */
	if(LL_DMA_IsEnabledIT_TC(rb->dma, rb->stream) && rb->is_tc(rb->dma)){
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7ff fc6e 	bl	8004d18 <LL_DMA_IsEnabledIT_TC>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d011      	beq.n	8005466 <rbuart_rx_callback+0x7c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	4610      	mov	r0, r2
 800544c:	4798      	blx	r3
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <rbuart_rx_callback+0x7c>
		rb->clear_tc(rb->dma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6852      	ldr	r2, [r2, #4]
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
		//todo
		usart_rx_check(rb);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fd59 	bl	8004f18 <usart_rx_check>
	}
	return RBUART_ERROR;
 8005466:	2301      	movs	r3, #1
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <rbuart_usart_IDLE_callback>:

void rbuart_usart_IDLE_callback(rbuart_t *rb){
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	if(LL_USART_IsEnabledIT_IDLE(rb->rbuart) && LL_USART_IsActiveFlag_IDLE(rb->rbuart)){
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fcd5 	bl	8004e2c <LL_USART_IsEnabledIT_IDLE>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00f      	beq.n	80054a8 <rbuart_usart_IDLE_callback+0x38>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fc85 	bl	8004d9c <LL_USART_IsActiveFlag_IDLE>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <rbuart_usart_IDLE_callback+0x38>
		LL_USART_ClearFlag_IDLE(rb->rbuart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fc90 	bl	8004dc2 <LL_USART_ClearFlag_IDLE>
		usart_rx_check(rb);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fd38 	bl	8004f18 <usart_rx_check>
	}
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <rbuart_send>:
 * @brief funcion para enviar datos
 * @param rb: buffer utilizado para enviar datos
 * @param pData: puntero a los datos a enviar
 * @param size: tamaño de datos a enviar
 */
RBUART_Result_t rbuart_send(rbuart_t *rb, uint8_t *pData, size_t size){
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
	lwrb_write(&rb->buff, pData, size);   /* Write data to transmit buffer */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	33ac      	adds	r3, #172	; 0xac
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe ffb0 	bl	800442a <lwrb_write>
	usart_start_tx_dma_transfer(rb);
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff fd81 	bl	8004fd2 <usart_start_tx_dma_transfer>
	return RBUART_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <rbuart_start_receive>:

/**
 * @brief funcion que inicia la recepcion de datos por interrupcion en el buffer circular
 * @param rb: puntero al buffer circular
 */
RBUART_Result_t rbuart_start_receive(rbuart_t *rb){
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	LL_DMA_EnableStream(rb->dma, rb->stream);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7ff f9cd 	bl	800488c <LL_DMA_EnableStream>
	return RBUART_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800550a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800550e:	2b84      	cmp	r3, #132	; 0x84
 8005510:	d005      	beq.n	800551e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005512:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	3303      	adds	r3, #3
 800551c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800551e:	68fb      	ldr	r3, [r7, #12]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005530:	f000 faf6 	bl	8005b20 <vTaskStartScheduler>
  
  return osOK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	bd80      	pop	{r7, pc}

0800553a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800553a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553c:	b089      	sub	sp, #36	; 0x24
 800553e:	af04      	add	r7, sp, #16
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <osThreadCreate+0x54>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01c      	beq.n	800558e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685c      	ldr	r4, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681d      	ldr	r5, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691e      	ldr	r6, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff ffc8 	bl	80054fc <makeFreeRtosPriority>
 800556c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005576:	9202      	str	r2, [sp, #8]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	9100      	str	r1, [sp, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	4632      	mov	r2, r6
 8005580:	4629      	mov	r1, r5
 8005582:	4620      	mov	r0, r4
 8005584:	f000 f8ed 	bl	8005762 <xTaskCreateStatic>
 8005588:	4603      	mov	r3, r0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e01c      	b.n	80055c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685c      	ldr	r4, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800559a:	b29e      	uxth	r6, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff ffaa 	bl	80054fc <makeFreeRtosPriority>
 80055a8:	4602      	mov	r2, r0
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	9200      	str	r2, [sp, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	4632      	mov	r2, r6
 80055b6:	4629      	mov	r1, r5
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 f92f 	bl	800581c <xTaskCreate>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <osDelay+0x16>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	e000      	b.n	80055ea <osDelay+0x18>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa64 	bl	8005ab8 <vTaskDelay>
  
  return osOK;
 80055f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f103 0208 	add.w	r2, r3, #8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f103 0208 	add.w	r2, r3, #8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f103 0208 	add.w	r2, r3, #8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d103      	bne.n	80056bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	e00c      	b.n	80056d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3308      	adds	r3, #8
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	e002      	b.n	80056ca <vListInsert+0x2e>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d2f6      	bcs.n	80056c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6892      	ldr	r2, [r2, #8]
 8005724:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6852      	ldr	r2, [r2, #4]
 800572e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d103      	bne.n	8005742 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	1e5a      	subs	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08e      	sub	sp, #56	; 0x38
 8005766:	af04      	add	r7, sp, #16
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	61fb      	str	r3, [r7, #28]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057a8:	23b4      	movs	r3, #180	; 0xb4
 80057aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2bb4      	cmp	r3, #180	; 0xb4
 80057b0:	d00a      	beq.n	80057c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	61bb      	str	r3, [r7, #24]
}
 80057c4:	bf00      	nop
 80057c6:	e7fe      	b.n	80057c6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01e      	beq.n	800580e <xTaskCreateStatic+0xac>
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01b      	beq.n	800580e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057e8:	2300      	movs	r3, #0
 80057ea:	9303      	str	r3, [sp, #12]
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	9302      	str	r3, [sp, #8]
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 f851 	bl	80058a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005808:	f000 f8ec 	bl	80059e4 <prvAddNewTaskToReadyList>
 800580c:	e001      	b.n	8005812 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005812:	697b      	ldr	r3, [r7, #20]
	}
 8005814:	4618      	mov	r0, r3
 8005816:	3728      	adds	r7, #40	; 0x28
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08c      	sub	sp, #48	; 0x30
 8005820:	af04      	add	r7, sp, #16
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fef1 	bl	8006618 <pvPortMalloc>
 8005836:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800583e:	20b4      	movs	r0, #180	; 0xb4
 8005840:	f000 feea 	bl	8006618 <pvPortMalloc>
 8005844:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
 8005852:	e005      	b.n	8005860 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005854:	6978      	ldr	r0, [r7, #20]
 8005856:	f000 ffab 	bl	80067b0 <vPortFree>
 800585a:	e001      	b.n	8005860 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d017      	beq.n	8005896 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	2300      	movs	r3, #0
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f80f 	bl	80058a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800588a:	69f8      	ldr	r0, [r7, #28]
 800588c:	f000 f8aa 	bl	80059e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005890:	2301      	movs	r3, #1
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e002      	b.n	800589c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800589c:	69bb      	ldr	r3, [r7, #24]
	}
 800589e:	4618      	mov	r0, r3
 80058a0:	3720      	adds	r7, #32
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058c0:	3b01      	subs	r3, #1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	617b      	str	r3, [r7, #20]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01f      	beq.n	8005936 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	e012      	b.n	8005922 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	7819      	ldrb	r1, [r3, #0]
 8005904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	3334      	adds	r3, #52	; 0x34
 800590c:	460a      	mov	r2, r1
 800590e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b0f      	cmp	r3, #15
 8005926:	d9e9      	bls.n	80058fc <prvInitialiseNewTask+0x54>
 8005928:	e000      	b.n	800592c <prvInitialiseNewTask+0x84>
			{
				break;
 800592a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005934:	e003      	b.n	800593e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	2b06      	cmp	r3, #6
 8005942:	d901      	bls.n	8005948 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005944:	2306      	movs	r3, #6
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2200      	movs	r2, #0
 8005958:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fe6b 	bl	800563a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	3318      	adds	r3, #24
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fe66 	bl	800563a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	f1c3 0207 	rsb	r2, r3, #7
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005982:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	2200      	movs	r2, #0
 8005990:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	334c      	adds	r3, #76	; 0x4c
 8005998:	2260      	movs	r2, #96	; 0x60
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f859 	bl	8006a54 <memset>
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	4a0c      	ldr	r2, [pc, #48]	; (80059d8 <prvInitialiseNewTask+0x130>)
 80059a6:	651a      	str	r2, [r3, #80]	; 0x50
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <prvInitialiseNewTask+0x134>)
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	4a0b      	ldr	r2, [pc, #44]	; (80059e0 <prvInitialiseNewTask+0x138>)
 80059b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	69b8      	ldr	r0, [r7, #24]
 80059ba:	f000 fc1f 	bl	80061fc <pxPortInitialiseStack>
 80059be:	4602      	mov	r2, r0
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d0:	bf00      	nop
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	08006c98 	.word	0x08006c98
 80059dc:	08006cb8 	.word	0x08006cb8
 80059e0:	08006c78 	.word	0x08006c78

080059e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059ec:	f000 fd32 	bl	8006454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f0:	4b2a      	ldr	r3, [pc, #168]	; (8005a9c <prvAddNewTaskToReadyList+0xb8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <prvAddNewTaskToReadyList+0xb8>)
 80059f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059fa:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <prvAddNewTaskToReadyList+0xbc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a02:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <prvAddNewTaskToReadyList+0xbc>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a08:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <prvAddNewTaskToReadyList+0xb8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d110      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a10:	f000 facc 	bl	8005fac <prvInitialiseTaskLists>
 8005a14:	e00d      	b.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <prvAddNewTaskToReadyList+0xc0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a1e:	4b20      	ldr	r3, [pc, #128]	; (8005aa0 <prvAddNewTaskToReadyList+0xbc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d802      	bhi.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a2c:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <prvAddNewTaskToReadyList+0xbc>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a1b      	ldr	r2, [pc, #108]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 8005a3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	4a18      	ldr	r2, [pc, #96]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <prvAddNewTaskToReadyList+0xcc>)
 8005a5c:	441a      	add	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7ff fdf5 	bl	8005654 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a6a:	f000 fd23 	bl	80064b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <prvAddNewTaskToReadyList+0xc0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00e      	beq.n	8005a94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <prvAddNewTaskToReadyList+0xbc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d207      	bcs.n	8005a94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a84:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a94:	bf00      	nop
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	200008ac 	.word	0x200008ac
 8005aa0:	200007ac 	.word	0x200007ac
 8005aa4:	200008b8 	.word	0x200008b8
 8005aa8:	200008c8 	.word	0x200008c8
 8005aac:	200008b4 	.word	0x200008b4
 8005ab0:	200007b0 	.word	0x200007b0
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <vTaskDelay+0x60>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <vTaskDelay+0x30>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ae8:	f000 f884 	bl	8005bf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005aec:	2100      	movs	r1, #0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fb1e 	bl	8006130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005af4:	f000 f88c 	bl	8005c10 <xTaskResumeAll>
 8005af8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d107      	bne.n	8005b10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <vTaskDelay+0x64>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200008d4 	.word	0x200008d4
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b2e:	463a      	mov	r2, r7
 8005b30:	1d39      	adds	r1, r7, #4
 8005b32:	f107 0308 	add.w	r3, r7, #8
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fa fd96 	bl	8000668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	4921      	ldr	r1, [pc, #132]	; (8005bd4 <vTaskStartScheduler+0xb4>)
 8005b50:	4821      	ldr	r0, [pc, #132]	; (8005bd8 <vTaskStartScheduler+0xb8>)
 8005b52:	f7ff fe06 	bl	8005762 <xTaskCreateStatic>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <vTaskStartScheduler+0xbc>)
 8005b5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b5c:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <vTaskStartScheduler+0xbc>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e001      	b.n	8005b6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d11b      	bne.n	8005bac <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
}
 8005b86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <vTaskStartScheduler+0xc0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	334c      	adds	r3, #76	; 0x4c
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <vTaskStartScheduler+0xc4>)
 8005b90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <vTaskStartScheduler+0xc8>)
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b9a:	4b14      	ldr	r3, [pc, #80]	; (8005bec <vTaskStartScheduler+0xcc>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <vTaskStartScheduler+0xd0>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ba6:	f000 fbb3 	bl	8006310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005baa:	e00e      	b.n	8005bca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb2:	d10a      	bne.n	8005bca <vTaskStartScheduler+0xaa>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	60fb      	str	r3, [r7, #12]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <vTaskStartScheduler+0xa8>
}
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08006c48 	.word	0x08006c48
 8005bd8:	08005f7d 	.word	0x08005f7d
 8005bdc:	200008d0 	.word	0x200008d0
 8005be0:	200007ac 	.word	0x200007ac
 8005be4:	20000198 	.word	0x20000198
 8005be8:	200008cc 	.word	0x200008cc
 8005bec:	200008b8 	.word	0x200008b8
 8005bf0:	200008b0 	.word	0x200008b0

08005bf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <vTaskSuspendAll+0x18>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4a03      	ldr	r2, [pc, #12]	; (8005c0c <vTaskSuspendAll+0x18>)
 8005c00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	200008d4 	.word	0x200008d4

08005c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c1e:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <xTaskResumeAll+0x2c>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	603b      	str	r3, [r7, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c3c:	f000 fc0a 	bl	8006454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c40:	4b38      	ldr	r3, [pc, #224]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	4a37      	ldr	r2, [pc, #220]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <xTaskResumeAll+0x114>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d161      	bne.n	8005d16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c52:	4b35      	ldr	r3, [pc, #212]	; (8005d28 <xTaskResumeAll+0x118>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d05d      	beq.n	8005d16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5a:	e02e      	b.n	8005cba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5c:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <xTaskResumeAll+0x11c>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3318      	adds	r3, #24
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fd50 	bl	800570e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fd4b 	bl	800570e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <xTaskResumeAll+0x120>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <xTaskResumeAll+0x120>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <xTaskResumeAll+0x124>)
 8005c98:	441a      	add	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f7ff fcd7 	bl	8005654 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <xTaskResumeAll+0x128>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005cb4:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <xTaskResumeAll+0x12c>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cba:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <xTaskResumeAll+0x11c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1cc      	bne.n	8005c5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cc8:	f000 fa12 	bl	80060f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ccc:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <xTaskResumeAll+0x130>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d010      	beq.n	8005cfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cd8:	f000 f836 	bl	8005d48 <xTaskIncrementTick>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ce2:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <xTaskResumeAll+0x12c>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f1      	bne.n	8005cd8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <xTaskResumeAll+0x130>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <xTaskResumeAll+0x12c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xTaskResumeAll+0x134>)
 8005d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d16:	f000 fbcd 	bl	80064b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200008d4 	.word	0x200008d4
 8005d28:	200008ac 	.word	0x200008ac
 8005d2c:	2000086c 	.word	0x2000086c
 8005d30:	200008b4 	.word	0x200008b4
 8005d34:	200007b0 	.word	0x200007b0
 8005d38:	200007ac 	.word	0x200007ac
 8005d3c:	200008c0 	.word	0x200008c0
 8005d40:	200008bc 	.word	0x200008bc
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d52:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <xTaskIncrementTick+0x144>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f040 808e 	bne.w	8005e78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d5c:	4b4c      	ldr	r3, [pc, #304]	; (8005e90 <xTaskIncrementTick+0x148>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d64:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <xTaskIncrementTick+0x148>)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d120      	bne.n	8005db2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <xTaskIncrementTick+0x14c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	603b      	str	r3, [r7, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <xTaskIncrementTick+0x46>
 8005d90:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <xTaskIncrementTick+0x14c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	4b40      	ldr	r3, [pc, #256]	; (8005e98 <xTaskIncrementTick+0x150>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3e      	ldr	r2, [pc, #248]	; (8005e94 <xTaskIncrementTick+0x14c>)
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	4a3e      	ldr	r2, [pc, #248]	; (8005e98 <xTaskIncrementTick+0x150>)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <xTaskIncrementTick+0x154>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	4a3c      	ldr	r2, [pc, #240]	; (8005e9c <xTaskIncrementTick+0x154>)
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	f000 f99f 	bl	80060f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005db2:	4b3b      	ldr	r3, [pc, #236]	; (8005ea0 <xTaskIncrementTick+0x158>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d348      	bcc.n	8005e4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dbc:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <xTaskIncrementTick+0x14c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc6:	4b36      	ldr	r3, [pc, #216]	; (8005ea0 <xTaskIncrementTick+0x158>)
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dcc:	601a      	str	r2, [r3, #0]
					break;
 8005dce:	e03e      	b.n	8005e4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd0:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <xTaskIncrementTick+0x14c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d203      	bcs.n	8005df0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005de8:	4a2d      	ldr	r2, [pc, #180]	; (8005ea0 <xTaskIncrementTick+0x158>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dee:	e02e      	b.n	8005e4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fc8a 	bl	800570e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	3318      	adds	r3, #24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fc81 	bl	800570e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <xTaskIncrementTick+0x15c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <xTaskIncrementTick+0x15c>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <xTaskIncrementTick+0x160>)
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7ff fc0d 	bl	8005654 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <xTaskIncrementTick+0x164>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d3b9      	bcc.n	8005dbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4c:	e7b6      	b.n	8005dbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <xTaskIncrementTick+0x164>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	4914      	ldr	r1, [pc, #80]	; (8005ea8 <xTaskIncrementTick+0x160>)
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d901      	bls.n	8005e6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <xTaskIncrementTick+0x168>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e004      	b.n	8005e82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <xTaskIncrementTick+0x16c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	; (8005eb4 <xTaskIncrementTick+0x16c>)
 8005e80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e82:	697b      	ldr	r3, [r7, #20]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	200008d4 	.word	0x200008d4
 8005e90:	200008b0 	.word	0x200008b0
 8005e94:	20000864 	.word	0x20000864
 8005e98:	20000868 	.word	0x20000868
 8005e9c:	200008c4 	.word	0x200008c4
 8005ea0:	200008cc 	.word	0x200008cc
 8005ea4:	200008b4 	.word	0x200008b4
 8005ea8:	200007b0 	.word	0x200007b0
 8005eac:	200007ac 	.word	0x200007ac
 8005eb0:	200008c0 	.word	0x200008c0
 8005eb4:	200008bc 	.word	0x200008bc

08005eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ebe:	4b29      	ldr	r3, [pc, #164]	; (8005f64 <vTaskSwitchContext+0xac>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <vTaskSwitchContext+0xb0>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ecc:	e044      	b.n	8005f58 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005ece:	4b26      	ldr	r3, [pc, #152]	; (8005f68 <vTaskSwitchContext+0xb0>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed4:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <vTaskSwitchContext+0xb4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	fab3 f383 	clz	r3, r3
 8005ee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	f1c3 031f 	rsb	r3, r3, #31
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	4921      	ldr	r1, [pc, #132]	; (8005f70 <vTaskSwitchContext+0xb8>)
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	607b      	str	r3, [r7, #4]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <vTaskSwitchContext+0x5a>
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <vTaskSwitchContext+0xb8>)
 8005f20:	4413      	add	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3308      	adds	r3, #8
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d104      	bne.n	8005f44 <vTaskSwitchContext+0x8c>
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <vTaskSwitchContext+0xbc>)
 8005f4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <vTaskSwitchContext+0xbc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	334c      	adds	r3, #76	; 0x4c
 8005f54:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <vTaskSwitchContext+0xc0>)
 8005f56:	6013      	str	r3, [r2, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	200008d4 	.word	0x200008d4
 8005f68:	200008c0 	.word	0x200008c0
 8005f6c:	200008b4 	.word	0x200008b4
 8005f70:	200007b0 	.word	0x200007b0
 8005f74:	200007ac 	.word	0x200007ac
 8005f78:	20000198 	.word	0x20000198

08005f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f84:	f000 f852 	bl	800602c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <prvIdleTask+0x28>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d9f9      	bls.n	8005f84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <prvIdleTask+0x2c>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fa0:	e7f0      	b.n	8005f84 <prvIdleTask+0x8>
 8005fa2:	bf00      	nop
 8005fa4:	200007b0 	.word	0x200007b0
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	e00c      	b.n	8005fd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <prvInitialiseTaskLists+0x60>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fb17 	bl	80055fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	607b      	str	r3, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d9ef      	bls.n	8005fb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd8:	480d      	ldr	r0, [pc, #52]	; (8006010 <prvInitialiseTaskLists+0x64>)
 8005fda:	f7ff fb0e 	bl	80055fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fde:	480d      	ldr	r0, [pc, #52]	; (8006014 <prvInitialiseTaskLists+0x68>)
 8005fe0:	f7ff fb0b 	bl	80055fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fe4:	480c      	ldr	r0, [pc, #48]	; (8006018 <prvInitialiseTaskLists+0x6c>)
 8005fe6:	f7ff fb08 	bl	80055fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fea:	480c      	ldr	r0, [pc, #48]	; (800601c <prvInitialiseTaskLists+0x70>)
 8005fec:	f7ff fb05 	bl	80055fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ff0:	480b      	ldr	r0, [pc, #44]	; (8006020 <prvInitialiseTaskLists+0x74>)
 8005ff2:	f7ff fb02 	bl	80055fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <prvInitialiseTaskLists+0x78>)
 8005ff8:	4a05      	ldr	r2, [pc, #20]	; (8006010 <prvInitialiseTaskLists+0x64>)
 8005ffa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvInitialiseTaskLists+0x7c>)
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <prvInitialiseTaskLists+0x68>)
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	200007b0 	.word	0x200007b0
 8006010:	2000083c 	.word	0x2000083c
 8006014:	20000850 	.word	0x20000850
 8006018:	2000086c 	.word	0x2000086c
 800601c:	20000880 	.word	0x20000880
 8006020:	20000898 	.word	0x20000898
 8006024:	20000864 	.word	0x20000864
 8006028:	20000868 	.word	0x20000868

0800602c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006032:	e019      	b.n	8006068 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006034:	f000 fa0e 	bl	8006454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <prvCheckTasksWaitingTermination+0x50>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fb62 	bl	800570e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <prvCheckTasksWaitingTermination+0x54>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3b01      	subs	r3, #1
 8006050:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <prvCheckTasksWaitingTermination+0x54>)
 8006052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <prvCheckTasksWaitingTermination+0x58>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3b01      	subs	r3, #1
 800605a:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <prvCheckTasksWaitingTermination+0x58>)
 800605c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800605e:	f000 fa29 	bl	80064b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f810 	bl	8006088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006068:	4b06      	ldr	r3, [pc, #24]	; (8006084 <prvCheckTasksWaitingTermination+0x58>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e1      	bne.n	8006034 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006070:	bf00      	nop
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000880 	.word	0x20000880
 8006080:	200008ac 	.word	0x200008ac
 8006084:	20000894 	.word	0x20000894

08006088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	334c      	adds	r3, #76	; 0x4c
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fcf3 	bl	8006a80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fb81 	bl	80067b0 <vPortFree>
				vPortFree( pxTCB );
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fb7e 	bl	80067b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060b4:	e018      	b.n	80060e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d103      	bne.n	80060c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb75 	bl	80067b0 <vPortFree>
	}
 80060c6:	e00f      	b.n	80060e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d00a      	beq.n	80060e8 <prvDeleteTCB+0x60>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60fb      	str	r3, [r7, #12]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <prvDeleteTCB+0x5e>
	}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvResetNextTaskUnblockTime+0x38>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvResetNextTaskUnblockTime+0x3c>)
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006108:	e008      	b.n	800611c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <prvResetNextTaskUnblockTime+0x38>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvResetNextTaskUnblockTime+0x3c>)
 800611a:	6013      	str	r3, [r2, #0]
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	20000864 	.word	0x20000864
 800612c:	200008cc 	.word	0x200008cc

08006130 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800613a:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006140:	4b28      	ldr	r3, [pc, #160]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fae1 	bl	800570e <uxListRemove>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	2201      	movs	r2, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43da      	mvns	r2, r3
 8006160:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4013      	ands	r3, r2
 8006166:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006168:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d10a      	bne.n	8006188 <prvAddCurrentTaskToDelayedList+0x58>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006178:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	481a      	ldr	r0, [pc, #104]	; (80061ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8006182:	f7ff fa67 	bl	8005654 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006186:	e026      	b.n	80061d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	429a      	cmp	r2, r3
 800619e:	d209      	bcs.n	80061b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a0:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7ff fa75 	bl	800569c <vListInsert>
}
 80061b2:	e010      	b.n	80061d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b4:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7ff fa6b 	bl	800569c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d202      	bcs.n	80061d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061d0:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6013      	str	r3, [r2, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200008b0 	.word	0x200008b0
 80061e4:	200007ac 	.word	0x200007ac
 80061e8:	200008b4 	.word	0x200008b4
 80061ec:	20000898 	.word	0x20000898
 80061f0:	20000868 	.word	0x20000868
 80061f4:	20000864 	.word	0x20000864
 80061f8:	200008cc 	.word	0x200008cc

080061fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b04      	subs	r3, #4
 800620c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b04      	subs	r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b04      	subs	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800622c:	4a0c      	ldr	r2, [pc, #48]	; (8006260 <pxPortInitialiseStack+0x64>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b14      	subs	r3, #20
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b04      	subs	r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f06f 0202 	mvn.w	r2, #2
 800624a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b20      	subs	r3, #32
 8006250:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006252:	68fb      	ldr	r3, [r7, #12]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	08006265 	.word	0x08006265

08006264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <prvTaskExitError+0x54>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006276:	d00a      	beq.n	800628e <prvTaskExitError+0x2a>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60fb      	str	r3, [r7, #12]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <prvTaskExitError+0x28>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60bb      	str	r3, [r7, #8]
}
 80062a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062a2:	bf00      	nop
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0fc      	beq.n	80062a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	20000194 	.word	0x20000194
 80062bc:	00000000 	.word	0x00000000

080062c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <pxCurrentTCBConst2>)
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f380 8809 	msr	PSP, r0
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8811 	msr	BASEPRI, r0
 80062da:	4770      	bx	lr
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst2>:
 80062e0:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <prvPortStartFirstTask+0x24>)
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f380 8808 	msr	MSP, r0
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8814 	msr	CONTROL, r0
 80062fa:	b662      	cpsie	i
 80062fc:	b661      	cpsie	f
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	df00      	svc	0
 8006308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800630a:	bf00      	nop
 800630c:	e000ed08 	.word	0xe000ed08

08006310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006316:	4b46      	ldr	r3, [pc, #280]	; (8006430 <xPortStartScheduler+0x120>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a46      	ldr	r2, [pc, #280]	; (8006434 <xPortStartScheduler+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10a      	bne.n	8006336 <xPortStartScheduler+0x26>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006336:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <xPortStartScheduler+0x120>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a3f      	ldr	r2, [pc, #252]	; (8006438 <xPortStartScheduler+0x128>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d10a      	bne.n	8006356 <xPortStartScheduler+0x46>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006356:	4b39      	ldr	r3, [pc, #228]	; (800643c <xPortStartScheduler+0x12c>)
 8006358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4b31      	ldr	r3, [pc, #196]	; (8006440 <xPortStartScheduler+0x130>)
 800637c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800637e:	4b31      	ldr	r3, [pc, #196]	; (8006444 <xPortStartScheduler+0x134>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006384:	e009      	b.n	800639a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006386:	4b2f      	ldr	r3, [pc, #188]	; (8006444 <xPortStartScheduler+0x134>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <xPortStartScheduler+0x134>)
 800638e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d0ef      	beq.n	8006386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063a6:	4b27      	ldr	r3, [pc, #156]	; (8006444 <xPortStartScheduler+0x134>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1c3 0307 	rsb	r3, r3, #7
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d00a      	beq.n	80063c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60bb      	str	r3, [r7, #8]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <xPortStartScheduler+0x134>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <xPortStartScheduler+0x134>)
 80063d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <xPortStartScheduler+0x134>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063da:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <xPortStartScheduler+0x134>)
 80063dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063e6:	4b18      	ldr	r3, [pc, #96]	; (8006448 <xPortStartScheduler+0x138>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <xPortStartScheduler+0x138>)
 80063ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <xPortStartScheduler+0x138>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a14      	ldr	r2, [pc, #80]	; (8006448 <xPortStartScheduler+0x138>)
 80063f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063fe:	f000 f8dd 	bl	80065bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <xPortStartScheduler+0x13c>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006408:	f000 f8fc 	bl	8006604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <xPortStartScheduler+0x140>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a0f      	ldr	r2, [pc, #60]	; (8006450 <xPortStartScheduler+0x140>)
 8006412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006418:	f7ff ff66 	bl	80062e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800641c:	f7ff fd4c 	bl	8005eb8 <vTaskSwitchContext>
	prvTaskExitError();
 8006420:	f7ff ff20 	bl	8006264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	e000ed00 	.word	0xe000ed00
 8006434:	410fc271 	.word	0x410fc271
 8006438:	410fc270 	.word	0x410fc270
 800643c:	e000e400 	.word	0xe000e400
 8006440:	200008d8 	.word	0x200008d8
 8006444:	200008dc 	.word	0x200008dc
 8006448:	e000ed20 	.word	0xe000ed20
 800644c:	20000194 	.word	0x20000194
 8006450:	e000ef34 	.word	0xe000ef34

08006454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	607b      	str	r3, [r7, #4]
}
 800646c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <vPortEnterCritical+0x58>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <vPortEnterCritical+0x58>)
 8006476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <vPortEnterCritical+0x58>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10f      	bne.n	80064a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <vPortEnterCritical+0x5c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	603b      	str	r3, [r7, #0]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <vPortEnterCritical+0x4a>
	}
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20000194 	.word	0x20000194
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <vPortExitCritical+0x50>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <vPortExitCritical+0x24>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	607b      	str	r3, [r7, #4]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <vPortExitCritical+0x50>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	4a09      	ldr	r2, [pc, #36]	; (8006504 <vPortExitCritical+0x50>)
 80064e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <vPortExitCritical+0x50>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <vPortExitCritical+0x42>
 80064ea:	2300      	movs	r3, #0
 80064ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000194 	.word	0x20000194
	...

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006534:	f380 8811 	msr	BASEPRI, r0
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f7ff fcba 	bl	8005eb8 <vTaskSwitchContext>
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	f380 8811 	msr	BASEPRI, r0
 800654c:	bc09      	pop	{r0, r3}
 800654e:	6819      	ldr	r1, [r3, #0]
 8006550:	6808      	ldr	r0, [r1, #0]
 8006552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	f01e 0f10 	tst.w	lr, #16
 800655a:	bf08      	it	eq
 800655c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006560:	f380 8809 	msr	PSP, r0
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst>:
 8006570:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	607b      	str	r3, [r7, #4]
}
 8006590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006592:	f7ff fbd9 	bl	8005d48 <xTaskIncrementTick>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <SysTick_Handler+0x40>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <vPortSetupTimerInterrupt+0x34>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <vPortSetupTimerInterrupt+0x38>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <vPortSetupTimerInterrupt+0x3c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <vPortSetupTimerInterrupt+0x40>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	099b      	lsrs	r3, r3, #6
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <vPortSetupTimerInterrupt+0x44>)
 80065da:	3b01      	subs	r3, #1
 80065dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065de:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <vPortSetupTimerInterrupt+0x34>)
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	e000e010 	.word	0xe000e010
 80065f4:	e000e018 	.word	0xe000e018
 80065f8:	20000188 	.word	0x20000188
 80065fc:	10624dd3 	.word	0x10624dd3
 8006600:	e000e014 	.word	0xe000e014

08006604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006614 <vPortEnableVFP+0x10>
 8006608:	6801      	ldr	r1, [r0, #0]
 800660a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800660e:	6001      	str	r1, [r0, #0]
 8006610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006612:	bf00      	nop
 8006614:	e000ed88 	.word	0xe000ed88

08006618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006624:	f7ff fae6 	bl	8005bf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006628:	4b5b      	ldr	r3, [pc, #364]	; (8006798 <pvPortMalloc+0x180>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006630:	f000 f920 	bl	8006874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006634:	4b59      	ldr	r3, [pc, #356]	; (800679c <pvPortMalloc+0x184>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 8093 	bne.w	8006768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01d      	beq.n	8006684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006648:	2208      	movs	r2, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4413      	add	r3, r2
 800664e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	2b00      	cmp	r3, #0
 8006658:	d014      	beq.n	8006684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	3308      	adds	r3, #8
 8006662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <pvPortMalloc+0x6c>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	617b      	str	r3, [r7, #20]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d06e      	beq.n	8006768 <pvPortMalloc+0x150>
 800668a:	4b45      	ldr	r3, [pc, #276]	; (80067a0 <pvPortMalloc+0x188>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	429a      	cmp	r2, r3
 8006692:	d869      	bhi.n	8006768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006694:	4b43      	ldr	r3, [pc, #268]	; (80067a4 <pvPortMalloc+0x18c>)
 8006696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006698:	4b42      	ldr	r3, [pc, #264]	; (80067a4 <pvPortMalloc+0x18c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800669e:	e004      	b.n	80066aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d903      	bls.n	80066bc <pvPortMalloc+0xa4>
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f1      	bne.n	80066a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066bc:	4b36      	ldr	r3, [pc, #216]	; (8006798 <pvPortMalloc+0x180>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d050      	beq.n	8006768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2208      	movs	r2, #8
 80066cc:	4413      	add	r3, r2
 80066ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	2308      	movs	r3, #8
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d91f      	bls.n	8006728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <pvPortMalloc+0xf8>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	613b      	str	r3, [r7, #16]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	1ad2      	subs	r2, r2, r3
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006722:	69b8      	ldr	r0, [r7, #24]
 8006724:	f000 f908 	bl	8006938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006728:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <pvPortMalloc+0x188>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <pvPortMalloc+0x188>)
 8006734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <pvPortMalloc+0x188>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <pvPortMalloc+0x190>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d203      	bcs.n	800674a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006742:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <pvPortMalloc+0x188>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <pvPortMalloc+0x190>)
 8006748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <pvPortMalloc+0x184>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	431a      	orrs	r2, r3
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <pvPortMalloc+0x194>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <pvPortMalloc+0x194>)
 8006766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006768:	f7ff fa52 	bl	8005c10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <pvPortMalloc+0x174>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	60fb      	str	r3, [r7, #12]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <pvPortMalloc+0x172>
	return pvReturn;
 800678c:	69fb      	ldr	r3, [r7, #28]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3728      	adds	r7, #40	; 0x28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	200044e8 	.word	0x200044e8
 800679c:	200044fc 	.word	0x200044fc
 80067a0:	200044ec 	.word	0x200044ec
 80067a4:	200044e0 	.word	0x200044e0
 80067a8:	200044f0 	.word	0x200044f0
 80067ac:	200044f4 	.word	0x200044f4

080067b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d04d      	beq.n	800685e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067c2:	2308      	movs	r3, #8
 80067c4:	425b      	negs	r3, r3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4b24      	ldr	r3, [pc, #144]	; (8006868 <vPortFree+0xb8>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4013      	ands	r3, r2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <vPortFree+0x44>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60fb      	str	r3, [r7, #12]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <vPortFree+0x62>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60bb      	str	r3, [r7, #8]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <vPortFree+0xb8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01e      	beq.n	800685e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11a      	bne.n	800685e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <vPortFree+0xb8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006838:	f7ff f9dc 	bl	8005bf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <vPortFree+0xbc>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4413      	add	r3, r2
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <vPortFree+0xbc>)
 8006848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f000 f874 	bl	8006938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <vPortFree+0xc0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	4a06      	ldr	r2, [pc, #24]	; (8006870 <vPortFree+0xc0>)
 8006858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800685a:	f7ff f9d9 	bl	8005c10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	200044fc 	.word	0x200044fc
 800686c:	200044ec 	.word	0x200044ec
 8006870:	200044f8 	.word	0x200044f8

08006874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800687a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800687e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006880:	4b27      	ldr	r3, [pc, #156]	; (8006920 <prvHeapInit+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3307      	adds	r3, #7
 8006892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <prvHeapInit+0xac>)
 80068a4:	4413      	add	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ac:	4a1d      	ldr	r2, [pc, #116]	; (8006924 <prvHeapInit+0xb0>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <prvHeapInit+0xb0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4413      	add	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068c0:	2208      	movs	r2, #8
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a15      	ldr	r2, [pc, #84]	; (8006928 <prvHeapInit+0xb4>)
 80068d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <prvHeapInit+0xb4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2200      	movs	r2, #0
 80068dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068de:	4b12      	ldr	r3, [pc, #72]	; (8006928 <prvHeapInit+0xb4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	1ad2      	subs	r2, r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvHeapInit+0xb4>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <prvHeapInit+0xb8>)
 8006902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <prvHeapInit+0xbc>)
 800690a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <prvHeapInit+0xc0>)
 800690e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	200008e0 	.word	0x200008e0
 8006924:	200044e0 	.word	0x200044e0
 8006928:	200044e8 	.word	0x200044e8
 800692c:	200044f0 	.word	0x200044f0
 8006930:	200044ec 	.word	0x200044ec
 8006934:	200044fc 	.word	0x200044fc

08006938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006940:	4b28      	ldr	r3, [pc, #160]	; (80069e4 <prvInsertBlockIntoFreeList+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e002      	b.n	800694c <prvInsertBlockIntoFreeList+0x14>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d8f7      	bhi.n	8006946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d108      	bne.n	800697a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	441a      	add	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d118      	bne.n	80069c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d00d      	beq.n	80069b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e008      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvInsertBlockIntoFreeList+0xb0>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e003      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d002      	beq.n	80069d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	200044e0 	.word	0x200044e0
 80069e8:	200044e8 	.word	0x200044e8

080069ec <__libc_init_array>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	4d0d      	ldr	r5, [pc, #52]	; (8006a24 <__libc_init_array+0x38>)
 80069f0:	4c0d      	ldr	r4, [pc, #52]	; (8006a28 <__libc_init_array+0x3c>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	2600      	movs	r6, #0
 80069f8:	42a6      	cmp	r6, r4
 80069fa:	d109      	bne.n	8006a10 <__libc_init_array+0x24>
 80069fc:	4d0b      	ldr	r5, [pc, #44]	; (8006a2c <__libc_init_array+0x40>)
 80069fe:	4c0c      	ldr	r4, [pc, #48]	; (8006a30 <__libc_init_array+0x44>)
 8006a00:	f000 f8f2 	bl	8006be8 <_init>
 8006a04:	1b64      	subs	r4, r4, r5
 8006a06:	10a4      	asrs	r4, r4, #2
 8006a08:	2600      	movs	r6, #0
 8006a0a:	42a6      	cmp	r6, r4
 8006a0c:	d105      	bne.n	8006a1a <__libc_init_array+0x2e>
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a14:	4798      	blx	r3
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7ee      	b.n	80069f8 <__libc_init_array+0xc>
 8006a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1e:	4798      	blx	r3
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7f2      	b.n	8006a0a <__libc_init_array+0x1e>
 8006a24:	08006ce0 	.word	0x08006ce0
 8006a28:	08006ce0 	.word	0x08006ce0
 8006a2c:	08006ce0 	.word	0x08006ce0
 8006a30:	08006ce4 	.word	0x08006ce4

08006a34 <__retarget_lock_acquire_recursive>:
 8006a34:	4770      	bx	lr

08006a36 <__retarget_lock_release_recursive>:
 8006a36:	4770      	bx	lr

08006a38 <memcpy>:
 8006a38:	440a      	add	r2, r1
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a40:	d100      	bne.n	8006a44 <memcpy+0xc>
 8006a42:	4770      	bx	lr
 8006a44:	b510      	push	{r4, lr}
 8006a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a4e:	4291      	cmp	r1, r2
 8006a50:	d1f9      	bne.n	8006a46 <memcpy+0xe>
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <memset>:
 8006a54:	4402      	add	r2, r0
 8006a56:	4603      	mov	r3, r0
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d100      	bne.n	8006a5e <memset+0xa>
 8006a5c:	4770      	bx	lr
 8006a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a62:	e7f9      	b.n	8006a58 <memset+0x4>

08006a64 <cleanup_glue>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	460c      	mov	r4, r1
 8006a68:	6809      	ldr	r1, [r1, #0]
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	b109      	cbz	r1, 8006a72 <cleanup_glue+0xe>
 8006a6e:	f7ff fff9 	bl	8006a64 <cleanup_glue>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7a:	f000 b869 	b.w	8006b50 <_free_r>
	...

08006a80 <_reclaim_reent>:
 8006a80:	4b2c      	ldr	r3, [pc, #176]	; (8006b34 <_reclaim_reent+0xb4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4283      	cmp	r3, r0
 8006a86:	b570      	push	{r4, r5, r6, lr}
 8006a88:	4604      	mov	r4, r0
 8006a8a:	d051      	beq.n	8006b30 <_reclaim_reent+0xb0>
 8006a8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a8e:	b143      	cbz	r3, 8006aa2 <_reclaim_reent+0x22>
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d14a      	bne.n	8006b2c <_reclaim_reent+0xac>
 8006a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a98:	6819      	ldr	r1, [r3, #0]
 8006a9a:	b111      	cbz	r1, 8006aa2 <_reclaim_reent+0x22>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 f857 	bl	8006b50 <_free_r>
 8006aa2:	6961      	ldr	r1, [r4, #20]
 8006aa4:	b111      	cbz	r1, 8006aac <_reclaim_reent+0x2c>
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f852 	bl	8006b50 <_free_r>
 8006aac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006aae:	b111      	cbz	r1, 8006ab6 <_reclaim_reent+0x36>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 f84d 	bl	8006b50 <_free_r>
 8006ab6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ab8:	b111      	cbz	r1, 8006ac0 <_reclaim_reent+0x40>
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 f848 	bl	8006b50 <_free_r>
 8006ac0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ac2:	b111      	cbz	r1, 8006aca <_reclaim_reent+0x4a>
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f843 	bl	8006b50 <_free_r>
 8006aca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006acc:	b111      	cbz	r1, 8006ad4 <_reclaim_reent+0x54>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f83e 	bl	8006b50 <_free_r>
 8006ad4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006ad6:	b111      	cbz	r1, 8006ade <_reclaim_reent+0x5e>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 f839 	bl	8006b50 <_free_r>
 8006ade:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ae0:	b111      	cbz	r1, 8006ae8 <_reclaim_reent+0x68>
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 f834 	bl	8006b50 <_free_r>
 8006ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aea:	b111      	cbz	r1, 8006af2 <_reclaim_reent+0x72>
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 f82f 	bl	8006b50 <_free_r>
 8006af2:	69a3      	ldr	r3, [r4, #24]
 8006af4:	b1e3      	cbz	r3, 8006b30 <_reclaim_reent+0xb0>
 8006af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006af8:	4620      	mov	r0, r4
 8006afa:	4798      	blx	r3
 8006afc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006afe:	b1b9      	cbz	r1, 8006b30 <_reclaim_reent+0xb0>
 8006b00:	4620      	mov	r0, r4
 8006b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b06:	f7ff bfad 	b.w	8006a64 <cleanup_glue>
 8006b0a:	5949      	ldr	r1, [r1, r5]
 8006b0c:	b941      	cbnz	r1, 8006b20 <_reclaim_reent+0xa0>
 8006b0e:	3504      	adds	r5, #4
 8006b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b12:	2d80      	cmp	r5, #128	; 0x80
 8006b14:	68d9      	ldr	r1, [r3, #12]
 8006b16:	d1f8      	bne.n	8006b0a <_reclaim_reent+0x8a>
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 f819 	bl	8006b50 <_free_r>
 8006b1e:	e7ba      	b.n	8006a96 <_reclaim_reent+0x16>
 8006b20:	680e      	ldr	r6, [r1, #0]
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f814 	bl	8006b50 <_free_r>
 8006b28:	4631      	mov	r1, r6
 8006b2a:	e7ef      	b.n	8006b0c <_reclaim_reent+0x8c>
 8006b2c:	2500      	movs	r5, #0
 8006b2e:	e7ef      	b.n	8006b10 <_reclaim_reent+0x90>
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
 8006b32:	bf00      	nop
 8006b34:	20000198 	.word	0x20000198

08006b38 <__malloc_lock>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__malloc_lock+0x8>)
 8006b3a:	f7ff bf7b 	b.w	8006a34 <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20004500 	.word	0x20004500

08006b44 <__malloc_unlock>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__malloc_unlock+0x8>)
 8006b46:	f7ff bf76 	b.w	8006a36 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	20004500 	.word	0x20004500

08006b50 <_free_r>:
 8006b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b52:	2900      	cmp	r1, #0
 8006b54:	d044      	beq.n	8006be0 <_free_r+0x90>
 8006b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b5a:	9001      	str	r0, [sp, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b62:	bfb8      	it	lt
 8006b64:	18e4      	addlt	r4, r4, r3
 8006b66:	f7ff ffe7 	bl	8006b38 <__malloc_lock>
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <_free_r+0x94>)
 8006b6c:	9801      	ldr	r0, [sp, #4]
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	b933      	cbnz	r3, 8006b80 <_free_r+0x30>
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	6014      	str	r4, [r2, #0]
 8006b76:	b003      	add	sp, #12
 8006b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b7c:	f7ff bfe2 	b.w	8006b44 <__malloc_unlock>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d908      	bls.n	8006b96 <_free_r+0x46>
 8006b84:	6825      	ldr	r5, [r4, #0]
 8006b86:	1961      	adds	r1, r4, r5
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf01      	itttt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	1949      	addeq	r1, r1, r5
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	e7ed      	b.n	8006b72 <_free_r+0x22>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x50>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x46>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1855      	adds	r5, r2, r1
 8006ba4:	42a5      	cmp	r5, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x70>
 8006ba8:	6824      	ldr	r4, [r4, #0]
 8006baa:	4421      	add	r1, r4
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1e0      	bne.n	8006b76 <_free_r+0x26>
 8006bb4:	681c      	ldr	r4, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6053      	str	r3, [r2, #4]
 8006bba:	4421      	add	r1, r4
 8006bbc:	6011      	str	r1, [r2, #0]
 8006bbe:	e7da      	b.n	8006b76 <_free_r+0x26>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x78>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	e7d6      	b.n	8006b76 <_free_r+0x26>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	1961      	adds	r1, r4, r5
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf04      	itt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	bf04      	itt	eq
 8006bd8:	1949      	addeq	r1, r1, r5
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	6054      	str	r4, [r2, #4]
 8006bde:	e7ca      	b.n	8006b76 <_free_r+0x26>
 8006be0:	b003      	add	sp, #12
 8006be2:	bd30      	pop	{r4, r5, pc}
 8006be4:	20004504 	.word	0x20004504

08006be8 <_init>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr

08006bf4 <_fini>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr
