/*
 * WiFi_Task.c
 *
 *  Created on: Jun 2, 2023
 *      Author: jeffr
 */
#include "cmsis_os2.h"
#include "main.h"
#include "esp8266.h"
#include "gpio.h"
#include <stdio.h>
#include <string.h>

int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
/***************************************************************/
ESP8266_t ESP8266;
ESP8266_APConfig_t ESP8266_config;
ESP8266_Connection_t *ConnectionGlobal;

/**************************************************************/

void WiFi_Task(void *argument)
{
	ESP8266_Result_t result;
  /* USER CODE BEGIN WiFi_Task */
	//Inicia la interfaz
	do{
		result = ESP8266_Init(&ESP8266, 115200);
		osDelay(100);
	}while(result != ESP_OK);
	//establece el modo de funcionamiento de la ESP8266
	/**
	 * AP - > (modem)
	 * STA -> conexion a router wifi
	 * AP + STA
	 */
	do{
		result  = ESP8266_SetMode(&ESP8266, ESP8266_Mode_STA);
		osDelay(20);
	}while(result != ESP_OK);
	//
	ESP8266_WifiDisconnect(&ESP8266);

	ESP8266_WaitReady(&ESP8266);

	//->WIFI SCAN
	ESP8266_ListWifiStations(&ESP8266);
	ESP8266_WaitReady(&ESP8266);

	//CONEXION A RED WIFI
	ESP8266_WifiConnect(&ESP8266, "RQUINOB", "R#29qbCivil");
	ESP8266_WaitReady(&ESP8266);

	if(ESP8266_WifiGetConnected(&ESP8266) == ESP_OK){
		//TODO
		printf("wifi is connected....\r\n");
	}else{
		while(1){
			osDelay(osWaitForever);
		}
	}

  /* Infinite loop */
  for(;;)
  {
    ESP8266_Update(&ESP8266);
    osDelay(1);
  }
  /* USER CODE END WiFi_Task */
}


//MODEM Callbacks
void ESP8266_Callback_DeviceReady(ESP8266_t* ESP8266) {
	printf("Device is ready\r\n");
}

/* Called when watchdog reset on ESP8266 is detected */
void ESP8266_Callback_WatchdogReset(ESP8266_t* ESP8266) {
	printf("Watchdog reset detected!\r\n");
}

/* Called when we are disconnected from WIFI */
void ESP8266_Callback_WifiDisconnected(ESP8266_t* ESP8266) {
	printf( "Wifi is disconnected!\r\n");
}

void ESP8266_Callback_WifiConnected(ESP8266_t* ESP8266) {
	printf( "Wifi is connected!\r\n");
}

void ESP8266_Callback_WifiConnectFailed(ESP8266_t* ESP8266) {

	sprintf(writeValue, "Connection to wifi network has failed. Reason %d\r\n", ESP8266->WifiConnectError);
	//Envia texto via serial
	printf("%s" ,writeValue);
}

void ESP8266_Callback_WifiGotIP(ESP8266_t* ESP8266) {
	printf( "Wifi got an IP address\r\n");

	/* Read that IP from module */
	sprintf(writeValue, "Grabbing IP status: %d\r\n", ESP8266_GetSTAIP(ESP8266));
	//Envia texto via serial
	printf("%s" ,writeValue);
}

void ESP8266_Callback_WifiIPSet(ESP8266_t* ESP8266) {
	/* We have STA IP set (IP set by router we are connected to) */
	sprintf(writeValue, "We have valid IP address: %d.%d.%d.%d\r\n", ESP8266->STAIP[0], ESP8266->STAIP[1], ESP8266->STAIP[2], ESP8266->STAIP[3]);
	//Envia texto via serial
	printf("%s" ,writeValue);
}

void ESP8266_Callback_DHCPTimeout(ESP8266_t* ESP8266) {
	printf( "DHCP timeout!\r\n");
}

void ESP8266_Callback_WifiDetected(ESP8266_t* ESP8266, ESP8266_APs_t* ESP8266_AP) {
	uint8_t i = 0;

	/* Print number of detected stations */
	sprintf(writeValue, "We have detected %d AP stations\r\n", ESP8266_AP->Count);
	//Envia texto via serial
	printf("%s" ,writeValue);

	/* Print each AP */
	for (i = 0; i < ESP8266_AP->Count; i++) {
		/* Print SSID for each AP */;
		sprintf(writeValue, "%2d: %s\r\n", i, ESP8266_AP->AP[i].SSID);
		//Envia texto via serial
		printf("%s" ,writeValue);
	}
}
