
ESP8266_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800ae18  0800ae18  0001ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6d4  0800b6d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6dc  0800b6dc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6dc  0800b6dc  0001b6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6e0  0800b6e0  0001b6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b6e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00006b9c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006c20  20006c20  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fba4  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004337  00000000  00000000  0003fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00043f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001870  00000000  00000000  00045988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025887  00000000  00000000  000471f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc32  00000000  00000000  0006ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9565  00000000  00000000  000896b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162c16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079c8  00000000  00000000  00162c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae00 	.word	0x0800ae00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800ae00 	.word	0x0800ae00

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00b      	beq.n	80005e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	e000      	b.n	80005d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f9      	beq.n	80005ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <__io_putchar>:
#include "esp8266.h"
#include "gpio.h"
#include <stdio.h>
#include <string.h>

int __io_putchar(int ch){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffd1 	bl	80005a4 <ITM_SendChar>
	return ch;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <WiFi_Task>:
ESP8266_Connection_t *ConnectionGlobal;
char writeValue[60];
/**************************************************************/

void WiFi_Task(void *argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	ESP8266_Result_t result;
  /* USER CODE BEGIN WiFi_Task */
	//Inicia la interfaz
	do{
		result = ESP8266_Init(&ESP8266, 115200);
 8000614:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000618:	4820      	ldr	r0, [pc, #128]	; (800069c <WiFi_Task+0x90>)
 800061a:	f005 fbb5 	bl	8005d88 <ESP8266_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	73fb      	strb	r3, [r7, #15]
		osDelay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f006 fba2 	bl	8006d6c <osDelay>
	}while(result != ESP_OK);
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d1f2      	bne.n	8000614 <WiFi_Task+0x8>
	 * AP - > (modem)
	 * STA -> conexion a router wifi
	 * AP + STA
	 */
	do{
		result  = ESP8266_SetMode(&ESP8266, ESP8266_Mode_STA);
 800062e:	2101      	movs	r1, #1
 8000630:	481a      	ldr	r0, [pc, #104]	; (800069c <WiFi_Task+0x90>)
 8000632:	f005 ffd7 	bl	80065e4 <ESP8266_SetMode>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]
		osDelay(20);
 800063a:	2014      	movs	r0, #20
 800063c:	f006 fb96 	bl	8006d6c <osDelay>
	}while(result != ESP_OK);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f3      	bne.n	800062e <WiFi_Task+0x22>
	//
	ESP8266_WifiDisconnect(&ESP8266);
 8000646:	4815      	ldr	r0, [pc, #84]	; (800069c <WiFi_Task+0x90>)
 8000648:	f005 ff6c 	bl	8006524 <ESP8266_WifiDisconnect>

	ESP8266_WaitReady(&ESP8266);
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <WiFi_Task+0x90>)
 800064e:	f005 ff3f 	bl	80064d0 <ESP8266_WaitReady>

	//->WIFI SCAN
	ESP8266_ListWifiStations(&ESP8266);
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <WiFi_Task+0x90>)
 8000654:	f006 f8d2 	bl	80067fc <ESP8266_ListWifiStations>
	ESP8266_WaitReady(&ESP8266);
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <WiFi_Task+0x90>)
 800065a:	f005 ff39 	bl	80064d0 <ESP8266_WaitReady>

	//CONEXION A RED WIFI
	ESP8266_WifiConnect(&ESP8266, "RQUINOB", "R#29qbCivil");
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <WiFi_Task+0x94>)
 8000660:	4910      	ldr	r1, [pc, #64]	; (80006a4 <WiFi_Task+0x98>)
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <WiFi_Task+0x90>)
 8000664:	f005 ff72 	bl	800654c <ESP8266_WifiConnect>
	ESP8266_WaitReady(&ESP8266);
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <WiFi_Task+0x90>)
 800066a:	f005 ff31 	bl	80064d0 <ESP8266_WaitReady>

	if(ESP8266_WifiGetConnected(&ESP8266) == ESP_OK){
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <WiFi_Task+0x90>)
 8000670:	f005 ffa4 	bl	80065bc <ESP8266_WifiGetConnected>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <WiFi_Task+0x76>
		//TODO
		printf("wifi is connected....\r\n");
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <WiFi_Task+0x9c>)
 800067c:	f009 face 	bl	8009c1c <puts>
 8000680:	e004      	b.n	800068c <WiFi_Task+0x80>
	}else{
		while(1){
			osDelay(osWaitForever);
 8000682:	f04f 30ff 	mov.w	r0, #4294967295
 8000686:	f006 fb71 	bl	8006d6c <osDelay>
 800068a:	e7fa      	b.n	8000682 <WiFi_Task+0x76>
	}

  /* Infinite loop */
  for(;;)
  {
    ESP8266_Update(&ESP8266);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <WiFi_Task+0x90>)
 800068e:	f005 fc89 	bl	8005fa4 <ESP8266_Update>
    osDelay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f006 fb6a 	bl	8006d6c <osDelay>
    ESP8266_Update(&ESP8266);
 8000698:	e7f8      	b.n	800068c <WiFi_Task+0x80>
 800069a:	bf00      	nop
 800069c:	200000a0 	.word	0x200000a0
 80006a0:	0800ae18 	.word	0x0800ae18
 80006a4:	0800ae24 	.word	0x0800ae24
 80006a8:	0800ae2c 	.word	0x0800ae2c

080006ac <ESP8266_Callback_DeviceReady>:
  /* USER CODE END WiFi_Task */
}


//MODEM Callbacks
void ESP8266_Callback_DeviceReady(ESP8266_t* ESP8266) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	printf("Device is ready\r\n");
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <ESP8266_Callback_DeviceReady+0x18>)
 80006b6:	f009 fab1 	bl	8009c1c <puts>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	0800ae44 	.word	0x0800ae44

080006c8 <ESP8266_Callback_WatchdogReset>:

/* Called when watchdog reset on ESP8266 is detected */
void ESP8266_Callback_WatchdogReset(ESP8266_t* ESP8266) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	printf("Watchdog reset detected!\r\n");
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <ESP8266_Callback_WatchdogReset+0x18>)
 80006d2:	f009 faa3 	bl	8009c1c <puts>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	0800ae58 	.word	0x0800ae58

080006e4 <ESP8266_Callback_WifiDisconnected>:

/* Called when we are disconnected from WIFI */
void ESP8266_Callback_WifiDisconnected(ESP8266_t* ESP8266) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	printf( "Wifi is disconnected!\r\n");
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <ESP8266_Callback_WifiDisconnected+0x18>)
 80006ee:	f009 fa95 	bl	8009c1c <puts>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	0800ae74 	.word	0x0800ae74

08000700 <ESP8266_Callback_WifiConnected>:

void ESP8266_Callback_WifiConnected(ESP8266_t* ESP8266) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	printf( "Wifi is connected!\r\n");
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <ESP8266_Callback_WifiConnected+0x18>)
 800070a:	f009 fa87 	bl	8009c1c <puts>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	0800ae8c 	.word	0x0800ae8c

0800071c <ESP8266_Callback_WifiConnectFailed>:

void ESP8266_Callback_WifiConnectFailed(ESP8266_t* ESP8266) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]

	sprintf(writeValue, "Connection to wifi network has failed. Reason %d\r\n", ESP8266->WifiConnectError);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800072a:	461a      	mov	r2, r3
 800072c:	4905      	ldr	r1, [pc, #20]	; (8000744 <ESP8266_Callback_WifiConnectFailed+0x28>)
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <ESP8266_Callback_WifiConnectFailed+0x2c>)
 8000730:	f009 faf6 	bl	8009d20 <siprintf>
	//Envia texto via serial
	printf("%s" ,writeValue);
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <ESP8266_Callback_WifiConnectFailed+0x2c>)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <ESP8266_Callback_WifiConnectFailed+0x30>)
 8000738:	f009 f9ea 	bl	8009b10 <iprintf>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	0800aea0 	.word	0x0800aea0
 8000748:	20000298 	.word	0x20000298
 800074c:	0800aed4 	.word	0x0800aed4

08000750 <ESP8266_Callback_WifiGotIP>:

void ESP8266_Callback_WifiGotIP(ESP8266_t* ESP8266) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	printf( "Wifi got an IP address\r\n");
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <ESP8266_Callback_WifiGotIP+0x30>)
 800075a:	f009 fa5f 	bl	8009c1c <puts>

	/* Read that IP from module */
	sprintf(writeValue, "Grabbing IP status: %d\r\n", ESP8266_GetSTAIP(ESP8266));
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f005 ffa8 	bl	80066b4 <ESP8266_GetSTAIP>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <ESP8266_Callback_WifiGotIP+0x34>)
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <ESP8266_Callback_WifiGotIP+0x38>)
 800076c:	f009 fad8 	bl	8009d20 <siprintf>
	//Envia texto via serial
	printf("%s" ,writeValue);
 8000770:	4905      	ldr	r1, [pc, #20]	; (8000788 <ESP8266_Callback_WifiGotIP+0x38>)
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <ESP8266_Callback_WifiGotIP+0x3c>)
 8000774:	f009 f9cc 	bl	8009b10 <iprintf>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0800aed8 	.word	0x0800aed8
 8000784:	0800aef0 	.word	0x0800aef0
 8000788:	20000298 	.word	0x20000298
 800078c:	0800aed4 	.word	0x0800aed4

08000790 <ESP8266_Callback_WifiIPSet>:

void ESP8266_Callback_WifiIPSet(ESP8266_t* ESP8266) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af02      	add	r7, sp, #8
 8000796:	6078      	str	r0, [r7, #4]
	/* We have STA IP set (IP set by router we are connected to) */
	sprintf(writeValue, "We have valid IP address: %d.%d.%d.%d\r\n", ESP8266->STAIP[0], ESP8266->STAIP[1], ESP8266->STAIP[2], ESP8266->STAIP[3]);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80007a6:	4618      	mov	r0, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	9200      	str	r2, [sp, #0]
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	4906      	ldr	r1, [pc, #24]	; (80007d8 <ESP8266_Callback_WifiIPSet+0x48>)
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <ESP8266_Callback_WifiIPSet+0x4c>)
 80007c2:	f009 faad 	bl	8009d20 <siprintf>
	//Envia texto via serial
	printf("%s" ,writeValue);
 80007c6:	4905      	ldr	r1, [pc, #20]	; (80007dc <ESP8266_Callback_WifiIPSet+0x4c>)
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <ESP8266_Callback_WifiIPSet+0x50>)
 80007ca:	f009 f9a1 	bl	8009b10 <iprintf>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	0800af0c 	.word	0x0800af0c
 80007dc:	20000298 	.word	0x20000298
 80007e0:	0800aed4 	.word	0x0800aed4

080007e4 <ESP8266_Callback_DHCPTimeout>:

void ESP8266_Callback_DHCPTimeout(ESP8266_t* ESP8266) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	printf( "DHCP timeout!\r\n");
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <ESP8266_Callback_DHCPTimeout+0x18>)
 80007ee:	f009 fa15 	bl	8009c1c <puts>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	0800af34 	.word	0x0800af34

08000800 <ESP8266_Callback_WifiDetected>:

void ESP8266_Callback_WifiDetected(ESP8266_t* ESP8266, ESP8266_APs_t* ESP8266_AP) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	73fb      	strb	r3, [r7, #15]

	/* Print number of detected stations */
	sprintf(writeValue, "We have detected %d AP stations\r\n", ESP8266_AP->Count);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8000814:	461a      	mov	r2, r3
 8000816:	4915      	ldr	r1, [pc, #84]	; (800086c <ESP8266_Callback_WifiDetected+0x6c>)
 8000818:	4815      	ldr	r0, [pc, #84]	; (8000870 <ESP8266_Callback_WifiDetected+0x70>)
 800081a:	f009 fa81 	bl	8009d20 <siprintf>
	//Envia texto via serial
	printf("%s" ,writeValue);
 800081e:	4914      	ldr	r1, [pc, #80]	; (8000870 <ESP8266_Callback_WifiDetected+0x70>)
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <ESP8266_Callback_WifiDetected+0x74>)
 8000822:	f009 f975 	bl	8009b10 <iprintf>

	/* Print each AP */
	for (i = 0; i < ESP8266_AP->Count; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	e014      	b.n	8000856 <ESP8266_Callback_WifiDetected+0x56>
		/* Print SSID for each AP */;
		sprintf(writeValue, "%2d: %s\r\n", i, ESP8266_AP->AP[i].SSID);
 800082c:	7bf9      	ldrb	r1, [r7, #15]
 800082e:	7bfa      	ldrb	r2, [r7, #15]
 8000830:	4613      	mov	r3, r2
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	4413      	add	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	4413      	add	r3, r2
 800083c:	3301      	adds	r3, #1
 800083e:	460a      	mov	r2, r1
 8000840:	490d      	ldr	r1, [pc, #52]	; (8000878 <ESP8266_Callback_WifiDetected+0x78>)
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <ESP8266_Callback_WifiDetected+0x70>)
 8000844:	f009 fa6c 	bl	8009d20 <siprintf>
		//Envia texto via serial
		printf("%s" ,writeValue);
 8000848:	4909      	ldr	r1, [pc, #36]	; (8000870 <ESP8266_Callback_WifiDetected+0x70>)
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <ESP8266_Callback_WifiDetected+0x74>)
 800084c:	f009 f960 	bl	8009b10 <iprintf>
	for (i = 0; i < ESP8266_AP->Count; i++) {
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3e4      	bcc.n	800082c <ESP8266_Callback_WifiDetected+0x2c>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	0800af44 	.word	0x0800af44
 8000870:	20000298 	.word	0x20000298
 8000874:	0800aed4 	.word	0x0800aed4
 8000878:	0800af68 	.word	0x0800af68

0800087c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of WiFi */
  WiFiHandle = osThreadNew(WiFi_Task, NULL, &WiFi_attributes);
 8000880:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <MX_FREERTOS_Init+0x28>)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_FREERTOS_Init+0x2c>)
 8000886:	f006 f9df 	bl	8006c48 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <MX_FREERTOS_Init+0x30>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of LED */
  LEDHandle = osThreadNew(Led_Task, NULL, &LED_attributes);
 8000890:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <MX_FREERTOS_Init+0x34>)
 8000892:	2100      	movs	r1, #0
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_FREERTOS_Init+0x38>)
 8000896:	f006 f9d7 	bl	8006c48 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <MX_FREERTOS_Init+0x3c>)
 800089e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800b52c 	.word	0x0800b52c
 80008a8:	0800060d 	.word	0x0800060d
 80008ac:	200002d4 	.word	0x200002d4
 80008b0:	0800b550 	.word	0x0800b550
 80008b4:	08000a01 	.word	0x08000a01
 80008b8:	200002d8 	.word	0x200002d8

080008bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_GPIO_Init+0x5c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_GPIO_Init+0x5c>)
 80008da:	f043 0302 	orr.w	r3, r3, #2
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_GPIO_Init+0x5c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2120      	movs	r1, #32
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <MX_GPIO_Init+0x60>)
 80008f2:	f000 fe7f 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 80008f6:	2320      	movs	r3, #32
 80008f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0x60>)
 800090c:	f000 fcd6 	bl	80012bc <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f000 fb14 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f80c 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f7ff ffc6 	bl	80008bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000930:	f000 fa6a 	bl	8000e08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000934:	f006 f93e 	bl	8006bb4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000938:	f7ff ffa0 	bl	800087c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800093c:	f006 f95e 	bl	8006bfc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000940:	e7fe      	b.n	8000940 <main+0x20>
	...

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f008 fff4 	bl	8009940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xb4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xb4>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xb4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <SystemClock_Config+0xb8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <SystemClock_Config+0xb8>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <SystemClock_Config+0xb8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fe37 	bl	8001628 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009c0:	f000 f872 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f89a 	bl	8001b18 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009ea:	f000 f85d 	bl	8000aa8 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <Led_Task>:

/* USER CODE BEGIN 4 */

void Led_Task(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Led_Task */
	osDelay(15000);
 8000a08:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000a0c:	f006 f9ae 	bl	8006d6c <osDelay>
	ESP8266_StartClientConnectionTCP(&ESP8266, "MQTT", "192.168.1.38", 1883, NULL);
 8000a10:	2300      	movs	r3, #0
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	f240 735b 	movw	r3, #1883	; 0x75b
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <Led_Task+0x2c>)
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <Led_Task+0x30>)
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <Led_Task+0x34>)
 8000a1e:	f005 ff25 	bl	800686c <ESP8266_StartClientConnectionTCP>
	//ESP8266_RequestSendData(&ESP8266, Connection);
	/* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f006 f9a2 	bl	8006d6c <osDelay>
 8000a28:	e7fb      	b.n	8000a22 <Led_Task+0x22>
 8000a2a:	bf00      	nop
 8000a2c:	0800af80 	.word	0x0800af80
 8000a30:	0800af90 	.word	0x0800af90
 8000a34:	200000a0 	.word	0x200000a0

08000a38 <ESP8266_Callback_ClientConnectionConnected>:
  }
  /* USER CODE END Led_Task */
}
void ESP8266_Callback_ClientConnectionConnected(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionConnected could be implemented in the user file
    */
	printf("conexion al servidor exitosa\r\n");
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <ESP8266_Callback_ClientConnectionConnected+0x20>)
 8000a44:	f009 f8ea 	bl	8009c1c <puts>
	ESP8266_CloseAllConnections(&ESP8266);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fe20 	bl	8006690 <ESP8266_CloseAllConnections>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	0800af98 	.word	0x0800af98

08000a5c <ESP8266_Callback_ClientConnectionError>:

void ESP8266_Callback_ClientConnectionError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionError could be implemented in the user file
    */
	printf("error al tratar de conectarse al servidor\r\n");
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <ESP8266_Callback_ClientConnectionError+0x18>)
 8000a68:	f009 f8d8 	bl	8009c1c <puts>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0800afb8 	.word	0x0800afb8

08000a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8a:	f000 fa83 	bl	8000f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  ESP8266_TimeUpdate(&ESP8266, 1);
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a92:	f005 fd0b 	bl	80064ac <ESP8266_TimeUpdate>
  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	200000a0 	.word	0x200000a0

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_MspInit+0x54>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x54>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_MspInit+0x54>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_MspInit+0x54>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	210f      	movs	r1, #15
 8000af6:	f06f 0001 	mvn.w	r0, #1
 8000afa:	f000 fb23 	bl	8001144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f9c8 	bl	8001ed8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f001 f999 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	; 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f001 f995 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f001 f9cf 	bl	8001f3c <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f001 fa1f 	bl	8001ff0 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	; 0x36
 8000bc2:	f000 fadb 	bl	800117c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	; 0x36
 8000bd2:	f000 fab7 	bl	8001144 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	200002dc 	.word	0x200002dc
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000004 	.word	0x20000004

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USART1_IRQHandler+0x10>)
 8000c36:	f001 fdf3 	bl	8002820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000328 	.word	0x20000328

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f001 fa41 	bl	80020d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200002dc 	.word	0x200002dc

08000c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return 1;
 8000c5c:	2301      	movs	r3, #1
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <_kill>:

int _kill(int pid, int sig)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c72:	f008 fd1b 	bl	80096ac <__errno>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2216      	movs	r2, #22
 8000c7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <_exit>:

void _exit (int status)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ffe7 	bl	8000c68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c9a:	e7fe      	b.n	8000c9a <_exit+0x12>

08000c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
  }

  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e009      	b.n	8000cfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc7e 	bl	80005f2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbf1      	blt.n	8000ce8 <_write+0x12>
  }
  return len;
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_close>:

int _close(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d36:	605a      	str	r2, [r3, #4]
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <_isatty>:

int _isatty(int file)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f008 fc80 	bl	80096ac <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000324 	.word	0x20000324
 8000de0:	20006c20 	.word	0x20006c20

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <MX_USART1_UART_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e40:	f001 fb2a 	bl	8002498 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f7ff fe2d 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000328 	.word	0x20000328
 8000e58:	40011000 	.word	0x40011000

08000e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_UART_MspInit+0x94>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d133      	bne.n	8000ee6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_UART_MspInit+0x98>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb6:	23c0      	movs	r3, #192	; 0xc0
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_UART_MspInit+0x9c>)
 8000ed2:	f000 f9f3 	bl	80012bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	2025      	movs	r0, #37	; 0x25
 8000edc:	f000 f932 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee0:	2025      	movs	r0, #37	; 0x25
 8000ee2:	f000 f94b 	bl	800117c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ff5d 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f008 fcbb 	bl	80098a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fcf7 	bl	8000920 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000f40:	0800b6e4 	.word	0x0800b6e4
  ldr r2, =_sbss
 8000f44:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000f48:	20006c20 	.word	0x20006c20

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f8d8 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f7ff fdc4 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fd96 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	2000039c 	.word	0x2000039c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000039c 	.word	0x2000039c

08000fd4 <__NVIC_SetPriorityGrouping>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001156:	f7ff ff61 	bl	800101c <__NVIC_GetPriorityGrouping>
 800115a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f7ff ffb1 	bl	80010c8 <NVIC_EncodePriority>
 8001166:	4602      	mov	r2, r0
 8001168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff80 	bl	8001074 <__NVIC_SetPriority>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff54 	bl	8001038 <__NVIC_EnableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a6:	f7ff ff09 	bl	8000fbc <HAL_GetTick>
 80011aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d008      	beq.n	80011ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e052      	b.n	8001270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0216 	bic.w	r2, r2, #22
 80011d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <HAL_DMA_Abort+0x62>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0208 	bic.w	r2, r2, #8
 8001208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121a:	e013      	b.n	8001244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121c:	f7ff fece 	bl	8000fbc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b05      	cmp	r3, #5
 8001228:	d90c      	bls.n	8001244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2203      	movs	r2, #3
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e015      	b.n	8001270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e4      	bne.n	800121c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	223f      	movs	r2, #63	; 0x3f
 8001258:	409a      	lsls	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d004      	beq.n	8001296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00c      	b.n	80012b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2205      	movs	r2, #5
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e16b      	b.n	80015b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 815a 	bne.w	80015aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	2b02      	cmp	r3, #2
 800130c:	d130      	bne.n	8001370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80b4 	beq.w	80015aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b60      	ldr	r3, [pc, #384]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145e:	4a5b      	ldr	r2, [pc, #364]	; (80015cc <HAL_GPIO_Init+0x310>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_GPIO_Init+0x314>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d02b      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x318>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d025      	beq.n	80014de <HAL_GPIO_Init+0x222>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <HAL_GPIO_Init+0x31c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01f      	beq.n	80014da <HAL_GPIO_Init+0x21e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x320>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_GPIO_Init+0x324>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x328>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x32c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_GPIO_Init+0x330>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x20a>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e00e      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014c6:	2308      	movs	r3, #8
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	; (80015cc <HAL_GPIO_Init+0x310>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_GPIO_Init+0x334>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x334>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x334>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f ae90 	bls.w	80012d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40021400 	.word	0x40021400
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40021c00 	.word	0x40021c00
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e267      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b04      	cmp	r3, #4
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165a:	2b08      	cmp	r3, #8
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b82      	ldr	r3, [pc, #520]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b7e      	ldr	r3, [pc, #504]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e242      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x74>
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6f      	ldr	r2, [pc, #444]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6c      	ldr	r2, [pc, #432]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 80016c0:	4b69      	ldr	r3, [pc, #420]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc6c 	bl	8000fbc <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fc68 	bl	8000fbc <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e207      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fc58 	bl	8000fbc <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fc54 	bl	8000fbc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	; 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1f3      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0xe8>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d063      	beq.n	8001806 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b44      	ldr	r3, [pc, #272]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1c7      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e03a      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x244>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fc0d 	bl	8000fbc <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fc09 	bl	8000fbc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1a8      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4925      	ldr	r1, [pc, #148]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x244>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fbec 	bl	8000fbc <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fbe8 	bl	8000fbc <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e187      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fbcc 	bl	8000fbc <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff fbc8 	bl	8000fbc <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e167      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_OscConfig+0x240>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x200>
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_OscConfig+0x248>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fbb5 	bl	8000fbc <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff fbb1 	bl	8000fbc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e150      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	42470000 	.word	0x42470000
 8001870:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ea      	bne.n	8001856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8097 	beq.w	80019bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a7c      	ldr	r2, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fb71 	bl	8000fbc <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff fb6d 	bl	8000fbc <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e10c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x474>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x2ea>
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a63      	ldr	r2, [pc, #396]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a5e      	ldr	r2, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001934:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	; 0x70
 8001940:	4b55      	ldr	r3, [pc, #340]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fb32 	bl	8000fbc <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff fb2e 	bl	8000fbc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0cb      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ee      	beq.n	800195c <HAL_RCC_OscConfig+0x334>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff fb1c 	bl	8000fbc <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff fb18 	bl	8000fbc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	; 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0b5      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ee      	bne.n	8001988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b39      	ldr	r3, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a38      	ldr	r2, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a1 	beq.w	8001b08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c6:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d05c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d141      	bne.n	8001a5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff faec 	bl	8000fbc <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff fae8 	bl	8000fbc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e087      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	019b      	lsls	r3, r3, #6
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	491b      	ldr	r1, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fac1 	bl	8000fbc <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff fabd 	bl	8000fbc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e05c      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x416>
 8001a5c:	e054      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff faaa 	bl	8000fbc <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff faa6 	bl	8000fbc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e045      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x470>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x444>
 8001a8a:	e03d      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e038      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4ec>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d121      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d111      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cc      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d90c      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0b8      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b84:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	494d      	ldr	r1, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d044      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e067      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4934      	ldr	r1, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c08:	f7ff f9d8 	bl	8000fbc <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f9d4 	bl	8000fbc <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e04f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d20c      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e032      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4916      	ldr	r1, [pc, #88]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9e:	f000 f821 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe ff24 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	0800b574 	.word	0x0800b574
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce8:	b090      	sub	sp, #64	; 0x40
 8001cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cfc:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d00d      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x40>
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	f200 80a1 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x34>
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d16:	e09b      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d1c:	e09b      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d22:	e098      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d028      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	2200      	movs	r2, #0
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	627a      	str	r2, [r7, #36]	; 0x24
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d50:	fb03 f201 	mul.w	r2, r3, r1
 8001d54:	2300      	movs	r3, #0
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a43      	ldr	r2, [pc, #268]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d5e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d64:	460a      	mov	r2, r1
 8001d66:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6a:	4413      	add	r3, r2
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	2200      	movs	r2, #0
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	61fa      	str	r2, [r7, #28]
 8001d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d7e:	f7fe fa8f 	bl	80002a0 <__aeabi_uldivmod>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4613      	mov	r3, r2
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d8a:	e053      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	2200      	movs	r2, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	617a      	str	r2, [r7, #20]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d9e:	f04f 0b00 	mov.w	fp, #0
 8001da2:	4652      	mov	r2, sl
 8001da4:	465b      	mov	r3, fp
 8001da6:	f04f 0000 	mov.w	r0, #0
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	0159      	lsls	r1, r3, #5
 8001db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db4:	0150      	lsls	r0, r2, #5
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	ebb2 080a 	subs.w	r8, r2, sl
 8001dbe:	eb63 090b 	sbc.w	r9, r3, fp
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dd6:	ebb2 0408 	subs.w	r4, r2, r8
 8001dda:	eb63 0509 	sbc.w	r5, r3, r9
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	00eb      	lsls	r3, r5, #3
 8001de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dec:	00e2      	lsls	r2, r4, #3
 8001dee:	4614      	mov	r4, r2
 8001df0:	461d      	mov	r5, r3
 8001df2:	eb14 030a 	adds.w	r3, r4, sl
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	eb45 030b 	adc.w	r3, r5, fp
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	028b      	lsls	r3, r1, #10
 8001e0e:	4621      	mov	r1, r4
 8001e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e14:	4621      	mov	r1, r4
 8001e16:	028a      	lsls	r2, r1, #10
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e28:	f7fe fa3a 	bl	80002a0 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3740      	adds	r7, #64	; 0x40
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	017d7840 	.word	0x017d7840

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	0800b584 	.word	0x0800b584

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eb4:	f7ff ffdc 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	0800b584 	.word	0x0800b584

08001ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RCC_GetClockConfig+0x60>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0207 	and.w	r2, r3, #7
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e041      	b.n	8001fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f839 	bl	8001fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 f9d8 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e04e      	b.n	80020a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d022      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d01d      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d018      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <HAL_TIM_Base_Start_IT+0xcc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d013      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00e      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d004      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x80>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_TIM_Base_Start_IT+0xdc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d111      	bne.n	8002094 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b06      	cmp	r3, #6
 8002080:	d010      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002092:	e007      	b.n	80020a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800
 80020c0:	40000c00 	.word	0x40000c00
 80020c4:	40010400 	.word	0x40010400
 80020c8:	40014000 	.word	0x40014000
 80020cc:	40001800 	.word	0x40001800

080020d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d122      	bne.n	800212c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d11b      	bne.n	800212c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0202 	mvn.w	r2, #2
 80020fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8ee 	bl	80022f4 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8e0 	bl	80022e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f8f1 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b04      	cmp	r3, #4
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0204 	mvn.w	r2, #4
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8c4 	bl	80022f4 <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8b6 	bl	80022e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f8c7 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b08      	cmp	r3, #8
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b08      	cmp	r3, #8
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0208 	mvn.w	r2, #8
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2204      	movs	r2, #4
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f89a 	bl	80022f4 <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f88c 	bl	80022e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f89d 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0210 	mvn.w	r2, #16
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2208      	movs	r2, #8
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f870 	bl	80022f4 <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f862 	bl	80022e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f873 	bl	8002308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0201 	mvn.w	r2, #1
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc12 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b80      	cmp	r3, #128	; 0x80
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f902 	bl	8002484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228a:	2b40      	cmp	r3, #64	; 0x40
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f838 	bl	800231c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d10e      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0220 	mvn.w	r2, #32
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8cc 	bl	8002470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <TIM_Base_SetConfig+0x114>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d00f      	beq.n	8002370 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <TIM_Base_SetConfig+0x118>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00b      	beq.n	8002370 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3c      	ldr	r2, [pc, #240]	; (800244c <TIM_Base_SetConfig+0x11c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <TIM_Base_SetConfig+0x120>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_Base_SetConfig+0x40>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <TIM_Base_SetConfig+0x124>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d108      	bne.n	8002382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a2f      	ldr	r2, [pc, #188]	; (8002444 <TIM_Base_SetConfig+0x114>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02b      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d027      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <TIM_Base_SetConfig+0x118>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d023      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2b      	ldr	r2, [pc, #172]	; (800244c <TIM_Base_SetConfig+0x11c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <TIM_Base_SetConfig+0x120>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01b      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a29      	ldr	r2, [pc, #164]	; (8002454 <TIM_Base_SetConfig+0x124>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d017      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a28      	ldr	r2, [pc, #160]	; (8002458 <TIM_Base_SetConfig+0x128>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <TIM_Base_SetConfig+0x12c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00f      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a26      	ldr	r2, [pc, #152]	; (8002460 <TIM_Base_SetConfig+0x130>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a25      	ldr	r2, [pc, #148]	; (8002464 <TIM_Base_SetConfig+0x134>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <TIM_Base_SetConfig+0x138>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a23      	ldr	r2, [pc, #140]	; (800246c <TIM_Base_SetConfig+0x13c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <TIM_Base_SetConfig+0x114>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <TIM_Base_SetConfig+0xf8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a0c      	ldr	r2, [pc, #48]	; (8002454 <TIM_Base_SetConfig+0x124>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	615a      	str	r2, [r3, #20]
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010000 	.word	0x40010000
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40010400 	.word	0x40010400
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	40001800 	.word	0x40001800
 8002468:	40001c00 	.word	0x40001c00
 800246c:	40002000 	.word	0x40002000

08002470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e04a      	b.n	8002540 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d111      	bne.n	80024da <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fc9c 	bl	8002dfc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	; (8002548 <HAL_UART_Init+0xb0>)
 80024d0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2224      	movs	r2, #36	; 0x24
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 ff04 	bl	8003300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002516:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002526:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	08000e5d 	.word	0x08000e5d

0800254c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	460b      	mov	r3, r1
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e08c      	b.n	800268e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_UART_RegisterCallback+0x36>
 800257e:	2302      	movs	r3, #2
 8002580:	e085      	b.n	800268e <HAL_UART_RegisterCallback+0x142>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d151      	bne.n	800263a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8002596:	7afb      	ldrb	r3, [r7, #11]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d845      	bhi.n	8002628 <HAL_UART_RegisterCallback+0xdc>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <HAL_UART_RegisterCallback+0x58>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025d9 	.word	0x080025d9
 80025a8:	080025e1 	.word	0x080025e1
 80025ac:	080025e9 	.word	0x080025e9
 80025b0:	080025f1 	.word	0x080025f1
 80025b4:	080025f9 	.word	0x080025f9
 80025b8:	08002601 	.word	0x08002601
 80025bc:	08002609 	.word	0x08002609
 80025c0:	08002611 	.word	0x08002611
 80025c4:	08002629 	.word	0x08002629
 80025c8:	08002629 	.word	0x08002629
 80025cc:	08002629 	.word	0x08002629
 80025d0:	08002619 	.word	0x08002619
 80025d4:	08002621 	.word	0x08002621
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80025de:	e051      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80025e6:	e04d      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80025ee:	e049      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80025f6:	e045      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80025fe:	e041      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002606:	e03d      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800260e:	e039      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002616:	e035      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800261e:	e031      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002626:	e02d      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
        break;
 8002638:	e024      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8002646:	7afb      	ldrb	r3, [r7, #11]
 8002648:	2b0b      	cmp	r3, #11
 800264a:	d002      	beq.n	8002652 <HAL_UART_RegisterCallback+0x106>
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d004      	beq.n	800265a <HAL_UART_RegisterCallback+0x10e>
 8002650:	e007      	b.n	8002662 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002658:	e014      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002660:	e010      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	75fb      	strb	r3, [r7, #23]
        break;
 8002672:	e007      	b.n	8002684 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800268c:	7dfb      	ldrb	r3, [r7, #23]
}
 800268e:	4618      	mov	r0, r3
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop

0800269c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d17c      	bne.n	80027b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Transmit+0x2c>
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e075      	b.n	80027b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_UART_Transmit+0x3e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e06e      	b.n	80027b8 <HAL_UART_Transmit+0x11c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	; 0x21
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fc64 	bl	8000fbc <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	d108      	bne.n	800271e <HAL_UART_Transmit+0x82>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e003      	b.n	8002726 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800272e:	e02a      	b.n	8002786 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2200      	movs	r2, #0
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fb96 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e036      	b.n	80027b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	3302      	adds	r3, #2
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e007      	b.n	8002778 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3301      	adds	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1cf      	bne.n	8002730 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2200      	movs	r2, #0
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fb66 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e006      	b.n	80027b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d11d      	bne.n	8002816 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Receive_IT+0x26>
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e016      	b.n	8002818 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Receive_IT+0x38>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00f      	b.n	8002818 <HAL_UART_Receive_IT+0x58>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	461a      	mov	r2, r3
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fb9b 	bl	8002f48 <UART_Start_Receive_IT>
 8002812:	4603      	mov	r3, r0
 8002814:	e000      	b.n	8002818 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b0ba      	sub	sp, #232	; 0xe8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800285e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_UART_IRQHandler+0x66>
 8002872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fc81 	bl	8003186 <UART_Receive_IT>
      return;
 8002884:	e25b      	b.n	8002d3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80e1 	beq.w	8002a52 <HAL_UART_IRQHandler+0x232>
 8002890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800289c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80d4 	beq.w	8002a52 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_UART_IRQHandler+0xae>
 80028b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_UART_IRQHandler+0xd2>
 80028da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_UART_IRQHandler+0xf6>
 80028fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f043 0204 	orr.w	r2, r3, #4
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d011      	beq.n	8002946 <HAL_UART_IRQHandler+0x126>
 8002922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800292e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0208 	orr.w	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 81f2 	beq.w	8002d34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_UART_IRQHandler+0x14e>
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fc0c 	bl	8003186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_UART_IRQHandler+0x17a>
 8002992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d051      	beq.n	8002a3e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fb12 	bl	8002fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d142      	bne.n	8002a34 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3314      	adds	r3, #20
 80029b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3314      	adds	r3, #20
 80029d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1d9      	bne.n	80029ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d013      	beq.n	8002a2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	4a7f      	ldr	r2, [pc, #508]	; (8002c04 <HAL_UART_IRQHandler+0x3e4>)
 8002a08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fc32 	bl	8001278 <HAL_DMA_Abort_IT>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d019      	beq.n	8002a4e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a24:	4610      	mov	r0, r2
 8002a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	e011      	b.n	8002a4e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a32:	e00c      	b.n	8002a4e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	e007      	b.n	8002a4e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a4c:	e172      	b.n	8002d34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4e:	bf00      	nop
    return;
 8002a50:	e170      	b.n	8002d34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f040 814c 	bne.w	8002cf4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8145 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 813e 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	f040 80b5 	bne.w	8002c08 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8142 	beq.w	8002d38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f080 813b 	bcs.w	8002d38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ac8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad4:	f000 8088 	beq.w	8002be8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b04:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b14:	e841 2300 	strex	r3, r2, [r1]
 8002b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1d9      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3314      	adds	r3, #20
 8002b2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3314      	adds	r3, #20
 8002b44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e1      	bne.n	8002b24 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3314      	adds	r3, #20
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e3      	bne.n	8002b60 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	f023 0310 	bic.w	r3, r3, #16
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bcc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e3      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fad8 	bl	8001198 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	1a8a      	subs	r2, r1, r2
 8002bf8:	b292      	uxth	r2, r2
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c00:	e09a      	b.n	8002d38 <HAL_UART_IRQHandler+0x518>
 8002c02:	bf00      	nop
 8002c04:	0800308b 	.word	0x0800308b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 808c 	beq.w	8002d3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8087 	beq.w	8002d3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c52:	647a      	str	r2, [r7, #68]	; 0x44
 8002c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e3      	bne.n	8002c2e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	623b      	str	r3, [r7, #32]
   return(result);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e3      	bne.n	8002c66 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cd0:	61fa      	str	r2, [r7, #28]
 8002cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	e841 2300 	strex	r3, r2, [r1]
 8002cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e3      	bne.n	8002cac <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8002cec:	4611      	mov	r1, r2
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cf2:	e023      	b.n	8002d3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_UART_IRQHandler+0x4f4>
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f9d1 	bl	80030b4 <UART_Transmit_IT>
    return;
 8002d12:	e014      	b.n	8002d3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_UART_IRQHandler+0x51e>
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fa11 	bl	8003154 <UART_EndTransmit_IT>
    return;
 8002d32:	e004      	b.n	8002d3e <HAL_UART_IRQHandler+0x51e>
    return;
 8002d34:	bf00      	nop
 8002d36:	e002      	b.n	8002d3e <HAL_UART_IRQHandler+0x51e>
      return;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <HAL_UART_IRQHandler+0x51e>
      return;
 8002d3c:	bf00      	nop
  }
}
 8002d3e:	37e8      	adds	r7, #232	; 0xe8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <UART_InitCallbacksToDefault+0x4c>)
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <UART_InitCallbacksToDefault+0x50>)
 8002e0e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <UART_InitCallbacksToDefault+0x54>)
 8002e14:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <UART_InitCallbacksToDefault+0x58>)
 8002e1a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a0e      	ldr	r2, [pc, #56]	; (8002e58 <UART_InitCallbacksToDefault+0x5c>)
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <UART_InitCallbacksToDefault+0x60>)
 8002e26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <UART_InitCallbacksToDefault+0x64>)
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a0c      	ldr	r2, [pc, #48]	; (8002e64 <UART_InitCallbacksToDefault+0x68>)
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <UART_InitCallbacksToDefault+0x6c>)
 8002e38:	669a      	str	r2, [r3, #104]	; 0x68

}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	08002d59 	.word	0x08002d59
 8002e4c:	08002d45 	.word	0x08002d45
 8002e50:	08002d81 	.word	0x08002d81
 8002e54:	08002d6d 	.word	0x08002d6d
 8002e58:	08002d95 	.word	0x08002d95
 8002e5c:	08002da9 	.word	0x08002da9
 8002e60:	08002dbd 	.word	0x08002dbd
 8002e64:	08002dd1 	.word	0x08002dd1
 8002e68:	08002de5 	.word	0x08002de5

08002e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b090      	sub	sp, #64	; 0x40
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7c:	e050      	b.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d04c      	beq.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8c:	f7fe f896 	bl	8000fbc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d241      	bcs.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ebc:	637a      	str	r2, [r7, #52]	; 0x34
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e5      	bne.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef0:	623a      	str	r2, [r7, #32]
 8002ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e00f      	b.n	8002f40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d09f      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3740      	adds	r7, #64	; 0x40
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2222      	movs	r2, #34	; 0x22
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b095      	sub	sp, #84	; 0x54
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fec:	643a      	str	r2, [r7, #64]	; 0x40
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003020:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e5      	bne.n	8003000 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2b01      	cmp	r3, #1
 800303a:	d119      	bne.n	8003070 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	60bb      	str	r3, [r7, #8]
   return(result);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	647b      	str	r3, [r7, #68]	; 0x44
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305c:	61ba      	str	r2, [r7, #24]
 800305e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6979      	ldr	r1, [r7, #20]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	613b      	str	r3, [r7, #16]
   return(result);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800307e:	bf00      	nop
 8003080:	3754      	adds	r7, #84	; 0x54
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b21      	cmp	r3, #33	; 0x21
 80030c6:	d13e      	bne.n	8003146 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d0:	d114      	bne.n	80030fc <UART_Transmit_IT+0x48>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d110      	bne.n	80030fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	621a      	str	r2, [r3, #32]
 80030fa:	e008      	b.n	800310e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	1c59      	adds	r1, r3, #1
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6211      	str	r1, [r2, #32]
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4619      	mov	r1, r3
 800311c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003130:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003140:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08c      	sub	sp, #48	; 0x30
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b22      	cmp	r3, #34	; 0x22
 8003198:	f040 80ad 	bne.w	80032f6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d117      	bne.n	80031d6 <UART_Receive_IT+0x50>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
 80031d4:	e026      	b.n	8003224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e8:	d007      	beq.n	80031fa <UART_Receive_IT+0x74>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <UART_Receive_IT+0x82>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e008      	b.n	800321a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003214:	b2da      	uxtb	r2, r3
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29b      	uxth	r3, r3
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4619      	mov	r1, r3
 8003232:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003234:	2b00      	cmp	r3, #0
 8003236:	d15c      	bne.n	80032f2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0220 	bic.w	r2, r2, #32
 8003246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	2b01      	cmp	r3, #1
 8003276:	d136      	bne.n	80032e6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	613b      	str	r3, [r7, #16]
   return(result);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f023 0310 	bic.w	r3, r3, #16
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	623a      	str	r2, [r7, #32]
 80032a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	69f9      	ldr	r1, [r7, #28]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e5      	bne.n	800327e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d10a      	bne.n	80032d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80032de:	4611      	mov	r1, r2
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4798      	blx	r3
 80032e4:	e003      	b.n	80032ee <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e002      	b.n	80032f8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3730      	adds	r7, #48	; 0x30
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b0c0      	sub	sp, #256	; 0x100
 8003306:	af00      	add	r7, sp, #0
 8003308:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	ea40 0301 	orr.w	r3, r0, r1
 8003328:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	431a      	orrs	r2, r3
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003358:	f021 010c 	bic.w	r1, r1, #12
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003366:	430b      	orrs	r3, r1
 8003368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	6999      	ldr	r1, [r3, #24]
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	ea40 0301 	orr.w	r3, r0, r1
 8003386:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b8f      	ldr	r3, [pc, #572]	; (80035cc <UART_SetConfig+0x2cc>)
 8003390:	429a      	cmp	r2, r3
 8003392:	d005      	beq.n	80033a0 <UART_SetConfig+0xa0>
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <UART_SetConfig+0x2d0>)
 800339c:	429a      	cmp	r2, r3
 800339e:	d104      	bne.n	80033aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a0:	f7fe fd86 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80033a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033a8:	e003      	b.n	80033b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033aa:	f7fe fd6d 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80033ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033bc:	f040 810c 	bne.w	80035d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	1891      	adds	r1, r2, r2
 80033d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80033da:	415b      	adcs	r3, r3
 80033dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033e2:	4621      	mov	r1, r4
 80033e4:	eb12 0801 	adds.w	r8, r2, r1
 80033e8:	4629      	mov	r1, r5
 80033ea:	eb43 0901 	adc.w	r9, r3, r1
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003402:	4690      	mov	r8, r2
 8003404:	4699      	mov	r9, r3
 8003406:	4623      	mov	r3, r4
 8003408:	eb18 0303 	adds.w	r3, r8, r3
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003410:	462b      	mov	r3, r5
 8003412:	eb49 0303 	adc.w	r3, r9, r3
 8003416:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003426:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800342a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800342e:	460b      	mov	r3, r1
 8003430:	18db      	adds	r3, r3, r3
 8003432:	653b      	str	r3, [r7, #80]	; 0x50
 8003434:	4613      	mov	r3, r2
 8003436:	eb42 0303 	adc.w	r3, r2, r3
 800343a:	657b      	str	r3, [r7, #84]	; 0x54
 800343c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003440:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003444:	f7fc ff2c 	bl	80002a0 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <UART_SetConfig+0x2d4>)
 800344e:	fba3 2302 	umull	r2, r3, r3, r2
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	011c      	lsls	r4, r3, #4
 8003456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003460:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003464:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	1891      	adds	r1, r2, r2
 800346e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003470:	415b      	adcs	r3, r3
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003474:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003478:	4641      	mov	r1, r8
 800347a:	eb12 0a01 	adds.w	sl, r2, r1
 800347e:	4649      	mov	r1, r9
 8003480:	eb43 0b01 	adc.w	fp, r3, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003490:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003498:	4692      	mov	sl, r2
 800349a:	469b      	mov	fp, r3
 800349c:	4643      	mov	r3, r8
 800349e:	eb1a 0303 	adds.w	r3, sl, r3
 80034a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034a6:	464b      	mov	r3, r9
 80034a8:	eb4b 0303 	adc.w	r3, fp, r3
 80034ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034c4:	460b      	mov	r3, r1
 80034c6:	18db      	adds	r3, r3, r3
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
 80034ca:	4613      	mov	r3, r2
 80034cc:	eb42 0303 	adc.w	r3, r2, r3
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
 80034d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034da:	f7fc fee1 	bl	80002a0 <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <UART_SetConfig+0x2d4>)
 80034e6:	fba3 2301 	umull	r2, r3, r3, r1
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	2264      	movs	r2, #100	; 0x64
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	1acb      	subs	r3, r1, r3
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034fa:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <UART_SetConfig+0x2d4>)
 80034fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003508:	441c      	add	r4, r3
 800350a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003514:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003518:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800351c:	4642      	mov	r2, r8
 800351e:	464b      	mov	r3, r9
 8003520:	1891      	adds	r1, r2, r2
 8003522:	63b9      	str	r1, [r7, #56]	; 0x38
 8003524:	415b      	adcs	r3, r3
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800352c:	4641      	mov	r1, r8
 800352e:	1851      	adds	r1, r2, r1
 8003530:	6339      	str	r1, [r7, #48]	; 0x30
 8003532:	4649      	mov	r1, r9
 8003534:	414b      	adcs	r3, r1
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003544:	4659      	mov	r1, fp
 8003546:	00cb      	lsls	r3, r1, #3
 8003548:	4651      	mov	r1, sl
 800354a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800354e:	4651      	mov	r1, sl
 8003550:	00ca      	lsls	r2, r1, #3
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	4603      	mov	r3, r0
 8003558:	4642      	mov	r2, r8
 800355a:	189b      	adds	r3, r3, r2
 800355c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003560:	464b      	mov	r3, r9
 8003562:	460a      	mov	r2, r1
 8003564:	eb42 0303 	adc.w	r3, r2, r3
 8003568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003578:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800357c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003580:	460b      	mov	r3, r1
 8003582:	18db      	adds	r3, r3, r3
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
 8003586:	4613      	mov	r3, r2
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003592:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003596:	f7fc fe83 	bl	80002a0 <__aeabi_uldivmod>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <UART_SetConfig+0x2d4>)
 80035a0:	fba3 1302 	umull	r1, r3, r3, r2
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	2164      	movs	r1, #100	; 0x64
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	3332      	adds	r3, #50	; 0x32
 80035b2:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <UART_SetConfig+0x2d4>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	f003 0207 	and.w	r2, r3, #7
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4422      	add	r2, r4
 80035c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035c8:	e105      	b.n	80037d6 <UART_SetConfig+0x4d6>
 80035ca:	bf00      	nop
 80035cc:	40011000 	.word	0x40011000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ea:	4642      	mov	r2, r8
 80035ec:	464b      	mov	r3, r9
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	6239      	str	r1, [r7, #32]
 80035f2:	415b      	adcs	r3, r3
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fa:	4641      	mov	r1, r8
 80035fc:	1854      	adds	r4, r2, r1
 80035fe:	4649      	mov	r1, r9
 8003600:	eb43 0501 	adc.w	r5, r3, r1
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	00eb      	lsls	r3, r5, #3
 800360e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003612:	00e2      	lsls	r2, r4, #3
 8003614:	4614      	mov	r4, r2
 8003616:	461d      	mov	r5, r3
 8003618:	4643      	mov	r3, r8
 800361a:	18e3      	adds	r3, r4, r3
 800361c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003620:	464b      	mov	r3, r9
 8003622:	eb45 0303 	adc.w	r3, r5, r3
 8003626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003636:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003646:	4629      	mov	r1, r5
 8003648:	008b      	lsls	r3, r1, #2
 800364a:	4621      	mov	r1, r4
 800364c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003650:	4621      	mov	r1, r4
 8003652:	008a      	lsls	r2, r1, #2
 8003654:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003658:	f7fc fe22 	bl	80002a0 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4b60      	ldr	r3, [pc, #384]	; (80037e4 <UART_SetConfig+0x4e4>)
 8003662:	fba3 2302 	umull	r2, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	011c      	lsls	r4, r3, #4
 800366a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003674:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003678:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	61b9      	str	r1, [r7, #24]
 8003684:	415b      	adcs	r3, r3
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368c:	4641      	mov	r1, r8
 800368e:	1851      	adds	r1, r2, r1
 8003690:	6139      	str	r1, [r7, #16]
 8003692:	4649      	mov	r1, r9
 8003694:	414b      	adcs	r3, r1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a4:	4659      	mov	r1, fp
 80036a6:	00cb      	lsls	r3, r1, #3
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ae:	4651      	mov	r1, sl
 80036b0:	00ca      	lsls	r2, r1, #3
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	4642      	mov	r2, r8
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036c0:	464b      	mov	r3, r9
 80036c2:	460a      	mov	r2, r1
 80036c4:	eb42 0303 	adc.w	r3, r2, r3
 80036c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80036d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036e4:	4649      	mov	r1, r9
 80036e6:	008b      	lsls	r3, r1, #2
 80036e8:	4641      	mov	r1, r8
 80036ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ee:	4641      	mov	r1, r8
 80036f0:	008a      	lsls	r2, r1, #2
 80036f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036f6:	f7fc fdd3 	bl	80002a0 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <UART_SetConfig+0x4e4>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	; 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a34      	ldr	r2, [pc, #208]	; (80037e4 <UART_SetConfig+0x4e4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371e:	441c      	add	r4, r3
 8003720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003724:	2200      	movs	r2, #0
 8003726:	673b      	str	r3, [r7, #112]	; 0x70
 8003728:	677a      	str	r2, [r7, #116]	; 0x74
 800372a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800372e:	4642      	mov	r2, r8
 8003730:	464b      	mov	r3, r9
 8003732:	1891      	adds	r1, r2, r2
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	415b      	adcs	r3, r3
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800373e:	4641      	mov	r1, r8
 8003740:	1851      	adds	r1, r2, r1
 8003742:	6039      	str	r1, [r7, #0]
 8003744:	4649      	mov	r1, r9
 8003746:	414b      	adcs	r3, r1
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003756:	4659      	mov	r1, fp
 8003758:	00cb      	lsls	r3, r1, #3
 800375a:	4651      	mov	r1, sl
 800375c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003760:	4651      	mov	r1, sl
 8003762:	00ca      	lsls	r2, r1, #3
 8003764:	4610      	mov	r0, r2
 8003766:	4619      	mov	r1, r3
 8003768:	4603      	mov	r3, r0
 800376a:	4642      	mov	r2, r8
 800376c:	189b      	adds	r3, r3, r2
 800376e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003770:	464b      	mov	r3, r9
 8003772:	460a      	mov	r2, r1
 8003774:	eb42 0303 	adc.w	r3, r2, r3
 8003778:	66fb      	str	r3, [r7, #108]	; 0x6c
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	663b      	str	r3, [r7, #96]	; 0x60
 8003784:	667a      	str	r2, [r7, #100]	; 0x64
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003792:	4649      	mov	r1, r9
 8003794:	008b      	lsls	r3, r1, #2
 8003796:	4641      	mov	r1, r8
 8003798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379c:	4641      	mov	r1, r8
 800379e:	008a      	lsls	r2, r1, #2
 80037a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037a4:	f7fc fd7c 	bl	80002a0 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <UART_SetConfig+0x4e4>)
 80037ae:	fba3 1302 	umull	r1, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2164      	movs	r1, #100	; 0x64
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	3332      	adds	r3, #50	; 0x32
 80037c0:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <UART_SetConfig+0x4e4>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4422      	add	r2, r4
 80037d4:	609a      	str	r2, [r3, #8]
}
 80037d6:	bf00      	nop
 80037d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e2:	bf00      	nop
 80037e4:	51eb851f 	.word	0x51eb851f

080037e8 <BUFFER_Init>:
 * | OTHER DEALINGS IN THE SOFTWARE.
 * |----------------------------------------------------------------------
 */
#include "buffer.h"

uint8_t BUFFER_Init(BUFFER_t* Buffer, uint32_t Size, uint8_t* BufferPtr) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
	if (Buffer == NULL) {											/* Check buffer structure */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <BUFFER_Init+0x16>
		return 1;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e030      	b.n	8003860 <BUFFER_Init+0x78>
	}
	memset(Buffer, 0, sizeof(BUFFER_t));        			/* Set buffer values to all zeros */
 80037fe:	2218      	movs	r2, #24
 8003800:	2100      	movs	r1, #0
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f006 f89c 	bl	8009940 <memset>
    
	Buffer->Size = Size;                        			/* Set default values */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	601a      	str	r2, [r3, #0]
	Buffer->Buffer = BufferPtr;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
	Buffer->StringDelimiter = '\n';
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	220a      	movs	r2, #10
 8003818:	745a      	strb	r2, [r3, #17]
	
	if (!Buffer->Buffer) {                      			/* Check if malloc should be used */
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <BUFFER_Init+0x68>
		Buffer->Buffer = (uint8_t *) LIB_ALLOC_FUNC(Size * sizeof(uint8_t));    /* Try to allocate */
 8003822:	68b8      	ldr	r0, [r7, #8]
 8003824:	f006 f866 	bl	80098f4 <malloc>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	60da      	str	r2, [r3, #12]
		if (!Buffer->Buffer) {                  			/* Check if allocated */    
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <BUFFER_Init+0x5a>
			Buffer->Size = 0;                   			/* Reset size */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
			return 1;                           			/* Return error */
 800383e:	2301      	movs	r3, #1
 8003840:	e00e      	b.n	8003860 <BUFFER_Init+0x78>
		} else {
			Buffer->Flags |= BUFFER_MALLOC;     			/* Set flag for malloc */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	7c1b      	ldrb	r3, [r3, #16]
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	741a      	strb	r2, [r3, #16]
		}
	}
	Buffer->Flags |= BUFFER_INITIALIZED;					/* We are initialized */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	7c1b      	ldrb	r3, [r3, #16]
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	741a      	strb	r2, [r3, #16]
	
	return 0;												/* Initialized OK */
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <BUFFER_Write>:
	}
	Buffer->Flags = 0;
	Buffer->Size = 0;
}

uint32_t BUFFER_Write(BUFFER_t* Buffer, uint8_t* Data, uint32_t count) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
	uint32_t free;
#if BUFFER_FAST
	uint32_t tocopy;
#endif

	if (Buffer == NULL || count == 0) {						/* Check buffer structure */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <BUFFER_Write+0x1c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <BUFFER_Write+0x20>
		return 0;
 8003884:	2300      	movs	r3, #0
 8003886:	e056      	b.n	8003936 <BUFFER_Write+0xce>
	}
	if (Buffer->In >= Buffer->Size) {						/* Check input pointer */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <BUFFER_Write+0x32>
		Buffer->In = 0;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
	}
	free = BUFFER_GetFree(Buffer);							/* Get free memory */
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f917 	bl	8003ace <BUFFER_GetFree>
 80038a0:	6178      	str	r0, [r7, #20]
	if (free < count) {										/* Check available memory */	
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d206      	bcs.n	80038b8 <BUFFER_Write+0x50>
		if (free == 0) {									/* If no memory, stop execution */
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <BUFFER_Write+0x4c>
			return 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e040      	b.n	8003936 <BUFFER_Write+0xce>
		}
		count = free;										/* Set values for write */
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	607b      	str	r3, [r7, #4]
	}

	/* We have calculated memory for write */
#if BUFFER_FAST
	tocopy = Buffer->Size - Buffer->In;						/* Calculate number of elements we can put at the end of buffer */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]
	if (tocopy > count) {									/* Check for copy count */
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d901      	bls.n	80038d0 <BUFFER_Write+0x68>
		tocopy = count;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	61fb      	str	r3, [r7, #28]
	}
	memcpy(&Buffer->Buffer[Buffer->In], Data, tocopy);		/* Copy content to buffer */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f006 f820 	bl	8009924 <memcpy>
	i += tocopy;											/* Increase number of bytes we copied already */
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
	Buffer->In += tocopy;	
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
	count -= tocopy;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	607b      	str	r3, [r7, #4]
	if (count > 0) {										/* Check if anything to write */	
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <BUFFER_Write+0xb6>
		memcpy(Buffer->Buffer, &Data[i], count);			/* Copy content */
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68d8      	ldr	r0, [r3, #12]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	4413      	add	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4619      	mov	r1, r3
 8003914:	f006 f806 	bl	8009924 <memcpy>
		Buffer->In = count;									/* Set input pointer */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	605a      	str	r2, [r3, #4]
	}
	if (Buffer->In >= Buffer->Size) {						/* Check input overflow */
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d302      	bcc.n	8003930 <BUFFER_Write+0xc8>
		Buffer->In = 0;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	605a      	str	r2, [r3, #4]
	}
	return (i + count);										/* Return number of elements stored in memory */
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
			Buffer->In = 0;
		}
	}
	return i;												/* Return number of elements written */
#endif
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <BUFFER_WriteToTop>:

uint32_t BUFFER_WriteToTop(BUFFER_t* Buffer, uint8_t* Data, uint32_t count) {
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
	uint32_t free;

	if (Buffer == NULL || count == 0) {						/* Check buffer structure */
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <BUFFER_WriteToTop+0x1c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <BUFFER_WriteToTop+0x20>
		return 0;
 800395a:	2300      	movs	r3, #0
 800395c:	e048      	b.n	80039f0 <BUFFER_WriteToTop+0xb2>
	}
	if (Buffer->In >= Buffer->Size) {						/* Check input pointer */
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <BUFFER_WriteToTop+0x32>
		Buffer->In = 0;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
	}
	if (Buffer->Out >= Buffer->Size) {						/* Check output pointer */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <BUFFER_WriteToTop+0x44>
		Buffer->Out = 0;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
	}
	free = BUFFER_GetFree(Buffer);							/* Get free memory */
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f8a3 	bl	8003ace <BUFFER_GetFree>
 8003988:	6138      	str	r0, [r7, #16]
	if (free < count) {										/* Check available memory */
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	d206      	bcs.n	80039a0 <BUFFER_WriteToTop+0x62>
		if (free == 0) {									/* If no memory, stop execution */
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <BUFFER_WriteToTop+0x5e>
			return 0;
 8003998:	2300      	movs	r3, #0
 800399a:	e029      	b.n	80039f0 <BUFFER_WriteToTop+0xb2>
		}
		count = free;										/* Set values for write */
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	607b      	str	r3, [r7, #4]
	}
	Data += count - 1;										/* Start on bottom */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4413      	add	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
	while (count--) {										/* Go through all elements */
 80039aa:	e01b      	b.n	80039e4 <BUFFER_WriteToTop+0xa6>
		if (Buffer->Out == 0) {								/* Check output pointer */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <BUFFER_WriteToTop+0x82>
			Buffer->Out = Buffer->Size - 1;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1e5a      	subs	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e004      	b.n	80039ca <BUFFER_WriteToTop+0x8c>
		} else {
			Buffer->Out--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]
		}
		Buffer->Buffer[Buffer->Out] = *Data--;				/* Add to buffer */
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	60ba      	str	r2, [r7, #8]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	68d1      	ldr	r1, [r2, #12]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	6892      	ldr	r2, [r2, #8]
 80039d8:	440a      	add	r2, r1
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	7013      	strb	r3, [r2, #0]
		i++;												/* Increase pointers */
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
	while (count--) {										/* Go through all elements */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1de      	bne.n	80039ac <BUFFER_WriteToTop+0x6e>
	}
	return i;												/* Return number of elements written */
 80039ee:	697b      	ldr	r3, [r7, #20]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <BUFFER_Read>:

uint32_t BUFFER_Read(BUFFER_t* Buffer, uint8_t* Data, uint32_t count) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	uint32_t i = 0, full;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
#if BUFFER_FAST
	uint32_t tocopy;
#endif
	
	if (Buffer == NULL || count == 0) {						/* Check buffer structure */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <BUFFER_Read+0x1c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <BUFFER_Read+0x20>
		return 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e056      	b.n	8003ac6 <BUFFER_Read+0xce>
	}
	if (Buffer->Out >= Buffer->Size) {						/* Check output pointer */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <BUFFER_Read+0x32>
		Buffer->Out = 0;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
	}
	full = BUFFER_GetFull(Buffer);							/* Get free memory */
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f882 	bl	8003b34 <BUFFER_GetFull>
 8003a30:	6178      	str	r0, [r7, #20]
	if (full < count) {										/* Check available memory */
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d206      	bcs.n	8003a48 <BUFFER_Read+0x50>
		if (full == 0) {									/* If no memory, stop execution */
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <BUFFER_Read+0x4c>
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e040      	b.n	8003ac6 <BUFFER_Read+0xce>
		}
		count = full;										/* Set values for write */
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	607b      	str	r3, [r7, #4]
	}
#if BUFFER_FAST
	tocopy = Buffer->Size - Buffer->Out;					/* Calculate number of elements we can read from end of buffer */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	61fb      	str	r3, [r7, #28]
	if (tocopy > count) {									/* Check for copy count */
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d901      	bls.n	8003a60 <BUFFER_Read+0x68>
		tocopy = count;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	61fb      	str	r3, [r7, #28]
	}
	memcpy(Data, &Buffer->Buffer[Buffer->Out], tocopy);		/* Copy content from buffer */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	68b8      	ldr	r0, [r7, #8]
 8003a70:	f005 ff58 	bl	8009924 <memcpy>
	i += tocopy;											/* Increase number of bytes we copied already */
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
	Buffer->Out += tocopy;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	441a      	add	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	609a      	str	r2, [r3, #8]
	count -= tocopy;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	607b      	str	r3, [r7, #4]
	if (count > 0) {										/* Check if anything to read */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <BUFFER_Read+0xb6>
		memcpy(&Data[i], Buffer->Buffer, count);			/* Copy content */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	18d0      	adds	r0, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f005 ff3e 	bl	8009924 <memcpy>
		Buffer->Out = count;								/* Set input pointer */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	609a      	str	r2, [r3, #8]
	}
	if (Buffer->Out >= Buffer->Size) {						/* Check output overflow */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <BUFFER_Read+0xc8>
		Buffer->Out = 0;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
	}
	return (i + count);										/* Return number of elements stored in memory */
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4413      	add	r3, r2
			Buffer->Out = 0;
		}
	}
	return i;												/* Return number of elements stored in memory */
#endif
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <BUFFER_GetFree>:

uint32_t BUFFER_GetFree(BUFFER_t* Buffer) {
 8003ace:	b480      	push	{r7}
 8003ad0:	b087      	sub	sp, #28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
	uint32_t size = 0, in, out;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
	
	if (Buffer == NULL) {									/* Check buffer structure */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <BUFFER_GetFree+0x16>
		return 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e021      	b.n	8003b28 <BUFFER_GetFree+0x5a>
	}
	in = Buffer->In;										/* Save values */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
	out = Buffer->Out;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60fb      	str	r3, [r7, #12]
	if (in == out) {										/* Check if the same */
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d102      	bne.n	8003afe <BUFFER_GetFree+0x30>
		size = Buffer->Size;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	617b      	str	r3, [r7, #20]
	}	
	if (out > in) {											/* Check normal mode */
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d903      	bls.n	8003b0e <BUFFER_GetFree+0x40>
		size = out - in;
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
	}
	if (in > out) {											/* Check if overflow mode */
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d906      	bls.n	8003b24 <BUFFER_GetFree+0x56>
		size = Buffer->Size - (in - out);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1acb      	subs	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
	}
	return size - 1;										/* Return free memory */
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3b01      	subs	r3, #1
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <BUFFER_GetFull>:

uint32_t BUFFER_GetFull(BUFFER_t* Buffer) {
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	uint32_t in, out, size;
	
	if (Buffer == NULL) {									/* Check buffer structure */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <BUFFER_GetFull+0x12>
		return 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e01f      	b.n	8003b86 <BUFFER_GetFull+0x52>
	}
	in = Buffer->In;										/* Save values */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	613b      	str	r3, [r7, #16]
	out = Buffer->Out;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	60fb      	str	r3, [r7, #12]
	if (in == out) {										/* Pointer are same? */
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d101      	bne.n	8003b5e <BUFFER_GetFull+0x2a>
		size = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
	}
	if (in > out) {											/* Buffer is not in overflow mode */
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d903      	bls.n	8003b6e <BUFFER_GetFull+0x3a>
		size = in - out;
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
	}
	if (out > in) {											/* Buffer is in overflow mode */
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d906      	bls.n	8003b84 <BUFFER_GetFull+0x50>
		size = Buffer->Size - (out - in);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	6939      	ldr	r1, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1acb      	subs	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
	}
	return size;											/* Return number of elements in buffer */
 8003b84:	697b      	ldr	r3, [r7, #20]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <BUFFER_Reset>:
	in = Buffer->In;										/* Save values */
	out = Buffer->Out;
	return (Buffer->Size + in - out) % Buffer->Size;
}

void BUFFER_Reset(BUFFER_t* Buffer) {
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	if (Buffer == NULL) {									/* Check buffer structure */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <BUFFER_Reset+0x1c>
		return;
	}
	Buffer->In = 0;											/* Reset values */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	605a      	str	r2, [r3, #4]
	Buffer->Out = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e000      	b.n	8003bb0 <BUFFER_Reset+0x1e>
		return;
 8003bae:	bf00      	nop
}
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <BUFFER_FindElement>:

int32_t BUFFER_FindElement(BUFFER_t* Buffer, uint8_t Element) {
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	70fb      	strb	r3, [r7, #3]
	uint32_t Num, Out, retval = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
	
	if (Buffer == NULL) {									/* Check buffer structure */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d102      	bne.n	8003bd6 <BUFFER_FindElement+0x1c>
		return -1;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	e026      	b.n	8003c24 <BUFFER_FindElement+0x6a>
	}
	
	Num = BUFFER_GetFull(Buffer);							/* Create temporary variables */
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffac 	bl	8003b34 <BUFFER_GetFull>
 8003bdc:	6178      	str	r0, [r7, #20]
	Out = Buffer->Out;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	613b      	str	r3, [r7, #16]
	while (Num > 0) {										/* Go through input elements */
 8003be4:	e019      	b.n	8003c1a <BUFFER_FindElement+0x60>
		if (Out >= Buffer->Size) {							/* Check output overflow */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d301      	bcc.n	8003bf4 <BUFFER_FindElement+0x3a>
			Out = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
		}
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Element) {	/* Check for element */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d101      	bne.n	8003c08 <BUFFER_FindElement+0x4e>
			return retval;									/* Element found, return position in buffer */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	e00d      	b.n	8003c24 <BUFFER_FindElement+0x6a>
		}
		Out++;												/* Set new variables */
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	613b      	str	r3, [r7, #16]
		Num--;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
		retval++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
	while (Num > 0) {										/* Go through input elements */
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e2      	bne.n	8003be6 <BUFFER_FindElement+0x2c>
	}
	return -1;												/* Element is not in buffer */
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <BUFFER_Find>:

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	; 0x28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
	uint32_t Num, Out, i, retval = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
	uint8_t found = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75fb      	strb	r3, [r7, #23]

	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {	/* Check buffer structure and number of elements in buffer */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <BUFFER_Find+0x2a>
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff ff74 	bl	8003b34 <BUFFER_GetFull>
 8003c4c:	6278      	str	r0, [r7, #36]	; 0x24
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d202      	bcs.n	8003c5c <BUFFER_Find+0x30>
		return -1;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	e058      	b.n	8003d0e <BUFFER_Find+0xe2>
	}
	Out = Buffer->Out;										/* Create temporary variables */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	623b      	str	r3, [r7, #32]
	while (Num > 0) {										/* Go through input elements in buffer */
 8003c62:	e04f      	b.n	8003d04 <BUFFER_Find+0xd8>
		if (Out >= Buffer->Size) {							/* Check output overflow */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d301      	bcc.n	8003c72 <BUFFER_Find+0x46>
			Out = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
		}
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Data[0]) {	/* Check if current element in buffer matches first element in data array */
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	4413      	add	r3, r2
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d101      	bne.n	8003c88 <BUFFER_Find+0x5c>
			found = 1;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
		}
		
		Out++;												/* Set new variables */
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	623b      	str	r3, [r7, #32]
		Num--;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3b01      	subs	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
		retval++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3301      	adds	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
		if (found) {										/* We have found first element */
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d031      	beq.n	8003d04 <BUFFER_Find+0xd8>
			i = 1;											/* First character found */
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
			while (i < Size && Num > 0) {					/* Check others */	
 8003ca4:	e020      	b.n	8003ce8 <BUFFER_Find+0xbc>
				if (Out >= Buffer->Size) {					/* Check output overflow */
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a3a      	ldr	r2, [r7, #32]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d301      	bcc.n	8003cb4 <BUFFER_Find+0x88>
					Out = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]
				}
				if ((uint8_t)Buffer->Buffer[Out] != (uint8_t)Data[i]) {	/* Check if current character in buffer matches character in string */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d005      	beq.n	8003cd6 <BUFFER_Find+0xaa>
					retval += i - 1;
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	4413      	add	r3, r2
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	61bb      	str	r3, [r7, #24]
					break;
 8003cd4:	e00f      	b.n	8003cf6 <BUFFER_Find+0xca>
				}
				Out++;										/* Set new variables */
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	623b      	str	r3, [r7, #32]
				Num--;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
				i++;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
			while (i < Size && Num > 0) {					/* Check others */	
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d202      	bcs.n	8003cf6 <BUFFER_Find+0xca>
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d7      	bne.n	8003ca6 <BUFFER_Find+0x7a>
			}
			if (i == Size) {								/* We have found data sequence in buffer */
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d102      	bne.n	8003d04 <BUFFER_Find+0xd8>
				return retval - 1;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	e004      	b.n	8003d0e <BUFFER_Find+0xe2>
	while (Num > 0) {										/* Go through input elements in buffer */
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ac      	bne.n	8003c64 <BUFFER_Find+0x38>
			}
		}
	}
	return -1;												/* Data sequence is not in buffer */
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <BUFFER_WriteString>:

uint32_t BUFFER_WriteString(BUFFER_t* Buffer, char* buff) {
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
	return BUFFER_Write(Buffer, (uint8_t *)buff, strlen(buff));	/* Write string to buffer */
 8003d20:	6838      	ldr	r0, [r7, #0]
 8003d22:	f7fc fa5f 	bl	80001e4 <strlen>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fd9b 	bl	8003868 <BUFFER_Write>
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <BUFFER_ReadString>:

uint32_t BUFFER_ReadString(BUFFER_t* Buffer, char* buff, uint32_t buffsize) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
	uint32_t i = 0, freeMem, fullMem;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
	uint8_t ch;
	if (Buffer == NULL) {
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <BUFFER_ReadString+0x1a>
		return 0;											/* Check value buffer */
 8003d52:	2300      	movs	r3, #0
 8003d54:	e04e      	b.n	8003df4 <BUFFER_ReadString+0xb8>
	}
	
	freeMem = BUFFER_GetFree(Buffer);						/* Get free memory */
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff feb9 	bl	8003ace <BUFFER_GetFree>
 8003d5c:	61b8      	str	r0, [r7, #24]
	fullMem = BUFFER_GetFull(Buffer);						/* Get full memory */
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fee8 	bl	8003b34 <BUFFER_GetFull>
 8003d64:	6178      	str	r0, [r7, #20]
	if (													/* Check for any data in buffer */
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00f      	beq.n	8003d8c <BUFFER_ReadString+0x50>
		fullMem == 0 ||                                 	/* Buffer empty */
		(
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && 	/* String delimiter is not in buffer */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	7c5b      	ldrb	r3, [r3, #17]
 8003d70:	4619      	mov	r1, r3
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff ff21 	bl	8003bba <BUFFER_FindElement>
 8003d78:	4603      	mov	r3, r0
		fullMem == 0 ||                                 	/* Buffer empty */
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da1f      	bge.n	8003dbe <BUFFER_ReadString+0x82>
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && 	/* String delimiter is not in buffer */
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <BUFFER_ReadString+0x82>
			freeMem != 0 &&                                            	/* Buffer is not full */
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d218      	bcs.n	8003dbe <BUFFER_ReadString+0x82>
			fullMem < buffsize                                         	/* User buffer size is larger than number of elements in buffer */
		)
	) {
		return 0;											/* Return with no elements read */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e031      	b.n	8003df4 <BUFFER_ReadString+0xb8>
	}
	while (i < (buffsize - 1)) {							/* If available buffer size is more than 0 characters */
		BUFFER_Read(Buffer, &ch, 1);						/* We have available data */
 8003d90:	f107 0313 	add.w	r3, r7, #19
 8003d94:	2201      	movs	r2, #1
 8003d96:	4619      	mov	r1, r3
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fe2d 	bl	80039f8 <BUFFER_Read>
		buff[i] = (char)ch;									/* Save character */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	7cfa      	ldrb	r2, [r7, #19]
 8003da6:	701a      	strb	r2, [r3, #0]
		if ((char)buff[i] == (char)Buffer->StringDelimiter) {	/* Check for end of string */
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	7c5b      	ldrb	r3, [r3, #17]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d008      	beq.n	8003dca <BUFFER_ReadString+0x8e>
			break;											/* Done */
		}
		i++;												/* Increase */
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
	while (i < (buffsize - 1)) {							/* If available buffer size is more than 0 characters */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d3e3      	bcc.n	8003d90 <BUFFER_ReadString+0x54>
 8003dc8:	e000      	b.n	8003dcc <BUFFER_ReadString+0x90>
			break;											/* Done */
 8003dca:	bf00      	nop
	}
	if (i == (buffsize - 1)) {								/* Add zero to the end of string */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d105      	bne.n	8003de2 <BUFFER_ReadString+0xa6>
		buff[i] = 0;
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	e007      	b.n	8003df2 <BUFFER_ReadString+0xb6>
	} else {
		buff[++i] = 0;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
	}
	return i;												/* Return number of characters in buffer */
 8003df2:	69fb      	ldr	r3, [r7, #28]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <mem_mem>:

/******************************************/
/*           PRIVATE FUNCTIONS            */
/******************************************/
static                                                 		/* Check if needle exists in haystack memory */
void* mem_mem(void* haystack, size_t haystacksize, void* needle, size_t needlesize) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
    unsigned char* hptr = (unsigned char *)haystack;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]
    unsigned char* nptr = (unsigned char *)needle;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	617b      	str	r3, [r7, #20]
    unsigned int i;

    if (needlesize > haystacksize) {                		/* Check sizes */
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d901      	bls.n	8003e1e <mem_mem+0x22>
        return 0;                                   		/* Needle is greater than haystack = nothing in memory */
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e02b      	b.n	8003e76 <mem_mem+0x7a>
    }
    if (haystacksize == needlesize) {                		/* Check if same length */
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d109      	bne.n	8003e3a <mem_mem+0x3e>
        if (memcmp(hptr, nptr, needlesize) == 0) {
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	6979      	ldr	r1, [r7, #20]
 8003e2a:	69b8      	ldr	r0, [r7, #24]
 8003e2c:	f005 fd6a 	bl	8009904 <memcmp>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <mem_mem+0x3e>
            return hptr;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	e01d      	b.n	8003e76 <mem_mem+0x7a>
        }
    }
    haystacksize -= needlesize;                        		/* Set haystack size pointers */
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < haystacksize; i++) {            		/* Go through entire memory */
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e011      	b.n	8003e6c <mem_mem+0x70>
        if (memcmp(&hptr[i], nptr, needlesize) == 0) {      /* Check memory match */
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	6979      	ldr	r1, [r7, #20]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f005 fd56 	bl	8009904 <memcmp>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <mem_mem+0x6a>
            return &hptr[i];
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	e007      	b.n	8003e76 <mem_mem+0x7a>
    for (i = 0; i < haystacksize; i++) {            		/* Go through entire memory */
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d3e9      	bcc.n	8003e48 <mem_mem+0x4c>
        }
    }
    return 0;                                        		/* Not found */
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <Int2String>:

static                                                		/* Converts integer number to string format */
void Int2String(char* ptr, long int num) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
    sprintf(ptr, "%ld", num);
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <Int2String+0x1c>)
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f005 ff46 	bl	8009d20 <siprintf>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	0800afe4 	.word	0x0800afe4

08003ea0 <Hex2Num>:

static                                                		/* Returns number from hex value */
uint8_t Hex2Num(char a) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b2f      	cmp	r3, #47	; 0x2f
 8003eae:	d906      	bls.n	8003ebe <Hex2Num+0x1e>
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	2b39      	cmp	r3, #57	; 0x39
 8003eb4:	d803      	bhi.n	8003ebe <Hex2Num+0x1e>
        return a - '0';
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	3b30      	subs	r3, #48	; 0x30
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e014      	b.n	8003ee8 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	2b60      	cmp	r3, #96	; 0x60
 8003ec2:	d906      	bls.n	8003ed2 <Hex2Num+0x32>
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	2b66      	cmp	r3, #102	; 0x66
 8003ec8:	d803      	bhi.n	8003ed2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	3b57      	subs	r3, #87	; 0x57
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	e00a      	b.n	8003ee8 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	d906      	bls.n	8003ee6 <Hex2Num+0x46>
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	2b46      	cmp	r3, #70	; 0x46
 8003edc:	d803      	bhi.n	8003ee6 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	3b37      	subs	r3, #55	; 0x37
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	e000      	b.n	8003ee8 <Hex2Num+0x48>
    }
    
    return 0;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <ParseNumber>:

static                                                		/* Parses and returns number from string */
int32_t ParseNumber(char* ptr, uint8_t* cnt) {
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	2300      	movs	r3, #0
 8003f04:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b2d      	cmp	r3, #45	; 0x2d
 8003f10:	d119      	bne.n	8003f46 <ParseNumber+0x52>
        minus = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	607b      	str	r3, [r7, #4]
        i++;
 8003f1c:	7bbb      	ldrb	r3, [r7, #14]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003f22:	e010      	b.n	8003f46 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3b30      	subs	r3, #48	; 0x30
 8003f36:	4413      	add	r3, r2
 8003f38:	60bb      	str	r3, [r7, #8]
        ptr++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	607b      	str	r3, [r7, #4]
        i++;
 8003f40:	7bbb      	ldrb	r3, [r7, #14]
 8003f42:	3301      	adds	r3, #1
 8003f44:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b2f      	cmp	r3, #47	; 0x2f
 8003f4c:	d903      	bls.n	8003f56 <ParseNumber+0x62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b39      	cmp	r3, #57	; 0x39
 8003f54:	d9e6      	bls.n	8003f24 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <ParseNumber+0x6e>
        *cnt = i;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	7bba      	ldrb	r2, [r7, #14]
 8003f60:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <ParseNumber+0x7a>
        return 0 - sum;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	e000      	b.n	8003f70 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8003f6e:	68bb      	ldr	r3, [r7, #8]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <ParseHexNumber>:

static                                                		/* Parses and returns HEX number from string */
uint32_t ParseHexNumber(char* ptr, uint8_t* cnt) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	72fb      	strb	r3, [r7, #11]
    
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8003f8e:	e012      	b.n	8003fb6 <ParseHexNumber+0x3a>
        sum <<= 4;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff80 	bl	8003ea0 <Hex2Num>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
        ptr++;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3301      	adds	r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
        i++;
 8003fb0:	7afb      	ldrb	r3, [r7, #11]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b2f      	cmp	r3, #47	; 0x2f
 8003fbc:	d903      	bls.n	8003fc6 <ParseHexNumber+0x4a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b39      	cmp	r3, #57	; 0x39
 8003fc4:	d9e4      	bls.n	8003f90 <ParseHexNumber+0x14>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b60      	cmp	r3, #96	; 0x60
 8003fcc:	d903      	bls.n	8003fd6 <ParseHexNumber+0x5a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b66      	cmp	r3, #102	; 0x66
 8003fd4:	d9dc      	bls.n	8003f90 <ParseHexNumber+0x14>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d903      	bls.n	8003fe6 <ParseHexNumber+0x6a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b46      	cmp	r3, #70	; 0x46
 8003fe4:	d9d4      	bls.n	8003f90 <ParseHexNumber+0x14>
    }
    
    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <ParseHexNumber+0x76>
        *cnt = i;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7afa      	ldrb	r2, [r7, #11]
 8003ff0:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <ParseIP>:

static                                                		/* Parses IP string */
void ParseIP(char* ip_str, uint8_t* arr, uint8_t* cnt) {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
    char* token;
    uint8_t i = 0, x = 0, c;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	2300      	movs	r3, #0
 8004010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    char Data[16];
    
    memcpy(Data, ip_str, sizeof(Data) - 1);           		/* Make a string copy first */
 8004014:	f107 0310 	add.w	r3, r7, #16
 8004018:	220f      	movs	r2, #15
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	4618      	mov	r0, r3
 800401e:	f005 fc81 	bl	8009924 <memcpy>
    Data[sizeof(Data) - 1] = 0;    
 8004022:	2300      	movs	r3, #0
 8004024:	77fb      	strb	r3, [r7, #31]
    token = strtok(Data, ".");                        		/* Parse numbers, skip :" */
 8004026:	f107 0310 	add.w	r3, r7, #16
 800402a:	491e      	ldr	r1, [pc, #120]	; (80040a4 <ParseIP+0xa8>)
 800402c:	4618      	mov	r0, r3
 800402e:	f005 ff17 	bl	8009e60 <strtok>
 8004032:	6278      	str	r0, [r7, #36]	; 0x24
    while (token != NULL) {
 8004034:	e025      	b.n	8004082 <ParseIP+0x86>
        arr[x++] = ParseNumber(token, &c);
 8004036:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800403a:	4619      	mov	r1, r3
 800403c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800403e:	f7ff ff59 	bl	8003ef4 <ParseNumber>
 8004042:	4601      	mov	r1, r0
 8004044:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
 800404e:	461a      	mov	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4413      	add	r3, r2
 8004054:	b2ca      	uxtb	r2, r1
 8004056:	701a      	strb	r2, [r3, #0]
        i += c;
 8004058:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800405c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004060:	4413      	add	r3, r2
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (x >= 4) {
 8004066:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800406a:	2b03      	cmp	r3, #3
 800406c:	d80d      	bhi.n	800408a <ParseIP+0x8e>
            break;
        }
        i++;
 800406e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004072:	3301      	adds	r3, #1
 8004074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        token = strtok(NULL, ".");
 8004078:	490a      	ldr	r1, [pc, #40]	; (80040a4 <ParseIP+0xa8>)
 800407a:	2000      	movs	r0, #0
 800407c:	f005 fef0 	bl	8009e60 <strtok>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24
    while (token != NULL) {
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1d6      	bne.n	8004036 <ParseIP+0x3a>
 8004088:	e000      	b.n	800408c <ParseIP+0x90>
            break;
 800408a:	bf00      	nop
    }
    
    if (cnt != NULL) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <ParseIP+0x9e>
        *cnt = i;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004098:	701a      	strb	r2, [r3, #0]
    }
}
 800409a:	bf00      	nop
 800409c:	3728      	adds	r7, #40	; 0x28
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	0800afe8 	.word	0x0800afe8

080040a8 <ParseMAC>:

static                                                		/* Parses MAC string */
void ParseMAC(char* ptr, uint8_t* arr, uint8_t* cnt) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
    char* hexptr;
    uint8_t hexnum = 0, tmpcnt = 0, sum = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	74fb      	strb	r3, [r7, #19]
 80040b8:	2300      	movs	r3, #0
 80040ba:	747b      	strb	r3, [r7, #17]
 80040bc:	2300      	movs	r3, #0
 80040be:	74bb      	strb	r3, [r7, #18]
    
    hexptr = strtok(ptr, ":");                        		/* Get token */
 80040c0:	4919      	ldr	r1, [pc, #100]	; (8004128 <ParseMAC+0x80>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f005 fecc 	bl	8009e60 <strtok>
 80040c8:	6178      	str	r0, [r7, #20]
    while (hexptr != NULL) {                        		/* Do it till NULL */
 80040ca:	e01d      	b.n	8004108 <ParseMAC+0x60>
        arr[hexnum++] = ParseHexNumber(hexptr, &tmpcnt);
 80040cc:	f107 0311 	add.w	r3, r7, #17
 80040d0:	4619      	mov	r1, r3
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff ff52 	bl	8003f7c <ParseHexNumber>
 80040d8:	4601      	mov	r1, r0
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	74fa      	strb	r2, [r7, #19]
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4413      	add	r3, r2
 80040e6:	b2ca      	uxtb	r2, r1
 80040e8:	701a      	strb	r2, [r3, #0]
        sum += tmpcnt;
 80040ea:	7c7a      	ldrb	r2, [r7, #17]
 80040ec:	7cbb      	ldrb	r3, [r7, #18]
 80040ee:	4413      	add	r3, r2
 80040f0:	74bb      	strb	r3, [r7, #18]
        if (hexnum >= 6) {
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d80b      	bhi.n	8004110 <ParseMAC+0x68>
            break;
        }
        sum++;
 80040f8:	7cbb      	ldrb	r3, [r7, #18]
 80040fa:	3301      	adds	r3, #1
 80040fc:	74bb      	strb	r3, [r7, #18]
        hexptr = strtok(NULL, ":");
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <ParseMAC+0x80>)
 8004100:	2000      	movs	r0, #0
 8004102:	f005 fead 	bl	8009e60 <strtok>
 8004106:	6178      	str	r0, [r7, #20]
    while (hexptr != NULL) {                        		/* Do it till NULL */
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1de      	bne.n	80040cc <ParseMAC+0x24>
 800410e:	e000      	b.n	8004112 <ParseMAC+0x6a>
            break;
 8004110:	bf00      	nop
    }
    
    if (cnt) {
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <ParseMAC+0x76>
        *cnt = sum;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7cba      	ldrb	r2, [r7, #18]
 800411c:	701a      	strb	r2, [r3, #0]
    }
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	0800afec 	.word	0x0800afec

0800412c <ParseCWSAP>:

static                                                		/* Parses +CWSAP statement */
void ParseCWSAP(ESP8266_t* ESP8266, char* Buffer) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    char* ptr;
    uint8_t i, cnt;
    
    ptr = Buffer;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	60fb      	str	r3, [r7, #12]
    while (*ptr) {                                   		/* Find : in string */
 800413a:	e006      	b.n	800414a <ParseCWSAP+0x1e>
        if (*ptr == ':') {
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b3a      	cmp	r3, #58	; 0x3a
 8004142:	d007      	beq.n	8004154 <ParseCWSAP+0x28>
            break;
        }
        ptr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
    while (*ptr) {                                   		/* Find : in string */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f4      	bne.n	800413c <ParseCWSAP+0x10>
 8004152:	e000      	b.n	8004156 <ParseCWSAP+0x2a>
            break;
 8004154:	bf00      	nop
    }
    
    if (*ptr == 0) {                                		/* Check if exists */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 809f 	beq.w	800429e <ParseCWSAP+0x172>
        return;
    }
    ptr++;                                            		/* Go to '"' character */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
    
    /**** NEEDS IMPROVEMENT ****/
    /* If '"' character is inside SSID or password part, parser will fail */
    
    /***** SSID ****/
    ESP8266->AP.SSID[0] = 0;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
    if (*ptr == '"') {
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b22      	cmp	r3, #34	; 0x22
 8004174:	d102      	bne.n	800417c <ParseCWSAP+0x50>
        ptr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]
    }

    i = 0;                                            		/* Copy till "," which indicates end of SSID string and start of password part */
 800417c:	2300      	movs	r3, #0
 800417e:	72fb      	strb	r3, [r7, #11]
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 8004180:	e00b      	b.n	800419a <ParseCWSAP+0x6e>
        ESP8266->AP.SSID[i++] = *ptr++;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	7afa      	ldrb	r2, [r7, #11]
 800418a:	1c51      	adds	r1, r2, #1
 800418c:	72f9      	strb	r1, [r7, #11]
 800418e:	4611      	mov	r1, r2
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	440b      	add	r3, r1
 8004196:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <ParseCWSAP+0x92>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b22      	cmp	r3, #34	; 0x22
 80041a8:	d1eb      	bne.n	8004182 <ParseCWSAP+0x56>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b2c      	cmp	r3, #44	; 0x2c
 80041b2:	d1e6      	bne.n	8004182 <ParseCWSAP+0x56>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3302      	adds	r3, #2
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b22      	cmp	r3, #34	; 0x22
 80041bc:	d1e1      	bne.n	8004182 <ParseCWSAP+0x56>
    }
    ESP8266->AP.SSID[i++] = 0;
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	72fa      	strb	r2, [r7, #11]
 80041c4:	461a      	mov	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
    ptr += 3;                                        		/* Increase pointer by 3, ignore "," part */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3303      	adds	r3, #3
 80041d4:	60fb      	str	r3, [r7, #12]
    i = 0;                                            		/* Copy till ", which indicates end of password string and start of number */
 80041d6:	2300      	movs	r3, #0
 80041d8:	72fb      	strb	r3, [r7, #11]
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',')) {
 80041da:	e00b      	b.n	80041f4 <ParseCWSAP+0xc8>
        ESP8266->AP.Pass[i++] = *ptr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	60fa      	str	r2, [r7, #12]
 80041e2:	7afa      	ldrb	r2, [r7, #11]
 80041e4:	1c51      	adds	r1, r2, #1
 80041e6:	72f9      	strb	r1, [r7, #11]
 80041e8:	4611      	mov	r1, r2
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	440b      	add	r3, r1
 80041f0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',')) {
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <ParseCWSAP+0xe2>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b22      	cmp	r3, #34	; 0x22
 8004202:	d1eb      	bne.n	80041dc <ParseCWSAP+0xb0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3301      	adds	r3, #1
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b2c      	cmp	r3, #44	; 0x2c
 800420c:	d1e6      	bne.n	80041dc <ParseCWSAP+0xb0>
    }
    ESP8266->AP.Pass[i++] = 0;
 800420e:	7afb      	ldrb	r3, [r7, #11]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	72fa      	strb	r2, [r7, #11]
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    ptr += 2;                                        		/* Increase pointer by 2 */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3302      	adds	r3, #2
 8004224:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.Channel = ParseNumber(ptr, &cnt);    		/* Get channel number */
 8004226:	f107 030a 	add.w	r3, r7, #10
 800422a:	4619      	mov	r1, r3
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fe61 	bl	8003ef4 <ParseNumber>
 8004232:	4603      	mov	r3, r0
 8004234:	b2da      	uxtb	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
    ptr += cnt + 1;                                    		/* Increase pointer and comma */
 800423c:	7abb      	ldrb	r3, [r7, #10]
 800423e:	3301      	adds	r3, #1
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.Ecn = (ESP8266_Ecn_t)ParseNumber(ptr, &cnt);    /* Get ECN value */
 8004246:	f107 030a 	add.w	r3, r7, #10
 800424a:	4619      	mov	r1, r3
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fe51 	bl	8003ef4 <ParseNumber>
 8004252:	4603      	mov	r3, r0
 8004254:	b2da      	uxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    ptr += cnt + 1;                                    		/* Increase pointer and comma */
 800425c:	7abb      	ldrb	r3, [r7, #10]
 800425e:	3301      	adds	r3, #1
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.MaxConnections = ParseNumber(ptr, &cnt);    /* Get max connections value */
 8004266:	f107 030a 	add.w	r3, r7, #10
 800426a:	4619      	mov	r1, r3
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff fe41 	bl	8003ef4 <ParseNumber>
 8004272:	4603      	mov	r3, r0
 8004274:	b2da      	uxtb	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    ptr += cnt + 1;                                    		/* Increase pointer and comma */
 800427c:	7abb      	ldrb	r3, [r7, #10]
 800427e:	3301      	adds	r3, #1
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
    ESP8266->AP.Hidden = ParseNumber(ptr, &cnt);    		/* Get hidden value */
 8004286:	f107 030a 	add.w	r3, r7, #10
 800428a:	4619      	mov	r1, r3
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fe31 	bl	8003ef4 <ParseNumber>
 8004292:	4603      	mov	r3, r0
 8004294:	b2da      	uxtb	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 800429c:	e000      	b.n	80042a0 <ParseCWSAP+0x174>
        return;
 800429e:	bf00      	nop
}
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <ParseCWLAP>:

#if ESP8266_USE_APSEARCH
static
void ParseCWLAP(ESP8266_t* ESP8266, char* Buffer) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
    uint8_t pos = 7, num = 0;
 80042b2:	2307      	movs	r3, #7
 80042b4:	73fb      	strb	r3, [r7, #15]
 80042b6:	2300      	movs	r3, #0
 80042b8:	73bb      	strb	r3, [r7, #14]
    char* ptr;
    
    if (ESP8266_APs.Count >= ESP8266_MAX_CONNECTIONS) {    	/* Check if we have memory available first */
 80042ba:	4b71      	ldr	r3, [pc, #452]	; (8004480 <ParseCWLAP+0x1d8>)
 80042bc:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	f200 80d9 	bhi.w	8004478 <ParseCWLAP+0x1d0>
        return;
    }
    
    if (Buffer[pos] == '(') {                        		/* Get start pointer */
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b28      	cmp	r3, #40	; 0x28
 80042d0:	d102      	bne.n	80042d8 <ParseCWLAP+0x30>
        pos++;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	3301      	adds	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
    }
    ptr = strtok(&Buffer[pos], ",");                		/* Get token */
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	4969      	ldr	r1, [pc, #420]	; (8004484 <ParseCWLAP+0x1dc>)
 80042e0:	4618      	mov	r0, r3
 80042e2:	f005 fdbd 	bl	8009e60 <strtok>
 80042e6:	60b8      	str	r0, [r7, #8]
    while (ptr != NULL) {                            		/* Do it until token != NULL */
 80042e8:	e0b9      	b.n	800445e <ParseCWLAP+0x1b6>
        switch (num++) {                            		/* Get positions */
 80042ea:	7bbb      	ldrb	r3, [r7, #14]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	73ba      	strb	r2, [r7, #14]
 80042f0:	2b06      	cmp	r3, #6
 80042f2:	f200 80ae 	bhi.w	8004452 <ParseCWLAP+0x1aa>
 80042f6:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <ParseCWLAP+0x54>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004319 	.word	0x08004319
 8004300:	0800433f 	.word	0x0800433f
 8004304:	08004379 	.word	0x08004379
 8004308:	080043a1 	.word	0x080043a1
 800430c:	080043db 	.word	0x080043db
 8004310:	08004403 	.word	0x08004403
 8004314:	0800442b 	.word	0x0800442b
            case 0: 
                ESP8266_APs.AP[ESP8266_APs.Count].Ecn = ParseNumber(ptr, NULL);
 8004318:	2100      	movs	r1, #0
 800431a:	68b8      	ldr	r0, [r7, #8]
 800431c:	f7ff fdea 	bl	8003ef4 <ParseNumber>
 8004320:	4602      	mov	r2, r0
 8004322:	4b57      	ldr	r3, [pc, #348]	; (8004480 <ParseCWLAP+0x1d8>)
 8004324:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8004328:	4619      	mov	r1, r3
 800432a:	b2d0      	uxtb	r0, r2
 800432c:	4a54      	ldr	r2, [pc, #336]	; (8004480 <ParseCWLAP+0x1d8>)
 800432e:	460b      	mov	r3, r1
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	440b      	add	r3, r1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	4602      	mov	r2, r0
 800433a:	701a      	strb	r2, [r3, #0]
                break;
 800433c:	e08a      	b.n	8004454 <ParseCWLAP+0x1ac>
            case 1:
                ptr++;                                		/* Ignore first and last " */
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
 8004342:	60bb      	str	r3, [r7, #8]
                ptr[strlen(ptr) - 1] = 0;
 8004344:	68b8      	ldr	r0, [r7, #8]
 8004346:	f7fb ff4d 	bl	80001e4 <strlen>
 800434a:	4603      	mov	r3, r0
 800434c:	3b01      	subs	r3, #1
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
                strncpy(ESP8266_APs.AP[ESP8266_APs.Count].SSID, ptr, ESP8266_MAX_SSID_NAME);
 8004356:	4b4a      	ldr	r3, [pc, #296]	; (8004480 <ParseCWLAP+0x1d8>)
 8004358:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800435c:	461a      	mov	r2, r3
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4a46      	ldr	r2, [pc, #280]	; (8004480 <ParseCWLAP+0x1d8>)
 8004368:	4413      	add	r3, r2
 800436a:	3301      	adds	r3, #1
 800436c:	2214      	movs	r2, #20
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	4618      	mov	r0, r3
 8004372:	f005 fd4c 	bl	8009e0e <strncpy>
                break;
 8004376:	e06d      	b.n	8004454 <ParseCWLAP+0x1ac>
            case 2: 
                ESP8266_APs.AP[ESP8266_APs.Count].RSSI = ParseNumber(ptr, NULL);
 8004378:	2100      	movs	r1, #0
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f7ff fdba 	bl	8003ef4 <ParseNumber>
 8004380:	4602      	mov	r2, r0
 8004382:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <ParseCWLAP+0x1d8>)
 8004384:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8004388:	4619      	mov	r1, r3
 800438a:	b210      	sxth	r0, r2
 800438c:	4a3c      	ldr	r2, [pc, #240]	; (8004480 <ParseCWLAP+0x1d8>)
 800438e:	460b      	mov	r3, r1
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	440b      	add	r3, r1
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	3316      	adds	r3, #22
 800439a:	4602      	mov	r2, r0
 800439c:	801a      	strh	r2, [r3, #0]
                break;
 800439e:	e059      	b.n	8004454 <ParseCWLAP+0x1ac>
            case 3:
                ptr++;                                		/* Ignore first and last " */
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
                ptr[strlen(ptr) - 1] = 0;
 80043a6:	68b8      	ldr	r0, [r7, #8]
 80043a8:	f7fb ff1c 	bl	80001e4 <strlen>
 80043ac:	4603      	mov	r3, r0
 80043ae:	3b01      	subs	r3, #1
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	4413      	add	r3, r2
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
                ParseMAC(ptr, ESP8266_APs.AP[ESP8266_APs.Count].MAC, NULL);	/* Parse MAC address */
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <ParseCWLAP+0x1d8>)
 80043ba:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80043be:	461a      	mov	r2, r3
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	3318      	adds	r3, #24
 80043ca:	4a2d      	ldr	r2, [pc, #180]	; (8004480 <ParseCWLAP+0x1d8>)
 80043cc:	4413      	add	r3, r2
 80043ce:	2200      	movs	r2, #0
 80043d0:	4619      	mov	r1, r3
 80043d2:	68b8      	ldr	r0, [r7, #8]
 80043d4:	f7ff fe68 	bl	80040a8 <ParseMAC>
                break;
 80043d8:	e03c      	b.n	8004454 <ParseCWLAP+0x1ac>
            case 4: 
                ESP8266_APs.AP[ESP8266_APs.Count].Channel = ParseNumber(ptr, NULL);
 80043da:	2100      	movs	r1, #0
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	f7ff fd89 	bl	8003ef4 <ParseNumber>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b26      	ldr	r3, [pc, #152]	; (8004480 <ParseCWLAP+0x1d8>)
 80043e6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80043ea:	4619      	mov	r1, r3
 80043ec:	b2d0      	uxtb	r0, r2
 80043ee:	4a24      	ldr	r2, [pc, #144]	; (8004480 <ParseCWLAP+0x1d8>)
 80043f0:	460b      	mov	r3, r1
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	440b      	add	r3, r1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	331e      	adds	r3, #30
 80043fc:	4602      	mov	r2, r0
 80043fe:	701a      	strb	r2, [r3, #0]
                break;
 8004400:	e028      	b.n	8004454 <ParseCWLAP+0x1ac>
            case 5: 
                ESP8266_APs.AP[ESP8266_APs.Count].Offset = ParseNumber(ptr, NULL);
 8004402:	2100      	movs	r1, #0
 8004404:	68b8      	ldr	r0, [r7, #8]
 8004406:	f7ff fd75 	bl	8003ef4 <ParseNumber>
 800440a:	4602      	mov	r2, r0
 800440c:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <ParseCWLAP+0x1d8>)
 800440e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8004412:	4619      	mov	r1, r3
 8004414:	b2d0      	uxtb	r0, r2
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <ParseCWLAP+0x1d8>)
 8004418:	460b      	mov	r3, r1
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	440b      	add	r3, r1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	331f      	adds	r3, #31
 8004424:	4602      	mov	r2, r0
 8004426:	701a      	strb	r2, [r3, #0]
                break;
 8004428:	e014      	b.n	8004454 <ParseCWLAP+0x1ac>
            case 6: 
                ESP8266_APs.AP[ESP8266_APs.Count].Calibration = ParseNumber(ptr, NULL);
 800442a:	2100      	movs	r1, #0
 800442c:	68b8      	ldr	r0, [r7, #8]
 800442e:	f7ff fd61 	bl	8003ef4 <ParseNumber>
 8004432:	4602      	mov	r2, r0
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <ParseCWLAP+0x1d8>)
 8004436:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800443a:	4619      	mov	r1, r3
 800443c:	b2d0      	uxtb	r0, r2
 800443e:	4a10      	ldr	r2, [pc, #64]	; (8004480 <ParseCWLAP+0x1d8>)
 8004440:	460b      	mov	r3, r1
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	440b      	add	r3, r1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	3320      	adds	r3, #32
 800444c:	4602      	mov	r2, r0
 800444e:	701a      	strb	r2, [r3, #0]
                break;
 8004450:	e000      	b.n	8004454 <ParseCWLAP+0x1ac>
            default: break;
 8004452:	bf00      	nop
        }        
        ptr = strtok(NULL, ",");                    		/* Get new token */
 8004454:	490b      	ldr	r1, [pc, #44]	; (8004484 <ParseCWLAP+0x1dc>)
 8004456:	2000      	movs	r0, #0
 8004458:	f005 fd02 	bl	8009e60 <strtok>
 800445c:	60b8      	str	r0, [r7, #8]
    while (ptr != NULL) {                            		/* Do it until token != NULL */
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f af42 	bne.w	80042ea <ParseCWLAP+0x42>
    }
    ESP8266_APs.Count++;                            		/* Increase count */
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <ParseCWLAP+0x1d8>)
 8004468:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800446c:	3301      	adds	r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <ParseCWLAP+0x1d8>)
 8004472:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004476:	e000      	b.n	800447a <ParseCWLAP+0x1d2>
        return;
 8004478:	bf00      	nop
}
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200003a0 	.word	0x200003a0
 8004484:	0800aff0 	.word	0x0800aff0

08004488 <ParseCIPSTA>:
#endif

static
void ParseCIPSTA(ESP8266_t* ESP8266, char* Buffer) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
    uint8_t pos, s;
    uint8_t command = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	737b      	strb	r3, [r7, #13]
    
    /* Get positions */
    if (strncmp("+CIPSTA_CUR:ip", Buffer, 14) == 0) {    
 8004496:	220e      	movs	r2, #14
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	489b      	ldr	r0, [pc, #620]	; (8004708 <ParseCIPSTA+0x280>)
 800449c:	f005 fca3 	bl	8009de6 <strncmp>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <ParseCIPSTA+0x2c>
        pos = 14;
 80044a6:	230e      	movs	r3, #14
 80044a8:	73fb      	strb	r3, [r7, #15]
        s = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80044ae:	2316      	movs	r3, #22
 80044b0:	737b      	strb	r3, [r7, #13]
 80044b2:	e098      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA_CUR:netmask", Buffer, 19) == 0) {
 80044b4:	2213      	movs	r2, #19
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	4894      	ldr	r0, [pc, #592]	; (800470c <ParseCIPSTA+0x284>)
 80044ba:	f005 fc94 	bl	8009de6 <strncmp>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <ParseCIPSTA+0x4a>
        pos = 19;
 80044c4:	2313      	movs	r3, #19
 80044c6:	73fb      	strb	r3, [r7, #15]
        s = 2;
 80044c8:	2302      	movs	r3, #2
 80044ca:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80044cc:	2316      	movs	r3, #22
 80044ce:	737b      	strb	r3, [r7, #13]
 80044d0:	e089      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA_CUR:gateway", Buffer, 19) == 0) {
 80044d2:	2213      	movs	r2, #19
 80044d4:	6839      	ldr	r1, [r7, #0]
 80044d6:	488e      	ldr	r0, [pc, #568]	; (8004710 <ParseCIPSTA+0x288>)
 80044d8:	f005 fc85 	bl	8009de6 <strncmp>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <ParseCIPSTA+0x68>
        pos = 19;
 80044e2:	2313      	movs	r3, #19
 80044e4:	73fb      	strb	r3, [r7, #15]
        s = 3;
 80044e6:	2303      	movs	r3, #3
 80044e8:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 80044ea:	2316      	movs	r3, #22
 80044ec:	737b      	strb	r3, [r7, #13]
 80044ee:	e07a      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA:ip", Buffer, 10) == 0) {
 80044f0:	220a      	movs	r2, #10
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	4887      	ldr	r0, [pc, #540]	; (8004714 <ParseCIPSTA+0x28c>)
 80044f6:	f005 fc76 	bl	8009de6 <strncmp>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <ParseCIPSTA+0x86>
        pos = 10;
 8004500:	230a      	movs	r3, #10
 8004502:	73fb      	strb	r3, [r7, #15]
        s = 1;
 8004504:	2301      	movs	r3, #1
 8004506:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 8004508:	2316      	movs	r3, #22
 800450a:	737b      	strb	r3, [r7, #13]
 800450c:	e06b      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA:netmask", Buffer, 15) == 0) {
 800450e:	220f      	movs	r2, #15
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	4881      	ldr	r0, [pc, #516]	; (8004718 <ParseCIPSTA+0x290>)
 8004514:	f005 fc67 	bl	8009de6 <strncmp>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <ParseCIPSTA+0xa4>
        pos = 15;
 800451e:	230f      	movs	r3, #15
 8004520:	73fb      	strb	r3, [r7, #15]
        s = 2;
 8004522:	2302      	movs	r3, #2
 8004524:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 8004526:	2316      	movs	r3, #22
 8004528:	737b      	strb	r3, [r7, #13]
 800452a:	e05c      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPSTA:gateway", Buffer, 15) == 0) {
 800452c:	220f      	movs	r2, #15
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	487a      	ldr	r0, [pc, #488]	; (800471c <ParseCIPSTA+0x294>)
 8004532:	f005 fc58 	bl	8009de6 <strncmp>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <ParseCIPSTA+0xc2>
        pos = 15;
 800453c:	230f      	movs	r3, #15
 800453e:	73fb      	strb	r3, [r7, #15]
        s = 3;
 8004540:	2303      	movs	r3, #3
 8004542:	73bb      	strb	r3, [r7, #14]
        command = ESP8266_COMMAND_CIPSTA;
 8004544:	2316      	movs	r3, #22
 8004546:	737b      	strb	r3, [r7, #13]
 8004548:	e04d      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP_CUR:ip", Buffer, 13) == 0) {
 800454a:	220d      	movs	r2, #13
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4874      	ldr	r0, [pc, #464]	; (8004720 <ParseCIPSTA+0x298>)
 8004550:	f005 fc49 	bl	8009de6 <strncmp>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <ParseCIPSTA+0xdc>
        pos = 13;
 800455a:	230d      	movs	r3, #13
 800455c:	73fb      	strb	r3, [r7, #15]
        s = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	73bb      	strb	r3, [r7, #14]
 8004562:	e040      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP_CUR:netmask", Buffer, 18) == 0) {
 8004564:	2212      	movs	r2, #18
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	486e      	ldr	r0, [pc, #440]	; (8004724 <ParseCIPSTA+0x29c>)
 800456a:	f005 fc3c 	bl	8009de6 <strncmp>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <ParseCIPSTA+0xf6>
        pos = 18;
 8004574:	2312      	movs	r3, #18
 8004576:	73fb      	strb	r3, [r7, #15]
        s = 2;
 8004578:	2302      	movs	r3, #2
 800457a:	73bb      	strb	r3, [r7, #14]
 800457c:	e033      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP_CUR:gateway", Buffer, 18) == 0) {
 800457e:	2212      	movs	r2, #18
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	4869      	ldr	r0, [pc, #420]	; (8004728 <ParseCIPSTA+0x2a0>)
 8004584:	f005 fc2f 	bl	8009de6 <strncmp>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <ParseCIPSTA+0x110>
        pos = 18;
 800458e:	2312      	movs	r3, #18
 8004590:	73fb      	strb	r3, [r7, #15]
        s = 3;
 8004592:	2303      	movs	r3, #3
 8004594:	73bb      	strb	r3, [r7, #14]
 8004596:	e026      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP:ip", Buffer, 9) == 0) {
 8004598:	2209      	movs	r2, #9
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	4863      	ldr	r0, [pc, #396]	; (800472c <ParseCIPSTA+0x2a4>)
 800459e:	f005 fc22 	bl	8009de6 <strncmp>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <ParseCIPSTA+0x12a>
        pos = 9;
 80045a8:	2309      	movs	r3, #9
 80045aa:	73fb      	strb	r3, [r7, #15]
        s = 1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73bb      	strb	r3, [r7, #14]
 80045b0:	e019      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP:netmask", Buffer, 14) == 0) {
 80045b2:	220e      	movs	r2, #14
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	485e      	ldr	r0, [pc, #376]	; (8004730 <ParseCIPSTA+0x2a8>)
 80045b8:	f005 fc15 	bl	8009de6 <strncmp>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d104      	bne.n	80045cc <ParseCIPSTA+0x144>
        pos = 14;
 80045c2:	230e      	movs	r3, #14
 80045c4:	73fb      	strb	r3, [r7, #15]
        s = 2;
 80045c6:	2302      	movs	r3, #2
 80045c8:	73bb      	strb	r3, [r7, #14]
 80045ca:	e00c      	b.n	80045e6 <ParseCIPSTA+0x15e>
    } else if (strncmp("+CIPAP:gateway", Buffer, 14) == 0) {
 80045cc:	220e      	movs	r2, #14
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	4858      	ldr	r0, [pc, #352]	; (8004734 <ParseCIPSTA+0x2ac>)
 80045d2:	f005 fc08 	bl	8009de6 <strncmp>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 808c 	bne.w	80046f6 <ParseCIPSTA+0x26e>
        pos = 14;
 80045de:	230e      	movs	r3, #14
 80045e0:	73fb      	strb	r3, [r7, #15]
        s = 3;
 80045e2:	2303      	movs	r3, #3
 80045e4:	73bb      	strb	r3, [r7, #14]
    } else {
        return;                                        		/* This should never happen */
    }
    
    if (command == ESP8266_COMMAND_CIPSTA) {        		/* Copy content */
 80045e6:	7b7b      	ldrb	r3, [r7, #13]
 80045e8:	2b16      	cmp	r3, #22
 80045ea:	d141      	bne.n	8004670 <ParseCIPSTA+0x1e8>
        switch (s) {
 80045ec:	7bbb      	ldrb	r3, [r7, #14]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d02c      	beq.n	800464c <ParseCIPSTA+0x1c4>
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	f300 8081 	bgt.w	80046fa <ParseCIPSTA+0x272>
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d002      	beq.n	8004602 <ParseCIPSTA+0x17a>
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d012      	beq.n	8004626 <ParseCIPSTA+0x19e>
                break;
            case 3:
                ParseIP(&Buffer[pos + 2], ESP8266->STAGateway, NULL);   /* Parse gateway string */
                ESP8266->Flags.F.STAGatewayIsSet = 1;
                break;
            default: break;
 8004600:	e07b      	b.n	80046fa <ParseCIPSTA+0x272>
                ParseIP(&Buffer[pos + 2], ESP8266->STAIP, NULL);    /* Parse IP string */
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	3302      	adds	r3, #2
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	18d0      	adds	r0, r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	33f8      	adds	r3, #248	; 0xf8
 800460e:	2200      	movs	r2, #0
 8004610:	4619      	mov	r1, r3
 8004612:	f7ff fcf3 	bl	8003ffc <ParseIP>
                ESP8266->Flags.F.STAIPIsSet = 1;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 8004624:	e06c      	b.n	8004700 <ParseCIPSTA+0x278>
                ParseIP(&Buffer[pos + 2], ESP8266->STANetmask, NULL);   /* Parse netmask string */
 8004626:	7bfb      	ldrb	r3, [r7, #15]
 8004628:	3302      	adds	r3, #2
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	18d0      	adds	r0, r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004634:	2200      	movs	r2, #0
 8004636:	4619      	mov	r1, r3
 8004638:	f7ff fce0 	bl	8003ffc <ParseIP>
                ESP8266->Flags.F.STANetmaskIsSet = 1;
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8004642:	f043 0302 	orr.w	r3, r3, #2
 8004646:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 800464a:	e059      	b.n	8004700 <ParseCIPSTA+0x278>
                ParseIP(&Buffer[pos + 2], ESP8266->STAGateway, NULL);   /* Parse gateway string */
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	3302      	adds	r3, #2
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	18d0      	adds	r0, r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	33fc      	adds	r3, #252	; 0xfc
 8004658:	2200      	movs	r2, #0
 800465a:	4619      	mov	r1, r3
 800465c:	f7ff fcce 	bl	8003ffc <ParseIP>
                ESP8266->Flags.F.STAGatewayIsSet = 1;
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 800466e:	e047      	b.n	8004700 <ParseCIPSTA+0x278>
        }
    } else {
        switch (s) {
 8004670:	7bbb      	ldrb	r3, [r7, #14]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d02c      	beq.n	80046d0 <ParseCIPSTA+0x248>
 8004676:	2b03      	cmp	r3, #3
 8004678:	dc41      	bgt.n	80046fe <ParseCIPSTA+0x276>
 800467a:	2b01      	cmp	r3, #1
 800467c:	d002      	beq.n	8004684 <ParseCIPSTA+0x1fc>
 800467e:	2b02      	cmp	r3, #2
 8004680:	d013      	beq.n	80046aa <ParseCIPSTA+0x222>
                break;
            case 3:
                ParseIP(&Buffer[pos + 2], ESP8266->APGateway, NULL);    /* Parse gateway string */
                ESP8266->Flags.F.APGatewayIsSet = 1;
                break;
            default: break;
 8004682:	e03c      	b.n	80046fe <ParseCIPSTA+0x276>
                ParseIP(&Buffer[pos + 2], ESP8266->APIP, NULL);	/* Parse IP string */
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	3302      	adds	r3, #2
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	18d0      	adds	r0, r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004692:	2200      	movs	r2, #0
 8004694:	4619      	mov	r1, r3
 8004696:	f7ff fcb1 	bl	8003ffc <ParseIP>
                ESP8266->Flags.F.APIPIsSet = 1;
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80046a0:	f043 0310 	orr.w	r3, r3, #16
 80046a4:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 80046a8:	e02a      	b.n	8004700 <ParseCIPSTA+0x278>
                ParseIP(&Buffer[pos + 2], ESP8266->APNetmask, NULL);    /* Parse netmask string */
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	3302      	adds	r3, #2
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	18d0      	adds	r0, r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80046b8:	2200      	movs	r2, #0
 80046ba:	4619      	mov	r1, r3
 80046bc:	f7ff fc9e 	bl	8003ffc <ParseIP>
                ESP8266->Flags.F.APNetmaskIsSet = 1;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80046c6:	f043 0320 	orr.w	r3, r3, #32
 80046ca:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 80046ce:	e017      	b.n	8004700 <ParseCIPSTA+0x278>
                ParseIP(&Buffer[pos + 2], ESP8266->APGateway, NULL);    /* Parse gateway string */
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	3302      	adds	r3, #2
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	18d0      	adds	r0, r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80046de:	2200      	movs	r2, #0
 80046e0:	4619      	mov	r1, r3
 80046e2:	f7ff fc8b 	bl	8003ffc <ParseIP>
                ESP8266->Flags.F.APGatewayIsSet = 1;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80046ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f0:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
                break;
 80046f4:	e004      	b.n	8004700 <ParseCIPSTA+0x278>
        return;                                        		/* This should never happen */
 80046f6:	bf00      	nop
 80046f8:	e002      	b.n	8004700 <ParseCIPSTA+0x278>
            default: break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <ParseCIPSTA+0x278>
            default: break;
 80046fe:	bf00      	nop
        }        
    }
}
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	0800aff4 	.word	0x0800aff4
 800470c:	0800b004 	.word	0x0800b004
 8004710:	0800b018 	.word	0x0800b018
 8004714:	0800b02c 	.word	0x0800b02c
 8004718:	0800b038 	.word	0x0800b038
 800471c:	0800b048 	.word	0x0800b048
 8004720:	0800b058 	.word	0x0800b058
 8004724:	0800b068 	.word	0x0800b068
 8004728:	0800b07c 	.word	0x0800b07c
 800472c:	0800b090 	.word	0x0800b090
 8004730:	0800b09c 	.word	0x0800b09c
 8004734:	0800b0ac 	.word	0x0800b0ac

08004738 <ParseCWLIF>:

#if ESP8266_USE_CONNECTED_STATIONS == 1
static
void ParseCWLIF(ESP8266_t* ESP8266, char* Buffer) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
    uint8_t cnt;
    if (ESP8266->ConnectedStations.Count >= ESP8266_MAX_CONNECTEDSTATIONS) {	/* Check if memory available */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004748:	2b09      	cmp	r3, #9
 800474a:	d830      	bhi.n	80047ae <ParseCWLIF+0x76>
        return;
    }
    
    ParseIP(Buffer, ESP8266->ConnectedStations.Stations[ESP8266->ConnectedStations.Count].IP, &cnt);    /* Parse IP */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004752:	461a      	mov	r2, r3
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	3304      	adds	r3, #4
 8004766:	f107 020f 	add.w	r2, r7, #15
 800476a:	4619      	mov	r1, r3
 800476c:	6838      	ldr	r0, [r7, #0]
 800476e:	f7ff fc45 	bl	8003ffc <ParseIP>
    ParseMAC(&Buffer[cnt + 1], ESP8266->ConnectedStations.Stations[ESP8266->ConnectedStations.Count].MAC, NULL);    /* Parse MAC */
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	3301      	adds	r3, #1
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	18d0      	adds	r0, r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 8004780:	461a      	mov	r2, r3
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3308      	adds	r3, #8
 8004794:	2200      	movs	r2, #0
 8004796:	4619      	mov	r1, r3
 8004798:	f7ff fc86 	bl	80040a8 <ParseMAC>
    ESP8266->ConnectedStations.Count++;                    	/* Increase counter */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80047a2:	3301      	adds	r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 80047ac:	e000      	b.n	80047b0 <ParseCWLIF+0x78>
        return;
 80047ae:	bf00      	nop
}
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <ParseCWJAP>:
#endif

static
void ParseCWJAP(ESP8266_t* ESP8266, char* Buffer) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
    char* ptr = Buffer;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
    uint8_t i, cnt;
    
    if (!strstr(Buffer, "+CWJAP_")) {                		/* Check for existance */
 80047c6:	493b      	ldr	r1, [pc, #236]	; (80048b4 <ParseCWJAP+0xfc>)
 80047c8:	6838      	ldr	r0, [r7, #0]
 80047ca:	f005 fb33 	bl	8009e34 <strstr>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d069      	beq.n	80048a8 <ParseCWJAP+0xf0>
        return;
    }
    while (*ptr && *ptr != '"') {                    		/* Find first " character */
 80047d4:	e002      	b.n	80047dc <ParseCWJAP+0x24>
        ptr++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
    while (*ptr && *ptr != '"') {                    		/* Find first " character */
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <ParseCWJAP+0x34>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b22      	cmp	r3, #34	; 0x22
 80047ea:	d1f4      	bne.n	80047d6 <ParseCWJAP+0x1e>
    }
    if (!*ptr) {                                    		/* Check if zero detected */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d05b      	beq.n	80048ac <ParseCWJAP+0xf4>
        return;
    }
    ptr++;                                            		/* Remove first " for SSID */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
    i = 0;                                            		/* Parse SSID part */
 80047fa:	2300      	movs	r3, #0
 80047fc:	72fb      	strb	r3, [r7, #11]
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 80047fe:	e00b      	b.n	8004818 <ParseCWJAP+0x60>
        ESP8266->ConnectedWifi.SSID[i++] = *ptr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	60fa      	str	r2, [r7, #12]
 8004806:	7afa      	ldrb	r2, [r7, #11]
 8004808:	1c51      	adds	r1, r2, #1
 800480a:	72f9      	strb	r1, [r7, #11]
 800480c:	4611      	mov	r1, r2
 800480e:	781a      	ldrb	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	440b      	add	r3, r1
 8004814:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
    while (*ptr && (*ptr != '"' || *(ptr + 1) != ',' || *(ptr + 2) != '"')) {
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <ParseCWJAP+0x84>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b22      	cmp	r3, #34	; 0x22
 8004826:	d1eb      	bne.n	8004800 <ParseCWJAP+0x48>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b2c      	cmp	r3, #44	; 0x2c
 8004830:	d1e6      	bne.n	8004800 <ParseCWJAP+0x48>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3302      	adds	r3, #2
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b22      	cmp	r3, #34	; 0x22
 800483a:	d1e1      	bne.n	8004800 <ParseCWJAP+0x48>
    }
    ESP8266->ConnectedWifi.SSID[i++] = 0;
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	72fa      	strb	r2, [r7, #11]
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
    ptr += 3;                                        		/* Increase pointer by 3, ignore "," part */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3303      	adds	r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
    ParseMAC(ptr, ESP8266->ConnectedWifi.MAC, &cnt);    	/* Get MAC */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800485a:	f107 020a 	add.w	r2, r7, #10
 800485e:	4619      	mov	r1, r3
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff fc21 	bl	80040a8 <ParseMAC>
    ptr += cnt + 2;                                    		/* Increase counter by elements in MAC address and ", part */
 8004866:	7abb      	ldrb	r3, [r7, #10]
 8004868:	3302      	adds	r3, #2
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
    ESP8266->ConnectedWifi.Channel = ParseNumber(ptr, &cnt);	/* Get channel */
 8004870:	f107 030a 	add.w	r3, r7, #10
 8004874:	4619      	mov	r1, r3
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fb3c 	bl	8003ef4 <ParseNumber>
 800487c:	4603      	mov	r3, r0
 800487e:	b2da      	uxtb	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    ptr += cnt + 1;                                    		/* Increase position */
 8004886:	7abb      	ldrb	r3, [r7, #10]
 8004888:	3301      	adds	r3, #1
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
    ESP8266->ConnectedWifi.RSSI = ParseNumber(ptr, &cnt);    /* Get RSSI */
 8004890:	f107 030a 	add.w	r3, r7, #10
 8004894:	4619      	mov	r1, r3
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fb2c 	bl	8003ef4 <ParseNumber>
 800489c:	4603      	mov	r3, r0
 800489e:	b21a      	sxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
 80048a6:	e002      	b.n	80048ae <ParseCWJAP+0xf6>
        return;
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <ParseCWJAP+0xf6>
        return;
 80048ac:	bf00      	nop
}
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	0800b0bc 	.word	0x0800b0bc

080048b8 <SendCommand>:

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	460b      	mov	r3, r1
 80048c6:	72fb      	strb	r3, [r7, #11]
    ESP8266_CHECK_IDLE(ESP8266);                    		/* Check idle mode */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <SendCommand+0x2a>
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f001 fb67 	bl	8005fa4 <ESP8266_Update>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2206      	movs	r2, #6
 80048da:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 80048de:	2306      	movs	r3, #6
 80048e0:	e020      	b.n	8004924 <SendCommand+0x6c>
    
    ESP8266->ActiveCommand = Command;                		/* Save current active command */
 80048e2:	7afa      	ldrb	r2, [r7, #11]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
    ESP8266->ActiveCommandResponse = (char *)StartRespond;	/* Save current active command response */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	609a      	str	r2, [r3, #8]

    if (Command == ESP8266_COMMAND_UART) {            		/* Clear buffer */
 80048ee:	7afb      	ldrb	r3, [r7, #11]
 80048f0:	2b11      	cmp	r3, #17
 80048f2:	d102      	bne.n	80048fa <SendCommand+0x42>
        BUFFER_Reset(&USART_Buffer);                		/* Reset USART buffer */
 80048f4:	480d      	ldr	r0, [pc, #52]	; (800492c <SendCommand+0x74>)
 80048f6:	f7ff f94c 	bl	8003b92 <BUFFER_Reset>
    }
    
    if (CommandStr != NULL) {                        		/* Send command if valid pointer */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <SendCommand+0x5a>
        ESP8266_USARTSENDSTRING(CommandStr);        		/* Send command to ESP8266 device */
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fb fc6f 	bl	80001e4 <strlen>
 8004906:	4603      	mov	r3, r0
 8004908:	b29b      	uxth	r3, r3
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f002 f8dd 	bl	8006acc <ESP8266_LL_USARTSend>
    }
    ESP8266->StartTime = ESP8266->Time;                		/* Set command start time */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	60da      	str	r2, [r3, #12]
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);        		/* Return OK */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20001be4 	.word	0x20001be4

08004930 <EscapeStringAndSend>:
    *str_ptr = 0;                                    		/* Add zero to the end */
    return buff;                                    		/* Return buffer */
}

static
void EscapeStringAndSend(char* str) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    char special = '\\';
 8004938:	235c      	movs	r3, #92	; 0x5c
 800493a:	73fb      	strb	r3, [r7, #15]
    
    while (*str) {                                    		/* Go through string */
 800493c:	e018      	b.n	8004970 <EscapeStringAndSend+0x40>
        if (*str == ',' || *str == '"' || *str == '\\') {	/* Check for special character */    
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b2c      	cmp	r3, #44	; 0x2c
 8004944:	d007      	beq.n	8004956 <EscapeStringAndSend+0x26>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b22      	cmp	r3, #34	; 0x22
 800494c:	d003      	beq.n	8004956 <EscapeStringAndSend+0x26>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b5c      	cmp	r3, #92	; 0x5c
 8004954:	d105      	bne.n	8004962 <EscapeStringAndSend+0x32>
            ESP8266_USARTSENDCHAR(&special);        		/* Send special character */
 8004956:	f107 030f 	add.w	r3, r7, #15
 800495a:	2101      	movs	r1, #1
 800495c:	4618      	mov	r0, r3
 800495e:	f002 f8b5 	bl	8006acc <ESP8266_LL_USARTSend>
        }
        ESP8266_USARTSENDCHAR(str++);                		/* Send character */
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f002 f8ae 	bl	8006acc <ESP8266_LL_USARTSend>
    while (*str) {                                    		/* Go through string */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e2      	bne.n	800493e <EscapeStringAndSend+0xe>
    }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <CallConnectionCallbacks>:
    *str_ptr = 0;                                    		/* Add zero to the end */
    return buff;                                    		/* Return buffer */
}

static
void CallConnectionCallbacks(ESP8266_t* ESP8266) {
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
    uint8_t conn_number;
    
    for (conn_number = 0; conn_number < ESP8266_MAX_CONNECTIONS; conn_number++) {	/* Check if there are any pending data to be sent to connection */
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	e084      	b.n	8004a9a <CallConnectionCallbacks+0x118>
        if (ESP8266->Connection[conn_number].Flags.F.Active && ESP8266->Connection[conn_number].Flags.F.CallDataReceived) {	/* We must call function for received data */
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	3340      	adds	r3, #64	; 0x40
 800499e:	791b      	ldrb	r3, [r3, #4]
 80049a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d074      	beq.n	8004a94 <CallConnectionCallbacks+0x112>
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3340      	adds	r3, #64	; 0x40
 80049b8:	791b      	ldrb	r3, [r3, #4]
 80049ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d067      	beq.n	8004a94 <CallConnectionCallbacks+0x112>
            if (!ESP8266->Connection[conn_number].Flags.F.Client && ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE) {	/* In case we are server, we must be idle to call functions */
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	3340      	adds	r3, #64	; 0x40
 80049d2:	791b      	ldrb	r3, [r3, #4]
 80049d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <CallConnectionCallbacks+0x64>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d155      	bne.n	8004a92 <CallConnectionCallbacks+0x110>
                continue;
            }
            ESP8266->Connection[conn_number].Flags.F.CallDataReceived = 0;    /* Clear flag */
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80049f6:	7913      	ldrb	r3, [r2, #4]
 80049f8:	f36f 03c3 	bfc	r3, #3, #1
 80049fc:	7113      	strb	r3, [r2, #4]
            ESP8266->Connection[conn_number].Data[ESP8266->Connection[conn_number].DataSize] = 0;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	212c      	movs	r1, #44	; 0x2c
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3330      	adds	r3, #48	; 0x30
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	202c      	movs	r0, #44	; 0x2c
 8004a14:	fb00 f202 	mul.w	r2, r0, r2
 8004a18:	440a      	add	r2, r1
 8004a1a:	3234      	adds	r2, #52	; 0x34
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	4413      	add	r3, r2
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
            
            if (ESP8266->Connection[conn_number].Flags.F.Client) {    /* Call user function according to connection type */
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3340      	adds	r3, #64	; 0x40
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d014      	beq.n	8004a68 <CallConnectionCallbacks+0xe6>
                ESP8266_Callback_ClientConnectionDataReceived(ESP8266, &ESP8266->Connection[conn_number], ESP8266->Connection[conn_number].Data);	/* Client mode */
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	222c      	movs	r2, #44	; 0x2c
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	3318      	adds	r3, #24
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	1d19      	adds	r1, r3, #4
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	202c      	movs	r0, #44	; 0x2c
 8004a54:	fb00 f303 	mul.w	r3, r0, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3330      	adds	r3, #48	; 0x30
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 ff9f 	bl	80069a4 <ESP8266_Callback_ClientConnectionDataReceived>
 8004a66:	e015      	b.n	8004a94 <CallConnectionCallbacks+0x112>
            } else {
                ESP8266_Callback_ServerConnectionDataReceived(ESP8266, &ESP8266->Connection[conn_number], ESP8266->Connection[conn_number].Data);	/* Server mode */
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	222c      	movs	r2, #44	; 0x2c
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	3318      	adds	r3, #24
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	1d19      	adds	r1, r3, #4
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	202c      	movs	r0, #44	; 0x2c
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	3330      	adds	r3, #48	; 0x30
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 ff36 	bl	80068fc <ESP8266_Callback_ServerConnectionDataReceived>
 8004a90:	e000      	b.n	8004a94 <CallConnectionCallbacks+0x112>
                continue;
 8004a92:	bf00      	nop
    for (conn_number = 0; conn_number < ESP8266_MAX_CONNECTIONS; conn_number++) {	/* Check if there are any pending data to be sent to connection */
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	f67f af77 	bls.w	8004990 <CallConnectionCallbacks+0xe>
            }
        }
    }
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <ProcessSendData>:

static
void ProcessSendData(ESP8266_t* ESP8266) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    uint16_t len, max_buff = 2046;
 8004ab4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8004ab8:	81bb      	strh	r3, [r7, #12]
    ESP8266_Connection_t* Connection = ESP8266->LastConnection;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004ac0:	60bb      	str	r3, [r7, #8]
    
    ESP8266->Flags.F.WaitForWrapper = 0;            		/* Wrapper was found */
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8004ac8:	f36f 0300 	bfc	r3, #0, #1
 8004acc:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
    ESP8266->ActiveCommand = ESP8266_COMMAND_SENDDATA;    	/* Go to SENDDATA command as active */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	221d      	movs	r2, #29
 8004ad4:	605a      	str	r2, [r3, #4]
    
    if (ESP8266_CONNECTION_BUFFER_SIZE < 2046) {    		/* Calculate maximal buffer size */
        max_buff = ESP8266_CONNECTION_BUFFER_SIZE;    		/* Use maximal possible buffer size */
    }
    
    if (Connection->Flags.F.Client) {                		/* Get data from user */
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <ProcessSendData+0x4e>
        len = ESP8266_Callback_ClientConnectionSendData(ESP8266, Connection, Connection->Data, max_buff);   /* Get data as client */
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	89bb      	ldrh	r3, [r7, #12]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 ff34 	bl	800695c <ESP8266_Callback_ClientConnectionSendData>
 8004af4:	4603      	mov	r3, r0
 8004af6:	81fb      	strh	r3, [r7, #14]
 8004af8:	e008      	b.n	8004b0c <ProcessSendData+0x60>
    } else {
        len = ESP8266_Callback_ServerConnectionSendData(ESP8266, Connection, Connection->Data, max_buff);   /* Get data as server */
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	89bb      	ldrh	r3, [r7, #12]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f001 ff06 	bl	8006914 <ESP8266_Callback_ServerConnectionSendData>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	81fb      	strh	r3, [r7, #14]
    }
    
    if (len > max_buff) {                            		/* Check for input data */
 8004b0c:	89fa      	ldrh	r2, [r7, #14]
 8004b0e:	89bb      	ldrh	r3, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d901      	bls.n	8004b18 <ProcessSendData+0x6c>
        len = max_buff;
 8004b14:	89bb      	ldrh	r3, [r7, #12]
 8004b16:	81fb      	strh	r3, [r7, #14]
    }
    if (len > 0) {                                		    /* If data valid */
 8004b18:	89fb      	ldrh	r3, [r7, #14]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00e      	beq.n	8004b3c <ProcessSendData+0x90>
        ESP8266_LL_USARTSend((uint8_t *)Connection->Data, len); /* Send data */
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	89fa      	ldrh	r2, [r7, #14]
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 ffd0 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266->TotalBytesSent += len;            		    /* Increase number of bytes sent */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    }
    ESP8266_LL_USARTSend((uint8_t *)"\\0", 2);        		/* Send zero at the end even if data are not valid = stop sending data to module */
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4807      	ldr	r0, [pc, #28]	; (8004b5c <ProcessSendData+0xb0>)
 8004b40:	f001 ffc4 	bl	8006acc <ESP8266_LL_USARTSend>
    Connection->Flags.F.WaitingSentRespond = 1;        		/* Set flag as data sent we are now waiting for response */
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004b4a:	f043 0304 	orr.w	r3, r3, #4
 8004b4e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	0800b0c4 	.word	0x0800b0c4

08004b60 <ESP8266_SetMux>:

static
ESP8266_Result_t ESP8266_SetMux(ESP8266_t* ESP8266, uint8_t mux) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
    char m = (char) mux + '0';
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	3330      	adds	r3, #48	; 0x30
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73fb      	strb	r3, [r7, #15]
    
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <ESP8266_SetMux+0x2e>
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fa11 	bl	8005fa4 <ESP8266_Update>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2206      	movs	r2, #6
 8004b86:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004b8a:	2306      	movs	r3, #6
 8004b8c:	e030      	b.n	8004bf0 <ESP8266_SetMux+0x90>
    
    ESP8266_USARTSENDSTRING("AT+CIPMUX=");                  /* Format command and send */
 8004b8e:	210a      	movs	r1, #10
 8004b90:	4819      	ldr	r0, [pc, #100]	; (8004bf8 <ESP8266_SetMux+0x98>)
 8004b92:	f001 ff9b 	bl	8006acc <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDCHAR(&m);
 8004b96:	f107 030f 	add.w	r3, r7, #15
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 ff95 	bl	8006acc <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	4815      	ldr	r0, [pc, #84]	; (8004bfc <ESP8266_SetMux+0x9c>)
 8004ba6:	f001 ff91 	bl	8006acc <ESP8266_LL_USARTSend>
    if (SendCommand(ESP8266, ESP8266_COMMAND_CIPMUX, NULL, NULL) != ESP_OK) {   /* Send command */
 8004baa:	2300      	movs	r3, #0
 8004bac:	2200      	movs	r2, #0
 8004bae:	210b      	movs	r1, #11
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fe81 	bl	80048b8 <SendCommand>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <ESP8266_SetMux+0x64>
        return ESP8266->Result;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8004bc2:	e015      	b.n	8004bf0 <ESP8266_SetMux+0x90>
    }
    ESP8266_WaitReady(ESP8266);                             /* Wait till command end */
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f001 fc83 	bl	80064d0 <ESP8266_WaitReady>
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check last status */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <ESP8266_SetMux+0x86>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);       /* Return error */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004be2:	2301      	movs	r3, #1
 8004be4:	e004      	b.n	8004bf0 <ESP8266_SetMux+0x90>
    }
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	0800b0c8 	.word	0x0800b0c8
 8004bfc:	0800b0d4 	.word	0x0800b0d4

08004c00 <ESP8266_Setdinfo>:

static
ESP8266_Result_t ESP8266_Setdinfo(ESP8266_t* ESP8266, uint8_t info) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
    char i = (char) info + '0';
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	3330      	adds	r3, #48	; 0x30
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	73fb      	strb	r3, [r7, #15]
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <ESP8266_Setdinfo+0x2e>
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 f9c1 	bl	8005fa4 <ESP8266_Update>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2206      	movs	r2, #6
 8004c26:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	e030      	b.n	8004c90 <ESP8266_Setdinfo+0x90>
    
    ESP8266_USARTSENDSTRING("AT+CIPDINFO=");                /* Format command and send */
 8004c2e:	210c      	movs	r1, #12
 8004c30:	4819      	ldr	r0, [pc, #100]	; (8004c98 <ESP8266_Setdinfo+0x98>)
 8004c32:	f001 ff4b 	bl	8006acc <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDCHAR(&i);
 8004c36:	f107 030f 	add.w	r3, r7, #15
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 ff45 	bl	8006acc <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 8004c42:	2102      	movs	r1, #2
 8004c44:	4815      	ldr	r0, [pc, #84]	; (8004c9c <ESP8266_Setdinfo+0x9c>)
 8004c46:	f001 ff41 	bl	8006acc <ESP8266_LL_USARTSend>
    
    if (SendCommand(ESP8266, ESP8266_COMMAND_CIPDINFO, NULL, NULL) != ESP_OK) { /* Send command and wait */
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2107      	movs	r1, #7
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fe31 	bl	80048b8 <SendCommand>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <ESP8266_Setdinfo+0x64>
        return ESP8266->Result;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8004c62:	e015      	b.n	8004c90 <ESP8266_Setdinfo+0x90>
    }

    ESP8266_WaitReady(ESP8266);                             /* Wait till command end */
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fc33 	bl	80064d0 <ESP8266_WaitReady>
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check last status */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <ESP8266_Setdinfo+0x86>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);       /* Return error */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004c82:	2301      	movs	r3, #1
 8004c84:	e004      	b.n	8004c90 <ESP8266_Setdinfo+0x90>
    }
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	0800b0d8 	.word	0x0800b0d8
 8004c9c:	0800b0d4 	.word	0x0800b0d4

08004ca0 <StartClientConnection>:
    const char* name,
    const char* location,
    uint16_t port,
    uint16_t udp_local_port,
    void* user_parameters
) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	460b      	mov	r3, r1
 8004cae:	72fb      	strb	r3, [r7, #11]
    int8_t conn = -1;
 8004cb0:	23ff      	movs	r3, #255	; 0xff
 8004cb2:	75bb      	strb	r3, [r7, #22]
    uint8_t i = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]
    
    ESP8266_CHECK_IDLE(ESP8266);                    		/* Check IDLE state */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <StartClientConnection+0x32>
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f001 f96f 	bl	8005fa4 <ESP8266_Update>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2206      	movs	r2, #6
 8004cca:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004cce:	2306      	movs	r3, #6
 8004cd0:	e130      	b.n	8004f34 <StartClientConnection+0x294>
    ESP8266_CHECK_WIFICONNECTED(ESP8266);            		/* Check if connected to network */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <StartClientConnection+0x4e>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004cea:	2305      	movs	r3, #5
 8004cec:	e122      	b.n	8004f34 <StartClientConnection+0x294>
    
    if (type == ESP8266_ConnectionType_SSL) {        		/* Only 1 SSL connection can be active at a time */
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d125      	bne.n	8004d40 <StartClientConnection+0xa0>
        for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    	/* Check if any SSL connection exists and is active */
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	75fb      	strb	r3, [r7, #23]
 8004cf8:	e01f      	b.n	8004d3a <StartClientConnection+0x9a>
            if (ESP8266->Connection[i].Flags.F.Active && ESP8266->Connection[i].Type == ESP8266_ConnectionType_SSL) {
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	212c      	movs	r1, #44	; 0x2c
 8004d00:	fb01 f303 	mul.w	r3, r1, r3
 8004d04:	4413      	add	r3, r2
 8004d06:	3340      	adds	r3, #64	; 0x40
 8004d08:	791b      	ldrb	r3, [r3, #4]
 8004d0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00f      	beq.n	8004d34 <StartClientConnection+0x94>
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3324      	adds	r3, #36	; 0x24
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d105      	bne.n	8004d34 <StartClientConnection+0x94>
                ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);	/* Return error, SSL connection already exists */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0ff      	b.n	8004f34 <StartClientConnection+0x294>
        for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    	/* Check if any SSL connection exists and is active */
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	3301      	adds	r3, #1
 8004d38:	75fb      	strb	r3, [r7, #23]
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d9dc      	bls.n	8004cfa <StartClientConnection+0x5a>
            }
        }
    }
    
    for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    		/* Find available connection */
 8004d40:	2300      	movs	r3, #0
 8004d42:	75fb      	strb	r3, [r7, #23]
 8004d44:	e013      	b.n	8004d6e <StartClientConnection+0xce>
        if (!ESP8266->Connection[i].Flags.F.Active) {
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3340      	adds	r3, #64	; 0x40
 8004d54:	791b      	ldrb	r3, [r3, #4]
 8004d56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <StartClientConnection+0xc8>
            conn = i;                                		/* Save connection and start execution*/
 8004d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d64:	75bb      	strb	r3, [r7, #22]
            break;
 8004d66:	e005      	b.n	8004d74 <StartClientConnection+0xd4>
    for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {    		/* Find available connection */
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	75fb      	strb	r3, [r7, #23]
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d9e8      	bls.n	8004d46 <StartClientConnection+0xa6>
        }
    }
    if (conn != -1) {                                		/* Try to assign */
 8004d74:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	f000 80d5 	beq.w	8004f2a <StartClientConnection+0x28a>
        char tmp[6];

        conn += '0';                                		/* Go to ASCII number */
 8004d80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	3330      	adds	r3, #48	; 0x30
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	75bb      	strb	r3, [r7, #22]
        ESP8266_USARTSENDSTRING("AT+CIPSTART=");    		/* Send separate */
 8004d8e:	210c      	movs	r1, #12
 8004d90:	486a      	ldr	r0, [pc, #424]	; (8004f3c <StartClientConnection+0x29c>)
 8004d92:	f001 fe9b 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDCHAR(&conn);
 8004d96:	f107 0316 	add.w	r3, r7, #22
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fe95 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING(",\"");
 8004da2:	2102      	movs	r1, #2
 8004da4:	4866      	ldr	r0, [pc, #408]	; (8004f40 <StartClientConnection+0x2a0>)
 8004da6:	f001 fe91 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING(conn_type);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fb fa1a 	bl	80001e4 <strlen>
 8004db0:	4603      	mov	r3, r0
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f001 fe88 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING("\",\"");
 8004dbc:	2103      	movs	r1, #3
 8004dbe:	4861      	ldr	r0, [pc, #388]	; (8004f44 <StartClientConnection+0x2a4>)
 8004dc0:	f001 fe84 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING(location);
 8004dc4:	6a38      	ldr	r0, [r7, #32]
 8004dc6:	f7fb fa0d 	bl	80001e4 <strlen>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6a38      	ldr	r0, [r7, #32]
 8004dd2:	f001 fe7b 	bl	8006acc <ESP8266_LL_USARTSend>
        ESP8266_USARTSENDSTRING("\",");
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	485b      	ldr	r0, [pc, #364]	; (8004f48 <StartClientConnection+0x2a8>)
 8004dda:	f001 fe77 	bl	8006acc <ESP8266_LL_USARTSend>
        Int2String(tmp, port);                        		/* Format port */
 8004dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff f84a 	bl	8003e80 <Int2String>
        ESP8266_USARTSENDSTRING(tmp);
 8004dec:	f107 0310 	add.w	r3, r7, #16
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7fb f9f7 	bl	80001e4 <strlen>
 8004df6:	4603      	mov	r3, r0
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fe63 	bl	8006acc <ESP8266_LL_USARTSend>
        if (type == ESP8266_ConnectionType_UDP && udp_local_port > 0) {
 8004e06:	7afb      	ldrb	r3, [r7, #11]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d11a      	bne.n	8004e42 <StartClientConnection+0x1a2>
 8004e0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d017      	beq.n	8004e42 <StartClientConnection+0x1a2>
            Int2String(tmp, udp_local_port);       			/* Format local port for UDP */
 8004e12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff f830 	bl	8003e80 <Int2String>
            ESP8266_USARTSENDSTRING(",");
 8004e20:	2101      	movs	r1, #1
 8004e22:	484a      	ldr	r0, [pc, #296]	; (8004f4c <StartClientConnection+0x2ac>)
 8004e24:	f001 fe52 	bl	8006acc <ESP8266_LL_USARTSend>
            ESP8266_USARTSENDSTRING(tmp);
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb f9d9 	bl	80001e4 <strlen>
 8004e32:	4603      	mov	r3, r0
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	f107 0310 	add.w	r3, r7, #16
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fe45 	bl	8006acc <ESP8266_LL_USARTSend>
        }
        ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 8004e42:	2102      	movs	r1, #2
 8004e44:	4842      	ldr	r0, [pc, #264]	; (8004f50 <StartClientConnection+0x2b0>)
 8004e46:	f001 fe41 	bl	8006acc <ESP8266_LL_USARTSend>
        
        if (SendCommand(ESP8266, ESP8266_COMMAND_CIPSTART, NULL, NULL) != ESP_OK) {	/* Send command */
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	210a      	movs	r1, #10
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff fd31 	bl	80048b8 <SendCommand>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <StartClientConnection+0x1c4>
            return ESP8266->Result;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8004e62:	e067      	b.n	8004f34 <StartClientConnection+0x294>
        }
        
        conn -= '0';                                		/* Go back from ASCII number to real number */
 8004e64:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	3b30      	subs	r3, #48	; 0x30
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	b25b      	sxtb	r3, r3
 8004e70:	75bb      	strb	r3, [r7, #22]
        ESP8266->Connection[i].Flags.F.Active = 1;    		/* We are active */
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004e82:	7913      	ldrb	r3, [r2, #4]
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	7113      	strb	r3, [r2, #4]
        ESP8266->Connection[i].Flags.F.Client = 1;   		/* We are in client mode */
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004e9a:	7913      	ldrb	r3, [r2, #4]
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	7113      	strb	r3, [r2, #4]
        ESP8266->Connection[i].Type = type;         		/* Set connection type */
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	7afa      	ldrb	r2, [r7, #11]
 8004eb2:	701a      	strb	r2, [r3, #0]
        ESP8266->Connection[i].TotalBytesReceived = 0;
 8004eb4:	7dfb      	ldrb	r3, [r7, #23]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	332c      	adds	r3, #44	; 0x2c
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
        ESP8266->Connection[i].Number = conn;
 8004ec6:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	b2d0      	uxtb	r0, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	331c      	adds	r3, #28
 8004eda:	4602      	mov	r2, r0
 8004edc:	701a      	strb	r2, [r3, #0]
#if ESP8266_USE_SINGLE_CONNECTION_BUFFER == 1
        ESP8266->Connection[i].Data = ConnectionData;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	212c      	movs	r1, #44	; 0x2c
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	4413      	add	r3, r2
 8004eea:	3330      	adds	r3, #48	; 0x30
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <StartClientConnection+0x2b4>)
 8004eee:	601a      	str	r2, [r3, #0]
#endif
        ESP8266->StartConnectionSent = i;            		/* Save connection number we have started */
 8004ef0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
    
        ESP8266->Connection[i].Name = (char *)name;    		/* Save name */
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	212c      	movs	r1, #44	; 0x2c
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	333c      	adds	r3, #60	; 0x3c
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	601a      	str	r2, [r3, #0]
        ESP8266->Connection[i].UserParameters = user_parameters;	/* Save user parameters pointer */
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	3340      	adds	r3, #64	; 0x40
 8004f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1c:	601a      	str	r2, [r3, #0]
        
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);    		/* Return OK */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004f26:	2300      	movs	r3, #0
 8004f28:	e004      	b.n	8004f34 <StartClientConnection+0x294>
    }
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);    		/* Return error */
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8004f32:	2301      	movs	r3, #1
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	0800b0e8 	.word	0x0800b0e8
 8004f40:	0800b0f8 	.word	0x0800b0f8
 8004f44:	0800b0fc 	.word	0x0800b0fc
 8004f48:	0800b100 	.word	0x0800b100
 8004f4c:	0800aff0 	.word	0x0800aff0
 8004f50:	0800b0d4 	.word	0x0800b0d4
 8004f54:	200004f8 	.word	0x200004f8

08004f58 <ParseReceived>:

static                                                		/* Returns number of remaining (not used) characters in buffer */
uint32_t ParseReceived(ESP8266_t* ESP8266, char* Received, uint16_t bufflen, uint8_t from_usart_buffer) {
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b08d      	sub	sp, #52	; 0x34
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	460b      	mov	r3, r1
 8004f68:	80fb      	strh	r3, [r7, #6]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	717b      	strb	r3, [r7, #5]
    char* ch_ptr;
    uint8_t bytes_cnt;
    uint32_t ipd_ptr = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    ESP8266_Connection_t* Conn;
    
    ESP8266->LastReceivedTime = ESP8266->Time;        		/* Update last activity */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	615a      	str	r2, [r3, #20]
    if (bufflen == 2 && Received[0] == '\r' && Received[1] == '\n') {	/* Check for empty new line */
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d10b      	bne.n	8004f98 <ParseReceived+0x40>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b0d      	cmp	r3, #13
 8004f86:	d107      	bne.n	8004f98 <ParseReceived+0x40>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b0a      	cmp	r3, #10
 8004f90:	d102      	bne.n	8004f98 <ParseReceived+0x40>
        return 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f000 bee3 	b.w	8005d5e <ParseReceived+0xe06>
    }
    
    if (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE && from_usart_buffer) {	/* First check, if any command is active */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d054      	beq.n	800504a <ParseReceived+0xf2>
 8004fa0:	797b      	ldrb	r3, [r7, #5]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d051      	beq.n	800504a <ParseReceived+0xf2>
        if (                                        		/* Check if string does not belong to this command */
            strcmp(Received, ESP8266_RESPONSE_OK) != 0 &&
 8004fa6:	49b4      	ldr	r1, [pc, #720]	; (8005278 <ParseReceived+0x320>)
 8004fa8:	68b8      	ldr	r0, [r7, #8]
 8004faa:	f7fb f911 	bl	80001d0 <strcmp>
 8004fae:	4603      	mov	r3, r0
        if (                                        		/* Check if string does not belong to this command */
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d04a      	beq.n	800504a <ParseReceived+0xf2>
            strcmp(Received, "SEND OK\r\n") != 0 &&
 8004fb4:	49b1      	ldr	r1, [pc, #708]	; (800527c <ParseReceived+0x324>)
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f7fb f90a 	bl	80001d0 <strcmp>
 8004fbc:	4603      	mov	r3, r0
            strcmp(Received, ESP8266_RESPONSE_OK) != 0 &&
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d043      	beq.n	800504a <ParseReceived+0xf2>
            strcmp(Received, "SEND FAIL\r\n") != 0 &&
 8004fc2:	49af      	ldr	r1, [pc, #700]	; (8005280 <ParseReceived+0x328>)
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f7fb f903 	bl	80001d0 <strcmp>
 8004fca:	4603      	mov	r3, r0
            strcmp(Received, "SEND OK\r\n") != 0 &&
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d03c      	beq.n	800504a <ParseReceived+0xf2>
            strcmp(&Received[1], ",CONNECT\r\n") != 0 &&
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	49ab      	ldr	r1, [pc, #684]	; (8005284 <ParseReceived+0x32c>)
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb f8fa 	bl	80001d0 <strcmp>
 8004fdc:	4603      	mov	r3, r0
            strcmp(Received, "SEND FAIL\r\n") != 0 &&
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d033      	beq.n	800504a <ParseReceived+0xf2>
            //strcmp(&Received[1], ",CLOSED\r\n") != 0 &&
            strcmp(Received, ESP8266_RESPONSE_ERROR) != 0 &&
 8004fe2:	49a9      	ldr	r1, [pc, #676]	; (8005288 <ParseReceived+0x330>)
 8004fe4:	68b8      	ldr	r0, [r7, #8]
 8004fe6:	f7fb f8f3 	bl	80001d0 <strcmp>
 8004fea:	4603      	mov	r3, r0
            strcmp(&Received[1], ",CONNECT\r\n") != 0 &&
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02c      	beq.n	800504a <ParseReceived+0xf2>
            strcmp(Received, "ready\r\n") != 0 &&
 8004ff0:	49a6      	ldr	r1, [pc, #664]	; (800528c <ParseReceived+0x334>)
 8004ff2:	68b8      	ldr	r0, [r7, #8]
 8004ff4:	f7fb f8ec 	bl	80001d0 <strcmp>
 8004ff8:	4603      	mov	r3, r0
            strcmp(Received, ESP8266_RESPONSE_ERROR) != 0 &&
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d025      	beq.n	800504a <ParseReceived+0xf2>
            strcmp(Received, "busy p...\r\n") != 0 &&
 8004ffe:	49a4      	ldr	r1, [pc, #656]	; (8005290 <ParseReceived+0x338>)
 8005000:	68b8      	ldr	r0, [r7, #8]
 8005002:	f7fb f8e5 	bl	80001d0 <strcmp>
 8005006:	4603      	mov	r3, r0
            strcmp(Received, "ready\r\n") != 0 &&
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01e      	beq.n	800504a <ParseReceived+0xf2>
            strncmp(Received, "+IPD,", 5) != 0 &&
 800500c:	2205      	movs	r2, #5
 800500e:	49a1      	ldr	r1, [pc, #644]	; (8005294 <ParseReceived+0x33c>)
 8005010:	68b8      	ldr	r0, [r7, #8]
 8005012:	f004 fee8 	bl	8009de6 <strncmp>
 8005016:	4603      	mov	r3, r0
            strcmp(Received, "busy p...\r\n") != 0 &&
 8005018:	2b00      	cmp	r3, #0
 800501a:	d016      	beq.n	800504a <ParseReceived+0xf2>
            strncmp(Received, ESP8266->ActiveCommandResponse, strlen(ESP8266->ActiveCommandResponse)) != 0
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689c      	ldr	r4, [r3, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb f8dd 	bl	80001e4 <strlen>
 800502a:	4603      	mov	r3, r0
 800502c:	461a      	mov	r2, r3
 800502e:	4621      	mov	r1, r4
 8005030:	68b8      	ldr	r0, [r7, #8]
 8005032:	f004 fed8 	bl	8009de6 <strncmp>
 8005036:	4603      	mov	r3, r0
            strncmp(Received, "+IPD,", 5) != 0 &&
 8005038:	2b00      	cmp	r3, #0
 800503a:	d006      	beq.n	800504a <ParseReceived+0xf2>
        ) {
            BUFFER_WriteString(&TMP_Buffer, Received);    	/* Save string to temporary buffer, because we received a string which does not belong to this command */            
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4896      	ldr	r0, [pc, #600]	; (8005298 <ParseReceived+0x340>)
 8005040:	f7fe fe69 	bl	8003d16 <BUFFER_WriteString>
            return 0;                                		/* Return from function, no remaining bytes to process */
 8005044:	2300      	movs	r3, #0
 8005046:	f000 be8a 	b.w	8005d5e <ParseReceived+0xe06>
        }
    }
    
    if (strcmp(Received, "ready\r\n") == 0) {        		/* Device is ready */
 800504a:	4990      	ldr	r1, [pc, #576]	; (800528c <ParseReceived+0x334>)
 800504c:	68b8      	ldr	r0, [r7, #8]
 800504e:	f7fb f8bf 	bl	80001d0 <strcmp>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <ParseReceived+0x106>
        ESP8266_Callback_DeviceReady(ESP8266);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7fb fb27 	bl	80006ac <ESP8266_Callback_DeviceReady>
    }
    if (strcmp(Received, "wdt reset\r\n") == 0) {    		/* Device WDT reset */
 800505e:	498f      	ldr	r1, [pc, #572]	; (800529c <ParseReceived+0x344>)
 8005060:	68b8      	ldr	r0, [r7, #8]
 8005062:	f7fb f8b5 	bl	80001d0 <strcmp>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <ParseReceived+0x11a>
        ESP8266_Callback_WatchdogReset(ESP8266);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7fb fb2b 	bl	80006c8 <ESP8266_Callback_WatchdogReset>
    }
    
    CallConnectionCallbacks(ESP8266);                		/* Call user callback functions for connections */
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fc85 	bl	8004982 <CallConnectionCallbacks>
    
    if (strcmp(Received, "WIFI CONNECTED\r\n") == 0) {    	/* We are connected to Wi-Fi */
 8005078:	4989      	ldr	r1, [pc, #548]	; (80052a0 <ParseReceived+0x348>)
 800507a:	68b8      	ldr	r0, [r7, #8]
 800507c:	f7fb f8a8 	bl	80001d0 <strcmp>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <ParseReceived+0x144>
        ESP8266->Flags.F.WifiConnected = 1;            		/* Set flag */
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266_Callback_WifiConnected(ESP8266);    		/* Call user callback function */
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7fb fb33 	bl	8000700 <ESP8266_Callback_WifiConnected>
 800509a:	e080      	b.n	800519e <ParseReceived+0x246>
    } else if (strcmp(Received, "WIFI DISCONNECT\r\n") == 0) {
 800509c:	4981      	ldr	r1, [pc, #516]	; (80052a4 <ParseReceived+0x34c>)
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7fb f896 	bl	80001d0 <strcmp>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d15d      	bne.n	8005166 <ParseReceived+0x20e>
        ESP8266->Flags.F.WifiConnected = 0;            		/* Clear flags */
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80050b0:	f36f 0382 	bfc	r3, #2, #1
 80050b4:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266->Flags.F.WifiGotIP = 0;
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80050be:	f36f 03c3 	bfc	r3, #3, #1
 80050c2:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        memset((uint8_t *)&ESP8266->ConnectedWifi, 0, sizeof(ESP8266->ConnectedWifi));	/* Reset connected wifi structure */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80050cc:	221a      	movs	r2, #26
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 fc35 	bl	8009940 <memset>
        ESP8266_RESET_CONNECTIONS(ESP8266);            		/* Reset all connections */
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e038      	b.n	8005156 <ParseReceived+0x1fe>
 80050e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	212c      	movs	r1, #44	; 0x2c
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80050f6:	7913      	ldrb	r3, [r2, #4]
 80050f8:	f36f 0300 	bfc	r3, #0, #1
 80050fc:	7113      	strb	r3, [r2, #4]
 80050fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	212c      	movs	r1, #44	; 0x2c
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	4413      	add	r3, r2
 800510c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005110:	7913      	ldrb	r3, [r2, #4]
 8005112:	f36f 0341 	bfc	r3, #1, #1
 8005116:	7113      	strb	r3, [r2, #4]
 8005118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	212c      	movs	r1, #44	; 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800512a:	7913      	ldrb	r3, [r2, #4]
 800512c:	f36f 1386 	bfc	r3, #6, #1
 8005130:	7113      	strb	r3, [r2, #4]
 8005132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	212c      	movs	r1, #44	; 0x2c
 800513a:	fb01 f303 	mul.w	r3, r1, r3
 800513e:	4413      	add	r3, r2
 8005140:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005144:	7913      	ldrb	r3, [r2, #4]
 8005146:	f36f 1345 	bfc	r3, #5, #1
 800514a:	7113      	strb	r3, [r2, #4]
 800514c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005150:	3301      	adds	r3, #1
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800515a:	2b04      	cmp	r3, #4
 800515c:	d9c2      	bls.n	80050e4 <ParseReceived+0x18c>
        ESP8266_Callback_WifiDisconnected(ESP8266);    		/* Call user callback function */
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7fb fac0 	bl	80006e4 <ESP8266_Callback_WifiDisconnected>
 8005164:	e01b      	b.n	800519e <ParseReceived+0x246>
    } else if (strcmp(Received, "WIFI GOT IP\r\n") == 0) {
 8005166:	4950      	ldr	r1, [pc, #320]	; (80052a8 <ParseReceived+0x350>)
 8005168:	68b8      	ldr	r0, [r7, #8]
 800516a:	f7fb f831 	bl	80001d0 <strcmp>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <ParseReceived+0x232>
        ESP8266->Flags.F.WifiGotIP = 1;                		/* Wifi got IP address */
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266_Callback_WifiGotIP(ESP8266);        		/* Call user callback function */
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7fb fae4 	bl	8000750 <ESP8266_Callback_WifiGotIP>
 8005188:	e009      	b.n	800519e <ParseReceived+0x246>
    } else if (strcmp(Received, "DHCP TIMEOUT") == 0) {    
 800518a:	4948      	ldr	r1, [pc, #288]	; (80052ac <ParseReceived+0x354>)
 800518c:	68b8      	ldr	r0, [r7, #8]
 800518e:	f7fb f81f 	bl	80001d0 <strcmp>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <ParseReceived+0x246>
        ESP8266_Callback_DHCPTimeout(ESP8266);        		/* Call user function */
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7fb fb23 	bl	80007e4 <ESP8266_Callback_DHCPTimeout>
    }
    if (strstr(Received, "SEND OK\r\n") != NULL) {    		/* In case data were send */
 800519e:	4937      	ldr	r1, [pc, #220]	; (800527c <ParseReceived+0x324>)
 80051a0:	68b8      	ldr	r0, [r7, #8]
 80051a2:	f004 fe47 	bl	8009e34 <strstr>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d056      	beq.n	800525a <ParseReceived+0x302>
        uint8_t cnt;
        
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;    	/* Reset active command so user will be able to call new command in callback function */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	605a      	str	r2, [r3, #4]
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80051b8:	e048      	b.n	800524c <ParseReceived+0x2f4>
            if (ESP8266->Connection[cnt].Flags.F.WaitingSentRespond) {  /* Check for data sent */
 80051ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	212c      	movs	r1, #44	; 0x2c
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	3340      	adds	r3, #64	; 0x40
 80051ca:	791b      	ldrb	r3, [r3, #4]
 80051cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d035      	beq.n	8005242 <ParseReceived+0x2ea>
                ESP8266->Connection[cnt].Flags.F.WaitingSentRespond = 0;    /* Reset flag */
 80051d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80051e8:	7913      	ldrb	r3, [r2, #4]
 80051ea:	f36f 0382 	bfc	r3, #2, #1
 80051ee:	7113      	strb	r3, [r2, #4]
                if (ESP8266->Connection[cnt].Flags.F.Client) {	/* Call user function according to connection type */
 80051f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	212c      	movs	r1, #44	; 0x2c
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	3340      	adds	r3, #64	; 0x40
 8005200:	791b      	ldrb	r3, [r3, #4]
 8005202:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <ParseReceived+0x2d0>
                    ESP8266_Callback_ClientConnectionDataSent(ESP8266, &ESP8266->Connection[cnt]);
 800520c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005210:	222c      	movs	r2, #44	; 0x2c
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	3318      	adds	r3, #24
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f001 fba9 	bl	8006978 <ESP8266_Callback_ClientConnectionDataSent>
 8005226:	e00c      	b.n	8005242 <ParseReceived+0x2ea>
                } else {
                    ESP8266_Callback_ServerConnectionDataSent(ESP8266, &ESP8266->Connection[cnt]);
 8005228:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800522c:	222c      	movs	r2, #44	; 0x2c
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	3318      	adds	r3, #24
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	3304      	adds	r3, #4
 800523a:	4619      	mov	r1, r3
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f001 fb77 	bl	8006930 <ESP8266_Callback_ServerConnectionDataSent>
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 8005242:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005246:	3301      	adds	r3, #1
 8005248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800524c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005250:	2b04      	cmp	r3, #4
 8005252:	d9b2      	bls.n	80051ba <ParseReceived+0x262>
                }
            }
        }
        return 0;
 8005254:	2300      	movs	r3, #0
 8005256:	f000 bd82 	b.w	8005d5e <ParseReceived+0xe06>
    }
    if (strstr(Received, "SEND FAIL\r\n") != NULL) {    	/* In case data were not send */
 800525a:	4909      	ldr	r1, [pc, #36]	; (8005280 <ParseReceived+0x328>)
 800525c:	68b8      	ldr	r0, [r7, #8]
 800525e:	f004 fde9 	bl	8009e34 <strstr>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d073      	beq.n	8005350 <ParseReceived+0x3f8>
        uint8_t cnt;
        
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;    	/* Reset active command so user will be able to call new command in callback function */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	605a      	str	r2, [r3, #4]
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 800526e:	2300      	movs	r3, #0
 8005270:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005274:	e065      	b.n	8005342 <ParseReceived+0x3ea>
 8005276:	bf00      	nop
 8005278:	0800b104 	.word	0x0800b104
 800527c:	0800b10c 	.word	0x0800b10c
 8005280:	0800b118 	.word	0x0800b118
 8005284:	0800b124 	.word	0x0800b124
 8005288:	0800b130 	.word	0x0800b130
 800528c:	0800b138 	.word	0x0800b138
 8005290:	0800b140 	.word	0x0800b140
 8005294:	0800b14c 	.word	0x0800b14c
 8005298:	20001bcc 	.word	0x20001bcc
 800529c:	0800b154 	.word	0x0800b154
 80052a0:	0800b160 	.word	0x0800b160
 80052a4:	0800b174 	.word	0x0800b174
 80052a8:	0800b188 	.word	0x0800b188
 80052ac:	0800b198 	.word	0x0800b198
            if (ESP8266->Connection[cnt].Flags.F.WaitingSentRespond) {  /* Check for data sent */
 80052b0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	3340      	adds	r3, #64	; 0x40
 80052c0:	791b      	ldrb	r3, [r3, #4]
 80052c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d035      	beq.n	8005338 <ParseReceived+0x3e0>
                ESP8266->Connection[cnt].Flags.F.WaitingSentRespond = 0;    /* Reset flag */
 80052cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	212c      	movs	r1, #44	; 0x2c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80052de:	7913      	ldrb	r3, [r2, #4]
 80052e0:	f36f 0382 	bfc	r3, #2, #1
 80052e4:	7113      	strb	r3, [r2, #4]
                if (ESP8266->Connection[cnt].Flags.F.Client) {	/* Call user function according to connection type */
 80052e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3340      	adds	r3, #64	; 0x40
 80052f6:	791b      	ldrb	r3, [r3, #4]
 80052f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <ParseReceived+0x3c6>
                    ESP8266_Callback_ClientConnectionDataSentError(ESP8266, &ESP8266->Connection[cnt]);
 8005302:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005306:	222c      	movs	r2, #44	; 0x2c
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	3318      	adds	r3, #24
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f001 fb39 	bl	800698e <ESP8266_Callback_ClientConnectionDataSentError>
 800531c:	e00c      	b.n	8005338 <ParseReceived+0x3e0>
                } else {
                    ESP8266_Callback_ServerConnectionDataSentError(ESP8266, &ESP8266->Connection[cnt]);
 800531e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005322:	222c      	movs	r2, #44	; 0x2c
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	3318      	adds	r3, #24
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f001 fb07 	bl	8006946 <ESP8266_Callback_ServerConnectionDataSentError>
        for (cnt = 0; cnt < ESP8266_MAX_CONNECTIONS; cnt++) {
 8005338:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800533c:	3301      	adds	r3, #1
 800533e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8005342:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005346:	2b04      	cmp	r3, #4
 8005348:	d9b2      	bls.n	80052b0 <ParseReceived+0x358>
                }
            }
        }
        return 0;
 800534a:	2300      	movs	r3, #0
 800534c:	f000 bd07 	b.w	8005d5e <ParseReceived+0xe06>
    }
    
    if (bufflen > 10 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 10], 10, ",CONNECT\r\n", 10)) != NULL) {	/* Check if we have a new connection */
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b0a      	cmp	r3, #10
 8005354:	d938      	bls.n	80053c8 <ParseReceived+0x470>
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	3b0a      	subs	r3, #10
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	18d0      	adds	r0, r2, r3
 800535e:	230a      	movs	r3, #10
 8005360:	4aa6      	ldr	r2, [pc, #664]	; (80055fc <ParseReceived+0x6a4>)
 8005362:	210a      	movs	r1, #10
 8005364:	f7fe fd4a 	bl	8003dfc <mem_mem>
 8005368:	6238      	str	r0, [r7, #32]
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02b      	beq.n	80053c8 <ParseReceived+0x470>
        Conn = &ESP8266->Connection[CHAR2NUM(*(ch_ptr - 1))];	/* New connection has been made */
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	3b01      	subs	r3, #1
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	3b30      	subs	r3, #48	; 0x30
 8005378:	222c      	movs	r2, #44	; 0x2c
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	3318      	adds	r3, #24
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	3304      	adds	r3, #4
 8005386:	61fb      	str	r3, [r7, #28]
        Conn->Flags.F.Active = 1;
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        Conn->Number = CHAR2NUM(*(ch_ptr - 1));
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	3b01      	subs	r3, #1
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	3b30      	subs	r3, #48	; 0x30
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	701a      	strb	r2, [r3, #0]
        ESP8266->LastConnection = Conn;                     /* Save last connection we operate */
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
        
        if (!Conn->Flags.F.Client) {                        /* Check server status */
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f040 80c7 	bne.w	800554c <ParseReceived+0x5f4>
            ESP8266_Callback_ServerConnectionActive(ESP8266, Conn);	/* Connection started as server */
 80053be:	69f9      	ldr	r1, [r7, #28]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f001 fa85 	bl	80068d0 <ESP8266_Callback_ServerConnectionActive>
        if (!Conn->Flags.F.Client) {                        /* Check server status */
 80053c6:	e0c1      	b.n	800554c <ParseReceived+0x5f4>
        } else {
            /* Process other data in CIPSTART OK response for client */
        }
    } else if (strstr(Received, "ALREADY CONNECTED\r\n") != NULL) {	/* Check if already connected */
 80053c8:	498d      	ldr	r1, [pc, #564]	; (8005600 <ParseReceived+0x6a8>)
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	f004 fd32 	bl	8009e34 <strstr>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 80ba 	bne.w	800554c <ParseReceived+0x5f4>
        
        
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	2b09      	cmp	r3, #9
 80053dc:	d963      	bls.n	80054a6 <ParseReceived+0x54e>
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	3b09      	subs	r3, #9
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	18d0      	adds	r0, r2, r3
 80053e6:	2309      	movs	r3, #9
 80053e8:	4a86      	ldr	r2, [pc, #536]	; (8005604 <ParseReceived+0x6ac>)
 80053ea:	2109      	movs	r1, #9
 80053ec:	f7fe fd06 	bl	8003dfc <mem_mem>
 80053f0:	6238      	str	r0, [r7, #32]
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d056      	beq.n	80054a6 <ParseReceived+0x54e>
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d052      	beq.n	80054a6 <ParseReceived+0x54e>
        uint8_t client, active;
        Conn = &ESP8266->Connection[CHAR2NUM(*(ch_ptr - 1))];
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	3b01      	subs	r3, #1
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	3b30      	subs	r3, #48	; 0x30
 8005408:	222c      	movs	r2, #44	; 0x2c
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	3318      	adds	r3, #24
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	3304      	adds	r3, #4
 8005416:	61fb      	str	r3, [r7, #28]
        
        /* Check if CLOSED statement is on beginning, if not, write it to temporary buffer and leave there */
        /* If not on beginning of string, probably ,CLOSED was returned after +IPD statement */
        /* Make string standalone */
        if (ch_ptr == (Received + 1)) {
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3301      	adds	r3, #1
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	429a      	cmp	r2, r3
 8005420:	d139      	bne.n	8005496 <ParseReceived+0x53e>
            client = Conn->Flags.F.Client;            		/* Save values */
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005428:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	76fb      	strb	r3, [r7, #27]
            active = Conn->Flags.F.Active;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005436:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	76bb      	strb	r3, [r7, #26]
            ESP8266_RESET_CONNECTION(ESP8266, Conn);    		/* Connection closed, reset flags now */
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8005444:	f36f 0300 	bfc	r3, #0, #1
 8005448:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8005452:	f36f 0341 	bfc	r3, #1, #1
 8005456:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8005460:	f36f 1386 	bfc	r3, #6, #1
 8005464:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800546e:	f36f 1345 	bfc	r3, #5, #1
 8005472:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            if (active) {                            		/* Call user function */
 8005476:	7ebb      	ldrb	r3, [r7, #26]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d066      	beq.n	800554a <ParseReceived+0x5f2>
                if (client) {
 800547c:	7efb      	ldrb	r3, [r7, #27]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <ParseReceived+0x534>
                    ESP8266_Callback_ClientConnectionClosed(ESP8266, Conn);	/* Client connection closed */
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f001 faa4 	bl	80069d2 <ESP8266_Callback_ClientConnectionClosed>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 800548a:	e05e      	b.n	800554a <ParseReceived+0x5f2>
                } else {
                    ESP8266_Callback_ServerConnectionClosed(ESP8266, Conn);	/* Server connection closed */
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f001 fa29 	bl	80068e6 <ESP8266_Callback_ServerConnectionClosed>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 8005494:	e059      	b.n	800554a <ParseReceived+0x5f2>
                }
            }
        } else {
            BUFFER_Write(&TMP_Buffer, (uint8_t *)(ch_ptr - 1), 10);	/* Write to temporary buffer */
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	3b01      	subs	r3, #1
 800549a:	220a      	movs	r2, #10
 800549c:	4619      	mov	r1, r3
 800549e:	485a      	ldr	r0, [pc, #360]	; (8005608 <ParseReceived+0x6b0>)
 80054a0:	f7fe f9e2 	bl	8003868 <BUFFER_Write>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 80054a4:	e051      	b.n	800554a <ParseReceived+0x5f2>
        }
    } else if (bufflen > 16 && (ch_ptr = strstr(&Received[bufflen - 15], ",CONNECT FAIL\r\n")) != NULL) {	/* Check if we have a new connection, analyze only last part */
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d94f      	bls.n	800554c <ParseReceived+0x5f4>
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	3b0f      	subs	r3, #15
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4413      	add	r3, r2
 80054b4:	4955      	ldr	r1, [pc, #340]	; (800560c <ParseReceived+0x6b4>)
 80054b6:	4618      	mov	r0, r3
 80054b8:	f004 fcbc 	bl	8009e34 <strstr>
 80054bc:	6238      	str	r0, [r7, #32]
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d043      	beq.n	800554c <ParseReceived+0x5f4>
        Conn = &ESP8266->Connection[CHAR2NUM(*(ch_ptr - 1))];	/* New connection has been made */
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	3b30      	subs	r3, #48	; 0x30
 80054cc:	222c      	movs	r2, #44	; 0x2c
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	3318      	adds	r3, #24
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	3304      	adds	r3, #4
 80054da:	61fb      	str	r3, [r7, #28]
        ESP8266_RESET_CONNECTION(ESP8266, Conn);
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80054e2:	f36f 0300 	bfc	r3, #0, #1
 80054e6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80054f0:	f36f 0341 	bfc	r3, #1, #1
 80054f4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80054fe:	f36f 1386 	bfc	r3, #6, #1
 8005502:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800550c:	f36f 1345 	bfc	r3, #5, #1
 8005510:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        Conn->Number = CHAR2NUM(*(ch_ptr - 1));
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	3b01      	subs	r3, #1
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	3b30      	subs	r3, #48	; 0x30
 800551c:	b2da      	uxtb	r2, r3
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	701a      	strb	r2, [r3, #0]
        
        if (Conn->Flags.F.Client) {							/* Call user function according to connection type (client, server) */
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00c      	beq.n	800554c <ParseReceived+0x5f4>
            if (ESP8266->ActiveCommand == ESP8266_COMMAND_CIPSTART) {
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b0a      	cmp	r3, #10
 8005538:	d102      	bne.n	8005540 <ParseReceived+0x5e8>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;	/* Reset current connection */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	605a      	str	r2, [r3, #4]
            }
            ESP8266_Callback_ClientConnectionError(ESP8266, Conn);	/* Connection failed */
 8005540:	69f9      	ldr	r1, [r7, #28]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7fb fa8a 	bl	8000a5c <ESP8266_Callback_ClientConnectionError>
 8005548:	e000      	b.n	800554c <ParseReceived+0x5f4>
    } else if (bufflen > 9 && (ch_ptr = (char *)mem_mem(&Received[bufflen - 9], 9, ",CLOSED\r\n", 9)) != NULL && Received != ch_ptr) {	/* Check if we have a closed connection, check the end of string */
 800554a:	bf00      	nop
        }
    }
    
    if (strncmp(Received, "+IPD,", 5) == 0) {       		/* Check if +IPD was received with incoming data */
 800554c:	2205      	movs	r2, #5
 800554e:	4930      	ldr	r1, [pc, #192]	; (8005610 <ParseReceived+0x6b8>)
 8005550:	68b8      	ldr	r0, [r7, #8]
 8005552:	f004 fc48 	bl	8009de6 <strncmp>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 8109 	bne.w	8005770 <ParseReceived+0x818>
        uint16_t blength = bufflen;
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	84fb      	strh	r3, [r7, #38]	; 0x26
        uint16_t blength2 = bufflen;
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	82fb      	strh	r3, [r7, #22]
        uint16_t ipd_ptr_org;
        
        ESP8266->IPD.InIPD = 1;                   			/* If we are not in IPD mode already, go to IPD mode */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
        ESP8266->IPD.USART_Buffer = from_usart_buffer;      /* Save IPD buffer location */
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	797a      	ldrb	r2, [r7, #5]
 8005572:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
        
        ipd_ptr = 5;                                        /* Reset pointer */
 8005576:	2305      	movs	r3, #5
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
        ESP8266->IPD.ConnNumber = CHAR2NUM(Received[ipd_ptr]);  /* Get connection number from IPD statement */
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	3b30      	subs	r3, #48	; 0x30
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        Conn = &ESP8266->Connection[ESP8266->IPD.ConnNumber];   /* Save connection pointer */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005592:	461a      	mov	r2, r3
 8005594:	232c      	movs	r3, #44	; 0x2c
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	3318      	adds	r3, #24
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	3304      	adds	r3, #4
 80055a2:	61fb      	str	r3, [r7, #28]
#if ESP8266_USE_SINGLE_CONNECTION_BUFFER == 1
        Conn->Data = ConnectionData;                        /* Set working buffer for this connection */
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <ParseReceived+0x6bc>)
 80055a8:	615a      	str	r2, [r3, #20]
#endif
        Conn->Number = ESP8266->IPD.ConnNumber;             /* Save connection number */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	701a      	strb	r2, [r3, #0]
        ipd_ptr += 2;                                       /* Increase pointer by 2 */
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	3302      	adds	r3, #2
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        Conn->BytesReceived = ParseNumber(&Received[ipd_ptr], &bytes_cnt);  /* Save number of received bytes */
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	4413      	add	r3, r2
 80055c0:	f107 0213 	add.w	r2, r7, #19
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fc94 	bl	8003ef4 <ParseNumber>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	60da      	str	r2, [r3, #12]
        
        if (Conn->TotalBytesReceived == 0) {                /* First time */
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11d      	bne.n	8005618 <ParseReceived+0x6c0>
            Conn->Flags.F.HeadersDone = 0;                  /* Reset flag */
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80055e2:	f36f 1345 	bfc	r3, #5, #1
 80055e6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            Conn->Flags.F.FirstPacket = 1;                  /* This is first packet of data */
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80055f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80055f8:	e015      	b.n	8005626 <ParseReceived+0x6ce>
 80055fa:	bf00      	nop
 80055fc:	0800b124 	.word	0x0800b124
 8005600:	0800b1a8 	.word	0x0800b1a8
 8005604:	0800b1bc 	.word	0x0800b1bc
 8005608:	20001bcc 	.word	0x20001bcc
 800560c:	0800b1c8 	.word	0x0800b1c8
 8005610:	0800b14c 	.word	0x0800b14c
 8005614:	200004f8 	.word	0x200004f8
        } else {
            Conn->Flags.F.FirstPacket = 0;                  /* This is not first packet */
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800561e:	f36f 1386 	bfc	r3, #6, #1
 8005622:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
        
        Conn->TotalBytesReceived += Conn->BytesReceived;    /* Save total number of bytes */
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	441a      	add	r2, r3
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	611a      	str	r2, [r3, #16]
        ESP8266->TotalBytesReceived += Conn->BytesReceived; /* Increase global number of bytes received from ESP8266 module to stack */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 21e4 	ldr.w	r2, [r3, #484]	; 0x1e4
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	441a      	add	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        ipd_ptr += bytes_cnt + 1;                           /* Increase pointer for number of characters for number and for comma */
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	461a      	mov	r2, r3
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	4413      	add	r3, r2
 800564e:	3301      	adds	r3, #1
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
        ParseIP(&Received[ipd_ptr], Conn->RemoteIP, &bytes_cnt);    /* Save IP */
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	18d0      	adds	r0, r2, r3
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3304      	adds	r3, #4
 800565c:	f107 0213 	add.w	r2, r7, #19
 8005660:	4619      	mov	r1, r3
 8005662:	f7fe fccb 	bl	8003ffc <ParseIP>
        ipd_ptr += bytes_cnt + 1;                           /* Increase pointer for number of characters for IP string and for comma */
 8005666:	7cfb      	ldrb	r3, [r7, #19]
 8005668:	461a      	mov	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	4413      	add	r3, r2
 800566e:	3301      	adds	r3, #1
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
        Conn->RemotePort = ParseNumber(&Received[ipd_ptr], &bytes_cnt); /* Save PORT */
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	4413      	add	r3, r2
 8005678:	f107 0213 	add.w	r2, r7, #19
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fc38 	bl	8003ef4 <ParseNumber>
 8005684:	4603      	mov	r3, r0
 8005686:	b29a      	uxth	r2, r3
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	805a      	strh	r2, [r3, #2]

        while (Received[ipd_ptr] != ':' && ipd_ptr < blength) { /* Find data starts position */
 800568c:	e002      	b.n	8005694 <ParseReceived+0x73c>
            ipd_ptr++;
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	3301      	adds	r3, #1
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (Received[ipd_ptr] != ':' && ipd_ptr < blength) { /* Find data starts position */
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	4413      	add	r3, r2
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b3a      	cmp	r3, #58	; 0x3a
 800569e:	d003      	beq.n	80056a8 <ParseReceived+0x750>
 80056a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d3f2      	bcc.n	800568e <ParseReceived+0x736>
        }
        ipd_ptr++;
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	3301      	adds	r3, #1
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ipd_ptr_org = ipd_ptr;
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	82bb      	strh	r3, [r7, #20]
        if ((blength - ipd_ptr) > Conn->BytesReceived) {    /* Calculate size of buffer */
 80056b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d906      	bls.n	80056ce <ParseReceived+0x776>
            blength = Conn->BytesReceived + ipd_ptr;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4413      	add	r3, r2
 80056cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        
        memcpy((uint8_t *)Conn->Data, (uint8_t *)&Received[ipd_ptr], blength - ipd_ptr);    /* Copy content to beginning of buffer */
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	6958      	ldr	r0, [r3, #20]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	18d1      	adds	r1, r2, r3
 80056d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	f004 f920 	bl	8009924 <memcpy>
        ipd_ptr_org += blength - ipd_ptr;
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	8abb      	ldrh	r3, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	82bb      	strh	r3, [r7, #20]
        
        if ((blength - ipd_ptr) > Conn->BytesReceived) {    /* Check for length */
 80056f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	1ad2      	subs	r2, r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d906      	bls.n	8005710 <ParseReceived+0x7b8>
            Conn->Data[Conn->BytesReceived] = 0;            /* Add zero at the end of string */
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	4413      	add	r3, r2
 800570c:	2200      	movs	r2, #0
 800570e:	701a      	strb	r2, [r3, #0]
        }
        ESP8266->IPD.InPtr = ESP8266->IPD.PtrTotal = blength - ipd_ptr; /* Calculate remaining bytes */
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	b29b      	uxth	r3, r3
 8005714:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 214e 	ldrh.w	r2, [r3, #334]	; 0x14e
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
        if (ESP8266->IPD.PtrTotal >= Conn->BytesReceived) { /* Check remaining data */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8005732:	461a      	mov	r2, r3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d315      	bcc.n	8005768 <ParseReceived+0x810>
            ESP8266->IPD.InIPD = 0;                         /* Not in IPD anymore */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
            Conn->DataSize = ipd_ptr;                       /* Set package data size */
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	b29a      	uxth	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	831a      	strh	r2, [r3, #24]
            Conn->Flags.F.LastPart = 1;
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8005752:	f043 0310 	orr.w	r3, r3, #16
 8005756:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            Conn->Flags.F.CallDataReceived = 1;             /* Enable flag to call received data callback */
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
        }
        return blength2 - (ipd_ptr_org);                    /* Return number of bytes we didn't process in this request */
 8005768:	8afa      	ldrh	r2, [r7, #22]
 800576a:	8abb      	ldrh	r3, [r7, #20]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	e2f6      	b.n	8005d5e <ParseReceived+0xe06>
    }
    
    switch (ESP8266->ActiveCommand) {                       /* Check commands we have sent */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	3b01      	subs	r3, #1
 8005776:	2b20      	cmp	r3, #32
 8005778:	f200 829c 	bhi.w	8005cb4 <ParseReceived+0xd5c>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <ParseReceived+0x82c>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	08005a97 	.word	0x08005a97
 8005788:	08005891 	.word	0x08005891
 800578c:	08005809 	.word	0x08005809
 8005790:	08005bf5 	.word	0x08005bf5
 8005794:	0800595f 	.word	0x0800595f
 8005798:	08005983 	.word	0x08005983
 800579c:	08005a97 	.word	0x08005a97
 80057a0:	0800599b 	.word	0x0800599b
 80057a4:	08005a97 	.word	0x08005a97
 80057a8:	080059c7 	.word	0x080059c7
 80057ac:	08005a97 	.word	0x08005a97
 80057b0:	080058c9 	.word	0x080058c9
 80057b4:	08005cb5 	.word	0x08005cb5
 80057b8:	08005a97 	.word	0x08005a97
 80057bc:	08005aaf 	.word	0x08005aaf
 80057c0:	08005a97 	.word	0x08005a97
 80057c4:	08005a97 	.word	0x08005a97
 80057c8:	08005b05 	.word	0x08005b05
 80057cc:	08005861 	.word	0x08005861
 80057d0:	08005a97 	.word	0x08005a97
 80057d4:	08005a97 	.word	0x08005a97
 80057d8:	080058f9 	.word	0x080058f9
 80057dc:	0800592f 	.word	0x0800592f
 80057e0:	08005b7d 	.word	0x08005b7d
 80057e4:	08005bb9 	.word	0x08005bb9
 80057e8:	08005a97 	.word	0x08005a97
 80057ec:	08005c79 	.word	0x08005c79
 80057f0:	08005cb5 	.word	0x08005cb5
 80057f4:	08005cb5 	.word	0x08005cb5
 80057f8:	08005a97 	.word	0x08005a97
 80057fc:	08005a97 	.word	0x08005a97
 8005800:	08005a97 	.word	0x08005a97
 8005804:	08005a97 	.word	0x08005a97
        case ESP8266_COMMAND_CWJAP:            
            if (strncmp(Received, "+CWJAP:", 7) == 0) {     /* We send command and we have error response */
 8005808:	2207      	movs	r2, #7
 800580a:	49b2      	ldr	r1, [pc, #712]	; (8005ad4 <ParseReceived+0xb7c>)
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f004 faea 	bl	8009de6 <strncmp>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <ParseReceived+0x8d6>
                ESP8266->ActiveCommandResponse = "FAIL\r\n";    /* We received an error, wait for "FAIL" string for next time */
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4aaf      	ldr	r2, [pc, #700]	; (8005ad8 <ParseReceived+0xb80>)
 800581c:	609a      	str	r2, [r3, #8]
                ESP8266->WifiConnectError = (ESP8266_WifiConnectError_t)CHAR2NUM(Received[7]);    /* Check reason */
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3307      	adds	r3, #7
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	3b30      	subs	r3, #48	; 0x30
 8005826:	b2da      	uxtb	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 800582e:	49ab      	ldr	r1, [pc, #684]	; (8005adc <ParseReceived+0xb84>)
 8005830:	68b8      	ldr	r0, [r7, #8]
 8005832:	f7fa fccd 	bl	80001d0 <strcmp>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <ParseReceived+0x8ea>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
            }
            if (strcmp(Received, "FAIL\r\n") == 0) {
 8005842:	49a5      	ldr	r1, [pc, #660]	; (8005ad8 <ParseReceived+0xb80>)
 8005844:	68b8      	ldr	r0, [r7, #8]
 8005846:	f7fa fcc3 	bl	80001d0 <strcmp>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 8233 	bne.w	8005cb8 <ParseReceived+0xd60>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */                
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_WifiConnectFailed(ESP8266);    /* Call user function */
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7fa ff5f 	bl	800071c <ESP8266_Callback_WifiConnectFailed>
            }
            break;
 800585e:	e22b      	b.n	8005cb8 <ParseReceived+0xd60>
        case ESP8266_COMMAND_CWJAP_GET:
            if (strncmp(Received, "+CWJAP_CUR:", 11) == 0) {    /* We sent command to get current connected AP */
 8005860:	220b      	movs	r2, #11
 8005862:	499f      	ldr	r1, [pc, #636]	; (8005ae0 <ParseReceived+0xb88>)
 8005864:	68b8      	ldr	r0, [r7, #8]
 8005866:	f004 fabe 	bl	8009de6 <strncmp>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <ParseReceived+0x920>
                ParseCWJAP(ESP8266, Received);              /* Parse string */
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7fe ffa0 	bl	80047b8 <ParseCWJAP>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005878:	4998      	ldr	r1, [pc, #608]	; (8005adc <ParseReceived+0xb84>)
 800587a:	68b8      	ldr	r0, [r7, #8]
 800587c:	f7fa fca8 	bl	80001d0 <strcmp>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 821a 	bne.w	8005cbc <ParseReceived+0xd64>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
            }
            break;
 800588e:	e215      	b.n	8005cbc <ParseReceived+0xd64>
#if ESP8266_USE_APSEARCH
        case ESP8266_COMMAND_CWLAP:
            if (strncmp(Received, "+CWLAP:", 7) == 0) {     /* CWLAP received, parse it */
 8005890:	2207      	movs	r2, #7
 8005892:	4994      	ldr	r1, [pc, #592]	; (8005ae4 <ParseReceived+0xb8c>)
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f004 faa6 	bl	8009de6 <strncmp>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <ParseReceived+0x950>
                ParseCWLAP(ESP8266, Received);              /* Parse CWLAP */
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7fe fd00 	bl	80042a8 <ParseCWLAP>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80058a8:	498c      	ldr	r1, [pc, #560]	; (8005adc <ParseReceived+0xb84>)
 80058aa:	68b8      	ldr	r0, [r7, #8]
 80058ac:	f7fa fc90 	bl	80001d0 <strcmp>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 8204 	bne.w	8005cc0 <ParseReceived+0xd68>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_WifiDetected(ESP8266, &ESP8266_APs);   /* Call user function */
 80058be:	498a      	ldr	r1, [pc, #552]	; (8005ae8 <ParseReceived+0xb90>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7fa ff9d 	bl	8000800 <ESP8266_Callback_WifiDetected>
            }
            break;
 80058c6:	e1fb      	b.n	8005cc0 <ParseReceived+0xd68>
#endif
        case ESP8266_COMMAND_CWSAP:
            if (strncmp(Received, "+CWSAP", 6) == 0) {      /* CWLAP received, parse it */
 80058c8:	2206      	movs	r2, #6
 80058ca:	4988      	ldr	r1, [pc, #544]	; (8005aec <ParseReceived+0xb94>)
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f004 fa8a 	bl	8009de6 <strncmp>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <ParseReceived+0x988>
                ParseCWSAP(ESP8266, Received);              /* Parse CWLAP */
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7fe fc26 	bl	800412c <ParseCWSAP>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80058e0:	497e      	ldr	r1, [pc, #504]	; (8005adc <ParseReceived+0xb84>)
 80058e2:	68b8      	ldr	r0, [r7, #8]
 80058e4:	f7fa fc74 	bl	80001d0 <strcmp>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 81ea 	bne.w	8005cc4 <ParseReceived+0xd6c>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	605a      	str	r2, [r3, #4]
            }
            break;
 80058f6:	e1e5      	b.n	8005cc4 <ParseReceived+0xd6c>
        case ESP8266_COMMAND_CIPSTA:
            if (strncmp(Received, "+CIPSTA", 7) == 0) {     /* CIPSTA detected */
 80058f8:	2207      	movs	r2, #7
 80058fa:	497d      	ldr	r1, [pc, #500]	; (8005af0 <ParseReceived+0xb98>)
 80058fc:	68b8      	ldr	r0, [r7, #8]
 80058fe:	f004 fa72 	bl	8009de6 <strncmp>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <ParseReceived+0x9b8>
                ParseCIPSTA(ESP8266, Received);             /* Parse CIPSTA */
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7fe fdbc 	bl	8004488 <ParseCIPSTA>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005910:	4972      	ldr	r1, [pc, #456]	; (8005adc <ParseReceived+0xb84>)
 8005912:	68b8      	ldr	r0, [r7, #8]
 8005914:	f7fa fc5c 	bl	80001d0 <strcmp>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 81d4 	bne.w	8005cc8 <ParseReceived+0xd70>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_WifiIPSet(ESP8266);        /* Callback function */
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7fa ff32 	bl	8000790 <ESP8266_Callback_WifiIPSet>
            }
            break;
 800592c:	e1cc      	b.n	8005cc8 <ParseReceived+0xd70>
        case ESP8266_COMMAND_CIPAP:
            if (strncmp(Received, "+CIPAP", 6) == 0) {      /* CIPAP detected */
 800592e:	2206      	movs	r2, #6
 8005930:	4970      	ldr	r1, [pc, #448]	; (8005af4 <ParseReceived+0xb9c>)
 8005932:	68b8      	ldr	r0, [r7, #8]
 8005934:	f004 fa57 	bl	8009de6 <strncmp>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <ParseReceived+0x9ee>
                ParseCIPSTA(ESP8266, Received);             /* Parse CIPAP (or CIPSTA) */
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7fe fda1 	bl	8004488 <ParseCIPSTA>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {   /* Reset active command */    
 8005946:	4965      	ldr	r1, [pc, #404]	; (8005adc <ParseReceived+0xb84>)
 8005948:	68b8      	ldr	r0, [r7, #8]
 800594a:	f7fa fc41 	bl	80001d0 <strcmp>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 81bb 	bne.w	8005ccc <ParseReceived+0xd74>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
            }
            break;
 800595c:	e1b6      	b.n	8005ccc <ParseReceived+0xd74>
        case ESP8266_COMMAND_CWMODE:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {   /* Reset active command */
 800595e:	495f      	ldr	r1, [pc, #380]	; (8005adc <ParseReceived+0xb84>)
 8005960:	68b8      	ldr	r0, [r7, #8]
 8005962:	f7fa fc35 	bl	80001d0 <strcmp>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 81b1 	bne.w	8005cd0 <ParseReceived+0xd78>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	605a      	str	r2, [r3, #4]
                ESP8266->Mode = ESP8266->SentMode;          /* Save mode */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
            }
            break;
 8005980:	e1a6      	b.n	8005cd0 <ParseReceived+0xd78>
        case ESP8266_COMMAND_CIPSERVER:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005982:	4956      	ldr	r1, [pc, #344]	; (8005adc <ParseReceived+0xb84>)
 8005984:	68b8      	ldr	r0, [r7, #8]
 8005986:	f7fa fc23 	bl	80001d0 <strcmp>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 81a1 	bne.w	8005cd4 <ParseReceived+0xd7c>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	605a      	str	r2, [r3, #4]
            }
            break;
 8005998:	e19c      	b.n	8005cd4 <ParseReceived+0xd7c>
        case ESP8266_COMMAND_SEND:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {    
 800599a:	4950      	ldr	r1, [pc, #320]	; (8005adc <ParseReceived+0xb84>)
 800599c:	68b8      	ldr	r0, [r7, #8]
 800599e:	f7fa fc17 	bl	80001d0 <strcmp>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f040 8197 	bne.w	8005cd8 <ParseReceived+0xd80>
                ESP8266->ActiveCommand = ESP8266_COMMAND_SENDDATA;  /* Go to send data command */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	221d      	movs	r2, #29
 80059ae:	605a      	str	r2, [r3, #4]
                ESP8266->Flags.F.WaitForWrapper = 1;        /* Do not reset command, instead, wait for wrapper command! */
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 80059b6:	f043 0301 	orr.w	r3, r3, #1
 80059ba:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
                ESP8266->ActiveCommandResponse = "SEND OK"; /* We are now waiting for SEND OK */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a4d      	ldr	r2, [pc, #308]	; (8005af8 <ParseReceived+0xba0>)
 80059c2:	609a      	str	r2, [r3, #8]
            }
            break;
 80059c4:	e188      	b.n	8005cd8 <ParseReceived+0xd80>
        case ESP8266_COMMAND_SENDDATA:
            break;
        case ESP8266_COMMAND_CIPSTART:
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 80059c6:	4945      	ldr	r1, [pc, #276]	; (8005adc <ParseReceived+0xb84>)
 80059c8:	68b8      	ldr	r0, [r7, #8]
 80059ca:	f7fa fc01 	bl	80001d0 <strcmp>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <ParseReceived+0xa90>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_ClientConnectionConnected(ESP8266, ESP8266->LastConnection);	/* Connection started as client */
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7fb f828 	bl	8000a38 <ESP8266_Callback_ClientConnectionConnected>
            }
            if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {    
 80059e8:	4944      	ldr	r1, [pc, #272]	; (8005afc <ParseReceived+0xba4>)
 80059ea:	68b8      	ldr	r0, [r7, #8]
 80059ec:	f7fa fbf0 	bl	80001d0 <strcmp>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8172 	bne.w	8005cdc <ParseReceived+0xd84>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */        
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	605a      	str	r2, [r3, #4]
                ESP8266_RESET_CONNECTION(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);   /* Reset connection */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8005a04:	4619      	mov	r1, r3
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	232c      	movs	r3, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005a14:	7913      	ldrb	r3, [r2, #4]
 8005a16:	f36f 0300 	bfc	r3, #0, #1
 8005a1a:	7113      	strb	r3, [r2, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8005a22:	4619      	mov	r1, r3
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	232c      	movs	r3, #44	; 0x2c
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005a32:	7913      	ldrb	r3, [r2, #4]
 8005a34:	f36f 0341 	bfc	r3, #1, #1
 8005a38:	7113      	strb	r3, [r2, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8005a40:	4619      	mov	r1, r3
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	232c      	movs	r3, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005a50:	7913      	ldrb	r3, [r2, #4]
 8005a52:	f36f 1386 	bfc	r3, #6, #1
 8005a56:	7113      	strb	r3, [r2, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	232c      	movs	r3, #44	; 0x2c
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005a6e:	7913      	ldrb	r3, [r2, #4]
 8005a70:	f36f 1345 	bfc	r3, #5, #1
 8005a74:	7113      	strb	r3, [r2, #4]
                ESP8266_Callback_ClientConnectionError(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);    /* Call user function */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	232c      	movs	r3, #44	; 0x2c
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	3318      	adds	r3, #24
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7fa ffe4 	bl	8000a5c <ESP8266_Callback_ClientConnectionError>
            }
            break;
 8005a94:	e122      	b.n	8005cdc <ParseReceived+0xd84>
        case ESP8266_COMMAND_SNTP_SET:
#endif
#if ESP8266_USE_WPS
        case ESP8266_COMMAND_WPS:
#endif
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005a96:	4911      	ldr	r1, [pc, #68]	; (8005adc <ParseReceived+0xb84>)
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f7fa fb99 	bl	80001d0 <strcmp>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 811d 	bne.w	8005ce0 <ParseReceived+0xd88>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	605a      	str	r2, [r3, #4]
            }
            break;
 8005aac:	e118      	b.n	8005ce0 <ParseReceived+0xd88>
        case ESP8266_COMMAND_RST:
            if (strcmp(Received, "ready\r\n") == 0) {
 8005aae:	4914      	ldr	r1, [pc, #80]	; (8005b00 <ParseReceived+0xba8>)
 8005ab0:	68b8      	ldr	r0, [r7, #8]
 8005ab2:	f7fa fb8d 	bl	80001d0 <strcmp>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 8113 	bne.w	8005ce4 <ParseReceived+0xd8c>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
                ESP8266->Flags.F.LastOperationStatus = 1;   /* Set flag */
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
            }
            break;
 8005ad2:	e107      	b.n	8005ce4 <ParseReceived+0xd8c>
 8005ad4:	0800b1d8 	.word	0x0800b1d8
 8005ad8:	0800b1e0 	.word	0x0800b1e0
 8005adc:	0800b104 	.word	0x0800b104
 8005ae0:	0800b1e8 	.word	0x0800b1e8
 8005ae4:	0800b1f4 	.word	0x0800b1f4
 8005ae8:	200003a0 	.word	0x200003a0
 8005aec:	0800b1fc 	.word	0x0800b1fc
 8005af0:	0800b204 	.word	0x0800b204
 8005af4:	0800b20c 	.word	0x0800b20c
 8005af8:	0800b214 	.word	0x0800b214
 8005afc:	0800b130 	.word	0x0800b130
 8005b00:	0800b138 	.word	0x0800b138
#if ESP8266_USE_PING
        case ESP8266_COMMAND_PING:
            if (Received[0] == '+') {                       /* Check if data about ping milliseconds are received */
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b2b      	cmp	r3, #43	; 0x2b
 8005b0a:	d10a      	bne.n	8005b22 <ParseReceived+0xbca>
                /* Parse number for pinging */
                ESP8266->Pinging.Time = ParseNumber(&Received[1], NULL);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe f9ee 	bl	8003ef4 <ParseNumber>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005b22:	4991      	ldr	r1, [pc, #580]	; (8005d68 <ParseReceived+0xe10>)
 8005b24:	68b8      	ldr	r0, [r7, #8]
 8005b26:	f7fa fb53 	bl	80001d0 <strcmp>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10e      	bne.n	8005b4e <ParseReceived+0xbf6>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	605a      	str	r2, [r3, #4]
                ESP8266->Pinging.Success = 1;               /* Set status */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
                ESP8266_Callback_PingFinished(ESP8266, &ESP8266->Pinging);  /* Call user function */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b44:	4619      	mov	r1, r3
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 ff4e 	bl	80069e8 <ESP8266_Callback_PingFinished>
            } else if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
                ESP8266->Pinging.Success = 0;               /* Set status */
                ESP8266_Callback_PingFinished(ESP8266, &ESP8266->Pinging);  /* Call user function */
            }
            break;
 8005b4c:	e0cc      	b.n	8005ce8 <ParseReceived+0xd90>
            } else if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {
 8005b4e:	4987      	ldr	r1, [pc, #540]	; (8005d6c <ParseReceived+0xe14>)
 8005b50:	68b8      	ldr	r0, [r7, #8]
 8005b52:	f7fa fb3d 	bl	80001d0 <strcmp>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 80c5 	bne.w	8005ce8 <ParseReceived+0xd90>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	605a      	str	r2, [r3, #4]
                ESP8266->Pinging.Success = 0;               /* Set status */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
                ESP8266_Callback_PingFinished(ESP8266, &ESP8266->Pinging);  /* Call user function */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 ff37 	bl	80069e8 <ESP8266_Callback_PingFinished>
            break;
 8005b7a:	e0b5      	b.n	8005ce8 <ParseReceived+0xd90>
#endif
        case ESP8266_COMMAND_CIPSTAMAC:
            if (strncmp(Received, "+CIPSTAMAC", 10) == 0) { /* CIPSTA detected */
 8005b7c:	220a      	movs	r2, #10
 8005b7e:	497c      	ldr	r1, [pc, #496]	; (8005d70 <ParseReceived+0xe18>)
 8005b80:	68b8      	ldr	r0, [r7, #8]
 8005b82:	f004 f930 	bl	8009de6 <strncmp>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <ParseReceived+0xc48>
                ParseMAC(&Received[12], ESP8266->STAMAC, NULL); /* Parse CIPSTA */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f103 000c 	add.w	r0, r3, #12
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f7fe fa84 	bl	80040a8 <ParseMAC>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005ba0:	4971      	ldr	r1, [pc, #452]	; (8005d68 <ParseReceived+0xe10>)
 8005ba2:	68b8      	ldr	r0, [r7, #8]
 8005ba4:	f7fa fb14 	bl	80001d0 <strcmp>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 809e 	bne.w	8005cec <ParseReceived+0xd94>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
            }
            break;
 8005bb6:	e099      	b.n	8005cec <ParseReceived+0xd94>
        case ESP8266_COMMAND_CIPAPMAC:
            if (strncmp(Received, "+CIPAPMAC", 9) == 0) {   /* CIPSTA detected */
 8005bb8:	2209      	movs	r2, #9
 8005bba:	496e      	ldr	r1, [pc, #440]	; (8005d74 <ParseReceived+0xe1c>)
 8005bbc:	68b8      	ldr	r0, [r7, #8]
 8005bbe:	f004 f912 	bl	8009de6 <strncmp>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <ParseReceived+0xc84>
                ParseMAC(&Received[11], ESP8266->APMAC, NULL);  /* Parse CIPSTA */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f103 000b 	add.w	r0, r3, #11
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fe fa66 	bl	80040a8 <ParseMAC>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {
 8005bdc:	4962      	ldr	r1, [pc, #392]	; (8005d68 <ParseReceived+0xe10>)
 8005bde:	68b8      	ldr	r0, [r7, #8]
 8005be0:	f7fa faf6 	bl	80001d0 <strcmp>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 8082 	bne.w	8005cf0 <ParseReceived+0xd98>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	605a      	str	r2, [r3, #4]
            }
            break;
 8005bf2:	e07d      	b.n	8005cf0 <ParseReceived+0xd98>
#if ESP8266_USE_FIRMWAREUPDATE
        case ESP8266_COMMAND_CIUPDATE:
            if (strncmp(Received, "+CIPUPDATE:", 11) == 0) {    /* Check for strings for update */
 8005bf4:	220b      	movs	r2, #11
 8005bf6:	4960      	ldr	r1, [pc, #384]	; (8005d78 <ParseReceived+0xe20>)
 8005bf8:	68b8      	ldr	r0, [r7, #8]
 8005bfa:	f004 f8f4 	bl	8009de6 <strncmp>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10f      	bne.n	8005c24 <ParseReceived+0xccc>
                uint8_t num = CHAR2NUM(Received[11]);       /* Get current number */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	330b      	adds	r3, #11
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	3b30      	subs	r3, #48	; 0x30
 8005c0c:	767b      	strb	r3, [r7, #25]
                if (num == 4) {                             /* Check step */
 8005c0e:	7e7b      	ldrb	r3, [r7, #25]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d102      	bne.n	8005c1a <ParseReceived+0xcc2>
                    ESP8266->Timeout = (unsigned long)10 * ESP8266_TIMEOUT;    /* We are waiting last step, increase timeout */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a59      	ldr	r2, [pc, #356]	; (8005d7c <ParseReceived+0xe24>)
 8005c18:	619a      	str	r2, [r3, #24]
                }
                ESP8266_Callback_FirmwareUpdateStatus(ESP8266, (ESP8266_FirmwareUpdate_t) num);    /* Call user function */
 8005c1a:	7e7b      	ldrb	r3, [r7, #25]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 feed 	bl	80069fe <ESP8266_Callback_FirmwareUpdateStatus>
            }
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0 || strcmp(Received, "ready\r\n") == 0) {
 8005c24:	4950      	ldr	r1, [pc, #320]	; (8005d68 <ParseReceived+0xe10>)
 8005c26:	68b8      	ldr	r0, [r7, #8]
 8005c28:	f7fa fad2 	bl	80001d0 <strcmp>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <ParseReceived+0xce8>
 8005c32:	4953      	ldr	r1, [pc, #332]	; (8005d80 <ParseReceived+0xe28>)
 8005c34:	68b8      	ldr	r0, [r7, #8]
 8005c36:	f7fa facb 	bl	80001d0 <strcmp>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <ParseReceived+0xcfc>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	605a      	str	r2, [r3, #4]
                ESP8266->Timeout = ESP8266_TIMEOUT;         /* Reset timeout */                
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f247 5230 	movw	r2, #30000	; 0x7530
 8005c4c:	619a      	str	r2, [r3, #24]
                ESP8266_Callback_FirmwareUpdateSuccess(ESP8266);    /* Call user function */
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fee1 	bl	8006a16 <ESP8266_Callback_FirmwareUpdateSuccess>
            }
            if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0) {
 8005c54:	4945      	ldr	r1, [pc, #276]	; (8005d6c <ParseReceived+0xe14>)
 8005c56:	68b8      	ldr	r0, [r7, #8]
 8005c58:	f7fa faba 	bl	80001d0 <strcmp>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d148      	bne.n	8005cf4 <ParseReceived+0xd9c>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
                ESP8266->Timeout = ESP8266_TIMEOUT;         /* Reset timeout */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f247 5230 	movw	r2, #30000	; 0x7530
 8005c6e:	619a      	str	r2, [r3, #24]
                ESP8266_Callback_FirmwareUpdateError(ESP8266);    /* Call user function */
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 feda 	bl	8006a2a <ESP8266_Callback_FirmwareUpdateError>
            }
            break;
 8005c76:	e03d      	b.n	8005cf4 <ParseReceived+0xd9c>
#endif
#if ESP8266_USE_CONNECTED_STATIONS
        case ESP8266_COMMAND_CWLIF:
            if (CHARISNUM(Received[0])) {                   /* Check if first character is number */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c7e:	d907      	bls.n	8005c90 <ParseReceived+0xd38>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b39      	cmp	r3, #57	; 0x39
 8005c86:	d803      	bhi.n	8005c90 <ParseReceived+0xd38>
                ParseCWLIF(ESP8266, Received);              /* Parse response */
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7fe fd54 	bl	8004738 <ParseCWLIF>
            }
        
            if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {   /* Reset active command */
 8005c90:	4935      	ldr	r1, [pc, #212]	; (8005d68 <ParseReceived+0xe10>)
 8005c92:	68b8      	ldr	r0, [r7, #8]
 8005c94:	f7fa fa9c 	bl	80001d0 <strcmp>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d12c      	bne.n	8005cf8 <ParseReceived+0xda0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]
                ESP8266_Callback_ConnectedStationsDetected(ESP8266, &ESP8266->ConnectedStations);   /* Call user function */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005caa:	4619      	mov	r1, r3
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fec6 	bl	8006a3e <ESP8266_Callback_ConnectedStationsDetected>
            }
            break;
 8005cb2:	e021      	b.n	8005cf8 <ParseReceived+0xda0>
                ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
                ESP8266_Callback_SNTPError(ESP8266);        /* Call user function */
            }
#endif
        default:                                            /* No command was used to send, data received without command */
            break;
 8005cb4:	bf00      	nop
 8005cb6:	e020      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cb8:	bf00      	nop
 8005cba:	e01e      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cbc:	bf00      	nop
 8005cbe:	e01c      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cc0:	bf00      	nop
 8005cc2:	e01a      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cc4:	bf00      	nop
 8005cc6:	e018      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cc8:	bf00      	nop
 8005cca:	e016      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005ccc:	bf00      	nop
 8005cce:	e014      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cd0:	bf00      	nop
 8005cd2:	e012      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cd4:	bf00      	nop
 8005cd6:	e010      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cd8:	bf00      	nop
 8005cda:	e00e      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cdc:	bf00      	nop
 8005cde:	e00c      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005ce0:	bf00      	nop
 8005ce2:	e00a      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005ce4:	bf00      	nop
 8005ce6:	e008      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005ce8:	bf00      	nop
 8005cea:	e006      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cec:	bf00      	nop
 8005cee:	e004      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cf0:	bf00      	nop
 8005cf2:	e002      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cf4:	bf00      	nop
 8005cf6:	e000      	b.n	8005cfa <ParseReceived+0xda2>
            break;
 8005cf8:	bf00      	nop
    }
    
    if (strcmp(Received, ESP8266_RESPONSE_OK) == 0) {       /* Set flag for last operation status */
 8005cfa:	491b      	ldr	r1, [pc, #108]	; (8005d68 <ParseReceived+0xe10>)
 8005cfc:	68b8      	ldr	r0, [r7, #8]
 8005cfe:	f7fa fa67 	bl	80001d0 <strcmp>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d111      	bne.n	8005d2c <ParseReceived+0xdd4>
        ESP8266->Flags.F.LastOperationStatus = 1;
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        
        if (ESP8266->ActiveCommand != ESP8266_COMMAND_SEND && ESP8266->ActiveCommand != ESP8266_COMMAND_SENDDATA) {
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d006      	beq.n	8005d2c <ParseReceived+0xdd4>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b1d      	cmp	r3, #29
 8005d24:	d002      	beq.n	8005d2c <ParseReceived+0xdd4>
            ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* Reset active command */
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	605a      	str	r2, [r3, #4]
        }
    }
    if (strcmp(Received, ESP8266_RESPONSE_ERROR) == 0 || strcmp(Received, "busy p...\r\n") == 0) {
 8005d2c:	490f      	ldr	r1, [pc, #60]	; (8005d6c <ParseReceived+0xe14>)
 8005d2e:	68b8      	ldr	r0, [r7, #8]
 8005d30:	f7fa fa4e 	bl	80001d0 <strcmp>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <ParseReceived+0xdf0>
 8005d3a:	4912      	ldr	r1, [pc, #72]	; (8005d84 <ParseReceived+0xe2c>)
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	f7fa fa47 	bl	80001d0 <strcmp>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <ParseReceived+0xe04>
        ESP8266->Flags.F.LastOperationStatus = 0;
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8005d4e:	f36f 0341 	bfc	r3, #1, #1
 8005d52:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;      /* Reset active command */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	605a      	str	r2, [r3, #4]
        
        /* TODO: Check if ERROR here */
    } 
    return 0;                                               /* No remaining bytes to process */
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3734      	adds	r7, #52	; 0x34
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	0800b104 	.word	0x0800b104
 8005d6c:	0800b130 	.word	0x0800b130
 8005d70:	0800b21c 	.word	0x0800b21c
 8005d74:	0800b228 	.word	0x0800b228
 8005d78:	0800b234 	.word	0x0800b234
 8005d7c:	000493e0 	.word	0x000493e0
 8005d80:	0800b138 	.word	0x0800b138
 8005d84:	0800b140 	.word	0x0800b140

08005d88 <ESP8266_Init>:
/******************************************/

/******************************************/
/*          Basic AT commands Set         */
/******************************************/
ESP8266_Result_t ESP8266_Init(ESP8266_t* ESP8266, uint32_t baudrate) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
    uint8_t i;
    
    ESP8266->Timeout = 0;                                   /* Save settings */    
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	619a      	str	r2, [r3, #24]
    if (BUFFER_Init(&TMP_Buffer, ESP8266_TMPBUFFER_SIZE, TMPBuffer)) {  /* Init temporary buffer */
 8005d98:	4a76      	ldr	r2, [pc, #472]	; (8005f74 <ESP8266_Init+0x1ec>)
 8005d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d9e:	4876      	ldr	r0, [pc, #472]	; (8005f78 <ESP8266_Init+0x1f0>)
 8005da0:	f7fd fd22 	bl	80037e8 <BUFFER_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <ESP8266_Init+0x2e>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2204      	movs	r2, #4
 8005dae:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8005db2:	2304      	movs	r3, #4
 8005db4:	e0da      	b.n	8005f6c <ESP8266_Init+0x1e4>
    }
    if (BUFFER_Init(&USART_Buffer, ESP8266_USARTBUFFER_SIZE, USARTBuffer)) {    /* Init USART working */
 8005db6:	4a71      	ldr	r2, [pc, #452]	; (8005f7c <ESP8266_Init+0x1f4>)
 8005db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dbc:	4870      	ldr	r0, [pc, #448]	; (8005f80 <ESP8266_Init+0x1f8>)
 8005dbe:	f7fd fd13 	bl	80037e8 <BUFFER_Init>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <ESP8266_Init+0x4c>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	e0cb      	b.n	8005f6c <ESP8266_Init+0x1e4>
    }
    
    ESP8266_RESET_INIT;                                     /* Init RESET pin */
 8005dd4:	f7fa fd72 	bl	80008bc <MX_GPIO_Init>
    ESP8266_RESET_LOW;                                      /* Set pin low */
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2120      	movs	r1, #32
 8005ddc:	4869      	ldr	r0, [pc, #420]	; (8005f84 <ESP8266_Init+0x1fc>)
 8005dde:	f7fb fc09 	bl	80015f4 <HAL_GPIO_WritePin>
    ESP8266_DELAYMS(ESP8266, 100);                          /* Delay for while */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	bf00      	nop
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691a      	ldr	r2, [r3, #16]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b63      	cmp	r3, #99	; 0x63
 8005df4:	d9f9      	bls.n	8005dea <ESP8266_Init+0x62>
    ESP8266_RESET_HIGH;                                     /* Set pin high */
 8005df6:	2201      	movs	r2, #1
 8005df8:	2120      	movs	r1, #32
 8005dfa:	4862      	ldr	r0, [pc, #392]	; (8005f84 <ESP8266_Init+0x1fc>)
 8005dfc:	f7fb fbfa 	bl	80015f4 <HAL_GPIO_WritePin>
    ESP8266_DELAYMS(ESP8266, 100);                          /* Delay for while */    
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	bf00      	nop
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b63      	cmp	r3, #99	; 0x63
 8005e12:	d9f9      	bls.n	8005e08 <ESP8266_Init+0x80>
    ESP8266->Baudrate = baudrate;                           /* Save current baudrate */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	601a      	str	r2, [r3, #0]
    ESP8266_LL_USARTInit(ESP8266->Baudrate);                /* Init USART */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fe18 	bl	8006a54 <ESP8266_LL_USARTInit>
#if ESP8266_USE_CTS
    ESP8266_LL_SetRTS(ESP_RTS_LOW);                         /* Set RTS low */
    RTSStatus = ESP_RTS_LOW;
#endif
    ESP8266->Timeout = 1000;                                /* Set allowed timeout */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e2a:	619a      	str	r2, [r3, #24]
    
    SendCommand(ESP8266, ESP8266_COMMAND_RST, "AT+RST\r\n", "ready\r\n");   /* Reset device */
 8005e2c:	4b56      	ldr	r3, [pc, #344]	; (8005f88 <ESP8266_Init+0x200>)
 8005e2e:	4a57      	ldr	r2, [pc, #348]	; (8005f8c <ESP8266_Init+0x204>)
 8005e30:	210f      	movs	r1, #15
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fe fd40 	bl	80048b8 <SendCommand>
    ESP8266_WaitReady(ESP8266);                             /* Wait till idle */
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb49 	bl	80064d0 <ESP8266_WaitReady>

    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check status */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12b      	bne.n	8005ea6 <ESP8266_Init+0x11e>
        for (i = 0; i < sizeof(ESP8266_Baudrate) / sizeof(ESP8266_Baudrate[0]); i++) {  /* Check for baudrate, try with predefined baudrates */
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
 8005e52:	e025      	b.n	8005ea0 <ESP8266_Init+0x118>
            ESP8266_LL_USARTInit(ESP8266_Baudrate[i]);      /* Init USART */    
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	4a4e      	ldr	r2, [pc, #312]	; (8005f90 <ESP8266_Init+0x208>)
 8005e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fdf9 	bl	8006a54 <ESP8266_LL_USARTInit>
            ESP8266->Timeout = 1000;                        /* Set allowed timeout */        
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e68:	619a      	str	r2, [r3, #24]
            SendCommand(ESP8266, ESP8266_COMMAND_RST, "AT+RST\r\n", "ready\r\n");   /* Reset device */    
 8005e6a:	4b47      	ldr	r3, [pc, #284]	; (8005f88 <ESP8266_Init+0x200>)
 8005e6c:	4a47      	ldr	r2, [pc, #284]	; (8005f8c <ESP8266_Init+0x204>)
 8005e6e:	210f      	movs	r1, #15
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fe fd21 	bl	80048b8 <SendCommand>
            ESP8266_WaitReady(ESP8266);                     /* Wait till idle */
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fb2a 	bl	80064d0 <ESP8266_WaitReady>
            if (ESP8266->Flags.F.LastOperationStatus) {     /* Check status */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <ESP8266_Init+0x112>
                ESP8266->Baudrate = ESP8266_Baudrate[i];    /* Save current baudrate */
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	4a40      	ldr	r2, [pc, #256]	; (8005f90 <ESP8266_Init+0x208>)
 8005e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
                break;
 8005e98:	e005      	b.n	8005ea6 <ESP8266_Init+0x11e>
        for (i = 0; i < sizeof(ESP8266_Baudrate) / sizeof(ESP8266_Baudrate[0]); i++) {  /* Check for baudrate, try with predefined baudrates */
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	75fb      	strb	r3, [r7, #23]
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d9d6      	bls.n	8005e54 <ESP8266_Init+0xcc>
            }
        }
    }
    
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check status */    
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <ESP8266_Init+0x13a>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);  /* Device is not connected */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e054      	b.n	8005f6c <ESP8266_Init+0x1e4>
    }
    ESP8266->Timeout = ESP8266_TIMEOUT;                     /* Set allowed timeout to 30sec */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f247 5230 	movw	r2, #30000	; 0x7530
 8005ec8:	619a      	str	r2, [r3, #24]
    SendCommand(ESP8266, ESP8266_COMMAND_AT, "AT\r\n", ESP8266_RESPONSE_OK);    /* Test device */
 8005eca:	4b32      	ldr	r3, [pc, #200]	; (8005f94 <ESP8266_Init+0x20c>)
 8005ecc:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <ESP8266_Init+0x210>)
 8005ece:	210e      	movs	r1, #14
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fe fcf1 	bl	80048b8 <SendCommand>
    ESP8266_WaitReady(ESP8266);                             /* Wait till idle */
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fafa 	bl	80064d0 <ESP8266_WaitReady>
    
    if (!ESP8266->Flags.F.LastOperationStatus) {            /* Check status */    
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <ESP8266_Init+0x170>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e039      	b.n	8005f6c <ESP8266_Init+0x1e4>
    }
    
#if ESP8266_ECHO
    SendCommand(ESP8266, ESP8266_COMMAND_ATE, "ATE1\r\n", "ATE1");  /* Enable echo if not already */
#else
    SendCommand(ESP8266, ESP8266_COMMAND_ATE, "ATE0\r\n", "ATE0");  /* Disable echo if not already */
 8005ef8:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <ESP8266_Init+0x214>)
 8005efa:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <ESP8266_Init+0x218>)
 8005efc:	210d      	movs	r1, #13
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fe fcda 	bl	80048b8 <SendCommand>
#endif
    ESP8266_WaitReady(ESP8266);                             /* Wait till idle */
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fae3 	bl	80064d0 <ESP8266_WaitReady>
    
    while (ESP8266_SetMux(ESP8266, 1) != ESP_OK);           /* Enable multiple connections */
 8005f0a:	bf00      	nop
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fe fe26 	bl	8004b60 <ESP8266_SetMux>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f8      	bne.n	8005f0c <ESP8266_Init+0x184>
    while (ESP8266_Setdinfo(ESP8266, 1) != ESP_OK);         /* Enable IP and PORT to be shown on +IPD statement */
 8005f1a:	bf00      	nop
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fe fe6e 	bl	8004c00 <ESP8266_Setdinfo>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f8      	bne.n	8005f1c <ESP8266_Init+0x194>
    while (ESP8266_SetMode(ESP8266, ESP8266_Mode_STA_AP) != ESP_OK);    /* Set mode to STA+AP by default */
 8005f2a:	bf00      	nop
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb58 	bl	80065e4 <ESP8266_SetMode>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f8      	bne.n	8005f2c <ESP8266_Init+0x1a4>
    while (ESP8266_GetSTAMAC(ESP8266) != ESP_OK);           /* Get station MAC */
 8005f3a:	bf00      	nop
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fc19 	bl	8006774 <ESP8266_GetSTAMAC>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f9      	bne.n	8005f3c <ESP8266_Init+0x1b4>
    while (ESP8266_GetAPMAC(ESP8266) != ESP_OK);            /* Get softAP MAC */
 8005f48:	bf00      	nop
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fc34 	bl	80067b8 <ESP8266_GetAPMAC>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f9      	bne.n	8005f4a <ESP8266_Init+0x1c2>
    while (ESP8266_GetAPIP(ESP8266) != ESP_OK);             /* Get softAP IP */
 8005f56:	bf00      	nop
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fbdb 	bl	8006714 <ESP8266_GetAPIP>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f9      	bne.n	8005f58 <ESP8266_Init+0x1d0>
#if ESP8266_USE_CTS
    ESP8266_WaitReady(ESP8266);                             /* Wait ready state */
    while (ESP8266_SetUART(ESP8266, baudrate) != ESP_OK);   /* Set UART and enable CTS pin on ESP8266 */
#endif
    
    return ESP8266_WaitReady(ESP8266);                      /* Return wait ready status for last operation */
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fab3 	bl	80064d0 <ESP8266_WaitReady>
 8005f6a:	4603      	mov	r3, r0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20001bfc 	.word	0x20001bfc
 8005f78:	20001bcc 	.word	0x20001bcc
 8005f7c:	20001dfc 	.word	0x20001dfc
 8005f80:	20001be4 	.word	0x20001be4
 8005f84:	40020400 	.word	0x40020400
 8005f88:	0800b138 	.word	0x0800b138
 8005f8c:	0800b268 	.word	0x0800b268
 8005f90:	2000000c 	.word	0x2000000c
 8005f94:	0800b104 	.word	0x0800b104
 8005f98:	0800b274 	.word	0x0800b274
 8005f9c:	0800b27c 	.word	0x0800b27c
 8005fa0:	0800b284 	.word	0x0800b284

08005fa4 <ESP8266_Update>:
}

/******************************************/
/*          UPDATE STACK PROCESS          */
/******************************************/
ESP8266_Result_t ESP8266_Update(ESP8266_t* ESP8266) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b0aa      	sub	sp, #168	; 0xa8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    char ch, Received[128];
    uint8_t lastcmd;
    uint16_t stringlength, receivedleft;    
    
    if (ESP8266->Timeout == 0) {                            /* If timeout is set to 0 */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <ESP8266_Update+0x18>
        ESP8266->Timeout = 30000;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f247 5230 	movw	r2, #30000	; 0x7530
 8005fba:	619a      	str	r2, [r3, #24]
    }
    
    if ((ESP8266->Time - ESP8266->StartTime) > ESP8266->Timeout) {  /* Check timeout */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d955      	bls.n	800607a <ESP8266_Update+0xd6>
        lastcmd = ESP8266->ActiveCommand;                   /* Save temporary active command */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
        ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;      /* Timeout reached, reset command */        
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	605a      	str	r2, [r3, #4]
        if (lastcmd == ESP8266_COMMAND_CIPSTART) {          /* Timeout reached */
 8005fdc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8005fe0:	2b0a      	cmp	r3, #10
 8005fe2:	d14a      	bne.n	800607a <ESP8266_Update+0xd6>
            ESP8266_RESET_CONNECTION(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);   /* We get timeout on cipstart */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8005fea:	4619      	mov	r1, r3
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	232c      	movs	r3, #44	; 0x2c
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005ffa:	7913      	ldrb	r3, [r2, #4]
 8005ffc:	f36f 0300 	bfc	r3, #0, #1
 8006000:	7113      	strb	r3, [r2, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8006008:	4619      	mov	r1, r3
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	232c      	movs	r3, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006018:	7913      	ldrb	r3, [r2, #4]
 800601a:	f36f 0341 	bfc	r3, #1, #1
 800601e:	7113      	strb	r3, [r2, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8006026:	4619      	mov	r1, r3
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	232c      	movs	r3, #44	; 0x2c
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006036:	7913      	ldrb	r3, [r2, #4]
 8006038:	f36f 1386 	bfc	r3, #6, #1
 800603c:	7113      	strb	r3, [r2, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8006044:	4619      	mov	r1, r3
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	232c      	movs	r3, #44	; 0x2c
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	4413      	add	r3, r2
 8006050:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006054:	7913      	ldrb	r3, [r2, #4]
 8006056:	f36f 1345 	bfc	r3, #5, #1
 800605a:	7113      	strb	r3, [r2, #4]
            ESP8266_Callback_ClientConnectionTimeout(ESP8266, &ESP8266->Connection[ESP8266->StartConnectionSent]);  /* Call user function */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f993 317b 	ldrsb.w	r3, [r3, #379]	; 0x17b
 8006062:	461a      	mov	r2, r3
 8006064:	232c      	movs	r3, #44	; 0x2c
 8006066:	fb02 f303 	mul.w	r3, r2, r3
 800606a:	3318      	adds	r3, #24
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	3304      	adds	r3, #4
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fca1 	bl	80069bc <ESP8266_Callback_ClientConnectionTimeout>
        }
    }
    
    if (ESP8266->ActiveCommand == ESP8266_COMMAND_SENDDATA) {   /* We are waiting to send data */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2b1d      	cmp	r3, #29
 8006080:	d13d      	bne.n	80060fe <ESP8266_Update+0x15a>
        if (ESP8266->Flags.F.WaitForWrapper) {              /* Check what we are searching for */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d035      	beq.n	80060fe <ESP8266_Update+0x15a>
            int16_t found;
            uint8_t dummy[2];
            
            if ((found = BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2)) >= 0) {    /* Wait for character */
 8006092:	2202      	movs	r2, #2
 8006094:	4987      	ldr	r1, [pc, #540]	; (80062b4 <ESP8266_Update+0x310>)
 8006096:	4888      	ldr	r0, [pc, #544]	; (80062b8 <ESP8266_Update+0x314>)
 8006098:	f7fd fdc8 	bl	8003c2c <BUFFER_Find>
 800609c:	4603      	mov	r3, r0
 800609e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80060a2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	db0b      	blt.n	80060c2 <ESP8266_Update+0x11e>
                if (found == 0) {
 80060aa:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11e      	bne.n	80060f0 <ESP8266_Update+0x14c>
                    BUFFER_Read(&USART_Buffer, dummy, 2);   /* Make a dummy read */
 80060b2:	f107 0308 	add.w	r3, r7, #8
 80060b6:	2202      	movs	r2, #2
 80060b8:	4619      	mov	r1, r3
 80060ba:	487f      	ldr	r0, [pc, #508]	; (80062b8 <ESP8266_Update+0x314>)
 80060bc:	f7fd fc9c 	bl	80039f8 <BUFFER_Read>
 80060c0:	e016      	b.n	80060f0 <ESP8266_Update+0x14c>
                        ESP8266_LL_SetRTS(ESP_RTS_LOW);
                        RTSStatus = ESP_RTS_LOW;
                    }
#endif
                }
            } else if ((found = BUFFER_Find(&TMP_Buffer, (uint8_t *)"> ", 2)) >= 0) {
 80060c2:	2202      	movs	r2, #2
 80060c4:	497b      	ldr	r1, [pc, #492]	; (80062b4 <ESP8266_Update+0x310>)
 80060c6:	487d      	ldr	r0, [pc, #500]	; (80062bc <ESP8266_Update+0x318>)
 80060c8:	f7fd fdb0 	bl	8003c2c <BUFFER_Find>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80060d2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	db0a      	blt.n	80060f0 <ESP8266_Update+0x14c>
                if (found == 0) {
 80060da:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <ESP8266_Update+0x14c>
                    BUFFER_Read(&TMP_Buffer, dummy, 2);     /* Make 2 dummy reads */
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	2202      	movs	r2, #2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4874      	ldr	r0, [pc, #464]	; (80062bc <ESP8266_Update+0x318>)
 80060ec:	f7fd fc84 	bl	80039f8 <BUFFER_Read>
                }
            }
            if (found >= 0) {
 80060f0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db02      	blt.n	80060fe <ESP8266_Update+0x15a>
                ProcessSendData(ESP8266);                   /* Send data */
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7fe fcd7 	bl	8004aac <ProcessSendData>
            }
        }
    }
    
    if (                                                    /* If AT+UART command was used, only check if "OK" exists in buffer */
        ESP8266->ActiveCommand == ESP8266_COMMAND_UART &&   /* Active command is UART change */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
    if (                                                    /* If AT+UART command was used, only check if "OK" exists in buffer */
 8006102:	2b11      	cmp	r3, #17
 8006104:	d137      	bne.n	8006176 <ESP8266_Update+0x1d2>
        !ESP8266->IPD.InIPD                                 /* We are not in IPD mode */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
        ESP8266->ActiveCommand == ESP8266_COMMAND_UART &&   /* Active command is UART change */
 800610c:	2b00      	cmp	r3, #0
 800610e:	d132      	bne.n	8006176 <ESP8266_Update+0x1d2>
    ) {
        if (BUFFER_Find(&USART_Buffer, (uint8_t *)ESP8266_RESPONSE_OK, 4) >= 0) {   /* Check for "OK\r" */
 8006110:	2204      	movs	r2, #4
 8006112:	496b      	ldr	r1, [pc, #428]	; (80062c0 <ESP8266_Update+0x31c>)
 8006114:	4868      	ldr	r0, [pc, #416]	; (80062b8 <ESP8266_Update+0x314>)
 8006116:	f7fd fd89 	bl	8003c2c <BUFFER_Find>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	db2a      	blt.n	8006176 <ESP8266_Update+0x1d2>
            BUFFER_Reset(&USART_Buffer);                    /* Clear buffer, invalid all data */
 8006120:	4865      	ldr	r0, [pc, #404]	; (80062b8 <ESP8266_Update+0x314>)
 8006122:	f7fd fd36 	bl	8003b92 <BUFFER_Reset>
            ESP8266->ActiveCommand = ESP8266_COMMAND_IDLE;  /* We are OK here */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	605a      	str	r2, [r3, #4]
            ESP8266->Flags.F.LastOperationStatus = 1;       /* Last command is OK */
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	f892 31f1 	ldrb.w	r3, [r2, #497]	; 0x1f1
 8006132:	f043 0302 	orr.w	r3, r3, #2
 8006136:	f882 31f1 	strb.w	r3, [r2, #497]	; 0x1f1
        }
    }
    
    while (                                                 /* Get string from USART buffer if we are not in IPD mode */
 800613a:	e01c      	b.n	8006176 <ESP8266_Update+0x1d2>
        if (RTSStatus != ESP_RTS_LOW) {
            RTSStatus = ESP_RTS_LOW;                        /* Set CTS low */
            ESP8266_LL_SetRTS(ESP_RTS_LOW);
        }
#endif
        receivedleft = ParseReceived(ESP8266, Received, stringlength, 1);   /* Parse received string */
 800613c:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8006140:	f107 010c 	add.w	r1, r7, #12
 8006144:	2301      	movs	r3, #1
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fe ff06 	bl	8004f58 <ParseReceived>
 800614c:	4603      	mov	r3, r0
 800614e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if (receivedleft > 0) {                             /* Copy bytes we didn't proceed to beginning of buffer, this should never happen but just in case. If should be handled in if statement below */
 8006152:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <ESP8266_Update+0x1d2>
#if ESP8266_USE_CTS
            ESP8266_LL_SetRTS(ESP_RTS_HIGH);                /* Disable receive operations */
#endif
            BUFFER_WriteToTop(&USART_Buffer, (uint8_t *)&Received[stringlength - receivedleft], receivedleft); /* Write remaining data to top of memory */
 800615a:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 800615e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f107 020c 	add.w	r2, r7, #12
 8006168:	4413      	add	r3, r2
 800616a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800616e:	4619      	mov	r1, r3
 8006170:	4851      	ldr	r0, [pc, #324]	; (80062b8 <ESP8266_Update+0x314>)
 8006172:	f7fd fbe4 	bl	800393e <BUFFER_WriteToTop>
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
    while (                                                 /* Get string from USART buffer if we are not in IPD mode */
 800617c:	2b00      	cmp	r3, #0
 800617e:	d12b      	bne.n	80061d8 <ESP8266_Update+0x234>
        (stringlength = BUFFER_ReadString(&USART_Buffer, Received, sizeof(Received))) > 0   /* Something in USART buffer */
 8006180:	f107 030c 	add.w	r3, r7, #12
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	4619      	mov	r1, r3
 8006188:	484b      	ldr	r0, [pc, #300]	; (80062b8 <ESP8266_Update+0x314>)
 800618a:	f7fd fdd7 	bl	8003d3c <BUFFER_ReadString>
 800618e:	4603      	mov	r3, r0
 8006190:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 8006194:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1cf      	bne.n	800613c <ESP8266_Update+0x198>
            ESP8266_LL_SetRTS(ESP_RTS_LOW);                 /* Enable receive operations */
#endif
        }
    }
    
    while (                                                 /* Get string from TMP buffer when no command active */
 800619c:	e01c      	b.n	80061d8 <ESP8266_Update+0x234>
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
        ESP8266->ActiveCommand == ESP8266_COMMAND_IDLE &&   /* We are in IDLE mode */
        (stringlength = BUFFER_ReadString(&TMP_Buffer, Received, sizeof(Received))) > 0 /* Something in TMP buffer */
    ) {    
        receivedleft = ParseReceived(ESP8266, Received, stringlength, 0);   /* Parse received string */
 800619e:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80061a2:	f107 010c 	add.w	r1, r7, #12
 80061a6:	2300      	movs	r3, #0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fe fed5 	bl	8004f58 <ParseReceived>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        if (receivedleft > 0) {
 80061b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <ESP8266_Update+0x234>
            BUFFER_WriteToTop(&TMP_Buffer, (uint8_t *)&Received[stringlength - receivedleft], receivedleft);    /* Write data to top of buffer */
 80061bc:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80061c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f107 020c 	add.w	r2, r7, #12
 80061ca:	4413      	add	r3, r2
 80061cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061d0:	4619      	mov	r1, r3
 80061d2:	483a      	ldr	r0, [pc, #232]	; (80062bc <ESP8266_Update+0x318>)
 80061d4:	f7fd fbb3 	bl	800393e <BUFFER_WriteToTop>
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
    while (                                                 /* Get string from TMP buffer when no command active */
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d111      	bne.n	8006206 <ESP8266_Update+0x262>
        ESP8266->ActiveCommand == ESP8266_COMMAND_IDLE &&   /* We are in IDLE mode */
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
        !ESP8266->IPD.InIPD &&                              /* Not in IPD mode */
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <ESP8266_Update+0x262>
        (stringlength = BUFFER_ReadString(&TMP_Buffer, Received, sizeof(Received))) > 0 /* Something in TMP buffer */
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	4619      	mov	r1, r3
 80061f2:	4832      	ldr	r0, [pc, #200]	; (80062bc <ESP8266_Update+0x318>)
 80061f4:	f7fd fda2 	bl	8003d3c <BUFFER_ReadString>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        ESP8266->ActiveCommand == ESP8266_COMMAND_IDLE &&   /* We are in IDLE mode */
 80061fe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1cb      	bne.n	800619e <ESP8266_Update+0x1fa>
        }
    }
    
    if (!ESP8266->IPD.InIPD) {                              /* Manually check for IPD statements, +IPD format: +IPD,a,bbbb,ccc.ccc.ccc.ccc,ddddd: */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800620c:	2b00      	cmp	r3, #0
 800620e:	d13d      	bne.n	800628c <ESP8266_Update+0x2e8>
        int32_t ipd_pos;
        
        if (USART_Buffer.Buffer[USART_Buffer.Out] == '+') { /* Check if first character to read is plus sign, small optimization to prevent buffer search all the time */
 8006210:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <ESP8266_Update+0x314>)
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	4b28      	ldr	r3, [pc, #160]	; (80062b8 <ESP8266_Update+0x314>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4413      	add	r3, r2
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b2b      	cmp	r3, #43	; 0x2b
 800621e:	d135      	bne.n	800628c <ESP8266_Update+0x2e8>
            ipd_pos = BUFFER_Find(&USART_Buffer, (uint8_t *)"+IPD,", 5);    /* Try to find +IPD statement in buffer */
 8006220:	2205      	movs	r2, #5
 8006222:	4928      	ldr	r1, [pc, #160]	; (80062c4 <ESP8266_Update+0x320>)
 8006224:	4824      	ldr	r0, [pc, #144]	; (80062b8 <ESP8266_Update+0x314>)
 8006226:	f7fd fd01 	bl	8003c2c <BUFFER_Find>
 800622a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
            if (ipd_pos == 0) {                             /* +IPD is on start of buffer read operations */
 800622e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006232:	2b00      	cmp	r3, #0
 8006234:	d12a      	bne.n	800628c <ESP8266_Update+0x2e8>
                ipd_pos = BUFFER_Find(&USART_Buffer, (uint8_t *)":", 1);
 8006236:	2201      	movs	r2, #1
 8006238:	4923      	ldr	r1, [pc, #140]	; (80062c8 <ESP8266_Update+0x324>)
 800623a:	481f      	ldr	r0, [pc, #124]	; (80062b8 <ESP8266_Update+0x314>)
 800623c:	f7fd fcf6 	bl	8003c2c <BUFFER_Find>
 8006240:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (ipd_pos > 0 &&  ipd_pos < 35) {         /* Check if colon exists and is in valid range */
 8006244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006248:	2b00      	cmp	r3, #0
 800624a:	dd1f      	ble.n	800628c <ESP8266_Update+0x2e8>
 800624c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006250:	2b22      	cmp	r3, #34	; 0x22
 8006252:	dc1b      	bgt.n	800628c <ESP8266_Update+0x2e8>
                    stringlength = BUFFER_Read(&USART_Buffer, (uint8_t *)Received, ipd_pos + 1);    /* Read from buffer until colon is received */
 8006254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006258:	3301      	adds	r3, #1
 800625a:	461a      	mov	r2, r3
 800625c:	f107 030c 	add.w	r3, r7, #12
 8006260:	4619      	mov	r1, r3
 8006262:	4815      	ldr	r0, [pc, #84]	; (80062b8 <ESP8266_Update+0x314>)
 8006264:	f7fd fbc8 	bl	80039f8 <BUFFER_Read>
 8006268:	4603      	mov	r3, r0
 800626a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    Received[stringlength] = 0;             /* Add zero to the end of read string */
 800626e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006272:	33a8      	adds	r3, #168	; 0xa8
 8006274:	443b      	add	r3, r7
 8006276:	2200      	movs	r2, #0
 8006278:	f803 2c9c 	strb.w	r2, [r3, #-156]
                    ParseReceived(ESP8266, Received, stringlength, 1);    /* Start parsing +IPD statement */
 800627c:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8006280:	f107 010c 	add.w	r1, r7, #12
 8006284:	2301      	movs	r3, #1
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fe fe66 	bl	8004f58 <ParseReceived>
                }
            }
        }
    }
    
    if (ESP8266->IPD.InIPD) {                               /* If we are in IPD mode */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80fa 	beq.w	800648c <ESP8266_Update+0x4e8>
        BUFFER_t* buff;
        if (ESP8266->IPD.USART_Buffer) {                    /* Get proper buffer for operation */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3151 	ldrb.w	r3, [r3, #337]	; 0x151
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <ESP8266_Update+0x306>
            buff = &USART_Buffer;                           /* Use USART buffer as working buffer */
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <ESP8266_Update+0x314>)
 80062a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062a8:	e03a      	b.n	8006320 <ESP8266_Update+0x37c>
        } else {
            buff = &TMP_Buffer;                             /* Use TMP buffer as working buffer */
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <ESP8266_Update+0x318>)
 80062ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        }
        
        while (                                             /* If anything received */
 80062b0:	e036      	b.n	8006320 <ESP8266_Update+0x37c>
 80062b2:	bf00      	nop
 80062b4:	0800b28c 	.word	0x0800b28c
 80062b8:	20001be4 	.word	0x20001be4
 80062bc:	20001bcc 	.word	0x20001bcc
 80062c0:	0800b104 	.word	0x0800b104
 80062c4:	0800b14c 	.word	0x0800b14c
 80062c8:	0800afec 	.word	0x0800afec
            ESP8266->IPD.PtrTotal < ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived &&   /* Until everything received*/
            BUFFER_GetFull(buff) > 0                        /* Data are available in buffer */
        ) {
            BUFFER_Read(buff, (uint8_t *)&ch, 1);           /* Read from buffer */
 80062cc:	f107 038f 	add.w	r3, r7, #143	; 0x8f
 80062d0:	2201      	movs	r2, #1
 80062d2:	4619      	mov	r1, r3
 80062d4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80062d8:	f7fd fb8e 	bl	80039f8 <BUFFER_Read>
            if (RTSStatus != ESP_RTS_LOW) {                 /* Set CTS low again */
                RTSStatus = ESP_RTS_LOW;
                ESP8266_LL_SetRTS(ESP_RTS_LOW);
            }
#endif    
            ESP8266->Connection[ESP8266->IPD.ConnNumber].Data[ESP8266->IPD.InPtr] = ch; /* Add from buffer */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80062e2:	4619      	mov	r1, r3
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	232c      	movs	r3, #44	; 0x2c
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	3330      	adds	r3, #48	; 0x30
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	f8b2 214c 	ldrh.w	r2, [r2, #332]	; 0x14c
 80062f8:	4413      	add	r3, r2
 80062fa:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80062fe:	701a      	strb	r2, [r3, #0]
            ESP8266->IPD.InPtr++;                           /* Increase current packet pointer */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8006306:	3301      	adds	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
            ESP8266->IPD.PtrTotal++;                        /* Increase global packet pointer */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8006316:	3301      	adds	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
            ESP8266->IPD.PtrTotal < ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived &&   /* Until everything received*/
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8006326:	4619      	mov	r1, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800632e:	4618      	mov	r0, r3
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	232c      	movs	r3, #44	; 0x2c
 8006334:	fb00 f303 	mul.w	r3, r0, r3
 8006338:	4413      	add	r3, r2
 800633a:	3328      	adds	r3, #40	; 0x28
 800633c:	681b      	ldr	r3, [r3, #0]
        while (                                             /* If anything received */
 800633e:	4299      	cmp	r1, r3
 8006340:	d206      	bcs.n	8006350 <ESP8266_Update+0x3ac>
            BUFFER_GetFull(buff) > 0                        /* Data are available in buffer */
 8006342:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006346:	f7fd fbf5 	bl	8003b34 <BUFFER_GetFull>
 800634a:	4603      	mov	r3, r0
            ESP8266->IPD.PtrTotal < ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived &&   /* Until everything received*/
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1bd      	bne.n	80062cc <ESP8266_Update+0x328>
                ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.FirstPacket = 0;
            }
#endif
        }
        
        if (ESP8266->IPD.PtrTotal >= ESP8266->Connection[ESP8266->IPD.ConnNumber].BytesReceived) {  /* Check if everything received */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8006356:	4619      	mov	r1, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800635e:	4618      	mov	r0, r3
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	232c      	movs	r3, #44	; 0x2c
 8006364:	fb00 f303 	mul.w	r3, r0, r3
 8006368:	4413      	add	r3, r2
 800636a:	3328      	adds	r3, #40	; 0x28
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4299      	cmp	r1, r3
 8006370:	f0c0 808c 	bcc.w	800648c <ESP8266_Update+0x4e8>
            char* ptr;
            ESP8266->IPD.InIPD = 0;                         /* Not in IPD anymore */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
            
            ESP8266->Connection[ESP8266->IPD.ConnNumber].DataSize = ESP8266->IPD.InPtr; /* Set package data size */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006382:	4618      	mov	r0, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	232c      	movs	r3, #44	; 0x2c
 800638e:	fb00 f303 	mul.w	r3, r0, r3
 8006392:	4413      	add	r3, r2
 8006394:	3334      	adds	r3, #52	; 0x34
 8006396:	460a      	mov	r2, r1
 8006398:	801a      	strh	r2, [r3, #0]
            ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.LastPart = 1;  /* Last part of package */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80063a0:	4619      	mov	r1, r3
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	232c      	movs	r3, #44	; 0x2c
 80063a6:	fb01 f303 	mul.w	r3, r1, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80063b0:	7913      	ldrb	r3, [r2, #4]
 80063b2:	f043 0310 	orr.w	r3, r3, #16
 80063b6:	7113      	strb	r3, [r2, #4]
            
            if (                                            /* We have data, lets see if Content-Length exists and save it */
                ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.FirstPacket &&
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80063be:	4619      	mov	r1, r3
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	232c      	movs	r3, #44	; 0x2c
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	3340      	adds	r3, #64	; 0x40
 80063cc:	791b      	ldrb	r3, [r3, #4]
 80063ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80063d2:	b2db      	uxtb	r3, r3
            if (                                            /* We have data, lets see if Content-Length exists and save it */
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d04a      	beq.n	800646e <ESP8266_Update+0x4ca>
                (
                    (ptr = strstr(ESP8266->Connection[ESP8266->IPD.ConnNumber].Data, "Content-Length:")) != NULL ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80063de:	4619      	mov	r1, r3
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	232c      	movs	r3, #44	; 0x2c
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	3330      	adds	r3, #48	; 0x30
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	492d      	ldr	r1, [pc, #180]	; (80064a4 <ESP8266_Update+0x500>)
 80063f0:	4618      	mov	r0, r3
 80063f2:	f003 fd1f 	bl	8009e34 <strstr>
 80063f6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.FirstPacket &&
 80063fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d114      	bne.n	800642c <ESP8266_Update+0x488>
                    (ptr = strstr(ESP8266->Connection[ESP8266->IPD.ConnNumber].Data, "content-length:")) != NULL
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006408:	4619      	mov	r1, r3
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	232c      	movs	r3, #44	; 0x2c
 800640e:	fb01 f303 	mul.w	r3, r1, r3
 8006412:	4413      	add	r3, r2
 8006414:	3330      	adds	r3, #48	; 0x30
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4923      	ldr	r1, [pc, #140]	; (80064a8 <ESP8266_Update+0x504>)
 800641a:	4618      	mov	r0, r3
 800641c:	f003 fd0a 	bl	8009e34 <strstr>
 8006420:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                    (ptr = strstr(ESP8266->Connection[ESP8266->IPD.ConnNumber].Data, "Content-Length:")) != NULL ||
 8006424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d020      	beq.n	800646e <ESP8266_Update+0x4ca>
                )
            ) {
                ptr += 15;                                  /* Increase pointer and parse number */
 800642c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006430:	330f      	adds	r3, #15
 8006432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                if (*ptr == ' ') {
 8006436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b20      	cmp	r3, #32
 800643e:	d104      	bne.n	800644a <ESP8266_Update+0x4a6>
                    ptr++;
 8006440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006444:	3301      	adds	r3, #1
 8006446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                }
                ESP8266->Connection[ESP8266->IPD.ConnNumber].ContentLength = ParseNumber(ptr, NULL);    /* Parse content length */
 800644a:	2100      	movs	r1, #0
 800644c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006450:	f7fd fd50 	bl	8003ef4 <ParseNumber>
 8006454:	4602      	mov	r2, r0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800645c:	4618      	mov	r0, r3
 800645e:	4611      	mov	r1, r2
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	232c      	movs	r3, #44	; 0x2c
 8006464:	fb00 f303 	mul.w	r3, r0, r3
 8006468:	4413      	add	r3, r2
 800646a:	3338      	adds	r3, #56	; 0x38
 800646c:	6019      	str	r1, [r3, #0]
            }
            ESP8266->Connection[ESP8266->IPD.ConnNumber].Flags.F.CallDataReceived = 1;  /* Set flag to trigger callback for data received */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006474:	4619      	mov	r1, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	232c      	movs	r3, #44	; 0x2c
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	4413      	add	r3, r2
 8006480:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006484:	7913      	ldrb	r3, [r2, #4]
 8006486:	f043 0308 	orr.w	r3, r3, #8
 800648a:	7113      	strb	r3, [r2, #4]
        }
    }
    
    CallConnectionCallbacks(ESP8266);                       /* Call user functions on connections */
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fe fa78 	bl	8004982 <CallConnectionCallbacks>
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	37a8      	adds	r7, #168	; 0xa8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	0800b290 	.word	0x0800b290
 80064a8:	0800b2a0 	.word	0x0800b2a0

080064ac <ESP8266_TimeUpdate>:

/******************************************/
/*           STACK TIME UPDATE            */
/******************************************/
void ESP8266_TimeUpdate(ESP8266_t* ESP8266, uint32_t time_increase) {
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
    ESP8266->Time += time_increase;                         /* Increase time */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	441a      	add	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	611a      	str	r2, [r3, #16]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <ESP8266_WaitReady>:

/******************************************/
/*          DEVICE READY STATUS           */
/******************************************/
ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
    do {                                                    /* Do job */
        if (ESP8266->Flags.F.WaitForWrapper) {              /* Check for wrapper */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 31f1 	ldrb.w	r3, [r3, #497]	; 0x1f1
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <ESP8266_WaitReady+0x28>
            if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {  /* We have found it, stop execution here */
 80064e8:	2202      	movs	r2, #2
 80064ea:	490c      	ldr	r1, [pc, #48]	; (800651c <ESP8266_WaitReady+0x4c>)
 80064ec:	480c      	ldr	r0, [pc, #48]	; (8006520 <ESP8266_WaitReady+0x50>)
 80064ee:	f7fd fb9d 	bl	8003c2c <BUFFER_Find>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	da07      	bge.n	8006508 <ESP8266_WaitReady+0x38>
                //ESP8266->Flags.F.WaitForWrapper = 0;
                break;
            }
        }
        ESP8266_Update(ESP8266);                            /* Update device */
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff fd53 	bl	8005fa4 <ESP8266_Update>
    } while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e8      	bne.n	80064d8 <ESP8266_WaitReady+0x8>
 8006506:	e000      	b.n	800650a <ESP8266_WaitReady+0x3a>
                break;
 8006508:	bf00      	nop
    ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);              /* Return OK */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	0800b28c 	.word	0x0800b28c
 8006520:	20001be4 	.word	0x20001be4

08006524 <ESP8266_WifiDisconnect>:
}

/******************************************/
/*            WIFI MANAGEMENT             */
/******************************************/
ESP8266_Result_t ESP8266_WifiDisconnect(ESP8266_t* ESP8266) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
    return SendCommand(ESP8266, ESP8266_COMMAND_CWQAP, "AT+CWQAP\r\n", "AT+CWQAP"); /* Send command */
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <ESP8266_WifiDisconnect+0x20>)
 800652e:	4a06      	ldr	r2, [pc, #24]	; (8006548 <ESP8266_WifiDisconnect+0x24>)
 8006530:	2101      	movs	r1, #1
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fe f9c0 	bl	80048b8 <SendCommand>
 8006538:	4603      	mov	r3, r0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	0800b2b0 	.word	0x0800b2b0
 8006548:	0800b2bc 	.word	0x0800b2bc

0800654c <ESP8266_WifiConnect>:

ESP8266_Result_t ESP8266_WifiConnect(ESP8266_t* ESP8266, const char* ssid, const char* pass) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check idle */
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <ESP8266_WifiConnect+0x26>
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff fd1f 	bl	8005fa4 <ESP8266_Update>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2206      	movs	r2, #6
 800656a:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800656e:	2306      	movs	r3, #6
 8006570:	e018      	b.n	80065a4 <ESP8266_WifiConnect+0x58>
    
    ESP8266_USARTSENDSTRING("AT+CWJAP_CUR=\"");             /* Send commands separate with escape strings */
 8006572:	210e      	movs	r1, #14
 8006574:	480d      	ldr	r0, [pc, #52]	; (80065ac <ESP8266_WifiConnect+0x60>)
 8006576:	f000 faa9 	bl	8006acc <ESP8266_LL_USARTSend>
    EscapeStringAndSend((char *)ssid);
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	f7fe f9d8 	bl	8004930 <EscapeStringAndSend>
    ESP8266_USARTSENDSTRING("\",\"");
 8006580:	2103      	movs	r1, #3
 8006582:	480b      	ldr	r0, [pc, #44]	; (80065b0 <ESP8266_WifiConnect+0x64>)
 8006584:	f000 faa2 	bl	8006acc <ESP8266_LL_USARTSend>
    EscapeStringAndSend((char *)pass);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7fe f9d1 	bl	8004930 <EscapeStringAndSend>
    ESP8266_USARTSENDSTRING("\""ESP8266_CRLF);
 800658e:	2103      	movs	r1, #3
 8006590:	4808      	ldr	r0, [pc, #32]	; (80065b4 <ESP8266_WifiConnect+0x68>)
 8006592:	f000 fa9b 	bl	8006acc <ESP8266_LL_USARTSend>
    
    return SendCommand(ESP8266, ESP8266_COMMAND_CWJAP, NULL, "+CWJAP:");    /* Send command */
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <ESP8266_WifiConnect+0x6c>)
 8006598:	2200      	movs	r2, #0
 800659a:	2103      	movs	r1, #3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7fe f98b 	bl	80048b8 <SendCommand>
 80065a2:	4603      	mov	r3, r0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	0800b2c8 	.word	0x0800b2c8
 80065b0:	0800b0fc 	.word	0x0800b0fc
 80065b4:	0800b264 	.word	0x0800b264
 80065b8:	0800b1d8 	.word	0x0800b1d8

080065bc <ESP8266_WifiGetConnected>:
    ESP8266_USARTSENDSTRING("\""ESP8266_CRLF);
    
    return SendCommand(ESP8266, ESP8266_COMMAND_CWJAP, NULL, "+CWJAP:");    /* Send command */
}

ESP8266_Result_t ESP8266_WifiGetConnected(ESP8266_t* ESP8266) {    
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
    return SendCommand(ESP8266, ESP8266_COMMAND_CWJAP_GET, "AT+CWJAP_CUR?\r\n", "+CWJAP_CUR:");    /* Send command */
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <ESP8266_WifiGetConnected+0x20>)
 80065c6:	4a06      	ldr	r2, [pc, #24]	; (80065e0 <ESP8266_WifiGetConnected+0x24>)
 80065c8:	2113      	movs	r1, #19
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fe f974 	bl	80048b8 <SendCommand>
 80065d0:	4603      	mov	r3, r0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	0800b1e8 	.word	0x0800b1e8
 80065e0:	0800b2e8 	.word	0x0800b2e8

080065e4 <ESP8266_SetMode>:
}

/******************************************/
/*             MODE MANAGEMENT            */
/******************************************/
ESP8266_Result_t ESP8266_SetMode(ESP8266_t* ESP8266, ESP8266_Mode_t Mode) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	70fb      	strb	r3, [r7, #3]
    uint8_t m = (uint8_t) Mode;
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	73fb      	strb	r3, [r7, #15]
    
    ESP8266_CHECK_IDLE(ESP8266);                            /* Check IDLE mode */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <ESP8266_SetMode+0x2a>
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fcd1 	bl	8005fa4 <ESP8266_Update>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2206      	movs	r2, #6
 8006606:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800660a:	2306      	movs	r3, #6
 800660c:	e035      	b.n	800667a <ESP8266_SetMode+0x96>
    
    m += '0';                                               /* Go to ASCII number */
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	3330      	adds	r3, #48	; 0x30
 8006612:	b2db      	uxtb	r3, r3
 8006614:	73fb      	strb	r3, [r7, #15]
    ESP8266_USARTSENDSTRING("AT+CWMODE_CUR=");              /* Send command */
 8006616:	210e      	movs	r1, #14
 8006618:	481a      	ldr	r0, [pc, #104]	; (8006684 <ESP8266_SetMode+0xa0>)
 800661a:	f000 fa57 	bl	8006acc <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDCHAR(&m);
 800661e:	f107 030f 	add.w	r3, r7, #15
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fa51 	bl	8006acc <ESP8266_LL_USARTSend>
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
 800662a:	2102      	movs	r1, #2
 800662c:	4816      	ldr	r0, [pc, #88]	; (8006688 <ESP8266_SetMode+0xa4>)
 800662e:	f000 fa4d 	bl	8006acc <ESP8266_LL_USARTSend>
    if (SendCommand(ESP8266, ESP8266_COMMAND_CWMODE, NULL, "AT+CWMODE") != ESP_OK) {    /* Send command */
 8006632:	4b16      	ldr	r3, [pc, #88]	; (800668c <ESP8266_SetMode+0xa8>)
 8006634:	2200      	movs	r2, #0
 8006636:	2105      	movs	r1, #5
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fe f93d 	bl	80048b8 <SendCommand>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <ESP8266_SetMode+0x68>
        return ESP8266->Result;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 800664a:	e016      	b.n	800667a <ESP8266_SetMode+0x96>
    }
    
    ESP8266->SentMode = Mode;                               /* Save mode we sent */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
    ESP8266_WaitReady(ESP8266);                             /* Wait till command end */
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff3b 	bl	80064d0 <ESP8266_WaitReady>
    
    if (ESP8266->Mode != Mode) {                            /* Check status */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	429a      	cmp	r2, r3
 8006664:	d005      	beq.n	8006672 <ESP8266_SetMode+0x8e>
        ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);       /* Return error */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
 800666e:	2301      	movs	r3, #1
 8006670:	e003      	b.n	800667a <ESP8266_SetMode+0x96>
    }
    return ESP8266_GetAP(ESP8266);                          /* Now get settings for current AP mode */
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f8dc 	bl	8006830 <ESP8266_GetAP>
 8006678:	4603      	mov	r3, r0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	0800b35c 	.word	0x0800b35c
 8006688:	0800b0d4 	.word	0x0800b0d4
 800668c:	0800b36c 	.word	0x0800b36c

08006690 <ESP8266_CloseAllConnections>:
    ESP8266_USARTSENDSTRING(ESP8266_CRLF);
    
    return SendCommand(ESP8266, ESP8266_COMMAND_CLOSE, NULL, NULL); /* Send command */
}

ESP8266_Result_t ESP8266_CloseAllConnections(ESP8266_t* ESP8266) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
    return SendCommand(ESP8266, ESP8266_COMMAND_CLOSE, "AT+CIPCLOSE=5\r\n", NULL);  /* Send command */
 8006698:	2300      	movs	r3, #0
 800669a:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <ESP8266_CloseAllConnections+0x20>)
 800669c:	2109      	movs	r1, #9
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fe f90a 	bl	80048b8 <SendCommand>
 80066a4:	4603      	mov	r3, r0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	0800b3a0 	.word	0x0800b3a0

080066b4 <ESP8266_GetSTAIP>:
    
    }
    return ESP8266_WaitReady(ESP8266);                      /* Wait till command end */
}

ESP8266_Result_t ESP8266_GetSTAIP(ESP8266_t* ESP8266) {    
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    SendCommand(ESP8266, ESP8266_COMMAND_CIPSTA, "AT+CIPSTA_CUR?\r\n", "+CIPSTA_CUR");  /* Send command */
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <ESP8266_GetSTAIP+0x58>)
 80066be:	4a14      	ldr	r2, [pc, #80]	; (8006710 <ESP8266_GetSTAIP+0x5c>)
 80066c0:	2116      	movs	r1, #22
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fe f8f8 	bl	80048b8 <SendCommand>
    if (ESP8266->Result == ESP_OK) {                        /* Check status */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d114      	bne.n	80066fc <ESP8266_GetSTAIP+0x48>
        ESP8266->Flags.F.STAIPIsSet = 0;                    /* Reset flags */
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80066d8:	f36f 0300 	bfc	r3, #0, #1
 80066dc:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
        ESP8266->Flags.F.STANetmaskIsSet = 0;
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80066e6:	f36f 0341 	bfc	r3, #1, #1
 80066ea:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
        ESP8266->Flags.F.STAGatewayIsSet = 0;
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80066f4:	f36f 0382 	bfc	r3, #2, #1
 80066f8:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
    }
    return ESP8266->Result;                                 /* Return status */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	0800b3e8 	.word	0x0800b3e8
 8006710:	0800b3f4 	.word	0x0800b3f4

08006714 <ESP8266_GetAPIP>:

ESP8266_Result_t ESP8266_GetAPIP(ESP8266_t* ESP8266) {    
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
    SendCommand(ESP8266, ESP8266_COMMAND_CIPAP, "AT+CIPAP_CUR?\r\n", "+CIPAP_CUR"); /* Send command */
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <ESP8266_GetAPIP+0x58>)
 800671e:	4a14      	ldr	r2, [pc, #80]	; (8006770 <ESP8266_GetAPIP+0x5c>)
 8006720:	2117      	movs	r1, #23
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fe f8c8 	bl	80048b8 <SendCommand>
    if (ESP8266->Result == ESP_OK) {                        /* Check status */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d114      	bne.n	800675c <ESP8266_GetAPIP+0x48>
        ESP8266->Flags.F.APIPIsSet = 0;                     /* Reset flags */
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8006738:	f36f 1304 	bfc	r3, #4, #1
 800673c:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
        ESP8266->Flags.F.APNetmaskIsSet = 0;
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8006746:	f36f 1345 	bfc	r3, #5, #1
 800674a:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
        ESP8266->Flags.F.APGatewayIsSet = 0;
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8006754:	f36f 1386 	bfc	r3, #6, #1
 8006758:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
    }
    return ESP8266->Result;                                 /* Return status */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	0800b408 	.word	0x0800b408
 8006770:	0800b414 	.word	0x0800b414

08006774 <ESP8266_GetSTAMAC>:

/******************************************/
/*            MAC MANIPULATION            */
/******************************************/
ESP8266_Result_t ESP8266_GetSTAMAC(ESP8266_t* ESP8266) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
    SendCommand(ESP8266, ESP8266_COMMAND_CIPSTAMAC, "AT+CIPSTAMAC?\r\n", "+CIPSTAMAC"); /* Send command */
 800677c:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <ESP8266_GetSTAMAC+0x3c>)
 800677e:	4a0d      	ldr	r2, [pc, #52]	; (80067b4 <ESP8266_GetSTAMAC+0x40>)
 8006780:	2118      	movs	r1, #24
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fe f898 	bl	80048b8 <SendCommand>
    if (ESP8266->Result == ESP_OK) {                        /* Check status */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <ESP8266_GetSTAMAC+0x2c>
        ESP8266->Flags.F.STAMACIsSet = 0;                   /* Reset flags */
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 8006798:	f36f 03c3 	bfc	r3, #3, #1
 800679c:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
    }
    return ESP8266->Result;                                 /* Return stats */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	0800b21c 	.word	0x0800b21c
 80067b4:	0800b424 	.word	0x0800b424

080067b8 <ESP8266_GetAPMAC>:
ESP8266_Result_t ESP8266_SetSTAMACDefault(ESP8266_t* ESP8266, uint8_t* addr) {
    
    return SendMACCommand(ESP8266, addr, "AT+CIPSTAMAC_DEF", ESP8266_COMMAND_CIPSTAMAC);    /* Send current MAC command */
}

ESP8266_Result_t ESP8266_GetAPMAC(ESP8266_t* ESP8266) {    
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
    SendCommand(ESP8266, ESP8266_COMMAND_CIPAPMAC, "AT+CIPAPMAC?\r\n", "+CIPAPMAC");    /* Send command */
 80067c0:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <ESP8266_GetAPMAC+0x3c>)
 80067c2:	4a0d      	ldr	r2, [pc, #52]	; (80067f8 <ESP8266_GetAPMAC+0x40>)
 80067c4:	2119      	movs	r1, #25
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fe f876 	bl	80048b8 <SendCommand>
    if (ESP8266->Result == ESP_OK) {                        /* Check status */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d106      	bne.n	80067e4 <ESP8266_GetAPMAC+0x2c>
        ESP8266->Flags.F.APMACIsSet = 0;                    /* Reset flags */
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	f892 31f0 	ldrb.w	r3, [r2, #496]	; 0x1f0
 80067dc:	f36f 13c7 	bfc	r3, #7, #1
 80067e0:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
    }
    return ESP8266->Result;                                 /* Return status */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	0800b228 	.word	0x0800b228
 80067f8:	0800b45c 	.word	0x0800b45c

080067fc <ESP8266_ListWifiStations>:

/******************************************/
/*                AP + STA                */
/******************************************/
#if ESP8266_USE_APSEARCH
ESP8266_Result_t ESP8266_ListWifiStations(ESP8266_t* ESP8266) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
    ESP8266_APs.Count = 0;                                  /* Reset pointer */
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <ESP8266_ListWifiStations+0x28>)
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    return SendCommand(ESP8266, ESP8266_COMMAND_CWLAP, "AT+CWLAP\r\n", "+CWLAP");   /* Send list command */    
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <ESP8266_ListWifiStations+0x2c>)
 800680e:	4a07      	ldr	r2, [pc, #28]	; (800682c <ESP8266_ListWifiStations+0x30>)
 8006810:	2102      	movs	r1, #2
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fe f850 	bl	80048b8 <SendCommand>
 8006818:	4603      	mov	r3, r0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200003a0 	.word	0x200003a0
 8006828:	0800b48c 	.word	0x0800b48c
 800682c:	0800b494 	.word	0x0800b494

08006830 <ESP8266_GetAP>:
#endif

ESP8266_Result_t ESP8266_GetAP(ESP8266_t* ESP8266) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
    if (SendCommand(ESP8266, ESP8266_COMMAND_CWSAP, "AT+CWSAP?\r\n", "+CWSAP") != ESP_OK) { /* Send command to read current AP settings */
 8006838:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <ESP8266_GetAP+0x34>)
 800683a:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <ESP8266_GetAP+0x38>)
 800683c:	210c      	movs	r1, #12
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fe f83a 	bl	80048b8 <SendCommand>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <ESP8266_GetAP+0x22>
        return ESP8266->Result;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 8006850:	e003      	b.n	800685a <ESP8266_GetAP+0x2a>
    }
    return ESP8266_WaitReady(ESP8266);                      /* Wait till command end */
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fe3c 	bl	80064d0 <ESP8266_WaitReady>
 8006858:	4603      	mov	r3, r0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	0800b1fc 	.word	0x0800b1fc
 8006868:	0800b4a0 	.word	0x0800b4a0

0800686c <ESP8266_StartClientConnectionTCP>:
}

/******************************************/
/*               TCP CLIENT               */
/******************************************/
ESP8266_Result_t ESP8266_StartClientConnectionTCP(ESP8266_t* ESP8266, const char* name, char* location, uint16_t port, void* user_parameters) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af04      	add	r7, sp, #16
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	807b      	strh	r3, [r7, #2]
    return StartClientConnection(ESP8266, ESP8266_ConnectionType_TCP, "TCP", name, location, port, 0, user_parameters);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	2300      	movs	r3, #0
 8006880:	9302      	str	r3, [sp, #8]
 8006882:	887b      	ldrh	r3, [r7, #2]
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	4a04      	ldr	r2, [pc, #16]	; (80068a0 <ESP8266_StartClientConnectionTCP+0x34>)
 800688e:	2100      	movs	r1, #0
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7fe fa05 	bl	8004ca0 <StartClientConnection>
 8006896:	4603      	mov	r3, r0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	0800b4e8 	.word	0x0800b4e8

080068a4 <ESP8266_DataReceived>:
#endif

/******************************************/
/*             DATA RECEIVED              */
/******************************************/
uint16_t ESP8266_DataReceived(uint8_t* ch, uint16_t count) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	807b      	strh	r3, [r7, #2]
    uint32_t r;
    
    r = BUFFER_Write(&USART_Buffer, ch, count);             /* Writes data to USART buffer */
 80068b0:	887b      	ldrh	r3, [r7, #2]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	4805      	ldr	r0, [pc, #20]	; (80068cc <ESP8266_DataReceived+0x28>)
 80068b8:	f7fc ffd6 	bl	8003868 <BUFFER_Write>
 80068bc:	60f8      	str	r0, [r7, #12]
            ESP8266_LL_SetRTS(ESP_RTS_HIGH);
            RTSStatus = ESP_RTS_HIGH;
        }
    }
#endif
    return r;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	b29b      	uxth	r3, r3
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20001be4 	.word	0x20001be4

080068d0 <ESP8266_Callback_ServerConnectionActive>:
           the ESP8266_Callback_DHCPTimeout could be implemented in the user file
    */
}

/* Called when "x,CONNECT" is detected */
__weak void ESP8266_Callback_ServerConnectionActive(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionActive could be implemented in the user file
    */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <ESP8266_Callback_ServerConnectionClosed>:

/* Called when "x,CLOSED" is detected */
__weak void ESP8266_Callback_ServerConnectionClosed(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionClosed could be implemented in the user file
    */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <ESP8266_Callback_ServerConnectionDataReceived>:

/* Called when "+IPD..." is detected */
__weak void ESP8266_Callback_ServerConnectionDataReceived(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer) {
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionDataReceived could be implemented in the user file
    */
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <ESP8266_Callback_ServerConnectionSendData>:

/* Called when user should fill data buffer to be sent with connection */
__weak uint16_t ESP8266_Callback_ServerConnectionSendData(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer, uint16_t max_buffer_size) {
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	807b      	strh	r3, [r7, #2]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionSendData could be implemented in the user file
    */
    
    /* Return number of bytes in array */
    return 0;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <ESP8266_Callback_ServerConnectionDataSent>:

/* Called when data are send successfully */
__weak void ESP8266_Callback_ServerConnectionDataSent(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionDataSent could be implemented in the user file
    */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <ESP8266_Callback_ServerConnectionDataSentError>:

/* Called when error returned trying to sent data */
__weak void ESP8266_Callback_ServerConnectionDataSentError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ServerConnectionDataSentError could be implemented in the user file
    */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <ESP8266_Callback_ClientConnectionSendData>:
           the ESP8266_Callback_ClientConnectionConnected could be implemented in the user file
    */
}

/* Called when user should fill data buffer to be sent with connection */
__weak uint16_t ESP8266_Callback_ClientConnectionSendData(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer, uint16_t max_buffer_size) {
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	807b      	strh	r3, [r7, #2]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionSendData could be implemented in the user file
    */
    
    /* Return number of bytes in array */
    return 0;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <ESP8266_Callback_ClientConnectionDataSent>:

/* Called when data are send successfully */
__weak void ESP8266_Callback_ClientConnectionDataSent(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionDataSent could be implemented in the user file
    */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <ESP8266_Callback_ClientConnectionDataSentError>:

/* Called when error returned trying to sent data */
__weak void ESP8266_Callback_ClientConnectionDataSentError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionDataSentError could be implemented in the user file
    */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <ESP8266_Callback_ClientConnectionDataReceived>:

/* Called when server returns data back to client */
__weak void ESP8266_Callback_ClientConnectionDataReceived(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer) {
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionDataReceived could be implemented in the user file
    */
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <ESP8266_Callback_ClientConnectionTimeout>:
           the ESP8266_Callback_ClientConnectionError could be implemented in the user file
    */
}

/* Called when timeout is reached on AT+CIPSTART command */
__weak void ESP8266_Callback_ClientConnectionTimeout(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionTimeout could be implemented in the user file
    */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <ESP8266_Callback_ClientConnectionClosed>:

/* Called when "x,CLOSED" is detected when connection was made as client */
__weak void ESP8266_Callback_ClientConnectionClosed(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ClientConnectionClosed could be implemented in the user file
    */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <ESP8266_Callback_PingFinished>:
           the ESP8266_Callback_PingStarted could be implemented in the user file
    */
}

/* Called when PING command ends */
__weak void ESP8266_Callback_PingFinished(ESP8266_t* ESP8266, ESP8266_Ping_t* Pinging) {
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_PingFinished could be implemented in the user file
    */
}
 80069f2:	bf00      	nop
 80069f4:	370c      	adds	r7, #12
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <ESP8266_Callback_FirmwareUpdateStatus>:
#endif

#if ESP8266_USE_FIRMWAREUPDATE == 1
/* Called on status messages for network firmware update */
__weak void ESP8266_Callback_FirmwareUpdateStatus(ESP8266_t* ESP8266, ESP8266_FirmwareUpdate_t status) {
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_FirmwareUpdateStatus could be implemented in the user file
    */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <ESP8266_Callback_FirmwareUpdateSuccess>:

/* Called when firmware network update was successful */
__weak void ESP8266_Callback_FirmwareUpdateSuccess(ESP8266_t* ESP8266) {
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_FirmwareUpdateSuccess could be implemented in the user file
    */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <ESP8266_Callback_FirmwareUpdateError>:

/* Called when firmware network error occurred */
__weak void ESP8266_Callback_FirmwareUpdateError(ESP8266_t* ESP8266) {
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_FirmwareUpdateError could be implemented in the user file
    */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <ESP8266_Callback_ConnectedStationsDetected>:
#endif

/* Called when AT+CWLIF returns OK */
#if ESP8266_USE_CONNECTED_STATIONS == 1
__weak void ESP8266_Callback_ConnectedStationsDetected(ESP8266_t* ESP8266, ESP8266_ConnectedStations_t* Stations) {
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	6039      	str	r1, [r7, #0]
    /* NOTE: This function Should not be modified, when the callback is needed,
           the ESP8266_Callback_ConnectedStationsDetected could be implemented in the user file
    */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <ESP8266_LL_USARTInit>:
/**************************************************************************/
void USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME(UART_HandleTypeDef *huart);
/**************************************************************************/
/**************************************************************************/

uint8_t ESP8266_LL_USARTInit(uint32_t baudrate) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	/* Init USART */
	huart1.Instance = USART1;
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a5e:	4a18      	ldr	r2, [pc, #96]	; (8006ac0 <ESP8266_LL_USARTInit+0x6c>)
 8006a60:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = baudrate;
 8006a62:	4a16      	ldr	r2, [pc, #88]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6053      	str	r3, [r2, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006a68:	4b14      	ldr	r3, [pc, #80]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8006a74:	4b11      	ldr	r3, [pc, #68]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a7c:	220c      	movs	r2, #12
 8006a7e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a8c:	480b      	ldr	r0, [pc, #44]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006a8e:	f7fb fd03 	bl	8002498 <HAL_UART_Init>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <ESP8266_LL_USARTInit+0x48>
	{
		Error_Handler();
 8006a98:	f7fa f806 	bl	8000aa8 <Error_Handler>
	}
	HAL_UART_RegisterCallback(&huart1, HAL_UART_RX_COMPLETE_CB_ID, USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME);
 8006a9c:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <ESP8266_LL_USARTInit+0x70>)
 8006a9e:	2103      	movs	r1, #3
 8006aa0:	4806      	ldr	r0, [pc, #24]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006aa2:	f7fb fd53 	bl	800254c <HAL_UART_RegisterCallback>
#if ESP8266_USE_CTS
    /* Enable RTS pin on MCU as output and set it low */
#endif
	HAL_UART_Receive_IT(&huart1, &ch, 1);
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4907      	ldr	r1, [pc, #28]	; (8006ac8 <ESP8266_LL_USARTInit+0x74>)
 8006aaa:	4804      	ldr	r0, [pc, #16]	; (8006abc <ESP8266_LL_USARTInit+0x68>)
 8006aac:	f7fb fe88 	bl	80027c0 <HAL_UART_Receive_IT>
	/* Return 0 = Successful */
	return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000328 	.word	0x20000328
 8006ac0:	40011000 	.word	0x40011000
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	200021fc 	.word	0x200021fc

08006acc <ESP8266_LL_USARTSend>:

uint8_t ESP8266_LL_USARTSend(uint8_t* data, uint16_t count) {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	807b      	strh	r3, [r7, #2]
	uint8_t status;
	/* Send data via USART */
	status = HAL_UART_Transmit(&huart1, data, count, 1000);
 8006ad8:	887a      	ldrh	r2, [r7, #2]
 8006ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4804      	ldr	r0, [pc, #16]	; (8006af4 <ESP8266_LL_USARTSend+0x28>)
 8006ae2:	f7fb fddb 	bl	800269c <HAL_UART_Transmit>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
	/* Return 0 = Successful */
	return status;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000328 	.word	0x20000328

08006af8 <USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME>:
    }
}


/* USART receive interrupt handler */
void USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME(UART_HandleTypeDef *huart) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]

	/* Get character from USART */
	
	if(huart == &huart1){
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME+0x2c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d108      	bne.n	8006b1a <USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME+0x22>
		/* Send received character to ESP stack */
		ESP8266_DataReceived(&ch, 1);
 8006b08:	2101      	movs	r1, #1
 8006b0a:	4807      	ldr	r0, [pc, #28]	; (8006b28 <USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME+0x30>)
 8006b0c:	f7ff feca 	bl	80068a4 <ESP8266_DataReceived>

		HAL_UART_Receive_IT(huart, &ch, 1);
 8006b10:	2201      	movs	r2, #1
 8006b12:	4905      	ldr	r1, [pc, #20]	; (8006b28 <USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME+0x30>)
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fb fe53 	bl	80027c0 <HAL_UART_Receive_IT>
	}
	
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000328 	.word	0x20000328
 8006b28:	200021fc 	.word	0x200021fc

08006b2c <__NVIC_SetPriority>:
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	db0a      	blt.n	8006b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	490c      	ldr	r1, [pc, #48]	; (8006b78 <__NVIC_SetPriority+0x4c>)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b54:	e00a      	b.n	8006b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	4908      	ldr	r1, [pc, #32]	; (8006b7c <__NVIC_SetPriority+0x50>)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	3b04      	subs	r3, #4
 8006b64:	0112      	lsls	r2, r2, #4
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	440b      	add	r3, r1
 8006b6a:	761a      	strb	r2, [r3, #24]
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	e000e100 	.word	0xe000e100
 8006b7c:	e000ed00 	.word	0xe000ed00

08006b80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b84:	4b05      	ldr	r3, [pc, #20]	; (8006b9c <SysTick_Handler+0x1c>)
 8006b86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b88:	f001 fd28 	bl	80085dc <xTaskGetSchedulerState>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d001      	beq.n	8006b96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b92:	f002 fb11 	bl	80091b8 <xPortSysTickHandler>
  }
}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	e000e010 	.word	0xe000e010

08006ba0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	f06f 0004 	mvn.w	r0, #4
 8006baa:	f7ff ffbf 	bl	8006b2c <__NVIC_SetPriority>
#endif
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bba:	f3ef 8305 	mrs	r3, IPSR
 8006bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006bc6:	f06f 0305 	mvn.w	r3, #5
 8006bca:	607b      	str	r3, [r7, #4]
 8006bcc:	e00c      	b.n	8006be8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <osKernelInitialize+0x44>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <osKernelInitialize+0x44>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	e002      	b.n	8006be8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006be2:	f04f 33ff 	mov.w	r3, #4294967295
 8006be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006be8:	687b      	ldr	r3, [r7, #4]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	20002200 	.word	0x20002200

08006bfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c02:	f3ef 8305 	mrs	r3, IPSR
 8006c06:	603b      	str	r3, [r7, #0]
  return(result);
 8006c08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c0e:	f06f 0305 	mvn.w	r3, #5
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e010      	b.n	8006c38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <osKernelStart+0x48>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d109      	bne.n	8006c32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c1e:	f7ff ffbf 	bl	8006ba0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c22:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <osKernelStart+0x48>)
 8006c24:	2202      	movs	r2, #2
 8006c26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c28:	f001 f87c 	bl	8007d24 <vTaskStartScheduler>
      stat = osOK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	607b      	str	r3, [r7, #4]
 8006c30:	e002      	b.n	8006c38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295
 8006c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c38:	687b      	ldr	r3, [r7, #4]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20002200 	.word	0x20002200

08006c48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	; 0x38
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c58:	f3ef 8305 	mrs	r3, IPSR
 8006c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d17e      	bne.n	8006d62 <osThreadNew+0x11a>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d07b      	beq.n	8006d62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c6e:	2318      	movs	r3, #24
 8006c70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d045      	beq.n	8006d0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <osThreadNew+0x48>
        name = attr->name;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <osThreadNew+0x6e>
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b38      	cmp	r3, #56	; 0x38
 8006ca8:	d805      	bhi.n	8006cb6 <osThreadNew+0x6e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <osThreadNew+0x72>
        return (NULL);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e054      	b.n	8006d64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <osThreadNew+0xa8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2bbb      	cmp	r3, #187	; 0xbb
 8006cd8:	d90a      	bls.n	8006cf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d006      	beq.n	8006cf0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <osThreadNew+0xa8>
        mem = 1;
 8006cea:	2301      	movs	r3, #1
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e010      	b.n	8006d12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <osThreadNew+0xca>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d108      	bne.n	8006d12 <osThreadNew+0xca>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <osThreadNew+0xca>
          mem = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e001      	b.n	8006d12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d110      	bne.n	8006d3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d20:	9202      	str	r2, [sp, #8]
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fe0c 	bl	800794c <xTaskCreateStatic>
 8006d34:	4603      	mov	r3, r0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e013      	b.n	8006d62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d110      	bne.n	8006d62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fe57 	bl	8007a06 <xTaskCreate>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d001      	beq.n	8006d62 <osThreadNew+0x11a>
            hTask = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d62:	693b      	ldr	r3, [r7, #16]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d74:	f3ef 8305 	mrs	r3, IPSR
 8006d78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <osDelay+0x1c>
    stat = osErrorISR;
 8006d80:	f06f 0305 	mvn.w	r3, #5
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e007      	b.n	8006d98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 ff92 	bl	8007cbc <vTaskDelay>
    }
  }

  return (stat);
 8006d98:	68fb      	ldr	r3, [r7, #12]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a07      	ldr	r2, [pc, #28]	; (8006dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a06      	ldr	r2, [pc, #24]	; (8006dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8006dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2280      	movs	r2, #128	; 0x80
 8006dc0:	601a      	str	r2, [r3, #0]
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20002204 	.word	0x20002204
 8006dd4:	200022c0 	.word	0x200022c0

08006dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8006de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <vApplicationGetTimerTaskMemory+0x30>)
 8006dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006df6:	601a      	str	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	200024c0 	.word	0x200024c0
 8006e08:	2000257c 	.word	0x2000257c

08006e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f103 0208 	add.w	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f04f 32ff 	mov.w	r2, #4294967295
 8006e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f103 0208 	add.w	r2, r3, #8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f103 0208 	add.w	r2, r3, #8
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d103      	bne.n	8006ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	e00c      	b.n	8006ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e002      	b.n	8006edc <vListInsert+0x2e>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d2f6      	bcs.n	8006ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6892      	ldr	r2, [r2, #8]
 8006f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6852      	ldr	r2, [r2, #4]
 8006f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d103      	bne.n	8006f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f9e:	f002 f879 	bl	8009094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	441a      	add	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	22ff      	movs	r2, #255	; 0xff
 8006fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	22ff      	movs	r2, #255	; 0xff
 8006fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d114      	bne.n	800701e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01a      	beq.n	8007032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3310      	adds	r3, #16
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f929 	bl	8008258 <xTaskRemoveFromEventList>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d012      	beq.n	8007032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <xQueueGenericReset+0xcc>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	e009      	b.n	8007032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3310      	adds	r3, #16
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fef2 	bl	8006e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3324      	adds	r3, #36	; 0x24
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff feed 	bl	8006e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007032:	f002 f85f 	bl	80090f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007036:	2301      	movs	r3, #1
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007044:	b580      	push	{r7, lr}
 8007046:	b08e      	sub	sp, #56	; 0x38
 8007048:	af02      	add	r7, sp, #8
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <xQueueGenericCreateStatic+0x52>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <xQueueGenericCreateStatic+0x56>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <xQueueGenericCreateStatic+0x58>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	623b      	str	r3, [r7, #32]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <xQueueGenericCreateStatic+0x7e>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <xQueueGenericCreateStatic+0x82>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueGenericCreateStatic+0x84>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61fb      	str	r3, [r7, #28]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070e2:	2350      	movs	r3, #80	; 0x50
 80070e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b50      	cmp	r3, #80	; 0x50
 80070ea:	d00a      	beq.n	8007102 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	61bb      	str	r3, [r7, #24]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007102:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4613      	mov	r3, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f805 	bl	8007134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800712c:	4618      	mov	r0, r3
 800712e:	3730      	adds	r7, #48	; 0x30
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d103      	bne.n	8007150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e002      	b.n	8007156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007162:	2101      	movs	r1, #1
 8007164:	69b8      	ldr	r0, [r7, #24]
 8007166:	f7ff ff05 	bl	8006f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800718a:	2300      	movs	r3, #0
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xQueueGenericSend+0x32>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <xQueueGenericSend+0x40>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <xQueueGenericSend+0x44>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <xQueueGenericSend+0x46>
 80071c0:	2300      	movs	r3, #0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <xQueueGenericSend+0x60>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d103      	bne.n	80071ea <xQueueGenericSend+0x6e>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <xQueueGenericSend+0x72>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGenericSend+0x74>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGenericSend+0x8e>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	623b      	str	r3, [r7, #32]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f001 f9e7 	bl	80085dc <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xQueueGenericSend+0x9e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueGenericSend+0xa2>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueGenericSend+0xa4>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueGenericSend+0xbe>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61fb      	str	r3, [r7, #28]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723a:	f001 ff2b 	bl	8009094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <xQueueGenericSend+0xd4>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d129      	bne.n	80072a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007256:	f000 fa0b 	bl	8007670 <prvCopyDataToQueue>
 800725a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	3324      	adds	r3, #36	; 0x24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fff5 	bl	8008258 <xTaskRemoveFromEventList>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d013      	beq.n	800729c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007274:	4b3f      	ldr	r3, [pc, #252]	; (8007374 <xQueueGenericSend+0x1f8>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	e00a      	b.n	800729c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800728c:	4b39      	ldr	r3, [pc, #228]	; (8007374 <xQueueGenericSend+0x1f8>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800729c:	f001 ff2a 	bl	80090f4 <vPortExitCritical>
				return pdPASS;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e063      	b.n	800736c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072aa:	f001 ff23 	bl	80090f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	e05c      	b.n	800736c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d106      	bne.n	80072c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 f82f 	bl	8008320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072c2:	2301      	movs	r3, #1
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072c6:	f001 ff15 	bl	80090f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072ca:	f000 fd9b 	bl	8007e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ce:	f001 fee1 	bl	8009094 <vPortEnterCritical>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d103      	bne.n	80072e8 <xQueueGenericSend+0x16c>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d103      	bne.n	80072fe <xQueueGenericSend+0x182>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072fe:	f001 fef9 	bl	80090f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007302:	1d3a      	adds	r2, r7, #4
 8007304:	f107 0314 	add.w	r3, r7, #20
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f001 f81e 	bl	800834c <xTaskCheckForTimeOut>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d124      	bne.n	8007360 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007318:	f000 faa2 	bl	8007860 <prvIsQueueFull>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d018      	beq.n	8007354 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	3310      	adds	r3, #16
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f000 ff44 	bl	80081b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007332:	f000 fa2d 	bl	8007790 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007336:	f000 fd73 	bl	8007e20 <xTaskResumeAll>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	f47f af7c 	bne.w	800723a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007342:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <xQueueGenericSend+0x1f8>)
 8007344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	e772      	b.n	800723a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007356:	f000 fa1b 	bl	8007790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800735a:	f000 fd61 	bl	8007e20 <xTaskResumeAll>
 800735e:	e76c      	b.n	800723a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007362:	f000 fa15 	bl	8007790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007366:	f000 fd5b 	bl	8007e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800736a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800736c:	4618      	mov	r0, r3
 800736e:	3738      	adds	r7, #56	; 0x38
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b090      	sub	sp, #64	; 0x40
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10a      	bne.n	80073a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <xQueueGenericSendFromISR+0x3c>
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <xQueueGenericSendFromISR+0x40>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <xQueueGenericSendFromISR+0x42>
 80073b8:	2300      	movs	r3, #0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073d0:	bf00      	nop
 80073d2:	e7fe      	b.n	80073d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d103      	bne.n	80073e2 <xQueueGenericSendFromISR+0x6a>
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <xQueueGenericSendFromISR+0x6e>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <xQueueGenericSendFromISR+0x70>
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	623b      	str	r3, [r7, #32]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007402:	f001 ff29 	bl	8009258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007406:	f3ef 8211 	mrs	r2, BASEPRI
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	61fa      	str	r2, [r7, #28]
 800741c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800741e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	429a      	cmp	r2, r3
 800742c:	d302      	bcc.n	8007434 <xQueueGenericSendFromISR+0xbc>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d12f      	bne.n	8007494 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800744a:	f000 f911 	bl	8007670 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800744e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d112      	bne.n	800747e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d016      	beq.n	800748e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	3324      	adds	r3, #36	; 0x24
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fef7 	bl	8008258 <xTaskRemoveFromEventList>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e007      	b.n	800748e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800747e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007482:	3301      	adds	r3, #1
 8007484:	b2db      	uxtb	r3, r3
 8007486:	b25a      	sxtb	r2, r3
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800748e:	2301      	movs	r3, #1
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007492:	e001      	b.n	8007498 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007494:	2300      	movs	r3, #0
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3740      	adds	r7, #64	; 0x40
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08c      	sub	sp, #48	; 0x30
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <xQueueReceive+0x30>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	623b      	str	r3, [r7, #32]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <xQueueReceive+0x3e>
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <xQueueReceive+0x42>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <xQueueReceive+0x44>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xQueueReceive+0x5e>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61fb      	str	r3, [r7, #28]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800750e:	f001 f865 	bl	80085dc <xTaskGetSchedulerState>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <xQueueReceive+0x6e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <xQueueReceive+0x72>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueReceive+0x74>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xQueueReceive+0x8e>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800753e:	f001 fda9 	bl	8009094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01f      	beq.n	800758e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007552:	f000 f8f7 	bl	8007744 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	3310      	adds	r3, #16
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fe74 	bl	8008258 <xTaskRemoveFromEventList>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007576:	4b3d      	ldr	r3, [pc, #244]	; (800766c <xQueueReceive+0x1bc>)
 8007578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007586:	f001 fdb5 	bl	80090f4 <vPortExitCritical>
				return pdPASS;
 800758a:	2301      	movs	r3, #1
 800758c:	e069      	b.n	8007662 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007594:	f001 fdae 	bl	80090f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007598:	2300      	movs	r3, #0
 800759a:	e062      	b.n	8007662 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 feba 	bl	8008320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075b0:	f001 fda0 	bl	80090f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075b4:	f000 fc26 	bl	8007e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075b8:	f001 fd6c 	bl	8009094 <vPortEnterCritical>
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d103      	bne.n	80075d2 <xQueueReceive+0x122>
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d103      	bne.n	80075e8 <xQueueReceive+0x138>
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e8:	f001 fd84 	bl	80090f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ec:	1d3a      	adds	r2, r7, #4
 80075ee:	f107 0310 	add.w	r3, r7, #16
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fea9 	bl	800834c <xTaskCheckForTimeOut>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d123      	bne.n	8007648 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007602:	f000 f917 	bl	8007834 <prvIsQueueEmpty>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fdcf 	bl	80081b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800761a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800761c:	f000 f8b8 	bl	8007790 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007620:	f000 fbfe 	bl	8007e20 <xTaskResumeAll>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d189      	bne.n	800753e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <xQueueReceive+0x1bc>)
 800762c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	e780      	b.n	800753e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800763c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763e:	f000 f8a7 	bl	8007790 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007642:	f000 fbed 	bl	8007e20 <xTaskResumeAll>
 8007646:	e77a      	b.n	800753e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800764a:	f000 f8a1 	bl	8007790 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800764e:	f000 fbe7 	bl	8007e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007654:	f000 f8ee 	bl	8007834 <prvIsQueueEmpty>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f43f af6f 	beq.w	800753e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007662:	4618      	mov	r0, r3
 8007664:	3730      	adds	r7, #48	; 0x30
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10d      	bne.n	80076aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d14d      	bne.n	8007732 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 ffbc 	bl	8008618 <xTaskPriorityDisinherit>
 80076a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	e043      	b.n	8007732 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d119      	bne.n	80076e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6858      	ldr	r0, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	461a      	mov	r2, r3
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	f002 f932 	bl	8009924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d32b      	bcc.n	8007732 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	e026      	b.n	8007732 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68d8      	ldr	r0, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	461a      	mov	r2, r3
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	f002 f918 	bl	8009924 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	425b      	negs	r3, r3
 80076fe:	441a      	add	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d207      	bcs.n	8007720 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	425b      	negs	r3, r3
 800771a:	441a      	add	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d105      	bne.n	8007732 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	3b01      	subs	r3, #1
 8007730:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800773a:	697b      	ldr	r3, [r7, #20]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3718      	adds	r7, #24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	429a      	cmp	r2, r3
 800776e:	d303      	bcc.n	8007778 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68d9      	ldr	r1, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	461a      	mov	r2, r3
 8007782:	6838      	ldr	r0, [r7, #0]
 8007784:	f002 f8ce 	bl	8009924 <memcpy>
	}
}
 8007788:	bf00      	nop
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007798:	f001 fc7c 	bl	8009094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077a4:	e011      	b.n	80077ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3324      	adds	r3, #36	; 0x24
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fd50 	bl	8008258 <xTaskRemoveFromEventList>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077be:	f000 fe27 	bl	8008410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dce9      	bgt.n	80077a6 <prvUnlockQueue+0x16>
 80077d2:	e000      	b.n	80077d6 <prvUnlockQueue+0x46>
					break;
 80077d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	22ff      	movs	r2, #255	; 0xff
 80077da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077de:	f001 fc89 	bl	80090f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077e2:	f001 fc57 	bl	8009094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ee:	e011      	b.n	8007814 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d012      	beq.n	800781e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3310      	adds	r3, #16
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fd2b 	bl	8008258 <xTaskRemoveFromEventList>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007808:	f000 fe02 	bl	8008410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	3b01      	subs	r3, #1
 8007810:	b2db      	uxtb	r3, r3
 8007812:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007818:	2b00      	cmp	r3, #0
 800781a:	dce9      	bgt.n	80077f0 <prvUnlockQueue+0x60>
 800781c:	e000      	b.n	8007820 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800781e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	22ff      	movs	r2, #255	; 0xff
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007828:	f001 fc64 	bl	80090f4 <vPortExitCritical>
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800783c:	f001 fc2a 	bl	8009094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007852:	f001 fc4f 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007868:	f001 fc14 	bl	8009094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	429a      	cmp	r2, r3
 8007876:	d102      	bne.n	800787e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e001      	b.n	8007882 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007882:	f001 fc37 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 8007886:	68fb      	ldr	r3, [r7, #12]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e014      	b.n	80078ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078a0:	4a0f      	ldr	r2, [pc, #60]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078ac:	490c      	ldr	r1, [pc, #48]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078b6:	4a0a      	ldr	r2, [pc, #40]	; (80078e0 <vQueueAddToRegistry+0x50>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078c2:	e006      	b.n	80078d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3301      	adds	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b07      	cmp	r3, #7
 80078ce:	d9e7      	bls.n	80078a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	2000297c 	.word	0x2000297c

080078e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078f4:	f001 fbce 	bl	8009094 <vPortEnterCritical>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fe:	b25b      	sxtb	r3, r3
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d103      	bne.n	800790e <vQueueWaitForMessageRestricted+0x2a>
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007914:	b25b      	sxtb	r3, r3
 8007916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791a:	d103      	bne.n	8007924 <vQueueWaitForMessageRestricted+0x40>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007924:	f001 fbe6 	bl	80090f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	3324      	adds	r3, #36	; 0x24
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fc61 	bl	8008200 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800793e:	6978      	ldr	r0, [r7, #20]
 8007940:	f7ff ff26 	bl	8007790 <prvUnlockQueue>
	}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08e      	sub	sp, #56	; 0x38
 8007950:	af04      	add	r7, sp, #16
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	623b      	str	r3, [r7, #32]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xTaskCreateStatic+0x46>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	61fb      	str	r3, [r7, #28]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007992:	23bc      	movs	r3, #188	; 0xbc
 8007994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2bbc      	cmp	r3, #188	; 0xbc
 800799a:	d00a      	beq.n	80079b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	61bb      	str	r3, [r7, #24]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01e      	beq.n	80079f8 <xTaskCreateStatic+0xac>
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01b      	beq.n	80079f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2202      	movs	r2, #2
 80079ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079d2:	2300      	movs	r3, #0
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	9302      	str	r3, [sp, #8]
 80079da:	f107 0314 	add.w	r3, r7, #20
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f850 	bl	8007a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079f2:	f000 f8f3 	bl	8007bdc <prvAddNewTaskToReadyList>
 80079f6:	e001      	b.n	80079fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079fc:	697b      	ldr	r3, [r7, #20]
	}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3728      	adds	r7, #40	; 0x28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b08c      	sub	sp, #48	; 0x30
 8007a0a:	af04      	add	r7, sp, #16
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 fc5c 	bl	80092d8 <pvPortMalloc>
 8007a20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00e      	beq.n	8007a46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a28:	20bc      	movs	r0, #188	; 0xbc
 8007a2a:	f001 fc55 	bl	80092d8 <pvPortMalloc>
 8007a2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a3c:	e005      	b.n	8007a4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a3e:	6978      	ldr	r0, [r7, #20]
 8007a40:	f001 fd16 	bl	8009470 <vPortFree>
 8007a44:	e001      	b.n	8007a4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d017      	beq.n	8007a80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f80e 	bl	8007a90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a74:	69f8      	ldr	r0, [r7, #28]
 8007a76:	f000 f8b1 	bl	8007bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	e002      	b.n	8007a86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a80:	f04f 33ff 	mov.w	r3, #4294967295
 8007a84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a86:	69bb      	ldr	r3, [r7, #24]
	}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	21a5      	movs	r1, #165	; 0xa5
 8007aaa:	f001 ff49 	bl	8009940 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	617b      	str	r3, [r7, #20]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01f      	beq.n	8007b2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	e012      	b.n	8007b1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	7819      	ldrb	r1, [r3, #0]
 8007afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	3334      	adds	r3, #52	; 0x34
 8007b04:	460a      	mov	r2, r1
 8007b06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d9e9      	bls.n	8007af4 <prvInitialiseNewTask+0x64>
 8007b20:	e000      	b.n	8007b24 <prvInitialiseNewTask+0x94>
			{
				break;
 8007b22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b2c:	e003      	b.n	8007b36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	2b37      	cmp	r3, #55	; 0x37
 8007b3a:	d901      	bls.n	8007b40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b3c:	2337      	movs	r3, #55	; 0x37
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	2200      	movs	r2, #0
 8007b50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff f978 	bl	8006e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f973 	bl	8006e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	3354      	adds	r3, #84	; 0x54
 8007b90:	2260      	movs	r2, #96	; 0x60
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 fed3 	bl	8009940 <memset>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	4a0c      	ldr	r2, [pc, #48]	; (8007bd0 <prvInitialiseNewTask+0x140>)
 8007b9e:	659a      	str	r2, [r3, #88]	; 0x58
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	4a0c      	ldr	r2, [pc, #48]	; (8007bd4 <prvInitialiseNewTask+0x144>)
 8007ba4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	4a0b      	ldr	r2, [pc, #44]	; (8007bd8 <prvInitialiseNewTask+0x148>)
 8007baa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	69b8      	ldr	r0, [r7, #24]
 8007bb2:	f001 f941 	bl	8008e38 <pxPortInitialiseStack>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc8:	bf00      	nop
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	0800b5ac 	.word	0x0800b5ac
 8007bd4:	0800b5cc 	.word	0x0800b5cc
 8007bd8:	0800b58c 	.word	0x0800b58c

08007bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007be4:	f001 fa56 	bl	8009094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007be8:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <prvAddNewTaskToReadyList+0xc4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	4a2c      	ldr	r2, [pc, #176]	; (8007ca0 <prvAddNewTaskToReadyList+0xc4>)
 8007bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bf2:	4b2c      	ldr	r3, [pc, #176]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <prvAddNewTaskToReadyList+0xc4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d110      	bne.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c08:	f000 fc26 	bl	8008458 <prvInitialiseTaskLists>
 8007c0c:	e00d      	b.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c0e:	4b26      	ldr	r3, [pc, #152]	; (8007ca8 <prvAddNewTaskToReadyList+0xcc>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c16:	4b23      	ldr	r3, [pc, #140]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d802      	bhi.n	8007c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c24:	4a1f      	ldr	r2, [pc, #124]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c2a:	4b20      	ldr	r3, [pc, #128]	; (8007cac <prvAddNewTaskToReadyList+0xd0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <prvAddNewTaskToReadyList+0xd0>)
 8007c32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c34:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <prvAddNewTaskToReadyList+0xd0>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <prvAddNewTaskToReadyList+0xd4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d903      	bls.n	8007c50 <prvAddNewTaskToReadyList+0x74>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	4a18      	ldr	r2, [pc, #96]	; (8007cb0 <prvAddNewTaskToReadyList+0xd4>)
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <prvAddNewTaskToReadyList+0xd8>)
 8007c5e:	441a      	add	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7ff f8fd 	bl	8006e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c6c:	f001 fa42 	bl	80090f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c70:	4b0d      	ldr	r3, [pc, #52]	; (8007ca8 <prvAddNewTaskToReadyList+0xcc>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <prvAddNewTaskToReadyList+0xc8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d207      	bcs.n	8007c96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <prvAddNewTaskToReadyList+0xdc>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20002e90 	.word	0x20002e90
 8007ca4:	200029bc 	.word	0x200029bc
 8007ca8:	20002e9c 	.word	0x20002e9c
 8007cac:	20002eac 	.word	0x20002eac
 8007cb0:	20002e98 	.word	0x20002e98
 8007cb4:	200029c0 	.word	0x200029c0
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d017      	beq.n	8007cfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <vTaskDelay+0x60>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <vTaskDelay+0x30>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	60bb      	str	r3, [r7, #8]
}
 8007ce8:	bf00      	nop
 8007cea:	e7fe      	b.n	8007cea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cec:	f000 f88a 	bl	8007e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fcfe 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cf8:	f000 f892 	bl	8007e20 <xTaskResumeAll>
 8007cfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d107      	bne.n	8007d14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <vTaskDelay+0x64>)
 8007d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20002eb8 	.word	0x20002eb8
 8007d20:	e000ed04 	.word	0xe000ed04

08007d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d32:	463a      	mov	r2, r7
 8007d34:	1d39      	adds	r1, r7, #4
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff f832 	bl	8006da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	9202      	str	r2, [sp, #8]
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	460a      	mov	r2, r1
 8007d52:	4924      	ldr	r1, [pc, #144]	; (8007de4 <vTaskStartScheduler+0xc0>)
 8007d54:	4824      	ldr	r0, [pc, #144]	; (8007de8 <vTaskStartScheduler+0xc4>)
 8007d56:	f7ff fdf9 	bl	800794c <xTaskCreateStatic>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4a23      	ldr	r2, [pc, #140]	; (8007dec <vTaskStartScheduler+0xc8>)
 8007d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <vTaskStartScheduler+0xc8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e001      	b.n	8007d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d102      	bne.n	8007d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d78:	f000 fd10 	bl	800879c <xTimerCreateTimerTask>
 8007d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d11b      	bne.n	8007dbc <vTaskStartScheduler+0x98>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	613b      	str	r3, [r7, #16]
}
 8007d96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d98:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <vTaskStartScheduler+0xcc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3354      	adds	r3, #84	; 0x54
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <vTaskStartScheduler+0xd0>)
 8007da0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <vTaskStartScheduler+0xd4>)
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <vTaskStartScheduler+0xd8>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007db0:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <vTaskStartScheduler+0xdc>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007db6:	f001 f8cb 	bl	8008f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dba:	e00e      	b.n	8007dda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d10a      	bne.n	8007dda <vTaskStartScheduler+0xb6>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	60fb      	str	r3, [r7, #12]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <vTaskStartScheduler+0xb4>
}
 8007dda:	bf00      	nop
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	0800b514 	.word	0x0800b514
 8007de8:	08008429 	.word	0x08008429
 8007dec:	20002eb4 	.word	0x20002eb4
 8007df0:	200029bc 	.word	0x200029bc
 8007df4:	20000020 	.word	0x20000020
 8007df8:	20002eb0 	.word	0x20002eb0
 8007dfc:	20002e9c 	.word	0x20002e9c
 8007e00:	20002e94 	.word	0x20002e94

08007e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <vTaskSuspendAll+0x18>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	4a03      	ldr	r2, [pc, #12]	; (8007e1c <vTaskSuspendAll+0x18>)
 8007e10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e12:	bf00      	nop
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20002eb8 	.word	0x20002eb8

08007e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e2e:	4b42      	ldr	r3, [pc, #264]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10a      	bne.n	8007e4c <xTaskResumeAll+0x2c>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e4c:	f001 f922 	bl	8009094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e50:	4b39      	ldr	r3, [pc, #228]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4a38      	ldr	r2, [pc, #224]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5a:	4b37      	ldr	r3, [pc, #220]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d162      	bne.n	8007f28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e62:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <xTaskResumeAll+0x11c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d05e      	beq.n	8007f28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e6a:	e02f      	b.n	8007ecc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e6c:	4b34      	ldr	r3, [pc, #208]	; (8007f40 <xTaskResumeAll+0x120>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3318      	adds	r3, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff f851 	bl	8006f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff f84c 	bl	8006f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <xTaskResumeAll+0x124>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d903      	bls.n	8007e9c <xTaskResumeAll+0x7c>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <xTaskResumeAll+0x124>)
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <xTaskResumeAll+0x128>)
 8007eaa:	441a      	add	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	f7fe ffd7 	bl	8006e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebc:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <xTaskResumeAll+0x12c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d302      	bcc.n	8007ecc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ec6:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <xTaskResumeAll+0x130>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <xTaskResumeAll+0x120>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1cb      	bne.n	8007e6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007eda:	f000 fb5f 	bl	800859c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ede:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <xTaskResumeAll+0x134>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d010      	beq.n	8007f0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007eea:	f000 f847 	bl	8007f7c <xTaskIncrementTick>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <xTaskResumeAll+0x130>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f1      	bne.n	8007eea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f06:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <xTaskResumeAll+0x134>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f0c:	4b10      	ldr	r3, [pc, #64]	; (8007f50 <xTaskResumeAll+0x130>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f18:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <xTaskResumeAll+0x138>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f28:	f001 f8e4 	bl	80090f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20002eb8 	.word	0x20002eb8
 8007f3c:	20002e90 	.word	0x20002e90
 8007f40:	20002e50 	.word	0x20002e50
 8007f44:	20002e98 	.word	0x20002e98
 8007f48:	200029c0 	.word	0x200029c0
 8007f4c:	200029bc 	.word	0x200029bc
 8007f50:	20002ea4 	.word	0x20002ea4
 8007f54:	20002ea0 	.word	0x20002ea0
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f62:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <xTaskGetTickCount+0x1c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f68:	687b      	ldr	r3, [r7, #4]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20002e94 	.word	0x20002e94

08007f7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f86:	4b4f      	ldr	r3, [pc, #316]	; (80080c4 <xTaskIncrementTick+0x148>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 808f 	bne.w	80080ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f90:	4b4d      	ldr	r3, [pc, #308]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f98:	4a4b      	ldr	r2, [pc, #300]	; (80080c8 <xTaskIncrementTick+0x14c>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d120      	bne.n	8007fe6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fa4:	4b49      	ldr	r3, [pc, #292]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	603b      	str	r3, [r7, #0]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xTaskIncrementTick+0x46>
 8007fc4:	4b41      	ldr	r3, [pc, #260]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	4b41      	ldr	r3, [pc, #260]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3f      	ldr	r2, [pc, #252]	; (80080cc <xTaskIncrementTick+0x150>)
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4a3f      	ldr	r2, [pc, #252]	; (80080d0 <xTaskIncrementTick+0x154>)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b3e      	ldr	r3, [pc, #248]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a3d      	ldr	r2, [pc, #244]	; (80080d4 <xTaskIncrementTick+0x158>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	f000 fadb 	bl	800859c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fe6:	4b3c      	ldr	r3, [pc, #240]	; (80080d8 <xTaskIncrementTick+0x15c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d349      	bcc.n	8008084 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff0:	4b36      	ldr	r3, [pc, #216]	; (80080cc <xTaskIncrementTick+0x150>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	4b37      	ldr	r3, [pc, #220]	; (80080d8 <xTaskIncrementTick+0x15c>)
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	601a      	str	r2, [r3, #0]
					break;
 8008002:	e03f      	b.n	8008084 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	4b31      	ldr	r3, [pc, #196]	; (80080cc <xTaskIncrementTick+0x150>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d203      	bcs.n	8008024 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800801c:	4a2e      	ldr	r2, [pc, #184]	; (80080d8 <xTaskIncrementTick+0x15c>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008022:	e02f      	b.n	8008084 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3304      	adds	r3, #4
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe ff79 	bl	8006f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe ff70 	bl	8006f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4b25      	ldr	r3, [pc, #148]	; (80080dc <xTaskIncrementTick+0x160>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d903      	bls.n	8008054 <xTaskIncrementTick+0xd8>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	4a22      	ldr	r2, [pc, #136]	; (80080dc <xTaskIncrementTick+0x160>)
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <xTaskIncrementTick+0x164>)
 8008062:	441a      	add	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fe fefb 	bl	8006e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <xTaskIncrementTick+0x168>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	429a      	cmp	r2, r3
 800807c:	d3b8      	bcc.n	8007ff0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800807e:	2301      	movs	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008082:	e7b5      	b.n	8007ff0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <xTaskIncrementTick+0x168>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808a:	4915      	ldr	r1, [pc, #84]	; (80080e0 <xTaskIncrementTick+0x164>)
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d901      	bls.n	80080a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800809c:	2301      	movs	r3, #1
 800809e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080a0:	4b11      	ldr	r3, [pc, #68]	; (80080e8 <xTaskIncrementTick+0x16c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e004      	b.n	80080b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTaskIncrementTick+0x170>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <xTaskIncrementTick+0x170>)
 80080b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080b8:	697b      	ldr	r3, [r7, #20]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20002eb8 	.word	0x20002eb8
 80080c8:	20002e94 	.word	0x20002e94
 80080cc:	20002e48 	.word	0x20002e48
 80080d0:	20002e4c 	.word	0x20002e4c
 80080d4:	20002ea8 	.word	0x20002ea8
 80080d8:	20002eb0 	.word	0x20002eb0
 80080dc:	20002e98 	.word	0x20002e98
 80080e0:	200029c0 	.word	0x200029c0
 80080e4:	200029bc 	.word	0x200029bc
 80080e8:	20002ea4 	.word	0x20002ea4
 80080ec:	20002ea0 	.word	0x20002ea0

080080f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080f6:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <vTaskSwitchContext+0xb0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080fe:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <vTaskSwitchContext+0xb4>)
 8008100:	2201      	movs	r2, #1
 8008102:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008104:	e046      	b.n	8008194 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <vTaskSwitchContext+0xb4>)
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810c:	4b26      	ldr	r3, [pc, #152]	; (80081a8 <vTaskSwitchContext+0xb8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e010      	b.n	8008136 <vTaskSwitchContext+0x46>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <vTaskSwitchContext+0x40>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <vTaskSwitchContext+0x3e>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b01      	subs	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	491d      	ldr	r1, [pc, #116]	; (80081ac <vTaskSwitchContext+0xbc>)
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0e4      	beq.n	8008114 <vTaskSwitchContext+0x24>
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a15      	ldr	r2, [pc, #84]	; (80081ac <vTaskSwitchContext+0xbc>)
 8008156:	4413      	add	r3, r2
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	3308      	adds	r3, #8
 800816c:	429a      	cmp	r2, r3
 800816e:	d104      	bne.n	800817a <vTaskSwitchContext+0x8a>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4a0b      	ldr	r2, [pc, #44]	; (80081b0 <vTaskSwitchContext+0xc0>)
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <vTaskSwitchContext+0xb8>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <vTaskSwitchContext+0xc0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3354      	adds	r3, #84	; 0x54
 8008190:	4a08      	ldr	r2, [pc, #32]	; (80081b4 <vTaskSwitchContext+0xc4>)
 8008192:	6013      	str	r3, [r2, #0]
}
 8008194:	bf00      	nop
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20002eb8 	.word	0x20002eb8
 80081a4:	20002ea4 	.word	0x20002ea4
 80081a8:	20002e98 	.word	0x20002e98
 80081ac:	200029c0 	.word	0x200029c0
 80081b0:	200029bc 	.word	0x200029bc
 80081b4:	20000020 	.word	0x20000020

080081b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	60fb      	str	r3, [r7, #12]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <vTaskPlaceOnEventList+0x44>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3318      	adds	r3, #24
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fe fe61 	bl	8006eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081ec:	2101      	movs	r1, #1
 80081ee:	6838      	ldr	r0, [r7, #0]
 80081f0:	f000 fa80 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200029bc 	.word	0x200029bc

08008200 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	617b      	str	r3, [r7, #20]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <vTaskPlaceOnEventListRestricted+0x54>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3318      	adds	r3, #24
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7fe fe18 	bl	8006e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	68b8      	ldr	r0, [r7, #8]
 8008246:	f000 fa55 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
	}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200029bc 	.word	0x200029bc

08008258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60fb      	str	r3, [r7, #12]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	3318      	adds	r3, #24
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fe49 	bl	8006f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800828e:	4b1e      	ldr	r3, [pc, #120]	; (8008308 <xTaskRemoveFromEventList+0xb0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11d      	bne.n	80082d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fe40 	bl	8006f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a4:	4b19      	ldr	r3, [pc, #100]	; (800830c <xTaskRemoveFromEventList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d903      	bls.n	80082b4 <xTaskRemoveFromEventList+0x5c>
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	4a16      	ldr	r2, [pc, #88]	; (800830c <xTaskRemoveFromEventList+0xb4>)
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <xTaskRemoveFromEventList+0xb8>)
 80082c2:	441a      	add	r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4610      	mov	r0, r2
 80082cc:	f7fe fdcb 	bl	8006e66 <vListInsertEnd>
 80082d0:	e005      	b.n	80082de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3318      	adds	r3, #24
 80082d6:	4619      	mov	r1, r3
 80082d8:	480e      	ldr	r0, [pc, #56]	; (8008314 <xTaskRemoveFromEventList+0xbc>)
 80082da:	f7fe fdc4 	bl	8006e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e2:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <xTaskRemoveFromEventList+0xc0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d905      	bls.n	80082f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <xTaskRemoveFromEventList+0xc4>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e001      	b.n	80082fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082fc:	697b      	ldr	r3, [r7, #20]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20002eb8 	.word	0x20002eb8
 800830c:	20002e98 	.word	0x20002e98
 8008310:	200029c0 	.word	0x200029c0
 8008314:	20002e50 	.word	0x20002e50
 8008318:	200029bc 	.word	0x200029bc
 800831c:	20002ea4 	.word	0x20002ea4

08008320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <vTaskInternalSetTimeOutState+0x24>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <vTaskInternalSetTimeOutState+0x28>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	605a      	str	r2, [r3, #4]
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	20002ea8 	.word	0x20002ea8
 8008348:	20002e94 	.word	0x20002e94

0800834c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	613b      	str	r3, [r7, #16]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	60fb      	str	r3, [r7, #12]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800838e:	f000 fe81 	bl	8009094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008392:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <xTaskCheckForTimeOut+0xbc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083aa:	d102      	bne.n	80083b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61fb      	str	r3, [r7, #28]
 80083b0:	e023      	b.n	80083fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <xTaskCheckForTimeOut+0xc0>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d007      	beq.n	80083ce <xTaskCheckForTimeOut+0x82>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d302      	bcc.n	80083ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083c8:	2301      	movs	r3, #1
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	e015      	b.n	80083fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d20b      	bcs.n	80083f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff ff9b 	bl	8008320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
 80083ee:	e004      	b.n	80083fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083f6:	2301      	movs	r3, #1
 80083f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083fa:	f000 fe7b 	bl	80090f4 <vPortExitCritical>

	return xReturn;
 80083fe:	69fb      	ldr	r3, [r7, #28]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3720      	adds	r7, #32
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20002e94 	.word	0x20002e94
 800840c:	20002ea8 	.word	0x20002ea8

08008410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008414:	4b03      	ldr	r3, [pc, #12]	; (8008424 <vTaskMissedYield+0x14>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]
}
 800841a:	bf00      	nop
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	20002ea4 	.word	0x20002ea4

08008428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008430:	f000 f852 	bl	80084d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008434:	4b06      	ldr	r3, [pc, #24]	; (8008450 <prvIdleTask+0x28>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d9f9      	bls.n	8008430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800843c:	4b05      	ldr	r3, [pc, #20]	; (8008454 <prvIdleTask+0x2c>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800844c:	e7f0      	b.n	8008430 <prvIdleTask+0x8>
 800844e:	bf00      	nop
 8008450:	200029c0 	.word	0x200029c0
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800845e:	2300      	movs	r3, #0
 8008460:	607b      	str	r3, [r7, #4]
 8008462:	e00c      	b.n	800847e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4a12      	ldr	r2, [pc, #72]	; (80084b8 <prvInitialiseTaskLists+0x60>)
 8008470:	4413      	add	r3, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fcca 	bl	8006e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3301      	adds	r3, #1
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b37      	cmp	r3, #55	; 0x37
 8008482:	d9ef      	bls.n	8008464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008484:	480d      	ldr	r0, [pc, #52]	; (80084bc <prvInitialiseTaskLists+0x64>)
 8008486:	f7fe fcc1 	bl	8006e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800848a:	480d      	ldr	r0, [pc, #52]	; (80084c0 <prvInitialiseTaskLists+0x68>)
 800848c:	f7fe fcbe 	bl	8006e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008490:	480c      	ldr	r0, [pc, #48]	; (80084c4 <prvInitialiseTaskLists+0x6c>)
 8008492:	f7fe fcbb 	bl	8006e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008496:	480c      	ldr	r0, [pc, #48]	; (80084c8 <prvInitialiseTaskLists+0x70>)
 8008498:	f7fe fcb8 	bl	8006e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800849c:	480b      	ldr	r0, [pc, #44]	; (80084cc <prvInitialiseTaskLists+0x74>)
 800849e:	f7fe fcb5 	bl	8006e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <prvInitialiseTaskLists+0x78>)
 80084a4:	4a05      	ldr	r2, [pc, #20]	; (80084bc <prvInitialiseTaskLists+0x64>)
 80084a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <prvInitialiseTaskLists+0x7c>)
 80084aa:	4a05      	ldr	r2, [pc, #20]	; (80084c0 <prvInitialiseTaskLists+0x68>)
 80084ac:	601a      	str	r2, [r3, #0]
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	200029c0 	.word	0x200029c0
 80084bc:	20002e20 	.word	0x20002e20
 80084c0:	20002e34 	.word	0x20002e34
 80084c4:	20002e50 	.word	0x20002e50
 80084c8:	20002e64 	.word	0x20002e64
 80084cc:	20002e7c 	.word	0x20002e7c
 80084d0:	20002e48 	.word	0x20002e48
 80084d4:	20002e4c 	.word	0x20002e4c

080084d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084de:	e019      	b.n	8008514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084e0:	f000 fdd8 	bl	8009094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <prvCheckTasksWaitingTermination+0x50>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fd15 	bl	8006f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <prvCheckTasksWaitingTermination+0x54>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	4a0b      	ldr	r2, [pc, #44]	; (800852c <prvCheckTasksWaitingTermination+0x54>)
 80084fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <prvCheckTasksWaitingTermination+0x58>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3b01      	subs	r3, #1
 8008506:	4a0a      	ldr	r2, [pc, #40]	; (8008530 <prvCheckTasksWaitingTermination+0x58>)
 8008508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800850a:	f000 fdf3 	bl	80090f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f810 	bl	8008534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <prvCheckTasksWaitingTermination+0x58>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e1      	bne.n	80084e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20002e64 	.word	0x20002e64
 800852c:	20002e90 	.word	0x20002e90
 8008530:	20002e78 	.word	0x20002e78

08008534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3354      	adds	r3, #84	; 0x54
 8008540:	4618      	mov	r0, r3
 8008542:	f001 fb81 	bl	8009c48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800854c:	2b00      	cmp	r3, #0
 800854e:	d108      	bne.n	8008562 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	4618      	mov	r0, r3
 8008556:	f000 ff8b 	bl	8009470 <vPortFree>
				vPortFree( pxTCB );
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 ff88 	bl	8009470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008560:	e018      	b.n	8008594 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008568:	2b01      	cmp	r3, #1
 800856a:	d103      	bne.n	8008574 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 ff7f 	bl	8009470 <vPortFree>
	}
 8008572:	e00f      	b.n	8008594 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800857a:	2b02      	cmp	r3, #2
 800857c:	d00a      	beq.n	8008594 <prvDeleteTCB+0x60>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60fb      	str	r3, [r7, #12]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <prvDeleteTCB+0x5e>
	}
 8008594:	bf00      	nop
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a2:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <prvResetNextTaskUnblockTime+0x38>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <prvResetNextTaskUnblockTime+0x3c>)
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085b4:	e008      	b.n	80085c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <prvResetNextTaskUnblockTime+0x38>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <prvResetNextTaskUnblockTime+0x3c>)
 80085c6:	6013      	str	r3, [r2, #0]
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	20002e48 	.word	0x20002e48
 80085d8:	20002eb0 	.word	0x20002eb0

080085dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <xTaskGetSchedulerState+0x34>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085ea:	2301      	movs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	e008      	b.n	8008602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <xTaskGetSchedulerState+0x38>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085f8:	2302      	movs	r3, #2
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	e001      	b.n	8008602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008602:	687b      	ldr	r3, [r7, #4]
	}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20002e9c 	.word	0x20002e9c
 8008614:	20002eb8 	.word	0x20002eb8

08008618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d056      	beq.n	80086dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800862e:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <xTaskPriorityDisinherit+0xd0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d00a      	beq.n	800864e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	60fb      	str	r3, [r7, #12]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60bb      	str	r3, [r7, #8]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	1e5a      	subs	r2, r3, #1
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867e:	429a      	cmp	r2, r3
 8008680:	d02c      	beq.n	80086dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d128      	bne.n	80086dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fc46 	bl	8006f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <xTaskPriorityDisinherit+0xd4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <xTaskPriorityDisinherit+0xa4>
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <xTaskPriorityDisinherit+0xd4>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <xTaskPriorityDisinherit+0xd8>)
 80086ca:	441a      	add	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fbc7 	bl	8006e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200029bc 	.word	0x200029bc
 80086ec:	20002e98 	.word	0x20002e98
 80086f0:	200029c0 	.word	0x200029c0

080086f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086fe:	4b21      	ldr	r3, [pc, #132]	; (8008784 <prvAddCurrentTaskToDelayedList+0x90>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008704:	4b20      	ldr	r3, [pc, #128]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3304      	adds	r3, #4
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fc08 	bl	8006f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d10a      	bne.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4819      	ldr	r0, [pc, #100]	; (800878c <prvAddCurrentTaskToDelayedList+0x98>)
 8008728:	f7fe fb9d 	bl	8006e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800872c:	e026      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d209      	bcs.n	800875a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008746:	4b12      	ldr	r3, [pc, #72]	; (8008790 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe fbab 	bl	8006eae <vListInsert>
}
 8008758:	e010      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875a:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <prvAddCurrentTaskToDelayedList+0xa0>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fba1 	bl	8006eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800876c:	4b0a      	ldr	r3, [pc, #40]	; (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d202      	bcs.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008776:	4a08      	ldr	r2, [pc, #32]	; (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20002e94 	.word	0x20002e94
 8008788:	200029bc 	.word	0x200029bc
 800878c:	20002e7c 	.word	0x20002e7c
 8008790:	20002e4c 	.word	0x20002e4c
 8008794:	20002e48 	.word	0x20002e48
 8008798:	20002eb0 	.word	0x20002eb0

0800879c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087a6:	f000 fb07 	bl	8008db8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087aa:	4b1c      	ldr	r3, [pc, #112]	; (800881c <xTimerCreateTimerTask+0x80>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d021      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087ba:	1d3a      	adds	r2, r7, #4
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fb07 	bl	8006dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	2302      	movs	r3, #2
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	460a      	mov	r2, r1
 80087dc:	4910      	ldr	r1, [pc, #64]	; (8008820 <xTimerCreateTimerTask+0x84>)
 80087de:	4811      	ldr	r0, [pc, #68]	; (8008824 <xTimerCreateTimerTask+0x88>)
 80087e0:	f7ff f8b4 	bl	800794c <xTaskCreateStatic>
 80087e4:	4603      	mov	r3, r0
 80087e6:	4a10      	ldr	r2, [pc, #64]	; (8008828 <xTimerCreateTimerTask+0x8c>)
 80087e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <xTimerCreateTimerTask+0x8c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087f2:	2301      	movs	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	613b      	str	r3, [r7, #16]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008812:	697b      	ldr	r3, [r7, #20]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20002eec 	.word	0x20002eec
 8008820:	0800b51c 	.word	0x0800b51c
 8008824:	08008961 	.word	0x08008961
 8008828:	20002ef0 	.word	0x20002ef0

0800882c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	; 0x28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800883a:	2300      	movs	r3, #0
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	623b      	str	r3, [r7, #32]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800885a:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <xTimerGenericCommand+0x98>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02a      	beq.n	80088b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b05      	cmp	r3, #5
 8008872:	dc18      	bgt.n	80088a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008874:	f7ff feb2 	bl	80085dc <xTaskGetSchedulerState>
 8008878:	4603      	mov	r3, r0
 800887a:	2b02      	cmp	r3, #2
 800887c:	d109      	bne.n	8008892 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800887e:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <xTimerGenericCommand+0x98>)
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f107 0110 	add.w	r1, r7, #16
 8008886:	2300      	movs	r3, #0
 8008888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888a:	f7fe fc77 	bl	800717c <xQueueGenericSend>
 800888e:	6278      	str	r0, [r7, #36]	; 0x24
 8008890:	e012      	b.n	80088b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <xTimerGenericCommand+0x98>)
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f107 0110 	add.w	r1, r7, #16
 800889a:	2300      	movs	r3, #0
 800889c:	2200      	movs	r2, #0
 800889e:	f7fe fc6d 	bl	800717c <xQueueGenericSend>
 80088a2:	6278      	str	r0, [r7, #36]	; 0x24
 80088a4:	e008      	b.n	80088b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <xTimerGenericCommand+0x98>)
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f107 0110 	add.w	r1, r7, #16
 80088ae:	2300      	movs	r3, #0
 80088b0:	683a      	ldr	r2, [r7, #0]
 80088b2:	f7fe fd61 	bl	8007378 <xQueueGenericSendFromISR>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3728      	adds	r7, #40	; 0x28
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20002eec 	.word	0x20002eec

080088c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d2:	4b22      	ldr	r3, [pc, #136]	; (800895c <prvProcessExpiredTimer+0x94>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3304      	adds	r3, #4
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fb1d 	bl	8006f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d022      	beq.n	800893a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	18d1      	adds	r1, r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	6978      	ldr	r0, [r7, #20]
 8008902:	f000 f8d1 	bl	8008aa8 <prvInsertTimerInActiveList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01f      	beq.n	800894c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800890c:	2300      	movs	r3, #0
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	2100      	movs	r1, #0
 8008916:	6978      	ldr	r0, [r7, #20]
 8008918:	f7ff ff88 	bl	800882c <xTimerGenericCommand>
 800891c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d113      	bne.n	800894c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	60fb      	str	r3, [r7, #12]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008940:	f023 0301 	bic.w	r3, r3, #1
 8008944:	b2da      	uxtb	r2, r3
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	4798      	blx	r3
}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20002ee4 	.word	0x20002ee4

08008960 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f857 	bl	8008a20 <prvGetNextExpireTime>
 8008972:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4619      	mov	r1, r3
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f000 f803 	bl	8008984 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800897e:	f000 f8d5 	bl	8008b2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008982:	e7f1      	b.n	8008968 <prvTimerTask+0x8>

08008984 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800898e:	f7ff fa39 	bl	8007e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008992:	f107 0308 	add.w	r3, r7, #8
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f866 	bl	8008a68 <prvSampleTimeNow>
 800899c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d130      	bne.n	8008a06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <prvProcessTimerOrBlockTask+0x3c>
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d806      	bhi.n	80089c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089b2:	f7ff fa35 	bl	8007e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ff85 	bl	80088c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089be:	e024      	b.n	8008a0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089c6:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <prvProcessTimerOrBlockTask+0x90>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <prvProcessTimerOrBlockTask+0x50>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <prvProcessTimerOrBlockTask+0x52>
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089d8:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <prvProcessTimerOrBlockTask+0x94>)
 80089da:	6818      	ldr	r0, [r3, #0]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f7fe ff7d 	bl	80078e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089ea:	f7ff fa19 	bl	8007e20 <xTaskResumeAll>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <prvProcessTimerOrBlockTask+0x98>)
 80089f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	f3bf 8f6f 	isb	sy
}
 8008a04:	e001      	b.n	8008a0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a06:	f7ff fa0b 	bl	8007e20 <xTaskResumeAll>
}
 8008a0a:	bf00      	nop
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20002ee8 	.word	0x20002ee8
 8008a18:	20002eec 	.word	0x20002eec
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a28:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <prvGetNextExpireTime+0x44>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <prvGetNextExpireTime+0x16>
 8008a32:	2201      	movs	r2, #1
 8008a34:	e000      	b.n	8008a38 <prvGetNextExpireTime+0x18>
 8008a36:	2200      	movs	r2, #0
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d105      	bne.n	8008a50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <prvGetNextExpireTime+0x44>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	e001      	b.n	8008a54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20002ee4 	.word	0x20002ee4

08008a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a70:	f7ff fa74 	bl	8007f5c <xTaskGetTickCount>
 8008a74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <prvSampleTimeNow+0x3c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d205      	bcs.n	8008a8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a80:	f000 f936 	bl	8008cf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e002      	b.n	8008a92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a92:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <prvSampleTimeNow+0x3c>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a98:	68fb      	ldr	r3, [r7, #12]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20002ef4 	.word	0x20002ef4

08008aa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d812      	bhi.n	8008af4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d302      	bcc.n	8008ae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008adc:	2301      	movs	r3, #1
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	e01b      	b.n	8008b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ae2:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <prvInsertTimerInActiveList+0x7c>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fe f9de 	bl	8006eae <vListInsert>
 8008af2:	e012      	b.n	8008b1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d206      	bcs.n	8008b0a <prvInsertTimerInActiveList+0x62>
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d302      	bcc.n	8008b0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e007      	b.n	8008b1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <prvInsertTimerInActiveList+0x80>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f7fe f9ca 	bl	8006eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b1a:	697b      	ldr	r3, [r7, #20]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3718      	adds	r7, #24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20002ee8 	.word	0x20002ee8
 8008b28:	20002ee4 	.word	0x20002ee4

08008b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08e      	sub	sp, #56	; 0x38
 8008b30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b32:	e0ca      	b.n	8008cca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	da18      	bge.n	8008b6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	61fb      	str	r3, [r7, #28]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b62:	6850      	ldr	r0, [r2, #4]
 8008b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b66:	6892      	ldr	r2, [r2, #8]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f2c0 80aa 	blt.w	8008cc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe f9cb 	bl	8006f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff ff6b 	bl	8008a68 <prvSampleTimeNow>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b09      	cmp	r3, #9
 8008b98:	f200 8097 	bhi.w	8008cca <prvProcessReceivedCommands+0x19e>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <prvProcessReceivedCommands+0x78>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bcd 	.word	0x08008bcd
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bcd 	.word	0x08008bcd
 8008bb0:	08008c41 	.word	0x08008c41
 8008bb4:	08008c55 	.word	0x08008c55
 8008bb8:	08008c9f 	.word	0x08008c9f
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bcd 	.word	0x08008bcd
 8008bc4:	08008c41 	.word	0x08008c41
 8008bc8:	08008c55 	.word	0x08008c55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bd2:	f043 0301 	orr.w	r3, r3, #1
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	18d1      	adds	r1, r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bec:	f7ff ff5c 	bl	8008aa8 <prvInsertTimerInActiveList>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d069      	beq.n	8008cca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d05e      	beq.n	8008cca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	441a      	add	r2, r3
 8008c14:	2300      	movs	r3, #0
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1e:	f7ff fe05 	bl	800882c <xTimerGenericCommand>
 8008c22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d14f      	bne.n	8008cca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	61bb      	str	r3, [r7, #24]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c46:	f023 0301 	bic.w	r3, r3, #1
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c52:	e03a      	b.n	8008cca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	617b      	str	r3, [r7, #20]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	18d1      	adds	r1, r2, r3
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c98:	f7ff ff06 	bl	8008aa8 <prvInsertTimerInActiveList>
					break;
 8008c9c:	e015      	b.n	8008cca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d103      	bne.n	8008cb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cae:	f000 fbdf 	bl	8009470 <vPortFree>
 8008cb2:	e00a      	b.n	8008cca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cc6:	e000      	b.n	8008cca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008cc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cca:	4b08      	ldr	r3, [pc, #32]	; (8008cec <prvProcessReceivedCommands+0x1c0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	1d39      	adds	r1, r7, #4
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fbec 	bl	80074b0 <xQueueReceive>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f47f af2a 	bne.w	8008b34 <prvProcessReceivedCommands+0x8>
	}
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3730      	adds	r7, #48	; 0x30
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20002eec 	.word	0x20002eec

08008cf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cf6:	e048      	b.n	8008d8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d02:	4b2b      	ldr	r3, [pc, #172]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe f905 	bl	8006f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d02e      	beq.n	8008d8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4413      	add	r3, r2
 8008d34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d90e      	bls.n	8008d5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7fe f8aa 	bl	8006eae <vListInsert>
 8008d5a:	e016      	b.n	8008d8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	2100      	movs	r1, #0
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fd60 	bl	800882c <xTimerGenericCommand>
 8008d6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	603b      	str	r3, [r7, #0]
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d8a:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1b1      	bne.n	8008cf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d94:	4b06      	ldr	r3, [pc, #24]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <prvSwitchTimerLists+0xc4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a04      	ldr	r2, [pc, #16]	; (8008db0 <prvSwitchTimerLists+0xc0>)
 8008da0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008da2:	4a04      	ldr	r2, [pc, #16]	; (8008db4 <prvSwitchTimerLists+0xc4>)
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	6013      	str	r3, [r2, #0]
}
 8008da8:	bf00      	nop
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20002ee4 	.word	0x20002ee4
 8008db4:	20002ee8 	.word	0x20002ee8

08008db8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008dbe:	f000 f969 	bl	8009094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008dc2:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d120      	bne.n	8008e0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008dca:	4814      	ldr	r0, [pc, #80]	; (8008e1c <prvCheckForValidListAndQueue+0x64>)
 8008dcc:	f7fe f81e 	bl	8006e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008dd0:	4813      	ldr	r0, [pc, #76]	; (8008e20 <prvCheckForValidListAndQueue+0x68>)
 8008dd2:	f7fe f81b 	bl	8006e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dd6:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <prvCheckForValidListAndQueue+0x6c>)
 8008dd8:	4a10      	ldr	r2, [pc, #64]	; (8008e1c <prvCheckForValidListAndQueue+0x64>)
 8008dda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ddc:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <prvCheckForValidListAndQueue+0x70>)
 8008dde:	4a10      	ldr	r2, [pc, #64]	; (8008e20 <prvCheckForValidListAndQueue+0x68>)
 8008de0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008de2:	2300      	movs	r3, #0
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <prvCheckForValidListAndQueue+0x74>)
 8008de8:	4a11      	ldr	r2, [pc, #68]	; (8008e30 <prvCheckForValidListAndQueue+0x78>)
 8008dea:	2110      	movs	r1, #16
 8008dec:	200a      	movs	r0, #10
 8008dee:	f7fe f929 	bl	8007044 <xQueueGenericCreateStatic>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4a08      	ldr	r2, [pc, #32]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008df6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008df8:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <prvCheckForValidListAndQueue+0x60>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	490b      	ldr	r1, [pc, #44]	; (8008e34 <prvCheckForValidListAndQueue+0x7c>)
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fd42 	bl	8007890 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e0c:	f000 f972 	bl	80090f4 <vPortExitCritical>
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	20002eec 	.word	0x20002eec
 8008e1c:	20002ebc 	.word	0x20002ebc
 8008e20:	20002ed0 	.word	0x20002ed0
 8008e24:	20002ee4 	.word	0x20002ee4
 8008e28:	20002ee8 	.word	0x20002ee8
 8008e2c:	20002f98 	.word	0x20002f98
 8008e30:	20002ef8 	.word	0x20002ef8
 8008e34:	0800b524 	.word	0x0800b524

08008e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3b04      	subs	r3, #4
 8008e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f023 0201 	bic.w	r2, r3, #1
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e68:	4a0c      	ldr	r2, [pc, #48]	; (8008e9c <pxPortInitialiseStack+0x64>)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3b14      	subs	r3, #20
 8008e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3b04      	subs	r3, #4
 8008e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f06f 0202 	mvn.w	r2, #2
 8008e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3b20      	subs	r3, #32
 8008e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	08008ea1 	.word	0x08008ea1

08008ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <prvTaskExitError+0x54>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d00a      	beq.n	8008eca <prvTaskExitError+0x2a>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	60fb      	str	r3, [r7, #12]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <prvTaskExitError+0x28>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	60bb      	str	r3, [r7, #8]
}
 8008edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ede:	bf00      	nop
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0fc      	beq.n	8008ee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	2000001c 	.word	0x2000001c
	...

08008f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <pxCurrentTCBConst2>)
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6808      	ldr	r0, [r1, #0]
 8008f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f380 8809 	msr	PSP, r0
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8811 	msr	BASEPRI, r0
 8008f1a:	4770      	bx	lr
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst2>:
 8008f20:	200029bc 	.word	0x200029bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f28:	4808      	ldr	r0, [pc, #32]	; (8008f4c <prvPortStartFirstTask+0x24>)
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f380 8808 	msr	MSP, r0
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8814 	msr	CONTROL, r0
 8008f3a:	b662      	cpsie	i
 8008f3c:	b661      	cpsie	f
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	df00      	svc	0
 8008f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f4a:	bf00      	nop
 8008f4c:	e000ed08 	.word	0xe000ed08

08008f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f56:	4b46      	ldr	r3, [pc, #280]	; (8009070 <xPortStartScheduler+0x120>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a46      	ldr	r2, [pc, #280]	; (8009074 <xPortStartScheduler+0x124>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10a      	bne.n	8008f76 <xPortStartScheduler+0x26>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	613b      	str	r3, [r7, #16]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f76:	4b3e      	ldr	r3, [pc, #248]	; (8009070 <xPortStartScheduler+0x120>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a3f      	ldr	r2, [pc, #252]	; (8009078 <xPortStartScheduler+0x128>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d10a      	bne.n	8008f96 <xPortStartScheduler+0x46>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f96:	4b39      	ldr	r3, [pc, #228]	; (800907c <xPortStartScheduler+0x12c>)
 8008f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4b31      	ldr	r3, [pc, #196]	; (8009080 <xPortStartScheduler+0x130>)
 8008fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fbe:	4b31      	ldr	r3, [pc, #196]	; (8009084 <xPortStartScheduler+0x134>)
 8008fc0:	2207      	movs	r2, #7
 8008fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fc4:	e009      	b.n	8008fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008fc6:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <xPortStartScheduler+0x134>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	4a2d      	ldr	r2, [pc, #180]	; (8009084 <xPortStartScheduler+0x134>)
 8008fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d0ef      	beq.n	8008fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fe6:	4b27      	ldr	r3, [pc, #156]	; (8009084 <xPortStartScheduler+0x134>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1c3 0307 	rsb	r3, r3, #7
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d00a      	beq.n	8009008 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60bb      	str	r3, [r7, #8]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <xPortStartScheduler+0x134>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <xPortStartScheduler+0x134>)
 8009010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009012:	4b1c      	ldr	r3, [pc, #112]	; (8009084 <xPortStartScheduler+0x134>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800901a:	4a1a      	ldr	r2, [pc, #104]	; (8009084 <xPortStartScheduler+0x134>)
 800901c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009026:	4b18      	ldr	r3, [pc, #96]	; (8009088 <xPortStartScheduler+0x138>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a17      	ldr	r2, [pc, #92]	; (8009088 <xPortStartScheduler+0x138>)
 800902c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <xPortStartScheduler+0x138>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a14      	ldr	r2, [pc, #80]	; (8009088 <xPortStartScheduler+0x138>)
 8009038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800903c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800903e:	f000 f8dd 	bl	80091fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <xPortStartScheduler+0x13c>)
 8009044:	2200      	movs	r2, #0
 8009046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009048:	f000 f8fc 	bl	8009244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <xPortStartScheduler+0x140>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a0f      	ldr	r2, [pc, #60]	; (8009090 <xPortStartScheduler+0x140>)
 8009052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009058:	f7ff ff66 	bl	8008f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800905c:	f7ff f848 	bl	80080f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009060:	f7ff ff1e 	bl	8008ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	e000ed00 	.word	0xe000ed00
 8009074:	410fc271 	.word	0x410fc271
 8009078:	410fc270 	.word	0x410fc270
 800907c:	e000e400 	.word	0xe000e400
 8009080:	20002fe8 	.word	0x20002fe8
 8009084:	20002fec 	.word	0x20002fec
 8009088:	e000ed20 	.word	0xe000ed20
 800908c:	2000001c 	.word	0x2000001c
 8009090:	e000ef34 	.word	0xe000ef34

08009094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	607b      	str	r3, [r7, #4]
}
 80090ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <vPortEnterCritical+0x58>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3301      	adds	r3, #1
 80090b4:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <vPortEnterCritical+0x58>)
 80090b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <vPortEnterCritical+0x58>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d10f      	bne.n	80090e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <vPortEnterCritical+0x5c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	603b      	str	r3, [r7, #0]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <vPortEnterCritical+0x4a>
	}
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	2000001c 	.word	0x2000001c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090fa:	4b12      	ldr	r3, [pc, #72]	; (8009144 <vPortExitCritical+0x50>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10a      	bne.n	8009118 <vPortExitCritical+0x24>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	607b      	str	r3, [r7, #4]
}
 8009114:	bf00      	nop
 8009116:	e7fe      	b.n	8009116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <vPortExitCritical+0x50>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3b01      	subs	r3, #1
 800911e:	4a09      	ldr	r2, [pc, #36]	; (8009144 <vPortExitCritical+0x50>)
 8009120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <vPortExitCritical+0x50>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d105      	bne.n	8009136 <vPortExitCritical+0x42>
 800912a:	2300      	movs	r3, #0
 800912c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	f383 8811 	msr	BASEPRI, r3
}
 8009134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	2000001c 	.word	0x2000001c
	...

08009150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009150:	f3ef 8009 	mrs	r0, PSP
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <pxCurrentTCBConst>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	f01e 0f10 	tst.w	lr, #16
 8009160:	bf08      	it	eq
 8009162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	6010      	str	r0, [r2, #0]
 800916c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009174:	f380 8811 	msr	BASEPRI, r0
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f7fe ffb6 	bl	80080f0 <vTaskSwitchContext>
 8009184:	f04f 0000 	mov.w	r0, #0
 8009188:	f380 8811 	msr	BASEPRI, r0
 800918c:	bc09      	pop	{r0, r3}
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	6808      	ldr	r0, [r1, #0]
 8009192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009196:	f01e 0f10 	tst.w	lr, #16
 800919a:	bf08      	it	eq
 800919c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091a0:	f380 8809 	msr	PSP, r0
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w

080091b0 <pxCurrentTCBConst>:
 80091b0:	200029bc 	.word	0x200029bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop

080091b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	607b      	str	r3, [r7, #4]
}
 80091d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091d2:	f7fe fed3 	bl	8007f7c <xTaskIncrementTick>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <xPortSysTickHandler+0x40>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f383 8811 	msr	BASEPRI, r3
}
 80091ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <vPortSetupTimerInterrupt+0x38>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <vPortSetupTimerInterrupt+0x3c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a0a      	ldr	r2, [pc, #40]	; (800923c <vPortSetupTimerInterrupt+0x40>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	099b      	lsrs	r3, r3, #6
 8009218:	4a09      	ldr	r2, [pc, #36]	; (8009240 <vPortSetupTimerInterrupt+0x44>)
 800921a:	3b01      	subs	r3, #1
 800921c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800921e:	4b04      	ldr	r3, [pc, #16]	; (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009220:	2207      	movs	r2, #7
 8009222:	601a      	str	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	e000e010 	.word	0xe000e010
 8009234:	e000e018 	.word	0xe000e018
 8009238:	20000000 	.word	0x20000000
 800923c:	10624dd3 	.word	0x10624dd3
 8009240:	e000e014 	.word	0xe000e014

08009244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009254 <vPortEnableVFP+0x10>
 8009248:	6801      	ldr	r1, [r0, #0]
 800924a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800924e:	6001      	str	r1, [r0, #0]
 8009250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009252:	bf00      	nop
 8009254:	e000ed88 	.word	0xe000ed88

08009258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800925e:	f3ef 8305 	mrs	r3, IPSR
 8009262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d914      	bls.n	8009294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800926a:	4a17      	ldr	r2, [pc, #92]	; (80092c8 <vPortValidateInterruptPriority+0x70>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009274:	4b15      	ldr	r3, [pc, #84]	; (80092cc <vPortValidateInterruptPriority+0x74>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	7afa      	ldrb	r2, [r7, #11]
 800927a:	429a      	cmp	r2, r3
 800927c:	d20a      	bcs.n	8009294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <vPortValidateInterruptPriority+0x78>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <vPortValidateInterruptPriority+0x7c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d90a      	bls.n	80092ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	603b      	str	r3, [r7, #0]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <vPortValidateInterruptPriority+0x60>
	}
 80092ba:	bf00      	nop
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	e000e3f0 	.word	0xe000e3f0
 80092cc:	20002fe8 	.word	0x20002fe8
 80092d0:	e000ed0c 	.word	0xe000ed0c
 80092d4:	20002fec 	.word	0x20002fec

080092d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092e4:	f7fe fd8e 	bl	8007e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092e8:	4b5b      	ldr	r3, [pc, #364]	; (8009458 <pvPortMalloc+0x180>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092f0:	f000 f920 	bl	8009534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092f4:	4b59      	ldr	r3, [pc, #356]	; (800945c <pvPortMalloc+0x184>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4013      	ands	r3, r2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8093 	bne.w	8009428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01d      	beq.n	8009344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009308:	2208      	movs	r2, #8
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d014      	beq.n	8009344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f023 0307 	bic.w	r3, r3, #7
 8009320:	3308      	adds	r3, #8
 8009322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <pvPortMalloc+0x6c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d06e      	beq.n	8009428 <pvPortMalloc+0x150>
 800934a:	4b45      	ldr	r3, [pc, #276]	; (8009460 <pvPortMalloc+0x188>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d869      	bhi.n	8009428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009354:	4b43      	ldr	r3, [pc, #268]	; (8009464 <pvPortMalloc+0x18c>)
 8009356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009358:	4b42      	ldr	r3, [pc, #264]	; (8009464 <pvPortMalloc+0x18c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800935e:	e004      	b.n	800936a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d903      	bls.n	800937c <pvPortMalloc+0xa4>
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f1      	bne.n	8009360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800937c:	4b36      	ldr	r3, [pc, #216]	; (8009458 <pvPortMalloc+0x180>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	429a      	cmp	r2, r3
 8009384:	d050      	beq.n	8009428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2208      	movs	r2, #8
 800938c:	4413      	add	r3, r2
 800938e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	2308      	movs	r3, #8
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d91f      	bls.n	80093e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4413      	add	r3, r2
 80093ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <pvPortMalloc+0xf8>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	613b      	str	r3, [r7, #16]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	1ad2      	subs	r2, r2, r3
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093e2:	69b8      	ldr	r0, [r7, #24]
 80093e4:	f000 f908 	bl	80095f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093e8:	4b1d      	ldr	r3, [pc, #116]	; (8009460 <pvPortMalloc+0x188>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <pvPortMalloc+0x188>)
 80093f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <pvPortMalloc+0x188>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	4b1b      	ldr	r3, [pc, #108]	; (8009468 <pvPortMalloc+0x190>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d203      	bcs.n	800940a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009402:	4b17      	ldr	r3, [pc, #92]	; (8009460 <pvPortMalloc+0x188>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a18      	ldr	r2, [pc, #96]	; (8009468 <pvPortMalloc+0x190>)
 8009408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <pvPortMalloc+0x184>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	431a      	orrs	r2, r3
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800941e:	4b13      	ldr	r3, [pc, #76]	; (800946c <pvPortMalloc+0x194>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	4a11      	ldr	r2, [pc, #68]	; (800946c <pvPortMalloc+0x194>)
 8009426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009428:	f7fe fcfa 	bl	8007e20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <pvPortMalloc+0x174>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60fb      	str	r3, [r7, #12]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <pvPortMalloc+0x172>
	return pvReturn;
 800944c:	69fb      	ldr	r3, [r7, #28]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3728      	adds	r7, #40	; 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20006bf8 	.word	0x20006bf8
 800945c:	20006c0c 	.word	0x20006c0c
 8009460:	20006bfc 	.word	0x20006bfc
 8009464:	20006bf0 	.word	0x20006bf0
 8009468:	20006c00 	.word	0x20006c00
 800946c:	20006c04 	.word	0x20006c04

08009470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d04d      	beq.n	800951e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009482:	2308      	movs	r3, #8
 8009484:	425b      	negs	r3, r3
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4413      	add	r3, r2
 800948a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4b24      	ldr	r3, [pc, #144]	; (8009528 <vPortFree+0xb8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4013      	ands	r3, r2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <vPortFree+0x44>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60fb      	str	r3, [r7, #12]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <vPortFree+0x62>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60bb      	str	r3, [r7, #8]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <vPortFree+0xb8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4013      	ands	r3, r2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01e      	beq.n	800951e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11a      	bne.n	800951e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <vPortFree+0xb8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	43db      	mvns	r3, r3
 80094f2:	401a      	ands	r2, r3
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094f8:	f7fe fc84 	bl	8007e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <vPortFree+0xbc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4413      	add	r3, r2
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <vPortFree+0xbc>)
 8009508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f000 f874 	bl	80095f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009510:	4b07      	ldr	r3, [pc, #28]	; (8009530 <vPortFree+0xc0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a06      	ldr	r2, [pc, #24]	; (8009530 <vPortFree+0xc0>)
 8009518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800951a:	f7fe fc81 	bl	8007e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800951e:	bf00      	nop
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20006c0c 	.word	0x20006c0c
 800952c:	20006bfc 	.word	0x20006bfc
 8009530:	20006c08 	.word	0x20006c08

08009534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800953a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800953e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009540:	4b27      	ldr	r3, [pc, #156]	; (80095e0 <prvHeapInit+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	4a1f      	ldr	r2, [pc, #124]	; (80095e0 <prvHeapInit+0xac>)
 8009564:	4413      	add	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <prvHeapInit+0xb0>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009572:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <prvHeapInit+0xb0>)
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4413      	add	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009580:	2208      	movs	r2, #8
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <prvHeapInit+0xb4>)
 8009594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009596:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <prvHeapInit+0xb4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800959e:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <prvHeapInit+0xb4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <prvHeapInit+0xb4>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <prvHeapInit+0xb8>)
 80095c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4a09      	ldr	r2, [pc, #36]	; (80095f0 <prvHeapInit+0xbc>)
 80095ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095cc:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <prvHeapInit+0xc0>)
 80095ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20002ff0 	.word	0x20002ff0
 80095e4:	20006bf0 	.word	0x20006bf0
 80095e8:	20006bf8 	.word	0x20006bf8
 80095ec:	20006c00 	.word	0x20006c00
 80095f0:	20006bfc 	.word	0x20006bfc
 80095f4:	20006c0c 	.word	0x20006c0c

080095f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <prvInsertBlockIntoFreeList+0xac>)
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	e002      	b.n	800960c <prvInsertBlockIntoFreeList+0x14>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d8f7      	bhi.n	8009606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d108      	bne.n	800963a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d118      	bne.n	8009680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b15      	ldr	r3, [pc, #84]	; (80096a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d00d      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	441a      	add	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e008      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e003      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	429a      	cmp	r2, r3
 800968e:	d002      	beq.n	8009696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20006bf0 	.word	0x20006bf0
 80096a8:	20006bf8 	.word	0x20006bf8

080096ac <__errno>:
 80096ac:	4b01      	ldr	r3, [pc, #4]	; (80096b4 <__errno+0x8>)
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000020 	.word	0x20000020

080096b8 <std>:
 80096b8:	2300      	movs	r3, #0
 80096ba:	b510      	push	{r4, lr}
 80096bc:	4604      	mov	r4, r0
 80096be:	e9c0 3300 	strd	r3, r3, [r0]
 80096c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096c6:	6083      	str	r3, [r0, #8]
 80096c8:	8181      	strh	r1, [r0, #12]
 80096ca:	6643      	str	r3, [r0, #100]	; 0x64
 80096cc:	81c2      	strh	r2, [r0, #14]
 80096ce:	6183      	str	r3, [r0, #24]
 80096d0:	4619      	mov	r1, r3
 80096d2:	2208      	movs	r2, #8
 80096d4:	305c      	adds	r0, #92	; 0x5c
 80096d6:	f000 f933 	bl	8009940 <memset>
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x38>)
 80096dc:	6263      	str	r3, [r4, #36]	; 0x24
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std+0x3c>)
 80096e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x40>)
 80096e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std+0x44>)
 80096e8:	6224      	str	r4, [r4, #32]
 80096ea:	6323      	str	r3, [r4, #48]	; 0x30
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	bf00      	nop
 80096f0:	08009d61 	.word	0x08009d61
 80096f4:	08009d83 	.word	0x08009d83
 80096f8:	08009dbb 	.word	0x08009dbb
 80096fc:	08009ddf 	.word	0x08009ddf

08009700 <_cleanup_r>:
 8009700:	4901      	ldr	r1, [pc, #4]	; (8009708 <_cleanup_r+0x8>)
 8009702:	f000 b8af 	b.w	8009864 <_fwalk_reent>
 8009706:	bf00      	nop
 8009708:	0800a225 	.word	0x0800a225

0800970c <__sfmoreglue>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	2268      	movs	r2, #104	; 0x68
 8009710:	1e4d      	subs	r5, r1, #1
 8009712:	4355      	muls	r5, r2
 8009714:	460e      	mov	r6, r1
 8009716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800971a:	f000 f985 	bl	8009a28 <_malloc_r>
 800971e:	4604      	mov	r4, r0
 8009720:	b140      	cbz	r0, 8009734 <__sfmoreglue+0x28>
 8009722:	2100      	movs	r1, #0
 8009724:	e9c0 1600 	strd	r1, r6, [r0]
 8009728:	300c      	adds	r0, #12
 800972a:	60a0      	str	r0, [r4, #8]
 800972c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009730:	f000 f906 	bl	8009940 <memset>
 8009734:	4620      	mov	r0, r4
 8009736:	bd70      	pop	{r4, r5, r6, pc}

08009738 <__sfp_lock_acquire>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__sfp_lock_acquire+0x8>)
 800973a:	f000 b8d8 	b.w	80098ee <__retarget_lock_acquire_recursive>
 800973e:	bf00      	nop
 8009740:	20006c11 	.word	0x20006c11

08009744 <__sfp_lock_release>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__sfp_lock_release+0x8>)
 8009746:	f000 b8d3 	b.w	80098f0 <__retarget_lock_release_recursive>
 800974a:	bf00      	nop
 800974c:	20006c11 	.word	0x20006c11

08009750 <__sinit_lock_acquire>:
 8009750:	4801      	ldr	r0, [pc, #4]	; (8009758 <__sinit_lock_acquire+0x8>)
 8009752:	f000 b8cc 	b.w	80098ee <__retarget_lock_acquire_recursive>
 8009756:	bf00      	nop
 8009758:	20006c12 	.word	0x20006c12

0800975c <__sinit_lock_release>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__sinit_lock_release+0x8>)
 800975e:	f000 b8c7 	b.w	80098f0 <__retarget_lock_release_recursive>
 8009762:	bf00      	nop
 8009764:	20006c12 	.word	0x20006c12

08009768 <__sinit>:
 8009768:	b510      	push	{r4, lr}
 800976a:	4604      	mov	r4, r0
 800976c:	f7ff fff0 	bl	8009750 <__sinit_lock_acquire>
 8009770:	69a3      	ldr	r3, [r4, #24]
 8009772:	b11b      	cbz	r3, 800977c <__sinit+0x14>
 8009774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009778:	f7ff bff0 	b.w	800975c <__sinit_lock_release>
 800977c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009780:	6523      	str	r3, [r4, #80]	; 0x50
 8009782:	4b13      	ldr	r3, [pc, #76]	; (80097d0 <__sinit+0x68>)
 8009784:	4a13      	ldr	r2, [pc, #76]	; (80097d4 <__sinit+0x6c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	62a2      	str	r2, [r4, #40]	; 0x28
 800978a:	42a3      	cmp	r3, r4
 800978c:	bf04      	itt	eq
 800978e:	2301      	moveq	r3, #1
 8009790:	61a3      	streq	r3, [r4, #24]
 8009792:	4620      	mov	r0, r4
 8009794:	f000 f820 	bl	80097d8 <__sfp>
 8009798:	6060      	str	r0, [r4, #4]
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f81c 	bl	80097d8 <__sfp>
 80097a0:	60a0      	str	r0, [r4, #8]
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f818 	bl	80097d8 <__sfp>
 80097a8:	2200      	movs	r2, #0
 80097aa:	60e0      	str	r0, [r4, #12]
 80097ac:	2104      	movs	r1, #4
 80097ae:	6860      	ldr	r0, [r4, #4]
 80097b0:	f7ff ff82 	bl	80096b8 <std>
 80097b4:	68a0      	ldr	r0, [r4, #8]
 80097b6:	2201      	movs	r2, #1
 80097b8:	2109      	movs	r1, #9
 80097ba:	f7ff ff7d 	bl	80096b8 <std>
 80097be:	68e0      	ldr	r0, [r4, #12]
 80097c0:	2202      	movs	r2, #2
 80097c2:	2112      	movs	r1, #18
 80097c4:	f7ff ff78 	bl	80096b8 <std>
 80097c8:	2301      	movs	r3, #1
 80097ca:	61a3      	str	r3, [r4, #24]
 80097cc:	e7d2      	b.n	8009774 <__sinit+0xc>
 80097ce:	bf00      	nop
 80097d0:	0800b5ec 	.word	0x0800b5ec
 80097d4:	08009701 	.word	0x08009701

080097d8 <__sfp>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	4607      	mov	r7, r0
 80097dc:	f7ff ffac 	bl	8009738 <__sfp_lock_acquire>
 80097e0:	4b1e      	ldr	r3, [pc, #120]	; (800985c <__sfp+0x84>)
 80097e2:	681e      	ldr	r6, [r3, #0]
 80097e4:	69b3      	ldr	r3, [r6, #24]
 80097e6:	b913      	cbnz	r3, 80097ee <__sfp+0x16>
 80097e8:	4630      	mov	r0, r6
 80097ea:	f7ff ffbd 	bl	8009768 <__sinit>
 80097ee:	3648      	adds	r6, #72	; 0x48
 80097f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	d503      	bpl.n	8009800 <__sfp+0x28>
 80097f8:	6833      	ldr	r3, [r6, #0]
 80097fa:	b30b      	cbz	r3, 8009840 <__sfp+0x68>
 80097fc:	6836      	ldr	r6, [r6, #0]
 80097fe:	e7f7      	b.n	80097f0 <__sfp+0x18>
 8009800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009804:	b9d5      	cbnz	r5, 800983c <__sfp+0x64>
 8009806:	4b16      	ldr	r3, [pc, #88]	; (8009860 <__sfp+0x88>)
 8009808:	60e3      	str	r3, [r4, #12]
 800980a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800980e:	6665      	str	r5, [r4, #100]	; 0x64
 8009810:	f000 f86c 	bl	80098ec <__retarget_lock_init_recursive>
 8009814:	f7ff ff96 	bl	8009744 <__sfp_lock_release>
 8009818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800981c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009820:	6025      	str	r5, [r4, #0]
 8009822:	61a5      	str	r5, [r4, #24]
 8009824:	2208      	movs	r2, #8
 8009826:	4629      	mov	r1, r5
 8009828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800982c:	f000 f888 	bl	8009940 <memset>
 8009830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009838:	4620      	mov	r0, r4
 800983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983c:	3468      	adds	r4, #104	; 0x68
 800983e:	e7d9      	b.n	80097f4 <__sfp+0x1c>
 8009840:	2104      	movs	r1, #4
 8009842:	4638      	mov	r0, r7
 8009844:	f7ff ff62 	bl	800970c <__sfmoreglue>
 8009848:	4604      	mov	r4, r0
 800984a:	6030      	str	r0, [r6, #0]
 800984c:	2800      	cmp	r0, #0
 800984e:	d1d5      	bne.n	80097fc <__sfp+0x24>
 8009850:	f7ff ff78 	bl	8009744 <__sfp_lock_release>
 8009854:	230c      	movs	r3, #12
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	e7ee      	b.n	8009838 <__sfp+0x60>
 800985a:	bf00      	nop
 800985c:	0800b5ec 	.word	0x0800b5ec
 8009860:	ffff0001 	.word	0xffff0001

08009864 <_fwalk_reent>:
 8009864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009868:	4606      	mov	r6, r0
 800986a:	4688      	mov	r8, r1
 800986c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009870:	2700      	movs	r7, #0
 8009872:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009876:	f1b9 0901 	subs.w	r9, r9, #1
 800987a:	d505      	bpl.n	8009888 <_fwalk_reent+0x24>
 800987c:	6824      	ldr	r4, [r4, #0]
 800987e:	2c00      	cmp	r4, #0
 8009880:	d1f7      	bne.n	8009872 <_fwalk_reent+0xe>
 8009882:	4638      	mov	r0, r7
 8009884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009888:	89ab      	ldrh	r3, [r5, #12]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d907      	bls.n	800989e <_fwalk_reent+0x3a>
 800988e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009892:	3301      	adds	r3, #1
 8009894:	d003      	beq.n	800989e <_fwalk_reent+0x3a>
 8009896:	4629      	mov	r1, r5
 8009898:	4630      	mov	r0, r6
 800989a:	47c0      	blx	r8
 800989c:	4307      	orrs	r7, r0
 800989e:	3568      	adds	r5, #104	; 0x68
 80098a0:	e7e9      	b.n	8009876 <_fwalk_reent+0x12>
	...

080098a4 <__libc_init_array>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4d0d      	ldr	r5, [pc, #52]	; (80098dc <__libc_init_array+0x38>)
 80098a8:	4c0d      	ldr	r4, [pc, #52]	; (80098e0 <__libc_init_array+0x3c>)
 80098aa:	1b64      	subs	r4, r4, r5
 80098ac:	10a4      	asrs	r4, r4, #2
 80098ae:	2600      	movs	r6, #0
 80098b0:	42a6      	cmp	r6, r4
 80098b2:	d109      	bne.n	80098c8 <__libc_init_array+0x24>
 80098b4:	4d0b      	ldr	r5, [pc, #44]	; (80098e4 <__libc_init_array+0x40>)
 80098b6:	4c0c      	ldr	r4, [pc, #48]	; (80098e8 <__libc_init_array+0x44>)
 80098b8:	f001 faa2 	bl	800ae00 <_init>
 80098bc:	1b64      	subs	r4, r4, r5
 80098be:	10a4      	asrs	r4, r4, #2
 80098c0:	2600      	movs	r6, #0
 80098c2:	42a6      	cmp	r6, r4
 80098c4:	d105      	bne.n	80098d2 <__libc_init_array+0x2e>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098cc:	4798      	blx	r3
 80098ce:	3601      	adds	r6, #1
 80098d0:	e7ee      	b.n	80098b0 <__libc_init_array+0xc>
 80098d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d6:	4798      	blx	r3
 80098d8:	3601      	adds	r6, #1
 80098da:	e7f2      	b.n	80098c2 <__libc_init_array+0x1e>
 80098dc:	0800b6dc 	.word	0x0800b6dc
 80098e0:	0800b6dc 	.word	0x0800b6dc
 80098e4:	0800b6dc 	.word	0x0800b6dc
 80098e8:	0800b6e0 	.word	0x0800b6e0

080098ec <__retarget_lock_init_recursive>:
 80098ec:	4770      	bx	lr

080098ee <__retarget_lock_acquire_recursive>:
 80098ee:	4770      	bx	lr

080098f0 <__retarget_lock_release_recursive>:
 80098f0:	4770      	bx	lr
	...

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b895 	b.w	8009a28 <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	20000020 	.word	0x20000020

08009904 <memcmp>:
 8009904:	b510      	push	{r4, lr}
 8009906:	3901      	subs	r1, #1
 8009908:	4402      	add	r2, r0
 800990a:	4290      	cmp	r0, r2
 800990c:	d101      	bne.n	8009912 <memcmp+0xe>
 800990e:	2000      	movs	r0, #0
 8009910:	e005      	b.n	800991e <memcmp+0x1a>
 8009912:	7803      	ldrb	r3, [r0, #0]
 8009914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009918:	42a3      	cmp	r3, r4
 800991a:	d001      	beq.n	8009920 <memcmp+0x1c>
 800991c:	1b18      	subs	r0, r3, r4
 800991e:	bd10      	pop	{r4, pc}
 8009920:	3001      	adds	r0, #1
 8009922:	e7f2      	b.n	800990a <memcmp+0x6>

08009924 <memcpy>:
 8009924:	440a      	add	r2, r1
 8009926:	4291      	cmp	r1, r2
 8009928:	f100 33ff 	add.w	r3, r0, #4294967295
 800992c:	d100      	bne.n	8009930 <memcpy+0xc>
 800992e:	4770      	bx	lr
 8009930:	b510      	push	{r4, lr}
 8009932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800993a:	4291      	cmp	r1, r2
 800993c:	d1f9      	bne.n	8009932 <memcpy+0xe>
 800993e:	bd10      	pop	{r4, pc}

08009940 <memset>:
 8009940:	4402      	add	r2, r0
 8009942:	4603      	mov	r3, r0
 8009944:	4293      	cmp	r3, r2
 8009946:	d100      	bne.n	800994a <memset+0xa>
 8009948:	4770      	bx	lr
 800994a:	f803 1b01 	strb.w	r1, [r3], #1
 800994e:	e7f9      	b.n	8009944 <memset+0x4>

08009950 <_free_r>:
 8009950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009952:	2900      	cmp	r1, #0
 8009954:	d044      	beq.n	80099e0 <_free_r+0x90>
 8009956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800995a:	9001      	str	r0, [sp, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f1a1 0404 	sub.w	r4, r1, #4
 8009962:	bfb8      	it	lt
 8009964:	18e4      	addlt	r4, r4, r3
 8009966:	f000 fd23 	bl	800a3b0 <__malloc_lock>
 800996a:	4a1e      	ldr	r2, [pc, #120]	; (80099e4 <_free_r+0x94>)
 800996c:	9801      	ldr	r0, [sp, #4]
 800996e:	6813      	ldr	r3, [r2, #0]
 8009970:	b933      	cbnz	r3, 8009980 <_free_r+0x30>
 8009972:	6063      	str	r3, [r4, #4]
 8009974:	6014      	str	r4, [r2, #0]
 8009976:	b003      	add	sp, #12
 8009978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800997c:	f000 bd1e 	b.w	800a3bc <__malloc_unlock>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d908      	bls.n	8009996 <_free_r+0x46>
 8009984:	6825      	ldr	r5, [r4, #0]
 8009986:	1961      	adds	r1, r4, r5
 8009988:	428b      	cmp	r3, r1
 800998a:	bf01      	itttt	eq
 800998c:	6819      	ldreq	r1, [r3, #0]
 800998e:	685b      	ldreq	r3, [r3, #4]
 8009990:	1949      	addeq	r1, r1, r5
 8009992:	6021      	streq	r1, [r4, #0]
 8009994:	e7ed      	b.n	8009972 <_free_r+0x22>
 8009996:	461a      	mov	r2, r3
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	b10b      	cbz	r3, 80099a0 <_free_r+0x50>
 800999c:	42a3      	cmp	r3, r4
 800999e:	d9fa      	bls.n	8009996 <_free_r+0x46>
 80099a0:	6811      	ldr	r1, [r2, #0]
 80099a2:	1855      	adds	r5, r2, r1
 80099a4:	42a5      	cmp	r5, r4
 80099a6:	d10b      	bne.n	80099c0 <_free_r+0x70>
 80099a8:	6824      	ldr	r4, [r4, #0]
 80099aa:	4421      	add	r1, r4
 80099ac:	1854      	adds	r4, r2, r1
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	6011      	str	r1, [r2, #0]
 80099b2:	d1e0      	bne.n	8009976 <_free_r+0x26>
 80099b4:	681c      	ldr	r4, [r3, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	6053      	str	r3, [r2, #4]
 80099ba:	4421      	add	r1, r4
 80099bc:	6011      	str	r1, [r2, #0]
 80099be:	e7da      	b.n	8009976 <_free_r+0x26>
 80099c0:	d902      	bls.n	80099c8 <_free_r+0x78>
 80099c2:	230c      	movs	r3, #12
 80099c4:	6003      	str	r3, [r0, #0]
 80099c6:	e7d6      	b.n	8009976 <_free_r+0x26>
 80099c8:	6825      	ldr	r5, [r4, #0]
 80099ca:	1961      	adds	r1, r4, r5
 80099cc:	428b      	cmp	r3, r1
 80099ce:	bf04      	itt	eq
 80099d0:	6819      	ldreq	r1, [r3, #0]
 80099d2:	685b      	ldreq	r3, [r3, #4]
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	bf04      	itt	eq
 80099d8:	1949      	addeq	r1, r1, r5
 80099da:	6021      	streq	r1, [r4, #0]
 80099dc:	6054      	str	r4, [r2, #4]
 80099de:	e7ca      	b.n	8009976 <_free_r+0x26>
 80099e0:	b003      	add	sp, #12
 80099e2:	bd30      	pop	{r4, r5, pc}
 80099e4:	20006c14 	.word	0x20006c14

080099e8 <sbrk_aligned>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4e0e      	ldr	r6, [pc, #56]	; (8009a24 <sbrk_aligned+0x3c>)
 80099ec:	460c      	mov	r4, r1
 80099ee:	6831      	ldr	r1, [r6, #0]
 80099f0:	4605      	mov	r5, r0
 80099f2:	b911      	cbnz	r1, 80099fa <sbrk_aligned+0x12>
 80099f4:	f000 f984 	bl	8009d00 <_sbrk_r>
 80099f8:	6030      	str	r0, [r6, #0]
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f97f 	bl	8009d00 <_sbrk_r>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d00a      	beq.n	8009a1c <sbrk_aligned+0x34>
 8009a06:	1cc4      	adds	r4, r0, #3
 8009a08:	f024 0403 	bic.w	r4, r4, #3
 8009a0c:	42a0      	cmp	r0, r4
 8009a0e:	d007      	beq.n	8009a20 <sbrk_aligned+0x38>
 8009a10:	1a21      	subs	r1, r4, r0
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 f974 	bl	8009d00 <_sbrk_r>
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d101      	bne.n	8009a20 <sbrk_aligned+0x38>
 8009a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009a20:	4620      	mov	r0, r4
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	20006c18 	.word	0x20006c18

08009a28 <_malloc_r>:
 8009a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2c:	1ccd      	adds	r5, r1, #3
 8009a2e:	f025 0503 	bic.w	r5, r5, #3
 8009a32:	3508      	adds	r5, #8
 8009a34:	2d0c      	cmp	r5, #12
 8009a36:	bf38      	it	cc
 8009a38:	250c      	movcc	r5, #12
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	db01      	blt.n	8009a44 <_malloc_r+0x1c>
 8009a40:	42a9      	cmp	r1, r5
 8009a42:	d905      	bls.n	8009a50 <_malloc_r+0x28>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	2600      	movs	r6, #0
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a50:	4e2e      	ldr	r6, [pc, #184]	; (8009b0c <_malloc_r+0xe4>)
 8009a52:	f000 fcad 	bl	800a3b0 <__malloc_lock>
 8009a56:	6833      	ldr	r3, [r6, #0]
 8009a58:	461c      	mov	r4, r3
 8009a5a:	bb34      	cbnz	r4, 8009aaa <_malloc_r+0x82>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7ff ffc2 	bl	80099e8 <sbrk_aligned>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	4604      	mov	r4, r0
 8009a68:	d14d      	bne.n	8009b06 <_malloc_r+0xde>
 8009a6a:	6834      	ldr	r4, [r6, #0]
 8009a6c:	4626      	mov	r6, r4
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d140      	bne.n	8009af4 <_malloc_r+0xcc>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	4631      	mov	r1, r6
 8009a76:	4638      	mov	r0, r7
 8009a78:	eb04 0803 	add.w	r8, r4, r3
 8009a7c:	f000 f940 	bl	8009d00 <_sbrk_r>
 8009a80:	4580      	cmp	r8, r0
 8009a82:	d13a      	bne.n	8009afa <_malloc_r+0xd2>
 8009a84:	6821      	ldr	r1, [r4, #0]
 8009a86:	3503      	adds	r5, #3
 8009a88:	1a6d      	subs	r5, r5, r1
 8009a8a:	f025 0503 	bic.w	r5, r5, #3
 8009a8e:	3508      	adds	r5, #8
 8009a90:	2d0c      	cmp	r5, #12
 8009a92:	bf38      	it	cc
 8009a94:	250c      	movcc	r5, #12
 8009a96:	4629      	mov	r1, r5
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7ff ffa5 	bl	80099e8 <sbrk_aligned>
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d02b      	beq.n	8009afa <_malloc_r+0xd2>
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	442b      	add	r3, r5
 8009aa6:	6023      	str	r3, [r4, #0]
 8009aa8:	e00e      	b.n	8009ac8 <_malloc_r+0xa0>
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	1b52      	subs	r2, r2, r5
 8009aae:	d41e      	bmi.n	8009aee <_malloc_r+0xc6>
 8009ab0:	2a0b      	cmp	r2, #11
 8009ab2:	d916      	bls.n	8009ae2 <_malloc_r+0xba>
 8009ab4:	1961      	adds	r1, r4, r5
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	6025      	str	r5, [r4, #0]
 8009aba:	bf18      	it	ne
 8009abc:	6059      	strne	r1, [r3, #4]
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	bf08      	it	eq
 8009ac2:	6031      	streq	r1, [r6, #0]
 8009ac4:	5162      	str	r2, [r4, r5]
 8009ac6:	604b      	str	r3, [r1, #4]
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f104 060b 	add.w	r6, r4, #11
 8009ace:	f000 fc75 	bl	800a3bc <__malloc_unlock>
 8009ad2:	f026 0607 	bic.w	r6, r6, #7
 8009ad6:	1d23      	adds	r3, r4, #4
 8009ad8:	1af2      	subs	r2, r6, r3
 8009ada:	d0b6      	beq.n	8009a4a <_malloc_r+0x22>
 8009adc:	1b9b      	subs	r3, r3, r6
 8009ade:	50a3      	str	r3, [r4, r2]
 8009ae0:	e7b3      	b.n	8009a4a <_malloc_r+0x22>
 8009ae2:	6862      	ldr	r2, [r4, #4]
 8009ae4:	42a3      	cmp	r3, r4
 8009ae6:	bf0c      	ite	eq
 8009ae8:	6032      	streq	r2, [r6, #0]
 8009aea:	605a      	strne	r2, [r3, #4]
 8009aec:	e7ec      	b.n	8009ac8 <_malloc_r+0xa0>
 8009aee:	4623      	mov	r3, r4
 8009af0:	6864      	ldr	r4, [r4, #4]
 8009af2:	e7b2      	b.n	8009a5a <_malloc_r+0x32>
 8009af4:	4634      	mov	r4, r6
 8009af6:	6876      	ldr	r6, [r6, #4]
 8009af8:	e7b9      	b.n	8009a6e <_malloc_r+0x46>
 8009afa:	230c      	movs	r3, #12
 8009afc:	603b      	str	r3, [r7, #0]
 8009afe:	4638      	mov	r0, r7
 8009b00:	f000 fc5c 	bl	800a3bc <__malloc_unlock>
 8009b04:	e7a1      	b.n	8009a4a <_malloc_r+0x22>
 8009b06:	6025      	str	r5, [r4, #0]
 8009b08:	e7de      	b.n	8009ac8 <_malloc_r+0xa0>
 8009b0a:	bf00      	nop
 8009b0c:	20006c14 	.word	0x20006c14

08009b10 <iprintf>:
 8009b10:	b40f      	push	{r0, r1, r2, r3}
 8009b12:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <iprintf+0x2c>)
 8009b14:	b513      	push	{r0, r1, r4, lr}
 8009b16:	681c      	ldr	r4, [r3, #0]
 8009b18:	b124      	cbz	r4, 8009b24 <iprintf+0x14>
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	b913      	cbnz	r3, 8009b24 <iprintf+0x14>
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f7ff fe22 	bl	8009768 <__sinit>
 8009b24:	ab05      	add	r3, sp, #20
 8009b26:	9a04      	ldr	r2, [sp, #16]
 8009b28:	68a1      	ldr	r1, [r4, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fdd1 	bl	800a6d4 <_vfiprintf_r>
 8009b32:	b002      	add	sp, #8
 8009b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b38:	b004      	add	sp, #16
 8009b3a:	4770      	bx	lr
 8009b3c:	20000020 	.word	0x20000020

08009b40 <_puts_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	4605      	mov	r5, r0
 8009b46:	b118      	cbz	r0, 8009b50 <_puts_r+0x10>
 8009b48:	6983      	ldr	r3, [r0, #24]
 8009b4a:	b90b      	cbnz	r3, 8009b50 <_puts_r+0x10>
 8009b4c:	f7ff fe0c 	bl	8009768 <__sinit>
 8009b50:	69ab      	ldr	r3, [r5, #24]
 8009b52:	68ac      	ldr	r4, [r5, #8]
 8009b54:	b913      	cbnz	r3, 8009b5c <_puts_r+0x1c>
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7ff fe06 	bl	8009768 <__sinit>
 8009b5c:	4b2c      	ldr	r3, [pc, #176]	; (8009c10 <_puts_r+0xd0>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	d120      	bne.n	8009ba4 <_puts_r+0x64>
 8009b62:	686c      	ldr	r4, [r5, #4]
 8009b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b66:	07db      	lsls	r3, r3, #31
 8009b68:	d405      	bmi.n	8009b76 <_puts_r+0x36>
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	0598      	lsls	r0, r3, #22
 8009b6e:	d402      	bmi.n	8009b76 <_puts_r+0x36>
 8009b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b72:	f7ff febc 	bl	80098ee <__retarget_lock_acquire_recursive>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	0719      	lsls	r1, r3, #28
 8009b7a:	d51d      	bpl.n	8009bb8 <_puts_r+0x78>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	b1db      	cbz	r3, 8009bb8 <_puts_r+0x78>
 8009b80:	3e01      	subs	r6, #1
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	60a3      	str	r3, [r4, #8]
 8009b8c:	bb39      	cbnz	r1, 8009bde <_puts_r+0x9e>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	da38      	bge.n	8009c04 <_puts_r+0xc4>
 8009b92:	4622      	mov	r2, r4
 8009b94:	210a      	movs	r1, #10
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f9be 	bl	8009f18 <__swbuf_r>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d011      	beq.n	8009bc4 <_puts_r+0x84>
 8009ba0:	250a      	movs	r5, #10
 8009ba2:	e011      	b.n	8009bc8 <_puts_r+0x88>
 8009ba4:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <_puts_r+0xd4>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d101      	bne.n	8009bae <_puts_r+0x6e>
 8009baa:	68ac      	ldr	r4, [r5, #8]
 8009bac:	e7da      	b.n	8009b64 <_puts_r+0x24>
 8009bae:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <_puts_r+0xd8>)
 8009bb0:	429c      	cmp	r4, r3
 8009bb2:	bf08      	it	eq
 8009bb4:	68ec      	ldreq	r4, [r5, #12]
 8009bb6:	e7d5      	b.n	8009b64 <_puts_r+0x24>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 fa10 	bl	8009fe0 <__swsetup_r>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d0dd      	beq.n	8009b80 <_puts_r+0x40>
 8009bc4:	f04f 35ff 	mov.w	r5, #4294967295
 8009bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bca:	07da      	lsls	r2, r3, #31
 8009bcc:	d405      	bmi.n	8009bda <_puts_r+0x9a>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	d402      	bmi.n	8009bda <_puts_r+0x9a>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd6:	f7ff fe8b 	bl	80098f0 <__retarget_lock_release_recursive>
 8009bda:	4628      	mov	r0, r5
 8009bdc:	bd70      	pop	{r4, r5, r6, pc}
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da04      	bge.n	8009bec <_puts_r+0xac>
 8009be2:	69a2      	ldr	r2, [r4, #24]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	dc06      	bgt.n	8009bf6 <_puts_r+0xb6>
 8009be8:	290a      	cmp	r1, #10
 8009bea:	d004      	beq.n	8009bf6 <_puts_r+0xb6>
 8009bec:	6823      	ldr	r3, [r4, #0]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	6022      	str	r2, [r4, #0]
 8009bf2:	7019      	strb	r1, [r3, #0]
 8009bf4:	e7c5      	b.n	8009b82 <_puts_r+0x42>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f000 f98d 	bl	8009f18 <__swbuf_r>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d1bf      	bne.n	8009b82 <_puts_r+0x42>
 8009c02:	e7df      	b.n	8009bc4 <_puts_r+0x84>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	250a      	movs	r5, #10
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	701d      	strb	r5, [r3, #0]
 8009c0e:	e7db      	b.n	8009bc8 <_puts_r+0x88>
 8009c10:	0800b5ac 	.word	0x0800b5ac
 8009c14:	0800b5cc 	.word	0x0800b5cc
 8009c18:	0800b58c 	.word	0x0800b58c

08009c1c <puts>:
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <puts+0xc>)
 8009c1e:	4601      	mov	r1, r0
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	f7ff bf8d 	b.w	8009b40 <_puts_r>
 8009c26:	bf00      	nop
 8009c28:	20000020 	.word	0x20000020

08009c2c <cleanup_glue>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	460c      	mov	r4, r1
 8009c30:	6809      	ldr	r1, [r1, #0]
 8009c32:	4605      	mov	r5, r0
 8009c34:	b109      	cbz	r1, 8009c3a <cleanup_glue+0xe>
 8009c36:	f7ff fff9 	bl	8009c2c <cleanup_glue>
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c42:	f7ff be85 	b.w	8009950 <_free_r>
	...

08009c48 <_reclaim_reent>:
 8009c48:	4b2c      	ldr	r3, [pc, #176]	; (8009cfc <_reclaim_reent+0xb4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4283      	cmp	r3, r0
 8009c4e:	b570      	push	{r4, r5, r6, lr}
 8009c50:	4604      	mov	r4, r0
 8009c52:	d051      	beq.n	8009cf8 <_reclaim_reent+0xb0>
 8009c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009c56:	b143      	cbz	r3, 8009c6a <_reclaim_reent+0x22>
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d14a      	bne.n	8009cf4 <_reclaim_reent+0xac>
 8009c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c60:	6819      	ldr	r1, [r3, #0]
 8009c62:	b111      	cbz	r1, 8009c6a <_reclaim_reent+0x22>
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7ff fe73 	bl	8009950 <_free_r>
 8009c6a:	6961      	ldr	r1, [r4, #20]
 8009c6c:	b111      	cbz	r1, 8009c74 <_reclaim_reent+0x2c>
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f7ff fe6e 	bl	8009950 <_free_r>
 8009c74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c76:	b111      	cbz	r1, 8009c7e <_reclaim_reent+0x36>
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f7ff fe69 	bl	8009950 <_free_r>
 8009c7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c80:	b111      	cbz	r1, 8009c88 <_reclaim_reent+0x40>
 8009c82:	4620      	mov	r0, r4
 8009c84:	f7ff fe64 	bl	8009950 <_free_r>
 8009c88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009c8a:	b111      	cbz	r1, 8009c92 <_reclaim_reent+0x4a>
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f7ff fe5f 	bl	8009950 <_free_r>
 8009c92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009c94:	b111      	cbz	r1, 8009c9c <_reclaim_reent+0x54>
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff fe5a 	bl	8009950 <_free_r>
 8009c9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c9e:	b111      	cbz	r1, 8009ca6 <_reclaim_reent+0x5e>
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7ff fe55 	bl	8009950 <_free_r>
 8009ca6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009ca8:	b111      	cbz	r1, 8009cb0 <_reclaim_reent+0x68>
 8009caa:	4620      	mov	r0, r4
 8009cac:	f7ff fe50 	bl	8009950 <_free_r>
 8009cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cb2:	b111      	cbz	r1, 8009cba <_reclaim_reent+0x72>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f7ff fe4b 	bl	8009950 <_free_r>
 8009cba:	69a3      	ldr	r3, [r4, #24]
 8009cbc:	b1e3      	cbz	r3, 8009cf8 <_reclaim_reent+0xb0>
 8009cbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4798      	blx	r3
 8009cc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009cc6:	b1b9      	cbz	r1, 8009cf8 <_reclaim_reent+0xb0>
 8009cc8:	4620      	mov	r0, r4
 8009cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cce:	f7ff bfad 	b.w	8009c2c <cleanup_glue>
 8009cd2:	5949      	ldr	r1, [r1, r5]
 8009cd4:	b941      	cbnz	r1, 8009ce8 <_reclaim_reent+0xa0>
 8009cd6:	3504      	adds	r5, #4
 8009cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cda:	2d80      	cmp	r5, #128	; 0x80
 8009cdc:	68d9      	ldr	r1, [r3, #12]
 8009cde:	d1f8      	bne.n	8009cd2 <_reclaim_reent+0x8a>
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff fe35 	bl	8009950 <_free_r>
 8009ce6:	e7ba      	b.n	8009c5e <_reclaim_reent+0x16>
 8009ce8:	680e      	ldr	r6, [r1, #0]
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff fe30 	bl	8009950 <_free_r>
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	e7ef      	b.n	8009cd4 <_reclaim_reent+0x8c>
 8009cf4:	2500      	movs	r5, #0
 8009cf6:	e7ef      	b.n	8009cd8 <_reclaim_reent+0x90>
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000020 	.word	0x20000020

08009d00 <_sbrk_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	; (8009d1c <_sbrk_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f7 f834 	bl	8000d78 <_sbrk>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_sbrk_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_sbrk_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20006c1c 	.word	0x20006c1c

08009d20 <siprintf>:
 8009d20:	b40e      	push	{r1, r2, r3}
 8009d22:	b500      	push	{lr}
 8009d24:	b09c      	sub	sp, #112	; 0x70
 8009d26:	ab1d      	add	r3, sp, #116	; 0x74
 8009d28:	9002      	str	r0, [sp, #8]
 8009d2a:	9006      	str	r0, [sp, #24]
 8009d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d30:	4809      	ldr	r0, [pc, #36]	; (8009d58 <siprintf+0x38>)
 8009d32:	9107      	str	r1, [sp, #28]
 8009d34:	9104      	str	r1, [sp, #16]
 8009d36:	4909      	ldr	r1, [pc, #36]	; (8009d5c <siprintf+0x3c>)
 8009d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3c:	9105      	str	r1, [sp, #20]
 8009d3e:	6800      	ldr	r0, [r0, #0]
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	a902      	add	r1, sp, #8
 8009d44:	f000 fb9c 	bl	800a480 <_svfiprintf_r>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	b01c      	add	sp, #112	; 0x70
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b003      	add	sp, #12
 8009d56:	4770      	bx	lr
 8009d58:	20000020 	.word	0x20000020
 8009d5c:	ffff0208 	.word	0xffff0208

08009d60 <__sread>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	460c      	mov	r4, r1
 8009d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d68:	f000 ff78 	bl	800ac5c <_read_r>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	bfab      	itete	ge
 8009d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d72:	89a3      	ldrhlt	r3, [r4, #12]
 8009d74:	181b      	addge	r3, r3, r0
 8009d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d7a:	bfac      	ite	ge
 8009d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d7e:	81a3      	strhlt	r3, [r4, #12]
 8009d80:	bd10      	pop	{r4, pc}

08009d82 <__swrite>:
 8009d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d86:	461f      	mov	r7, r3
 8009d88:	898b      	ldrh	r3, [r1, #12]
 8009d8a:	05db      	lsls	r3, r3, #23
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	4616      	mov	r6, r2
 8009d92:	d505      	bpl.n	8009da0 <__swrite+0x1e>
 8009d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d98:	2302      	movs	r3, #2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f000 fa90 	bl	800a2c0 <_lseek_r>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	4628      	mov	r0, r5
 8009db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db6:	f000 b901 	b.w	8009fbc <_write_r>

08009dba <__sseek>:
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc2:	f000 fa7d 	bl	800a2c0 <_lseek_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	bf15      	itete	ne
 8009dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dd6:	81a3      	strheq	r3, [r4, #12]
 8009dd8:	bf18      	it	ne
 8009dda:	81a3      	strhne	r3, [r4, #12]
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <__sclose>:
 8009dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de2:	f000 b989 	b.w	800a0f8 <_close_r>

08009de6 <strncmp>:
 8009de6:	b510      	push	{r4, lr}
 8009de8:	b17a      	cbz	r2, 8009e0a <strncmp+0x24>
 8009dea:	4603      	mov	r3, r0
 8009dec:	3901      	subs	r1, #1
 8009dee:	1884      	adds	r4, r0, r2
 8009df0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009df4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009df8:	4290      	cmp	r0, r2
 8009dfa:	d101      	bne.n	8009e00 <strncmp+0x1a>
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	d101      	bne.n	8009e04 <strncmp+0x1e>
 8009e00:	1a80      	subs	r0, r0, r2
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d1f3      	bne.n	8009df0 <strncmp+0xa>
 8009e08:	e7fa      	b.n	8009e00 <strncmp+0x1a>
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	e7f9      	b.n	8009e02 <strncmp+0x1c>

08009e0e <strncpy>:
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	3901      	subs	r1, #1
 8009e12:	4603      	mov	r3, r0
 8009e14:	b132      	cbz	r2, 8009e24 <strncpy+0x16>
 8009e16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009e1a:	f803 4b01 	strb.w	r4, [r3], #1
 8009e1e:	3a01      	subs	r2, #1
 8009e20:	2c00      	cmp	r4, #0
 8009e22:	d1f7      	bne.n	8009e14 <strncpy+0x6>
 8009e24:	441a      	add	r2, r3
 8009e26:	2100      	movs	r1, #0
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d100      	bne.n	8009e2e <strncpy+0x20>
 8009e2c:	bd10      	pop	{r4, pc}
 8009e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e32:	e7f9      	b.n	8009e28 <strncpy+0x1a>

08009e34 <strstr>:
 8009e34:	780a      	ldrb	r2, [r1, #0]
 8009e36:	b570      	push	{r4, r5, r6, lr}
 8009e38:	b96a      	cbnz	r2, 8009e56 <strstr+0x22>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d109      	bne.n	8009e54 <strstr+0x20>
 8009e40:	460c      	mov	r4, r1
 8009e42:	4605      	mov	r5, r0
 8009e44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d0f6      	beq.n	8009e3a <strstr+0x6>
 8009e4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009e50:	429e      	cmp	r6, r3
 8009e52:	d0f7      	beq.n	8009e44 <strstr+0x10>
 8009e54:	3001      	adds	r0, #1
 8009e56:	7803      	ldrb	r3, [r0, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1ef      	bne.n	8009e3c <strstr+0x8>
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	e7ec      	b.n	8009e3a <strstr+0x6>

08009e60 <strtok>:
 8009e60:	4b16      	ldr	r3, [pc, #88]	; (8009ebc <strtok+0x5c>)
 8009e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e64:	681e      	ldr	r6, [r3, #0]
 8009e66:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009e68:	4605      	mov	r5, r0
 8009e6a:	b9fc      	cbnz	r4, 8009eac <strtok+0x4c>
 8009e6c:	2050      	movs	r0, #80	; 0x50
 8009e6e:	9101      	str	r1, [sp, #4]
 8009e70:	f7ff fd40 	bl	80098f4 <malloc>
 8009e74:	9901      	ldr	r1, [sp, #4]
 8009e76:	65b0      	str	r0, [r6, #88]	; 0x58
 8009e78:	4602      	mov	r2, r0
 8009e7a:	b920      	cbnz	r0, 8009e86 <strtok+0x26>
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <strtok+0x60>)
 8009e7e:	4811      	ldr	r0, [pc, #68]	; (8009ec4 <strtok+0x64>)
 8009e80:	2157      	movs	r1, #87	; 0x57
 8009e82:	f000 f91b 	bl	800a0bc <__assert_func>
 8009e86:	e9c0 4400 	strd	r4, r4, [r0]
 8009e8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e92:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009e96:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009e9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009e9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009ea2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009ea6:	6184      	str	r4, [r0, #24]
 8009ea8:	7704      	strb	r4, [r0, #28]
 8009eaa:	6244      	str	r4, [r0, #36]	; 0x24
 8009eac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009eae:	2301      	movs	r3, #1
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	b002      	add	sp, #8
 8009eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eb8:	f000 b806 	b.w	8009ec8 <__strtok_r>
 8009ebc:	20000020 	.word	0x20000020
 8009ec0:	0800b5f0 	.word	0x0800b5f0
 8009ec4:	0800b607 	.word	0x0800b607

08009ec8 <__strtok_r>:
 8009ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eca:	b908      	cbnz	r0, 8009ed0 <__strtok_r+0x8>
 8009ecc:	6810      	ldr	r0, [r2, #0]
 8009ece:	b188      	cbz	r0, 8009ef4 <__strtok_r+0x2c>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009ed8:	460f      	mov	r7, r1
 8009eda:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009ede:	b91e      	cbnz	r6, 8009ee8 <__strtok_r+0x20>
 8009ee0:	b965      	cbnz	r5, 8009efc <__strtok_r+0x34>
 8009ee2:	6015      	str	r5, [r2, #0]
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	e005      	b.n	8009ef4 <__strtok_r+0x2c>
 8009ee8:	42b5      	cmp	r5, r6
 8009eea:	d1f6      	bne.n	8009eda <__strtok_r+0x12>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1f0      	bne.n	8009ed2 <__strtok_r+0xa>
 8009ef0:	6014      	str	r4, [r2, #0]
 8009ef2:	7003      	strb	r3, [r0, #0]
 8009ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef6:	461c      	mov	r4, r3
 8009ef8:	e00c      	b.n	8009f14 <__strtok_r+0x4c>
 8009efa:	b915      	cbnz	r5, 8009f02 <__strtok_r+0x3a>
 8009efc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f00:	460e      	mov	r6, r1
 8009f02:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f06:	42ab      	cmp	r3, r5
 8009f08:	d1f7      	bne.n	8009efa <__strtok_r+0x32>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0f3      	beq.n	8009ef6 <__strtok_r+0x2e>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f14:	6014      	str	r4, [r2, #0]
 8009f16:	e7ed      	b.n	8009ef4 <__strtok_r+0x2c>

08009f18 <__swbuf_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	4605      	mov	r5, r0
 8009f20:	b118      	cbz	r0, 8009f2a <__swbuf_r+0x12>
 8009f22:	6983      	ldr	r3, [r0, #24]
 8009f24:	b90b      	cbnz	r3, 8009f2a <__swbuf_r+0x12>
 8009f26:	f7ff fc1f 	bl	8009768 <__sinit>
 8009f2a:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <__swbuf_r+0x98>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	d12b      	bne.n	8009f88 <__swbuf_r+0x70>
 8009f30:	686c      	ldr	r4, [r5, #4]
 8009f32:	69a3      	ldr	r3, [r4, #24]
 8009f34:	60a3      	str	r3, [r4, #8]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	071a      	lsls	r2, r3, #28
 8009f3a:	d52f      	bpl.n	8009f9c <__swbuf_r+0x84>
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	b36b      	cbz	r3, 8009f9c <__swbuf_r+0x84>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	6820      	ldr	r0, [r4, #0]
 8009f44:	1ac0      	subs	r0, r0, r3
 8009f46:	6963      	ldr	r3, [r4, #20]
 8009f48:	b2f6      	uxtb	r6, r6
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	4637      	mov	r7, r6
 8009f4e:	dc04      	bgt.n	8009f5a <__swbuf_r+0x42>
 8009f50:	4621      	mov	r1, r4
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f966 	bl	800a224 <_fflush_r>
 8009f58:	bb30      	cbnz	r0, 8009fa8 <__swbuf_r+0x90>
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	60a3      	str	r3, [r4, #8]
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	6022      	str	r2, [r4, #0]
 8009f66:	701e      	strb	r6, [r3, #0]
 8009f68:	6963      	ldr	r3, [r4, #20]
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	4283      	cmp	r3, r0
 8009f6e:	d004      	beq.n	8009f7a <__swbuf_r+0x62>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	07db      	lsls	r3, r3, #31
 8009f74:	d506      	bpl.n	8009f84 <__swbuf_r+0x6c>
 8009f76:	2e0a      	cmp	r6, #10
 8009f78:	d104      	bne.n	8009f84 <__swbuf_r+0x6c>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f000 f951 	bl	800a224 <_fflush_r>
 8009f82:	b988      	cbnz	r0, 8009fa8 <__swbuf_r+0x90>
 8009f84:	4638      	mov	r0, r7
 8009f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <__swbuf_r+0x9c>)
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d101      	bne.n	8009f92 <__swbuf_r+0x7a>
 8009f8e:	68ac      	ldr	r4, [r5, #8]
 8009f90:	e7cf      	b.n	8009f32 <__swbuf_r+0x1a>
 8009f92:	4b09      	ldr	r3, [pc, #36]	; (8009fb8 <__swbuf_r+0xa0>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	bf08      	it	eq
 8009f98:	68ec      	ldreq	r4, [r5, #12]
 8009f9a:	e7ca      	b.n	8009f32 <__swbuf_r+0x1a>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 f81e 	bl	8009fe0 <__swsetup_r>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d0cb      	beq.n	8009f40 <__swbuf_r+0x28>
 8009fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8009fac:	e7ea      	b.n	8009f84 <__swbuf_r+0x6c>
 8009fae:	bf00      	nop
 8009fb0:	0800b5ac 	.word	0x0800b5ac
 8009fb4:	0800b5cc 	.word	0x0800b5cc
 8009fb8:	0800b58c 	.word	0x0800b58c

08009fbc <_write_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	; (8009fdc <_write_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f6 fe83 	bl	8000cd6 <_write>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_write_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_write_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20006c1c 	.word	0x20006c1c

08009fe0 <__swsetup_r>:
 8009fe0:	4b32      	ldr	r3, [pc, #200]	; (800a0ac <__swsetup_r+0xcc>)
 8009fe2:	b570      	push	{r4, r5, r6, lr}
 8009fe4:	681d      	ldr	r5, [r3, #0]
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	460c      	mov	r4, r1
 8009fea:	b125      	cbz	r5, 8009ff6 <__swsetup_r+0x16>
 8009fec:	69ab      	ldr	r3, [r5, #24]
 8009fee:	b913      	cbnz	r3, 8009ff6 <__swsetup_r+0x16>
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f7ff fbb9 	bl	8009768 <__sinit>
 8009ff6:	4b2e      	ldr	r3, [pc, #184]	; (800a0b0 <__swsetup_r+0xd0>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	d10f      	bne.n	800a01c <__swsetup_r+0x3c>
 8009ffc:	686c      	ldr	r4, [r5, #4]
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a004:	0719      	lsls	r1, r3, #28
 800a006:	d42c      	bmi.n	800a062 <__swsetup_r+0x82>
 800a008:	06dd      	lsls	r5, r3, #27
 800a00a:	d411      	bmi.n	800a030 <__swsetup_r+0x50>
 800a00c:	2309      	movs	r3, #9
 800a00e:	6033      	str	r3, [r6, #0]
 800a010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	f04f 30ff 	mov.w	r0, #4294967295
 800a01a:	e03e      	b.n	800a09a <__swsetup_r+0xba>
 800a01c:	4b25      	ldr	r3, [pc, #148]	; (800a0b4 <__swsetup_r+0xd4>)
 800a01e:	429c      	cmp	r4, r3
 800a020:	d101      	bne.n	800a026 <__swsetup_r+0x46>
 800a022:	68ac      	ldr	r4, [r5, #8]
 800a024:	e7eb      	b.n	8009ffe <__swsetup_r+0x1e>
 800a026:	4b24      	ldr	r3, [pc, #144]	; (800a0b8 <__swsetup_r+0xd8>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	bf08      	it	eq
 800a02c:	68ec      	ldreq	r4, [r5, #12]
 800a02e:	e7e6      	b.n	8009ffe <__swsetup_r+0x1e>
 800a030:	0758      	lsls	r0, r3, #29
 800a032:	d512      	bpl.n	800a05a <__swsetup_r+0x7a>
 800a034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a036:	b141      	cbz	r1, 800a04a <__swsetup_r+0x6a>
 800a038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a03c:	4299      	cmp	r1, r3
 800a03e:	d002      	beq.n	800a046 <__swsetup_r+0x66>
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff fc85 	bl	8009950 <_free_r>
 800a046:	2300      	movs	r3, #0
 800a048:	6363      	str	r3, [r4, #52]	; 0x34
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	2300      	movs	r3, #0
 800a054:	6063      	str	r3, [r4, #4]
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	89a3      	ldrh	r3, [r4, #12]
 800a05c:	f043 0308 	orr.w	r3, r3, #8
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	b94b      	cbnz	r3, 800a07a <__swsetup_r+0x9a>
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a06c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a070:	d003      	beq.n	800a07a <__swsetup_r+0x9a>
 800a072:	4621      	mov	r1, r4
 800a074:	4630      	mov	r0, r6
 800a076:	f000 f95b 	bl	800a330 <__smakebuf_r>
 800a07a:	89a0      	ldrh	r0, [r4, #12]
 800a07c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a080:	f010 0301 	ands.w	r3, r0, #1
 800a084:	d00a      	beq.n	800a09c <__swsetup_r+0xbc>
 800a086:	2300      	movs	r3, #0
 800a088:	60a3      	str	r3, [r4, #8]
 800a08a:	6963      	ldr	r3, [r4, #20]
 800a08c:	425b      	negs	r3, r3
 800a08e:	61a3      	str	r3, [r4, #24]
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	b943      	cbnz	r3, 800a0a6 <__swsetup_r+0xc6>
 800a094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a098:	d1ba      	bne.n	800a010 <__swsetup_r+0x30>
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	0781      	lsls	r1, r0, #30
 800a09e:	bf58      	it	pl
 800a0a0:	6963      	ldrpl	r3, [r4, #20]
 800a0a2:	60a3      	str	r3, [r4, #8]
 800a0a4:	e7f4      	b.n	800a090 <__swsetup_r+0xb0>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e7f7      	b.n	800a09a <__swsetup_r+0xba>
 800a0aa:	bf00      	nop
 800a0ac:	20000020 	.word	0x20000020
 800a0b0:	0800b5ac 	.word	0x0800b5ac
 800a0b4:	0800b5cc 	.word	0x0800b5cc
 800a0b8:	0800b58c 	.word	0x0800b58c

0800a0bc <__assert_func>:
 800a0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0be:	4614      	mov	r4, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <__assert_func+0x2c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	68d8      	ldr	r0, [r3, #12]
 800a0ca:	b14c      	cbz	r4, 800a0e0 <__assert_func+0x24>
 800a0cc:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <__assert_func+0x30>)
 800a0ce:	9100      	str	r1, [sp, #0]
 800a0d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d4:	4906      	ldr	r1, [pc, #24]	; (800a0f0 <__assert_func+0x34>)
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f000 f8e0 	bl	800a29c <fiprintf>
 800a0dc:	f000 fdd0 	bl	800ac80 <abort>
 800a0e0:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <__assert_func+0x38>)
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	e7f3      	b.n	800a0ce <__assert_func+0x12>
 800a0e6:	bf00      	nop
 800a0e8:	20000020 	.word	0x20000020
 800a0ec:	0800b664 	.word	0x0800b664
 800a0f0:	0800b671 	.word	0x0800b671
 800a0f4:	0800b69f 	.word	0x0800b69f

0800a0f8 <_close_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_close_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f6 fe03 	bl	8000d0e <_close>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_close_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_close_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20006c1c 	.word	0x20006c1c

0800a118 <__sflush_r>:
 800a118:	898a      	ldrh	r2, [r1, #12]
 800a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11e:	4605      	mov	r5, r0
 800a120:	0710      	lsls	r0, r2, #28
 800a122:	460c      	mov	r4, r1
 800a124:	d458      	bmi.n	800a1d8 <__sflush_r+0xc0>
 800a126:	684b      	ldr	r3, [r1, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dc05      	bgt.n	800a138 <__sflush_r+0x20>
 800a12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dc02      	bgt.n	800a138 <__sflush_r+0x20>
 800a132:	2000      	movs	r0, #0
 800a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d0f9      	beq.n	800a132 <__sflush_r+0x1a>
 800a13e:	2300      	movs	r3, #0
 800a140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a144:	682f      	ldr	r7, [r5, #0]
 800a146:	602b      	str	r3, [r5, #0]
 800a148:	d032      	beq.n	800a1b0 <__sflush_r+0x98>
 800a14a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	075a      	lsls	r2, r3, #29
 800a150:	d505      	bpl.n	800a15e <__sflush_r+0x46>
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	1ac0      	subs	r0, r0, r3
 800a156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a158:	b10b      	cbz	r3, 800a15e <__sflush_r+0x46>
 800a15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a15c:	1ac0      	subs	r0, r0, r3
 800a15e:	2300      	movs	r3, #0
 800a160:	4602      	mov	r2, r0
 800a162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a164:	6a21      	ldr	r1, [r4, #32]
 800a166:	4628      	mov	r0, r5
 800a168:	47b0      	blx	r6
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	d106      	bne.n	800a17e <__sflush_r+0x66>
 800a170:	6829      	ldr	r1, [r5, #0]
 800a172:	291d      	cmp	r1, #29
 800a174:	d82c      	bhi.n	800a1d0 <__sflush_r+0xb8>
 800a176:	4a2a      	ldr	r2, [pc, #168]	; (800a220 <__sflush_r+0x108>)
 800a178:	40ca      	lsrs	r2, r1
 800a17a:	07d6      	lsls	r6, r2, #31
 800a17c:	d528      	bpl.n	800a1d0 <__sflush_r+0xb8>
 800a17e:	2200      	movs	r2, #0
 800a180:	6062      	str	r2, [r4, #4]
 800a182:	04d9      	lsls	r1, r3, #19
 800a184:	6922      	ldr	r2, [r4, #16]
 800a186:	6022      	str	r2, [r4, #0]
 800a188:	d504      	bpl.n	800a194 <__sflush_r+0x7c>
 800a18a:	1c42      	adds	r2, r0, #1
 800a18c:	d101      	bne.n	800a192 <__sflush_r+0x7a>
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	b903      	cbnz	r3, 800a194 <__sflush_r+0x7c>
 800a192:	6560      	str	r0, [r4, #84]	; 0x54
 800a194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a196:	602f      	str	r7, [r5, #0]
 800a198:	2900      	cmp	r1, #0
 800a19a:	d0ca      	beq.n	800a132 <__sflush_r+0x1a>
 800a19c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	d002      	beq.n	800a1aa <__sflush_r+0x92>
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f7ff fbd3 	bl	8009950 <_free_r>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ae:	e7c1      	b.n	800a134 <__sflush_r+0x1c>
 800a1b0:	6a21      	ldr	r1, [r4, #32]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	47b0      	blx	r6
 800a1b8:	1c41      	adds	r1, r0, #1
 800a1ba:	d1c7      	bne.n	800a14c <__sflush_r+0x34>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c4      	beq.n	800a14c <__sflush_r+0x34>
 800a1c2:	2b1d      	cmp	r3, #29
 800a1c4:	d001      	beq.n	800a1ca <__sflush_r+0xb2>
 800a1c6:	2b16      	cmp	r3, #22
 800a1c8:	d101      	bne.n	800a1ce <__sflush_r+0xb6>
 800a1ca:	602f      	str	r7, [r5, #0]
 800a1cc:	e7b1      	b.n	800a132 <__sflush_r+0x1a>
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	e7ad      	b.n	800a134 <__sflush_r+0x1c>
 800a1d8:	690f      	ldr	r7, [r1, #16]
 800a1da:	2f00      	cmp	r7, #0
 800a1dc:	d0a9      	beq.n	800a132 <__sflush_r+0x1a>
 800a1de:	0793      	lsls	r3, r2, #30
 800a1e0:	680e      	ldr	r6, [r1, #0]
 800a1e2:	bf08      	it	eq
 800a1e4:	694b      	ldreq	r3, [r1, #20]
 800a1e6:	600f      	str	r7, [r1, #0]
 800a1e8:	bf18      	it	ne
 800a1ea:	2300      	movne	r3, #0
 800a1ec:	eba6 0807 	sub.w	r8, r6, r7
 800a1f0:	608b      	str	r3, [r1, #8]
 800a1f2:	f1b8 0f00 	cmp.w	r8, #0
 800a1f6:	dd9c      	ble.n	800a132 <__sflush_r+0x1a>
 800a1f8:	6a21      	ldr	r1, [r4, #32]
 800a1fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1fc:	4643      	mov	r3, r8
 800a1fe:	463a      	mov	r2, r7
 800a200:	4628      	mov	r0, r5
 800a202:	47b0      	blx	r6
 800a204:	2800      	cmp	r0, #0
 800a206:	dc06      	bgt.n	800a216 <__sflush_r+0xfe>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	e78e      	b.n	800a134 <__sflush_r+0x1c>
 800a216:	4407      	add	r7, r0
 800a218:	eba8 0800 	sub.w	r8, r8, r0
 800a21c:	e7e9      	b.n	800a1f2 <__sflush_r+0xda>
 800a21e:	bf00      	nop
 800a220:	20400001 	.word	0x20400001

0800a224 <_fflush_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	690b      	ldr	r3, [r1, #16]
 800a228:	4605      	mov	r5, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	b913      	cbnz	r3, 800a234 <_fflush_r+0x10>
 800a22e:	2500      	movs	r5, #0
 800a230:	4628      	mov	r0, r5
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	b118      	cbz	r0, 800a23e <_fflush_r+0x1a>
 800a236:	6983      	ldr	r3, [r0, #24]
 800a238:	b90b      	cbnz	r3, 800a23e <_fflush_r+0x1a>
 800a23a:	f7ff fa95 	bl	8009768 <__sinit>
 800a23e:	4b14      	ldr	r3, [pc, #80]	; (800a290 <_fflush_r+0x6c>)
 800a240:	429c      	cmp	r4, r3
 800a242:	d11b      	bne.n	800a27c <_fflush_r+0x58>
 800a244:	686c      	ldr	r4, [r5, #4]
 800a246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0ef      	beq.n	800a22e <_fflush_r+0xa>
 800a24e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a250:	07d0      	lsls	r0, r2, #31
 800a252:	d404      	bmi.n	800a25e <_fflush_r+0x3a>
 800a254:	0599      	lsls	r1, r3, #22
 800a256:	d402      	bmi.n	800a25e <_fflush_r+0x3a>
 800a258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a25a:	f7ff fb48 	bl	80098ee <__retarget_lock_acquire_recursive>
 800a25e:	4628      	mov	r0, r5
 800a260:	4621      	mov	r1, r4
 800a262:	f7ff ff59 	bl	800a118 <__sflush_r>
 800a266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a268:	07da      	lsls	r2, r3, #31
 800a26a:	4605      	mov	r5, r0
 800a26c:	d4e0      	bmi.n	800a230 <_fflush_r+0xc>
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	059b      	lsls	r3, r3, #22
 800a272:	d4dd      	bmi.n	800a230 <_fflush_r+0xc>
 800a274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a276:	f7ff fb3b 	bl	80098f0 <__retarget_lock_release_recursive>
 800a27a:	e7d9      	b.n	800a230 <_fflush_r+0xc>
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <_fflush_r+0x70>)
 800a27e:	429c      	cmp	r4, r3
 800a280:	d101      	bne.n	800a286 <_fflush_r+0x62>
 800a282:	68ac      	ldr	r4, [r5, #8]
 800a284:	e7df      	b.n	800a246 <_fflush_r+0x22>
 800a286:	4b04      	ldr	r3, [pc, #16]	; (800a298 <_fflush_r+0x74>)
 800a288:	429c      	cmp	r4, r3
 800a28a:	bf08      	it	eq
 800a28c:	68ec      	ldreq	r4, [r5, #12]
 800a28e:	e7da      	b.n	800a246 <_fflush_r+0x22>
 800a290:	0800b5ac 	.word	0x0800b5ac
 800a294:	0800b5cc 	.word	0x0800b5cc
 800a298:	0800b58c 	.word	0x0800b58c

0800a29c <fiprintf>:
 800a29c:	b40e      	push	{r1, r2, r3}
 800a29e:	b503      	push	{r0, r1, lr}
 800a2a0:	4601      	mov	r1, r0
 800a2a2:	ab03      	add	r3, sp, #12
 800a2a4:	4805      	ldr	r0, [pc, #20]	; (800a2bc <fiprintf+0x20>)
 800a2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	f000 fa11 	bl	800a6d4 <_vfiprintf_r>
 800a2b2:	b002      	add	sp, #8
 800a2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b8:	b003      	add	sp, #12
 800a2ba:	4770      	bx	lr
 800a2bc:	20000020 	.word	0x20000020

0800a2c0 <_lseek_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_lseek_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f6 fd44 	bl	8000d5c <_lseek>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_lseek_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_lseek_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20006c1c 	.word	0x20006c1c

0800a2e4 <__swhatbuf_r>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	460e      	mov	r6, r1
 800a2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	b096      	sub	sp, #88	; 0x58
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	461d      	mov	r5, r3
 800a2f4:	da08      	bge.n	800a308 <__swhatbuf_r+0x24>
 800a2f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	061a      	lsls	r2, r3, #24
 800a300:	d410      	bmi.n	800a324 <__swhatbuf_r+0x40>
 800a302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a306:	e00e      	b.n	800a326 <__swhatbuf_r+0x42>
 800a308:	466a      	mov	r2, sp
 800a30a:	f000 fcc1 	bl	800ac90 <_fstat_r>
 800a30e:	2800      	cmp	r0, #0
 800a310:	dbf1      	blt.n	800a2f6 <__swhatbuf_r+0x12>
 800a312:	9a01      	ldr	r2, [sp, #4]
 800a314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a31c:	425a      	negs	r2, r3
 800a31e:	415a      	adcs	r2, r3
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	e7ee      	b.n	800a302 <__swhatbuf_r+0x1e>
 800a324:	2340      	movs	r3, #64	; 0x40
 800a326:	2000      	movs	r0, #0
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	b016      	add	sp, #88	; 0x58
 800a32c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a330 <__smakebuf_r>:
 800a330:	898b      	ldrh	r3, [r1, #12]
 800a332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a334:	079d      	lsls	r5, r3, #30
 800a336:	4606      	mov	r6, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	d507      	bpl.n	800a34c <__smakebuf_r+0x1c>
 800a33c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	6123      	str	r3, [r4, #16]
 800a344:	2301      	movs	r3, #1
 800a346:	6163      	str	r3, [r4, #20]
 800a348:	b002      	add	sp, #8
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	ab01      	add	r3, sp, #4
 800a34e:	466a      	mov	r2, sp
 800a350:	f7ff ffc8 	bl	800a2e4 <__swhatbuf_r>
 800a354:	9900      	ldr	r1, [sp, #0]
 800a356:	4605      	mov	r5, r0
 800a358:	4630      	mov	r0, r6
 800a35a:	f7ff fb65 	bl	8009a28 <_malloc_r>
 800a35e:	b948      	cbnz	r0, 800a374 <__smakebuf_r+0x44>
 800a360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a364:	059a      	lsls	r2, r3, #22
 800a366:	d4ef      	bmi.n	800a348 <__smakebuf_r+0x18>
 800a368:	f023 0303 	bic.w	r3, r3, #3
 800a36c:	f043 0302 	orr.w	r3, r3, #2
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	e7e3      	b.n	800a33c <__smakebuf_r+0xc>
 800a374:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <__smakebuf_r+0x7c>)
 800a376:	62b3      	str	r3, [r6, #40]	; 0x28
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	6020      	str	r0, [r4, #0]
 800a37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a380:	81a3      	strh	r3, [r4, #12]
 800a382:	9b00      	ldr	r3, [sp, #0]
 800a384:	6163      	str	r3, [r4, #20]
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	6120      	str	r0, [r4, #16]
 800a38a:	b15b      	cbz	r3, 800a3a4 <__smakebuf_r+0x74>
 800a38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a390:	4630      	mov	r0, r6
 800a392:	f000 fc8f 	bl	800acb4 <_isatty_r>
 800a396:	b128      	cbz	r0, 800a3a4 <__smakebuf_r+0x74>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f023 0303 	bic.w	r3, r3, #3
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	89a0      	ldrh	r0, [r4, #12]
 800a3a6:	4305      	orrs	r5, r0
 800a3a8:	81a5      	strh	r5, [r4, #12]
 800a3aa:	e7cd      	b.n	800a348 <__smakebuf_r+0x18>
 800a3ac:	08009701 	.word	0x08009701

0800a3b0 <__malloc_lock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__malloc_lock+0x8>)
 800a3b2:	f7ff ba9c 	b.w	80098ee <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20006c10 	.word	0x20006c10

0800a3bc <__malloc_unlock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	; (800a3c4 <__malloc_unlock+0x8>)
 800a3be:	f7ff ba97 	b.w	80098f0 <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20006c10 	.word	0x20006c10

0800a3c8 <__ssputs_r>:
 800a3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	688e      	ldr	r6, [r1, #8]
 800a3ce:	429e      	cmp	r6, r3
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	4690      	mov	r8, r2
 800a3d6:	461f      	mov	r7, r3
 800a3d8:	d838      	bhi.n	800a44c <__ssputs_r+0x84>
 800a3da:	898a      	ldrh	r2, [r1, #12]
 800a3dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3e0:	d032      	beq.n	800a448 <__ssputs_r+0x80>
 800a3e2:	6825      	ldr	r5, [r4, #0]
 800a3e4:	6909      	ldr	r1, [r1, #16]
 800a3e6:	eba5 0901 	sub.w	r9, r5, r1
 800a3ea:	6965      	ldr	r5, [r4, #20]
 800a3ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	444b      	add	r3, r9
 800a3f8:	106d      	asrs	r5, r5, #1
 800a3fa:	429d      	cmp	r5, r3
 800a3fc:	bf38      	it	cc
 800a3fe:	461d      	movcc	r5, r3
 800a400:	0553      	lsls	r3, r2, #21
 800a402:	d531      	bpl.n	800a468 <__ssputs_r+0xa0>
 800a404:	4629      	mov	r1, r5
 800a406:	f7ff fb0f 	bl	8009a28 <_malloc_r>
 800a40a:	4606      	mov	r6, r0
 800a40c:	b950      	cbnz	r0, 800a424 <__ssputs_r+0x5c>
 800a40e:	230c      	movs	r3, #12
 800a410:	f8ca 3000 	str.w	r3, [sl]
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a424:	6921      	ldr	r1, [r4, #16]
 800a426:	464a      	mov	r2, r9
 800a428:	f7ff fa7c 	bl	8009924 <memcpy>
 800a42c:	89a3      	ldrh	r3, [r4, #12]
 800a42e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a436:	81a3      	strh	r3, [r4, #12]
 800a438:	6126      	str	r6, [r4, #16]
 800a43a:	6165      	str	r5, [r4, #20]
 800a43c:	444e      	add	r6, r9
 800a43e:	eba5 0509 	sub.w	r5, r5, r9
 800a442:	6026      	str	r6, [r4, #0]
 800a444:	60a5      	str	r5, [r4, #8]
 800a446:	463e      	mov	r6, r7
 800a448:	42be      	cmp	r6, r7
 800a44a:	d900      	bls.n	800a44e <__ssputs_r+0x86>
 800a44c:	463e      	mov	r6, r7
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	4632      	mov	r2, r6
 800a452:	4641      	mov	r1, r8
 800a454:	f000 fc3e 	bl	800acd4 <memmove>
 800a458:	68a3      	ldr	r3, [r4, #8]
 800a45a:	1b9b      	subs	r3, r3, r6
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	4433      	add	r3, r6
 800a462:	6023      	str	r3, [r4, #0]
 800a464:	2000      	movs	r0, #0
 800a466:	e7db      	b.n	800a420 <__ssputs_r+0x58>
 800a468:	462a      	mov	r2, r5
 800a46a:	f000 fc4d 	bl	800ad08 <_realloc_r>
 800a46e:	4606      	mov	r6, r0
 800a470:	2800      	cmp	r0, #0
 800a472:	d1e1      	bne.n	800a438 <__ssputs_r+0x70>
 800a474:	6921      	ldr	r1, [r4, #16]
 800a476:	4650      	mov	r0, sl
 800a478:	f7ff fa6a 	bl	8009950 <_free_r>
 800a47c:	e7c7      	b.n	800a40e <__ssputs_r+0x46>
	...

0800a480 <_svfiprintf_r>:
 800a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a484:	4698      	mov	r8, r3
 800a486:	898b      	ldrh	r3, [r1, #12]
 800a488:	061b      	lsls	r3, r3, #24
 800a48a:	b09d      	sub	sp, #116	; 0x74
 800a48c:	4607      	mov	r7, r0
 800a48e:	460d      	mov	r5, r1
 800a490:	4614      	mov	r4, r2
 800a492:	d50e      	bpl.n	800a4b2 <_svfiprintf_r+0x32>
 800a494:	690b      	ldr	r3, [r1, #16]
 800a496:	b963      	cbnz	r3, 800a4b2 <_svfiprintf_r+0x32>
 800a498:	2140      	movs	r1, #64	; 0x40
 800a49a:	f7ff fac5 	bl	8009a28 <_malloc_r>
 800a49e:	6028      	str	r0, [r5, #0]
 800a4a0:	6128      	str	r0, [r5, #16]
 800a4a2:	b920      	cbnz	r0, 800a4ae <_svfiprintf_r+0x2e>
 800a4a4:	230c      	movs	r3, #12
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e0d1      	b.n	800a652 <_svfiprintf_r+0x1d2>
 800a4ae:	2340      	movs	r3, #64	; 0x40
 800a4b0:	616b      	str	r3, [r5, #20]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b6:	2320      	movs	r3, #32
 800a4b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4c0:	2330      	movs	r3, #48	; 0x30
 800a4c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a66c <_svfiprintf_r+0x1ec>
 800a4c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ca:	f04f 0901 	mov.w	r9, #1
 800a4ce:	4623      	mov	r3, r4
 800a4d0:	469a      	mov	sl, r3
 800a4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4d6:	b10a      	cbz	r2, 800a4dc <_svfiprintf_r+0x5c>
 800a4d8:	2a25      	cmp	r2, #37	; 0x25
 800a4da:	d1f9      	bne.n	800a4d0 <_svfiprintf_r+0x50>
 800a4dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a4e0:	d00b      	beq.n	800a4fa <_svfiprintf_r+0x7a>
 800a4e2:	465b      	mov	r3, fp
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7ff ff6d 	bl	800a3c8 <__ssputs_r>
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	f000 80aa 	beq.w	800a648 <_svfiprintf_r+0x1c8>
 800a4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4f6:	445a      	add	r2, fp
 800a4f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80a2 	beq.w	800a648 <_svfiprintf_r+0x1c8>
 800a504:	2300      	movs	r3, #0
 800a506:	f04f 32ff 	mov.w	r2, #4294967295
 800a50a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a50e:	f10a 0a01 	add.w	sl, sl, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	9307      	str	r3, [sp, #28]
 800a516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a51a:	931a      	str	r3, [sp, #104]	; 0x68
 800a51c:	4654      	mov	r4, sl
 800a51e:	2205      	movs	r2, #5
 800a520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a524:	4851      	ldr	r0, [pc, #324]	; (800a66c <_svfiprintf_r+0x1ec>)
 800a526:	f7f5 fe6b 	bl	8000200 <memchr>
 800a52a:	9a04      	ldr	r2, [sp, #16]
 800a52c:	b9d8      	cbnz	r0, 800a566 <_svfiprintf_r+0xe6>
 800a52e:	06d0      	lsls	r0, r2, #27
 800a530:	bf44      	itt	mi
 800a532:	2320      	movmi	r3, #32
 800a534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a538:	0711      	lsls	r1, r2, #28
 800a53a:	bf44      	itt	mi
 800a53c:	232b      	movmi	r3, #43	; 0x2b
 800a53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a542:	f89a 3000 	ldrb.w	r3, [sl]
 800a546:	2b2a      	cmp	r3, #42	; 0x2a
 800a548:	d015      	beq.n	800a576 <_svfiprintf_r+0xf6>
 800a54a:	9a07      	ldr	r2, [sp, #28]
 800a54c:	4654      	mov	r4, sl
 800a54e:	2000      	movs	r0, #0
 800a550:	f04f 0c0a 	mov.w	ip, #10
 800a554:	4621      	mov	r1, r4
 800a556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a55a:	3b30      	subs	r3, #48	; 0x30
 800a55c:	2b09      	cmp	r3, #9
 800a55e:	d94e      	bls.n	800a5fe <_svfiprintf_r+0x17e>
 800a560:	b1b0      	cbz	r0, 800a590 <_svfiprintf_r+0x110>
 800a562:	9207      	str	r2, [sp, #28]
 800a564:	e014      	b.n	800a590 <_svfiprintf_r+0x110>
 800a566:	eba0 0308 	sub.w	r3, r0, r8
 800a56a:	fa09 f303 	lsl.w	r3, r9, r3
 800a56e:	4313      	orrs	r3, r2
 800a570:	9304      	str	r3, [sp, #16]
 800a572:	46a2      	mov	sl, r4
 800a574:	e7d2      	b.n	800a51c <_svfiprintf_r+0x9c>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	1d19      	adds	r1, r3, #4
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	9103      	str	r1, [sp, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bfbb      	ittet	lt
 800a582:	425b      	neglt	r3, r3
 800a584:	f042 0202 	orrlt.w	r2, r2, #2
 800a588:	9307      	strge	r3, [sp, #28]
 800a58a:	9307      	strlt	r3, [sp, #28]
 800a58c:	bfb8      	it	lt
 800a58e:	9204      	strlt	r2, [sp, #16]
 800a590:	7823      	ldrb	r3, [r4, #0]
 800a592:	2b2e      	cmp	r3, #46	; 0x2e
 800a594:	d10c      	bne.n	800a5b0 <_svfiprintf_r+0x130>
 800a596:	7863      	ldrb	r3, [r4, #1]
 800a598:	2b2a      	cmp	r3, #42	; 0x2a
 800a59a:	d135      	bne.n	800a608 <_svfiprintf_r+0x188>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	1d1a      	adds	r2, r3, #4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	9203      	str	r2, [sp, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bfb8      	it	lt
 800a5a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5ac:	3402      	adds	r4, #2
 800a5ae:	9305      	str	r3, [sp, #20]
 800a5b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a67c <_svfiprintf_r+0x1fc>
 800a5b4:	7821      	ldrb	r1, [r4, #0]
 800a5b6:	2203      	movs	r2, #3
 800a5b8:	4650      	mov	r0, sl
 800a5ba:	f7f5 fe21 	bl	8000200 <memchr>
 800a5be:	b140      	cbz	r0, 800a5d2 <_svfiprintf_r+0x152>
 800a5c0:	2340      	movs	r3, #64	; 0x40
 800a5c2:	eba0 000a 	sub.w	r0, r0, sl
 800a5c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	4303      	orrs	r3, r0
 800a5ce:	3401      	adds	r4, #1
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d6:	4826      	ldr	r0, [pc, #152]	; (800a670 <_svfiprintf_r+0x1f0>)
 800a5d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5dc:	2206      	movs	r2, #6
 800a5de:	f7f5 fe0f 	bl	8000200 <memchr>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d038      	beq.n	800a658 <_svfiprintf_r+0x1d8>
 800a5e6:	4b23      	ldr	r3, [pc, #140]	; (800a674 <_svfiprintf_r+0x1f4>)
 800a5e8:	bb1b      	cbnz	r3, 800a632 <_svfiprintf_r+0x1b2>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	3307      	adds	r3, #7
 800a5ee:	f023 0307 	bic.w	r3, r3, #7
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	4433      	add	r3, r6
 800a5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a5fc:	e767      	b.n	800a4ce <_svfiprintf_r+0x4e>
 800a5fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a602:	460c      	mov	r4, r1
 800a604:	2001      	movs	r0, #1
 800a606:	e7a5      	b.n	800a554 <_svfiprintf_r+0xd4>
 800a608:	2300      	movs	r3, #0
 800a60a:	3401      	adds	r4, #1
 800a60c:	9305      	str	r3, [sp, #20]
 800a60e:	4619      	mov	r1, r3
 800a610:	f04f 0c0a 	mov.w	ip, #10
 800a614:	4620      	mov	r0, r4
 800a616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a61a:	3a30      	subs	r2, #48	; 0x30
 800a61c:	2a09      	cmp	r2, #9
 800a61e:	d903      	bls.n	800a628 <_svfiprintf_r+0x1a8>
 800a620:	2b00      	cmp	r3, #0
 800a622:	d0c5      	beq.n	800a5b0 <_svfiprintf_r+0x130>
 800a624:	9105      	str	r1, [sp, #20]
 800a626:	e7c3      	b.n	800a5b0 <_svfiprintf_r+0x130>
 800a628:	fb0c 2101 	mla	r1, ip, r1, r2
 800a62c:	4604      	mov	r4, r0
 800a62e:	2301      	movs	r3, #1
 800a630:	e7f0      	b.n	800a614 <_svfiprintf_r+0x194>
 800a632:	ab03      	add	r3, sp, #12
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	462a      	mov	r2, r5
 800a638:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <_svfiprintf_r+0x1f8>)
 800a63a:	a904      	add	r1, sp, #16
 800a63c:	4638      	mov	r0, r7
 800a63e:	f3af 8000 	nop.w
 800a642:	1c42      	adds	r2, r0, #1
 800a644:	4606      	mov	r6, r0
 800a646:	d1d6      	bne.n	800a5f6 <_svfiprintf_r+0x176>
 800a648:	89ab      	ldrh	r3, [r5, #12]
 800a64a:	065b      	lsls	r3, r3, #25
 800a64c:	f53f af2c 	bmi.w	800a4a8 <_svfiprintf_r+0x28>
 800a650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a652:	b01d      	add	sp, #116	; 0x74
 800a654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a658:	ab03      	add	r3, sp, #12
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	462a      	mov	r2, r5
 800a65e:	4b06      	ldr	r3, [pc, #24]	; (800a678 <_svfiprintf_r+0x1f8>)
 800a660:	a904      	add	r1, sp, #16
 800a662:	4638      	mov	r0, r7
 800a664:	f000 f9d4 	bl	800aa10 <_printf_i>
 800a668:	e7eb      	b.n	800a642 <_svfiprintf_r+0x1c2>
 800a66a:	bf00      	nop
 800a66c:	0800b6a0 	.word	0x0800b6a0
 800a670:	0800b6aa 	.word	0x0800b6aa
 800a674:	00000000 	.word	0x00000000
 800a678:	0800a3c9 	.word	0x0800a3c9
 800a67c:	0800b6a6 	.word	0x0800b6a6

0800a680 <__sfputc_r>:
 800a680:	6893      	ldr	r3, [r2, #8]
 800a682:	3b01      	subs	r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	b410      	push	{r4}
 800a688:	6093      	str	r3, [r2, #8]
 800a68a:	da08      	bge.n	800a69e <__sfputc_r+0x1e>
 800a68c:	6994      	ldr	r4, [r2, #24]
 800a68e:	42a3      	cmp	r3, r4
 800a690:	db01      	blt.n	800a696 <__sfputc_r+0x16>
 800a692:	290a      	cmp	r1, #10
 800a694:	d103      	bne.n	800a69e <__sfputc_r+0x1e>
 800a696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a69a:	f7ff bc3d 	b.w	8009f18 <__swbuf_r>
 800a69e:	6813      	ldr	r3, [r2, #0]
 800a6a0:	1c58      	adds	r0, r3, #1
 800a6a2:	6010      	str	r0, [r2, #0]
 800a6a4:	7019      	strb	r1, [r3, #0]
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <__sfputs_r>:
 800a6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	460f      	mov	r7, r1
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	18d5      	adds	r5, r2, r3
 800a6b8:	42ac      	cmp	r4, r5
 800a6ba:	d101      	bne.n	800a6c0 <__sfputs_r+0x12>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e007      	b.n	800a6d0 <__sfputs_r+0x22>
 800a6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c4:	463a      	mov	r2, r7
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f7ff ffda 	bl	800a680 <__sfputc_r>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d1f3      	bne.n	800a6b8 <__sfputs_r+0xa>
 800a6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6d4 <_vfiprintf_r>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	460d      	mov	r5, r1
 800a6da:	b09d      	sub	sp, #116	; 0x74
 800a6dc:	4614      	mov	r4, r2
 800a6de:	4698      	mov	r8, r3
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	b118      	cbz	r0, 800a6ec <_vfiprintf_r+0x18>
 800a6e4:	6983      	ldr	r3, [r0, #24]
 800a6e6:	b90b      	cbnz	r3, 800a6ec <_vfiprintf_r+0x18>
 800a6e8:	f7ff f83e 	bl	8009768 <__sinit>
 800a6ec:	4b89      	ldr	r3, [pc, #548]	; (800a914 <_vfiprintf_r+0x240>)
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	d11b      	bne.n	800a72a <_vfiprintf_r+0x56>
 800a6f2:	6875      	ldr	r5, [r6, #4]
 800a6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f6:	07d9      	lsls	r1, r3, #31
 800a6f8:	d405      	bmi.n	800a706 <_vfiprintf_r+0x32>
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	059a      	lsls	r2, r3, #22
 800a6fe:	d402      	bmi.n	800a706 <_vfiprintf_r+0x32>
 800a700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a702:	f7ff f8f4 	bl	80098ee <__retarget_lock_acquire_recursive>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	071b      	lsls	r3, r3, #28
 800a70a:	d501      	bpl.n	800a710 <_vfiprintf_r+0x3c>
 800a70c:	692b      	ldr	r3, [r5, #16]
 800a70e:	b9eb      	cbnz	r3, 800a74c <_vfiprintf_r+0x78>
 800a710:	4629      	mov	r1, r5
 800a712:	4630      	mov	r0, r6
 800a714:	f7ff fc64 	bl	8009fe0 <__swsetup_r>
 800a718:	b1c0      	cbz	r0, 800a74c <_vfiprintf_r+0x78>
 800a71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a71c:	07dc      	lsls	r4, r3, #31
 800a71e:	d50e      	bpl.n	800a73e <_vfiprintf_r+0x6a>
 800a720:	f04f 30ff 	mov.w	r0, #4294967295
 800a724:	b01d      	add	sp, #116	; 0x74
 800a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72a:	4b7b      	ldr	r3, [pc, #492]	; (800a918 <_vfiprintf_r+0x244>)
 800a72c:	429d      	cmp	r5, r3
 800a72e:	d101      	bne.n	800a734 <_vfiprintf_r+0x60>
 800a730:	68b5      	ldr	r5, [r6, #8]
 800a732:	e7df      	b.n	800a6f4 <_vfiprintf_r+0x20>
 800a734:	4b79      	ldr	r3, [pc, #484]	; (800a91c <_vfiprintf_r+0x248>)
 800a736:	429d      	cmp	r5, r3
 800a738:	bf08      	it	eq
 800a73a:	68f5      	ldreq	r5, [r6, #12]
 800a73c:	e7da      	b.n	800a6f4 <_vfiprintf_r+0x20>
 800a73e:	89ab      	ldrh	r3, [r5, #12]
 800a740:	0598      	lsls	r0, r3, #22
 800a742:	d4ed      	bmi.n	800a720 <_vfiprintf_r+0x4c>
 800a744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a746:	f7ff f8d3 	bl	80098f0 <__retarget_lock_release_recursive>
 800a74a:	e7e9      	b.n	800a720 <_vfiprintf_r+0x4c>
 800a74c:	2300      	movs	r3, #0
 800a74e:	9309      	str	r3, [sp, #36]	; 0x24
 800a750:	2320      	movs	r3, #32
 800a752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a756:	f8cd 800c 	str.w	r8, [sp, #12]
 800a75a:	2330      	movs	r3, #48	; 0x30
 800a75c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a920 <_vfiprintf_r+0x24c>
 800a760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a764:	f04f 0901 	mov.w	r9, #1
 800a768:	4623      	mov	r3, r4
 800a76a:	469a      	mov	sl, r3
 800a76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a770:	b10a      	cbz	r2, 800a776 <_vfiprintf_r+0xa2>
 800a772:	2a25      	cmp	r2, #37	; 0x25
 800a774:	d1f9      	bne.n	800a76a <_vfiprintf_r+0x96>
 800a776:	ebba 0b04 	subs.w	fp, sl, r4
 800a77a:	d00b      	beq.n	800a794 <_vfiprintf_r+0xc0>
 800a77c:	465b      	mov	r3, fp
 800a77e:	4622      	mov	r2, r4
 800a780:	4629      	mov	r1, r5
 800a782:	4630      	mov	r0, r6
 800a784:	f7ff ff93 	bl	800a6ae <__sfputs_r>
 800a788:	3001      	adds	r0, #1
 800a78a:	f000 80aa 	beq.w	800a8e2 <_vfiprintf_r+0x20e>
 800a78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a790:	445a      	add	r2, fp
 800a792:	9209      	str	r2, [sp, #36]	; 0x24
 800a794:	f89a 3000 	ldrb.w	r3, [sl]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 80a2 	beq.w	800a8e2 <_vfiprintf_r+0x20e>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a8:	f10a 0a01 	add.w	sl, sl, #1
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a7b6:	4654      	mov	r4, sl
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7be:	4858      	ldr	r0, [pc, #352]	; (800a920 <_vfiprintf_r+0x24c>)
 800a7c0:	f7f5 fd1e 	bl	8000200 <memchr>
 800a7c4:	9a04      	ldr	r2, [sp, #16]
 800a7c6:	b9d8      	cbnz	r0, 800a800 <_vfiprintf_r+0x12c>
 800a7c8:	06d1      	lsls	r1, r2, #27
 800a7ca:	bf44      	itt	mi
 800a7cc:	2320      	movmi	r3, #32
 800a7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d2:	0713      	lsls	r3, r2, #28
 800a7d4:	bf44      	itt	mi
 800a7d6:	232b      	movmi	r3, #43	; 0x2b
 800a7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e2:	d015      	beq.n	800a810 <_vfiprintf_r+0x13c>
 800a7e4:	9a07      	ldr	r2, [sp, #28]
 800a7e6:	4654      	mov	r4, sl
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f04f 0c0a 	mov.w	ip, #10
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f4:	3b30      	subs	r3, #48	; 0x30
 800a7f6:	2b09      	cmp	r3, #9
 800a7f8:	d94e      	bls.n	800a898 <_vfiprintf_r+0x1c4>
 800a7fa:	b1b0      	cbz	r0, 800a82a <_vfiprintf_r+0x156>
 800a7fc:	9207      	str	r2, [sp, #28]
 800a7fe:	e014      	b.n	800a82a <_vfiprintf_r+0x156>
 800a800:	eba0 0308 	sub.w	r3, r0, r8
 800a804:	fa09 f303 	lsl.w	r3, r9, r3
 800a808:	4313      	orrs	r3, r2
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	46a2      	mov	sl, r4
 800a80e:	e7d2      	b.n	800a7b6 <_vfiprintf_r+0xe2>
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	1d19      	adds	r1, r3, #4
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	9103      	str	r1, [sp, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbb      	ittet	lt
 800a81c:	425b      	neglt	r3, r3
 800a81e:	f042 0202 	orrlt.w	r2, r2, #2
 800a822:	9307      	strge	r3, [sp, #28]
 800a824:	9307      	strlt	r3, [sp, #28]
 800a826:	bfb8      	it	lt
 800a828:	9204      	strlt	r2, [sp, #16]
 800a82a:	7823      	ldrb	r3, [r4, #0]
 800a82c:	2b2e      	cmp	r3, #46	; 0x2e
 800a82e:	d10c      	bne.n	800a84a <_vfiprintf_r+0x176>
 800a830:	7863      	ldrb	r3, [r4, #1]
 800a832:	2b2a      	cmp	r3, #42	; 0x2a
 800a834:	d135      	bne.n	800a8a2 <_vfiprintf_r+0x1ce>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	9203      	str	r2, [sp, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bfb8      	it	lt
 800a842:	f04f 33ff 	movlt.w	r3, #4294967295
 800a846:	3402      	adds	r4, #2
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a930 <_vfiprintf_r+0x25c>
 800a84e:	7821      	ldrb	r1, [r4, #0]
 800a850:	2203      	movs	r2, #3
 800a852:	4650      	mov	r0, sl
 800a854:	f7f5 fcd4 	bl	8000200 <memchr>
 800a858:	b140      	cbz	r0, 800a86c <_vfiprintf_r+0x198>
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	eba0 000a 	sub.w	r0, r0, sl
 800a860:	fa03 f000 	lsl.w	r0, r3, r0
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	4303      	orrs	r3, r0
 800a868:	3401      	adds	r4, #1
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a870:	482c      	ldr	r0, [pc, #176]	; (800a924 <_vfiprintf_r+0x250>)
 800a872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a876:	2206      	movs	r2, #6
 800a878:	f7f5 fcc2 	bl	8000200 <memchr>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d03f      	beq.n	800a900 <_vfiprintf_r+0x22c>
 800a880:	4b29      	ldr	r3, [pc, #164]	; (800a928 <_vfiprintf_r+0x254>)
 800a882:	bb1b      	cbnz	r3, 800a8cc <_vfiprintf_r+0x1f8>
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	3307      	adds	r3, #7
 800a888:	f023 0307 	bic.w	r3, r3, #7
 800a88c:	3308      	adds	r3, #8
 800a88e:	9303      	str	r3, [sp, #12]
 800a890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a892:	443b      	add	r3, r7
 800a894:	9309      	str	r3, [sp, #36]	; 0x24
 800a896:	e767      	b.n	800a768 <_vfiprintf_r+0x94>
 800a898:	fb0c 3202 	mla	r2, ip, r2, r3
 800a89c:	460c      	mov	r4, r1
 800a89e:	2001      	movs	r0, #1
 800a8a0:	e7a5      	b.n	800a7ee <_vfiprintf_r+0x11a>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	3401      	adds	r4, #1
 800a8a6:	9305      	str	r3, [sp, #20]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f04f 0c0a 	mov.w	ip, #10
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b4:	3a30      	subs	r2, #48	; 0x30
 800a8b6:	2a09      	cmp	r2, #9
 800a8b8:	d903      	bls.n	800a8c2 <_vfiprintf_r+0x1ee>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0c5      	beq.n	800a84a <_vfiprintf_r+0x176>
 800a8be:	9105      	str	r1, [sp, #20]
 800a8c0:	e7c3      	b.n	800a84a <_vfiprintf_r+0x176>
 800a8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e7f0      	b.n	800a8ae <_vfiprintf_r+0x1da>
 800a8cc:	ab03      	add	r3, sp, #12
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	462a      	mov	r2, r5
 800a8d2:	4b16      	ldr	r3, [pc, #88]	; (800a92c <_vfiprintf_r+0x258>)
 800a8d4:	a904      	add	r1, sp, #16
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f3af 8000 	nop.w
 800a8dc:	4607      	mov	r7, r0
 800a8de:	1c78      	adds	r0, r7, #1
 800a8e0:	d1d6      	bne.n	800a890 <_vfiprintf_r+0x1bc>
 800a8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e4:	07d9      	lsls	r1, r3, #31
 800a8e6:	d405      	bmi.n	800a8f4 <_vfiprintf_r+0x220>
 800a8e8:	89ab      	ldrh	r3, [r5, #12]
 800a8ea:	059a      	lsls	r2, r3, #22
 800a8ec:	d402      	bmi.n	800a8f4 <_vfiprintf_r+0x220>
 800a8ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8f0:	f7fe fffe 	bl	80098f0 <__retarget_lock_release_recursive>
 800a8f4:	89ab      	ldrh	r3, [r5, #12]
 800a8f6:	065b      	lsls	r3, r3, #25
 800a8f8:	f53f af12 	bmi.w	800a720 <_vfiprintf_r+0x4c>
 800a8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8fe:	e711      	b.n	800a724 <_vfiprintf_r+0x50>
 800a900:	ab03      	add	r3, sp, #12
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	462a      	mov	r2, r5
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <_vfiprintf_r+0x258>)
 800a908:	a904      	add	r1, sp, #16
 800a90a:	4630      	mov	r0, r6
 800a90c:	f000 f880 	bl	800aa10 <_printf_i>
 800a910:	e7e4      	b.n	800a8dc <_vfiprintf_r+0x208>
 800a912:	bf00      	nop
 800a914:	0800b5ac 	.word	0x0800b5ac
 800a918:	0800b5cc 	.word	0x0800b5cc
 800a91c:	0800b58c 	.word	0x0800b58c
 800a920:	0800b6a0 	.word	0x0800b6a0
 800a924:	0800b6aa 	.word	0x0800b6aa
 800a928:	00000000 	.word	0x00000000
 800a92c:	0800a6af 	.word	0x0800a6af
 800a930:	0800b6a6 	.word	0x0800b6a6

0800a934 <_printf_common>:
 800a934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a938:	4616      	mov	r6, r2
 800a93a:	4699      	mov	r9, r3
 800a93c:	688a      	ldr	r2, [r1, #8]
 800a93e:	690b      	ldr	r3, [r1, #16]
 800a940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a944:	4293      	cmp	r3, r2
 800a946:	bfb8      	it	lt
 800a948:	4613      	movlt	r3, r2
 800a94a:	6033      	str	r3, [r6, #0]
 800a94c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a950:	4607      	mov	r7, r0
 800a952:	460c      	mov	r4, r1
 800a954:	b10a      	cbz	r2, 800a95a <_printf_common+0x26>
 800a956:	3301      	adds	r3, #1
 800a958:	6033      	str	r3, [r6, #0]
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	0699      	lsls	r1, r3, #26
 800a95e:	bf42      	ittt	mi
 800a960:	6833      	ldrmi	r3, [r6, #0]
 800a962:	3302      	addmi	r3, #2
 800a964:	6033      	strmi	r3, [r6, #0]
 800a966:	6825      	ldr	r5, [r4, #0]
 800a968:	f015 0506 	ands.w	r5, r5, #6
 800a96c:	d106      	bne.n	800a97c <_printf_common+0x48>
 800a96e:	f104 0a19 	add.w	sl, r4, #25
 800a972:	68e3      	ldr	r3, [r4, #12]
 800a974:	6832      	ldr	r2, [r6, #0]
 800a976:	1a9b      	subs	r3, r3, r2
 800a978:	42ab      	cmp	r3, r5
 800a97a:	dc26      	bgt.n	800a9ca <_printf_common+0x96>
 800a97c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a980:	1e13      	subs	r3, r2, #0
 800a982:	6822      	ldr	r2, [r4, #0]
 800a984:	bf18      	it	ne
 800a986:	2301      	movne	r3, #1
 800a988:	0692      	lsls	r2, r2, #26
 800a98a:	d42b      	bmi.n	800a9e4 <_printf_common+0xb0>
 800a98c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a990:	4649      	mov	r1, r9
 800a992:	4638      	mov	r0, r7
 800a994:	47c0      	blx	r8
 800a996:	3001      	adds	r0, #1
 800a998:	d01e      	beq.n	800a9d8 <_printf_common+0xa4>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	68e5      	ldr	r5, [r4, #12]
 800a99e:	6832      	ldr	r2, [r6, #0]
 800a9a0:	f003 0306 	and.w	r3, r3, #6
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	bf08      	it	eq
 800a9a8:	1aad      	subeq	r5, r5, r2
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	6922      	ldr	r2, [r4, #16]
 800a9ae:	bf0c      	ite	eq
 800a9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b4:	2500      	movne	r5, #0
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	bfc4      	itt	gt
 800a9ba:	1a9b      	subgt	r3, r3, r2
 800a9bc:	18ed      	addgt	r5, r5, r3
 800a9be:	2600      	movs	r6, #0
 800a9c0:	341a      	adds	r4, #26
 800a9c2:	42b5      	cmp	r5, r6
 800a9c4:	d11a      	bne.n	800a9fc <_printf_common+0xc8>
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e008      	b.n	800a9dc <_printf_common+0xa8>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	4652      	mov	r2, sl
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	47c0      	blx	r8
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d103      	bne.n	800a9e0 <_printf_common+0xac>
 800a9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e0:	3501      	adds	r5, #1
 800a9e2:	e7c6      	b.n	800a972 <_printf_common+0x3e>
 800a9e4:	18e1      	adds	r1, r4, r3
 800a9e6:	1c5a      	adds	r2, r3, #1
 800a9e8:	2030      	movs	r0, #48	; 0x30
 800a9ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ee:	4422      	add	r2, r4
 800a9f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	e7c7      	b.n	800a98c <_printf_common+0x58>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4622      	mov	r2, r4
 800aa00:	4649      	mov	r1, r9
 800aa02:	4638      	mov	r0, r7
 800aa04:	47c0      	blx	r8
 800aa06:	3001      	adds	r0, #1
 800aa08:	d0e6      	beq.n	800a9d8 <_printf_common+0xa4>
 800aa0a:	3601      	adds	r6, #1
 800aa0c:	e7d9      	b.n	800a9c2 <_printf_common+0x8e>
	...

0800aa10 <_printf_i>:
 800aa10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa14:	7e0f      	ldrb	r7, [r1, #24]
 800aa16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa18:	2f78      	cmp	r7, #120	; 0x78
 800aa1a:	4691      	mov	r9, r2
 800aa1c:	4680      	mov	r8, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	469a      	mov	sl, r3
 800aa22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa26:	d807      	bhi.n	800aa38 <_printf_i+0x28>
 800aa28:	2f62      	cmp	r7, #98	; 0x62
 800aa2a:	d80a      	bhi.n	800aa42 <_printf_i+0x32>
 800aa2c:	2f00      	cmp	r7, #0
 800aa2e:	f000 80d8 	beq.w	800abe2 <_printf_i+0x1d2>
 800aa32:	2f58      	cmp	r7, #88	; 0x58
 800aa34:	f000 80a3 	beq.w	800ab7e <_printf_i+0x16e>
 800aa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa40:	e03a      	b.n	800aab8 <_printf_i+0xa8>
 800aa42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa46:	2b15      	cmp	r3, #21
 800aa48:	d8f6      	bhi.n	800aa38 <_printf_i+0x28>
 800aa4a:	a101      	add	r1, pc, #4	; (adr r1, 800aa50 <_printf_i+0x40>)
 800aa4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa50:	0800aaa9 	.word	0x0800aaa9
 800aa54:	0800aabd 	.word	0x0800aabd
 800aa58:	0800aa39 	.word	0x0800aa39
 800aa5c:	0800aa39 	.word	0x0800aa39
 800aa60:	0800aa39 	.word	0x0800aa39
 800aa64:	0800aa39 	.word	0x0800aa39
 800aa68:	0800aabd 	.word	0x0800aabd
 800aa6c:	0800aa39 	.word	0x0800aa39
 800aa70:	0800aa39 	.word	0x0800aa39
 800aa74:	0800aa39 	.word	0x0800aa39
 800aa78:	0800aa39 	.word	0x0800aa39
 800aa7c:	0800abc9 	.word	0x0800abc9
 800aa80:	0800aaed 	.word	0x0800aaed
 800aa84:	0800abab 	.word	0x0800abab
 800aa88:	0800aa39 	.word	0x0800aa39
 800aa8c:	0800aa39 	.word	0x0800aa39
 800aa90:	0800abeb 	.word	0x0800abeb
 800aa94:	0800aa39 	.word	0x0800aa39
 800aa98:	0800aaed 	.word	0x0800aaed
 800aa9c:	0800aa39 	.word	0x0800aa39
 800aaa0:	0800aa39 	.word	0x0800aa39
 800aaa4:	0800abb3 	.word	0x0800abb3
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	1d1a      	adds	r2, r3, #4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	602a      	str	r2, [r5, #0]
 800aab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab8:	2301      	movs	r3, #1
 800aaba:	e0a3      	b.n	800ac04 <_printf_i+0x1f4>
 800aabc:	6820      	ldr	r0, [r4, #0]
 800aabe:	6829      	ldr	r1, [r5, #0]
 800aac0:	0606      	lsls	r6, r0, #24
 800aac2:	f101 0304 	add.w	r3, r1, #4
 800aac6:	d50a      	bpl.n	800aade <_printf_i+0xce>
 800aac8:	680e      	ldr	r6, [r1, #0]
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	2e00      	cmp	r6, #0
 800aace:	da03      	bge.n	800aad8 <_printf_i+0xc8>
 800aad0:	232d      	movs	r3, #45	; 0x2d
 800aad2:	4276      	negs	r6, r6
 800aad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad8:	485e      	ldr	r0, [pc, #376]	; (800ac54 <_printf_i+0x244>)
 800aada:	230a      	movs	r3, #10
 800aadc:	e019      	b.n	800ab12 <_printf_i+0x102>
 800aade:	680e      	ldr	r6, [r1, #0]
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aae6:	bf18      	it	ne
 800aae8:	b236      	sxthne	r6, r6
 800aaea:	e7ef      	b.n	800aacc <_printf_i+0xbc>
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	1d19      	adds	r1, r3, #4
 800aaf2:	6029      	str	r1, [r5, #0]
 800aaf4:	0601      	lsls	r1, r0, #24
 800aaf6:	d501      	bpl.n	800aafc <_printf_i+0xec>
 800aaf8:	681e      	ldr	r6, [r3, #0]
 800aafa:	e002      	b.n	800ab02 <_printf_i+0xf2>
 800aafc:	0646      	lsls	r6, r0, #25
 800aafe:	d5fb      	bpl.n	800aaf8 <_printf_i+0xe8>
 800ab00:	881e      	ldrh	r6, [r3, #0]
 800ab02:	4854      	ldr	r0, [pc, #336]	; (800ac54 <_printf_i+0x244>)
 800ab04:	2f6f      	cmp	r7, #111	; 0x6f
 800ab06:	bf0c      	ite	eq
 800ab08:	2308      	moveq	r3, #8
 800ab0a:	230a      	movne	r3, #10
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab12:	6865      	ldr	r5, [r4, #4]
 800ab14:	60a5      	str	r5, [r4, #8]
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	bfa2      	ittt	ge
 800ab1a:	6821      	ldrge	r1, [r4, #0]
 800ab1c:	f021 0104 	bicge.w	r1, r1, #4
 800ab20:	6021      	strge	r1, [r4, #0]
 800ab22:	b90e      	cbnz	r6, 800ab28 <_printf_i+0x118>
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	d04d      	beq.n	800abc4 <_printf_i+0x1b4>
 800ab28:	4615      	mov	r5, r2
 800ab2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ab32:	5dc7      	ldrb	r7, [r0, r7]
 800ab34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab38:	4637      	mov	r7, r6
 800ab3a:	42bb      	cmp	r3, r7
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	d9f4      	bls.n	800ab2a <_printf_i+0x11a>
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d10b      	bne.n	800ab5c <_printf_i+0x14c>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	07de      	lsls	r6, r3, #31
 800ab48:	d508      	bpl.n	800ab5c <_printf_i+0x14c>
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	6861      	ldr	r1, [r4, #4]
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	bfde      	ittt	le
 800ab52:	2330      	movle	r3, #48	; 0x30
 800ab54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab5c:	1b52      	subs	r2, r2, r5
 800ab5e:	6122      	str	r2, [r4, #16]
 800ab60:	f8cd a000 	str.w	sl, [sp]
 800ab64:	464b      	mov	r3, r9
 800ab66:	aa03      	add	r2, sp, #12
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	f7ff fee2 	bl	800a934 <_printf_common>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d14c      	bne.n	800ac0e <_printf_i+0x1fe>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	b004      	add	sp, #16
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	4835      	ldr	r0, [pc, #212]	; (800ac54 <_printf_i+0x244>)
 800ab80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab84:	6829      	ldr	r1, [r5, #0]
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab8c:	6029      	str	r1, [r5, #0]
 800ab8e:	061d      	lsls	r5, r3, #24
 800ab90:	d514      	bpl.n	800abbc <_printf_i+0x1ac>
 800ab92:	07df      	lsls	r7, r3, #31
 800ab94:	bf44      	itt	mi
 800ab96:	f043 0320 	orrmi.w	r3, r3, #32
 800ab9a:	6023      	strmi	r3, [r4, #0]
 800ab9c:	b91e      	cbnz	r6, 800aba6 <_printf_i+0x196>
 800ab9e:	6823      	ldr	r3, [r4, #0]
 800aba0:	f023 0320 	bic.w	r3, r3, #32
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	2310      	movs	r3, #16
 800aba8:	e7b0      	b.n	800ab0c <_printf_i+0xfc>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f043 0320 	orr.w	r3, r3, #32
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	2378      	movs	r3, #120	; 0x78
 800abb4:	4828      	ldr	r0, [pc, #160]	; (800ac58 <_printf_i+0x248>)
 800abb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abba:	e7e3      	b.n	800ab84 <_printf_i+0x174>
 800abbc:	0659      	lsls	r1, r3, #25
 800abbe:	bf48      	it	mi
 800abc0:	b2b6      	uxthmi	r6, r6
 800abc2:	e7e6      	b.n	800ab92 <_printf_i+0x182>
 800abc4:	4615      	mov	r5, r2
 800abc6:	e7bb      	b.n	800ab40 <_printf_i+0x130>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	6826      	ldr	r6, [r4, #0]
 800abcc:	6961      	ldr	r1, [r4, #20]
 800abce:	1d18      	adds	r0, r3, #4
 800abd0:	6028      	str	r0, [r5, #0]
 800abd2:	0635      	lsls	r5, r6, #24
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	d501      	bpl.n	800abdc <_printf_i+0x1cc>
 800abd8:	6019      	str	r1, [r3, #0]
 800abda:	e002      	b.n	800abe2 <_printf_i+0x1d2>
 800abdc:	0670      	lsls	r0, r6, #25
 800abde:	d5fb      	bpl.n	800abd8 <_printf_i+0x1c8>
 800abe0:	8019      	strh	r1, [r3, #0]
 800abe2:	2300      	movs	r3, #0
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	4615      	mov	r5, r2
 800abe8:	e7ba      	b.n	800ab60 <_printf_i+0x150>
 800abea:	682b      	ldr	r3, [r5, #0]
 800abec:	1d1a      	adds	r2, r3, #4
 800abee:	602a      	str	r2, [r5, #0]
 800abf0:	681d      	ldr	r5, [r3, #0]
 800abf2:	6862      	ldr	r2, [r4, #4]
 800abf4:	2100      	movs	r1, #0
 800abf6:	4628      	mov	r0, r5
 800abf8:	f7f5 fb02 	bl	8000200 <memchr>
 800abfc:	b108      	cbz	r0, 800ac02 <_printf_i+0x1f2>
 800abfe:	1b40      	subs	r0, r0, r5
 800ac00:	6060      	str	r0, [r4, #4]
 800ac02:	6863      	ldr	r3, [r4, #4]
 800ac04:	6123      	str	r3, [r4, #16]
 800ac06:	2300      	movs	r3, #0
 800ac08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac0c:	e7a8      	b.n	800ab60 <_printf_i+0x150>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	462a      	mov	r2, r5
 800ac12:	4649      	mov	r1, r9
 800ac14:	4640      	mov	r0, r8
 800ac16:	47d0      	blx	sl
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d0ab      	beq.n	800ab74 <_printf_i+0x164>
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	079b      	lsls	r3, r3, #30
 800ac20:	d413      	bmi.n	800ac4a <_printf_i+0x23a>
 800ac22:	68e0      	ldr	r0, [r4, #12]
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	4298      	cmp	r0, r3
 800ac28:	bfb8      	it	lt
 800ac2a:	4618      	movlt	r0, r3
 800ac2c:	e7a4      	b.n	800ab78 <_printf_i+0x168>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4632      	mov	r2, r6
 800ac32:	4649      	mov	r1, r9
 800ac34:	4640      	mov	r0, r8
 800ac36:	47d0      	blx	sl
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d09b      	beq.n	800ab74 <_printf_i+0x164>
 800ac3c:	3501      	adds	r5, #1
 800ac3e:	68e3      	ldr	r3, [r4, #12]
 800ac40:	9903      	ldr	r1, [sp, #12]
 800ac42:	1a5b      	subs	r3, r3, r1
 800ac44:	42ab      	cmp	r3, r5
 800ac46:	dcf2      	bgt.n	800ac2e <_printf_i+0x21e>
 800ac48:	e7eb      	b.n	800ac22 <_printf_i+0x212>
 800ac4a:	2500      	movs	r5, #0
 800ac4c:	f104 0619 	add.w	r6, r4, #25
 800ac50:	e7f5      	b.n	800ac3e <_printf_i+0x22e>
 800ac52:	bf00      	nop
 800ac54:	0800b6b1 	.word	0x0800b6b1
 800ac58:	0800b6c2 	.word	0x0800b6c2

0800ac5c <_read_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d07      	ldr	r5, [pc, #28]	; (800ac7c <_read_r+0x20>)
 800ac60:	4604      	mov	r4, r0
 800ac62:	4608      	mov	r0, r1
 800ac64:	4611      	mov	r1, r2
 800ac66:	2200      	movs	r2, #0
 800ac68:	602a      	str	r2, [r5, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f7f6 f816 	bl	8000c9c <_read>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	d102      	bne.n	800ac7a <_read_r+0x1e>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	b103      	cbz	r3, 800ac7a <_read_r+0x1e>
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	20006c1c 	.word	0x20006c1c

0800ac80 <abort>:
 800ac80:	b508      	push	{r3, lr}
 800ac82:	2006      	movs	r0, #6
 800ac84:	f000 f898 	bl	800adb8 <raise>
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f7f5 fffd 	bl	8000c88 <_exit>
	...

0800ac90 <_fstat_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	; (800acb0 <_fstat_r+0x20>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	602b      	str	r3, [r5, #0]
 800ac9e:	f7f6 f842 	bl	8000d26 <_fstat>
 800aca2:	1c43      	adds	r3, r0, #1
 800aca4:	d102      	bne.n	800acac <_fstat_r+0x1c>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	b103      	cbz	r3, 800acac <_fstat_r+0x1c>
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	bf00      	nop
 800acb0:	20006c1c 	.word	0x20006c1c

0800acb4 <_isatty_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	; (800acd0 <_isatty_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f6 f841 	bl	8000d46 <_isatty>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_isatty_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_isatty_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20006c1c 	.word	0x20006c1c

0800acd4 <memmove>:
 800acd4:	4288      	cmp	r0, r1
 800acd6:	b510      	push	{r4, lr}
 800acd8:	eb01 0402 	add.w	r4, r1, r2
 800acdc:	d902      	bls.n	800ace4 <memmove+0x10>
 800acde:	4284      	cmp	r4, r0
 800ace0:	4623      	mov	r3, r4
 800ace2:	d807      	bhi.n	800acf4 <memmove+0x20>
 800ace4:	1e43      	subs	r3, r0, #1
 800ace6:	42a1      	cmp	r1, r4
 800ace8:	d008      	beq.n	800acfc <memmove+0x28>
 800acea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf2:	e7f8      	b.n	800ace6 <memmove+0x12>
 800acf4:	4402      	add	r2, r0
 800acf6:	4601      	mov	r1, r0
 800acf8:	428a      	cmp	r2, r1
 800acfa:	d100      	bne.n	800acfe <memmove+0x2a>
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad06:	e7f7      	b.n	800acf8 <memmove+0x24>

0800ad08 <_realloc_r>:
 800ad08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0c:	4680      	mov	r8, r0
 800ad0e:	4614      	mov	r4, r2
 800ad10:	460e      	mov	r6, r1
 800ad12:	b921      	cbnz	r1, 800ad1e <_realloc_r+0x16>
 800ad14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad18:	4611      	mov	r1, r2
 800ad1a:	f7fe be85 	b.w	8009a28 <_malloc_r>
 800ad1e:	b92a      	cbnz	r2, 800ad2c <_realloc_r+0x24>
 800ad20:	f7fe fe16 	bl	8009950 <_free_r>
 800ad24:	4625      	mov	r5, r4
 800ad26:	4628      	mov	r0, r5
 800ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad2c:	f000 f860 	bl	800adf0 <_malloc_usable_size_r>
 800ad30:	4284      	cmp	r4, r0
 800ad32:	4607      	mov	r7, r0
 800ad34:	d802      	bhi.n	800ad3c <_realloc_r+0x34>
 800ad36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad3a:	d812      	bhi.n	800ad62 <_realloc_r+0x5a>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4640      	mov	r0, r8
 800ad40:	f7fe fe72 	bl	8009a28 <_malloc_r>
 800ad44:	4605      	mov	r5, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0ed      	beq.n	800ad26 <_realloc_r+0x1e>
 800ad4a:	42bc      	cmp	r4, r7
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4631      	mov	r1, r6
 800ad50:	bf28      	it	cs
 800ad52:	463a      	movcs	r2, r7
 800ad54:	f7fe fde6 	bl	8009924 <memcpy>
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f7fe fdf8 	bl	8009950 <_free_r>
 800ad60:	e7e1      	b.n	800ad26 <_realloc_r+0x1e>
 800ad62:	4635      	mov	r5, r6
 800ad64:	e7df      	b.n	800ad26 <_realloc_r+0x1e>

0800ad66 <_raise_r>:
 800ad66:	291f      	cmp	r1, #31
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	460d      	mov	r5, r1
 800ad6e:	d904      	bls.n	800ad7a <_raise_r+0x14>
 800ad70:	2316      	movs	r3, #22
 800ad72:	6003      	str	r3, [r0, #0]
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295
 800ad78:	bd38      	pop	{r3, r4, r5, pc}
 800ad7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad7c:	b112      	cbz	r2, 800ad84 <_raise_r+0x1e>
 800ad7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad82:	b94b      	cbnz	r3, 800ad98 <_raise_r+0x32>
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 f831 	bl	800adec <_getpid_r>
 800ad8a:	462a      	mov	r2, r5
 800ad8c:	4601      	mov	r1, r0
 800ad8e:	4620      	mov	r0, r4
 800ad90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad94:	f000 b818 	b.w	800adc8 <_kill_r>
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d00a      	beq.n	800adb2 <_raise_r+0x4c>
 800ad9c:	1c59      	adds	r1, r3, #1
 800ad9e:	d103      	bne.n	800ada8 <_raise_r+0x42>
 800ada0:	2316      	movs	r3, #22
 800ada2:	6003      	str	r3, [r0, #0]
 800ada4:	2001      	movs	r0, #1
 800ada6:	e7e7      	b.n	800ad78 <_raise_r+0x12>
 800ada8:	2400      	movs	r4, #0
 800adaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adae:	4628      	mov	r0, r5
 800adb0:	4798      	blx	r3
 800adb2:	2000      	movs	r0, #0
 800adb4:	e7e0      	b.n	800ad78 <_raise_r+0x12>
	...

0800adb8 <raise>:
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <raise+0xc>)
 800adba:	4601      	mov	r1, r0
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	f7ff bfd2 	b.w	800ad66 <_raise_r>
 800adc2:	bf00      	nop
 800adc4:	20000020 	.word	0x20000020

0800adc8 <_kill_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4d07      	ldr	r5, [pc, #28]	; (800ade8 <_kill_r+0x20>)
 800adcc:	2300      	movs	r3, #0
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	4611      	mov	r1, r2
 800add4:	602b      	str	r3, [r5, #0]
 800add6:	f7f5 ff47 	bl	8000c68 <_kill>
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	d102      	bne.n	800ade4 <_kill_r+0x1c>
 800adde:	682b      	ldr	r3, [r5, #0]
 800ade0:	b103      	cbz	r3, 800ade4 <_kill_r+0x1c>
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	bd38      	pop	{r3, r4, r5, pc}
 800ade6:	bf00      	nop
 800ade8:	20006c1c 	.word	0x20006c1c

0800adec <_getpid_r>:
 800adec:	f7f5 bf34 	b.w	8000c58 <_getpid>

0800adf0 <_malloc_usable_size_r>:
 800adf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf4:	1f18      	subs	r0, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfbc      	itt	lt
 800adfa:	580b      	ldrlt	r3, [r1, r0]
 800adfc:	18c0      	addlt	r0, r0, r3
 800adfe:	4770      	bx	lr

0800ae00 <_init>:
 800ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae02:	bf00      	nop
 800ae04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae06:	bc08      	pop	{r3}
 800ae08:	469e      	mov	lr, r3
 800ae0a:	4770      	bx	lr

0800ae0c <_fini>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	bf00      	nop
 800ae10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae12:	bc08      	pop	{r3}
 800ae14:	469e      	mov	lr, r3
 800ae16:	4770      	bx	lr
