
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c8  080002d0  000102d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c8  080002c8  000102d0  2**0
                  CONTENTS
  4 .ARM          00000000  080002c8  080002c8  000102d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c8  080002d0  000102d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002d0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000065b  00000000  00000000  0001033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000210  00000000  00000000  00010996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000047  00000000  00000000  00010c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ae61  00000000  00000000  00010c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bde  00000000  00000000  0001bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003c9d7  00000000  00000000  0001c69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000a8  00000000  00000000  00059078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00059120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080002b0 	.word	0x080002b0

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	080002b0 	.word	0x080002b0

080000fc <main>:

uint8_t num = 10;
uint8_t *ptr = &num;

int main(void)
{
 80000fc:	b580      	push	{r7, lr}
 80000fe:	b082      	sub	sp, #8
 8000100:	af00      	add	r7, sp, #0
    /* Loop forever */
//	volatile uint32_t *RCC_IOPENR = (volatile uint32_t *)(RCC_IOPENR_ADDR);
//
//	*RCC_IOPENR |= 1;
//	IOPENR |= 1;
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOCEN;
 8000102:	4b3a      	ldr	r3, [pc, #232]	; (80001ec <main+0xf0>)
 8000104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000106:	4b39      	ldr	r3, [pc, #228]	; (80001ec <main+0xf0>)
 8000108:	2105      	movs	r1, #5
 800010a:	430a      	orrs	r2, r1
 800010c:	635a      	str	r2, [r3, #52]	; 0x34
	//LED - PA5
	//SWITCH -> PC13
	//MODER
	GPIOA->MODER &=~ (GPIO_MODER_MODE5); //reset (MODER5)
 800010e:	23a0      	movs	r3, #160	; 0xa0
 8000110:	05db      	lsls	r3, r3, #23
 8000112:	681a      	ldr	r2, [r3, #0]
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	4935      	ldr	r1, [pc, #212]	; (80001f0 <main+0xf4>)
 800011a:	400a      	ands	r2, r1
 800011c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0; 	//Salida de proposito general ;
 800011e:	23a0      	movs	r3, #160	; 0xa0
 8000120:	05db      	lsls	r3, r3, #23
 8000122:	681a      	ldr	r2, [r3, #0]
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	2180      	movs	r1, #128	; 0x80
 800012a:	00c9      	lsls	r1, r1, #3
 800012c:	430a      	orrs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]

	GPIOC->MODER &=~ GPIO_MODER_MODE13;		//Reset (MODER13) Entrada
 8000130:	4b30      	ldr	r3, [pc, #192]	; (80001f4 <main+0xf8>)
 8000132:	681a      	ldr	r2, [r3, #0]
 8000134:	4b2f      	ldr	r3, [pc, #188]	; (80001f4 <main+0xf8>)
 8000136:	4930      	ldr	r1, [pc, #192]	; (80001f8 <main+0xfc>)
 8000138:	400a      	ands	r2, r1
 800013a:	601a      	str	r2, [r3, #0]
	//OTYPER
	GPIOA->OTYPER &=~ GPIO_OTYPER_OT5;
 800013c:	23a0      	movs	r3, #160	; 0xa0
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	685a      	ldr	r2, [r3, #4]
 8000142:	23a0      	movs	r3, #160	; 0xa0
 8000144:	05db      	lsls	r3, r3, #23
 8000146:	2120      	movs	r1, #32
 8000148:	438a      	bics	r2, r1
 800014a:	605a      	str	r2, [r3, #4]
	//OSPEEDR
	GPIOA->OSPEEDR &=~ GPIO_OSPEEDR_OSPEED5;
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05db      	lsls	r3, r3, #23
 8000150:	689a      	ldr	r2, [r3, #8]
 8000152:	23a0      	movs	r3, #160	; 0xa0
 8000154:	05db      	lsls	r3, r3, #23
 8000156:	4926      	ldr	r1, [pc, #152]	; (80001f0 <main+0xf4>)
 8000158:	400a      	ands	r2, r1
 800015a:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED5_1;//High speed
 800015c:	23a0      	movs	r3, #160	; 0xa0
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	689a      	ldr	r2, [r3, #8]
 8000162:	23a0      	movs	r3, #160	; 0xa0
 8000164:	05db      	lsls	r3, r3, #23
 8000166:	2180      	movs	r1, #128	; 0x80
 8000168:	0109      	lsls	r1, r1, #4
 800016a:	430a      	orrs	r2, r1
 800016c:	609a      	str	r2, [r3, #8]

	//PUPDR
	GPIOA->PUPDR &=~ GPIO_PUPDR_PUPD5;
 800016e:	23a0      	movs	r3, #160	; 0xa0
 8000170:	05db      	lsls	r3, r3, #23
 8000172:	68da      	ldr	r2, [r3, #12]
 8000174:	23a0      	movs	r3, #160	; 0xa0
 8000176:	05db      	lsls	r3, r3, #23
 8000178:	491d      	ldr	r1, [pc, #116]	; (80001f0 <main+0xf4>)
 800017a:	400a      	ands	r2, r1
 800017c:	60da      	str	r2, [r3, #12]
	GPIOC->PUPDR &=~ GPIO_PUPDR_PUPD13;
 800017e:	4b1d      	ldr	r3, [pc, #116]	; (80001f4 <main+0xf8>)
 8000180:	68da      	ldr	r2, [r3, #12]
 8000182:	4b1c      	ldr	r3, [pc, #112]	; (80001f4 <main+0xf8>)
 8000184:	491c      	ldr	r1, [pc, #112]	; (80001f8 <main+0xfc>)
 8000186:	400a      	ands	r2, r1
 8000188:	60da      	str	r2, [r3, #12]

	//poner en alto el pin
	GPIOA->ODR |= GPIO_ODR_OD5;
 800018a:	23a0      	movs	r3, #160	; 0xa0
 800018c:	05db      	lsls	r3, r3, #23
 800018e:	695a      	ldr	r2, [r3, #20]
 8000190:	23a0      	movs	r3, #160	; 0xa0
 8000192:	05db      	lsls	r3, r3, #23
 8000194:	2120      	movs	r1, #32
 8000196:	430a      	orrs	r2, r1
 8000198:	615a      	str	r2, [r3, #20]
//	GPIOA->BSRR |= GPIO_BSRR_BS5; //1<<5
	//poner en bajo el pin
	GPIOA->ODR &=~ GPIO_ODR_OD5;
 800019a:	23a0      	movs	r3, #160	; 0xa0
 800019c:	05db      	lsls	r3, r3, #23
 800019e:	695a      	ldr	r2, [r3, #20]
 80001a0:	23a0      	movs	r3, #160	; 0xa0
 80001a2:	05db      	lsls	r3, r3, #23
 80001a4:	2120      	movs	r1, #32
 80001a6:	438a      	bics	r2, r1
 80001a8:	615a      	str	r2, [r3, #20]
//	GPIOA->BSRR |= GPIO_BSRR_BR5; //1<<21


	for(;;){
		PC13 = (GPIOC->IDR & GPIO_IDR_ID13) >> 13; //1 <->0
 80001aa:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <main+0xf8>)
 80001ac:	691b      	ldr	r3, [r3, #16]
 80001ae:	0b5b      	lsrs	r3, r3, #13
 80001b0:	2201      	movs	r2, #1
 80001b2:	401a      	ands	r2, r3
 80001b4:	1dfb      	adds	r3, r7, #7
 80001b6:	1e51      	subs	r1, r2, #1
 80001b8:	418a      	sbcs	r2, r1
 80001ba:	701a      	strb	r2, [r3, #0]
		if(PC13){
 80001bc:	1dfb      	adds	r3, r7, #7
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d008      	beq.n	80001d6 <main+0xda>
			GPIOA->ODR |= 1<<5;
 80001c4:	23a0      	movs	r3, #160	; 0xa0
 80001c6:	05db      	lsls	r3, r3, #23
 80001c8:	695a      	ldr	r2, [r3, #20]
 80001ca:	23a0      	movs	r3, #160	; 0xa0
 80001cc:	05db      	lsls	r3, r3, #23
 80001ce:	2120      	movs	r1, #32
 80001d0:	430a      	orrs	r2, r1
 80001d2:	615a      	str	r2, [r3, #20]
 80001d4:	e7e9      	b.n	80001aa <main+0xae>
		}else{
			GPIOA->BSRR |= 1<<(16 + 5);
 80001d6:	23a0      	movs	r3, #160	; 0xa0
 80001d8:	05db      	lsls	r3, r3, #23
 80001da:	699a      	ldr	r2, [r3, #24]
 80001dc:	23a0      	movs	r3, #160	; 0xa0
 80001de:	05db      	lsls	r3, r3, #23
 80001e0:	2180      	movs	r1, #128	; 0x80
 80001e2:	0389      	lsls	r1, r1, #14
 80001e4:	430a      	orrs	r2, r1
 80001e6:	619a      	str	r2, [r3, #24]
		PC13 = (GPIOC->IDR & GPIO_IDR_ID13) >> 13; //1 <->0
 80001e8:	e7df      	b.n	80001aa <main+0xae>
 80001ea:	46c0      	nop			; (mov r8, r8)
 80001ec:	40021000 	.word	0x40021000
 80001f0:	fffff3ff 	.word	0xfffff3ff
 80001f4:	50000800 	.word	0x50000800
 80001f8:	f3ffffff 	.word	0xf3ffffff

080001fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <SystemInit+0x14>)
 8000202:	2280      	movs	r2, #128	; 0x80
 8000204:	0512      	lsls	r2, r2, #20
 8000206:	609a      	str	r2, [r3, #8]
#endif
}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000216:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000218:	f7ff fff0 	bl	80001fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480c      	ldr	r0, [pc, #48]	; (8000250 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490d      	ldr	r1, [pc, #52]	; (8000254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0a      	ldr	r4, [pc, #40]	; (8000260 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000242:	f000 f811 	bl	8000268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000246:	f7ff ff59 	bl	80000fc <main>

0800024a <LoopForever>:

LoopForever:
  b LoopForever
 800024a:	e7fe      	b.n	800024a <LoopForever>
  ldr   r0, =_estack
 800024c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000258:	080002d0 	.word	0x080002d0
  ldr r2, =_sbss
 800025c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000260:	2000001c 	.word	0x2000001c

08000264 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC_IRQHandler>
	...

08000268 <__libc_init_array>:
 8000268:	b570      	push	{r4, r5, r6, lr}
 800026a:	2600      	movs	r6, #0
 800026c:	4c0c      	ldr	r4, [pc, #48]	; (80002a0 <__libc_init_array+0x38>)
 800026e:	4d0d      	ldr	r5, [pc, #52]	; (80002a4 <__libc_init_array+0x3c>)
 8000270:	1b64      	subs	r4, r4, r5
 8000272:	10a4      	asrs	r4, r4, #2
 8000274:	42a6      	cmp	r6, r4
 8000276:	d109      	bne.n	800028c <__libc_init_array+0x24>
 8000278:	2600      	movs	r6, #0
 800027a:	f000 f819 	bl	80002b0 <_init>
 800027e:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <__libc_init_array+0x40>)
 8000280:	4d0a      	ldr	r5, [pc, #40]	; (80002ac <__libc_init_array+0x44>)
 8000282:	1b64      	subs	r4, r4, r5
 8000284:	10a4      	asrs	r4, r4, #2
 8000286:	42a6      	cmp	r6, r4
 8000288:	d105      	bne.n	8000296 <__libc_init_array+0x2e>
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	00b3      	lsls	r3, r6, #2
 800028e:	58eb      	ldr	r3, [r5, r3]
 8000290:	4798      	blx	r3
 8000292:	3601      	adds	r6, #1
 8000294:	e7ee      	b.n	8000274 <__libc_init_array+0xc>
 8000296:	00b3      	lsls	r3, r6, #2
 8000298:	58eb      	ldr	r3, [r5, r3]
 800029a:	4798      	blx	r3
 800029c:	3601      	adds	r6, #1
 800029e:	e7f2      	b.n	8000286 <__libc_init_array+0x1e>
 80002a0:	080002c8 	.word	0x080002c8
 80002a4:	080002c8 	.word	0x080002c8
 80002a8:	080002cc 	.word	0x080002cc
 80002ac:	080002c8 	.word	0x080002c8

080002b0 <_init>:
 80002b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	469e      	mov	lr, r3
 80002ba:	4770      	bx	lr

080002bc <_fini>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr
