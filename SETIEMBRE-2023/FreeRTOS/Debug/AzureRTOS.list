
AzureRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000358c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200035f8  200035f8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012bec  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040fc  00000000  00000000  00032ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009d5  00000000  00000000  00037bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024eef  00000000  00000000  0003858d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000174ed  00000000  00000000  0005d47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0ebb  00000000  00000000  00074969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000367c  00000000  00000000  00145824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000118  00000000  00000000  00148ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a0c 	.word	0x08004a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004a0c 	.word	0x08004a0c

080001d0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001d0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001d2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001d6:	4919      	ldr	r1, [pc, #100]	; (800023c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001d8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001dc:	4818      	ldr	r0, [pc, #96]	; (8000240 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001de:	4917      	ldr	r1, [pc, #92]	; (800023c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001e0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001e2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001e4:	4817      	ldr	r0, [pc, #92]	; (8000244 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001e6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001e8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001ec:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001ee:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80001f2:	4915      	ldr	r1, [pc, #84]	; (8000248 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 80001f4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 80001f6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 80001fa:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 80001fc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000200:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000204:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000208:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800020c:	490f      	ldr	r1, [pc, #60]	; (800024c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800020e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000212:	4770      	bx	lr

08000214 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000214:	f7ff bffe 	b.w	8000214 <__tx_BadHandler>

08000218 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000218:	f7ff bffe 	b.w	8000218 <__tx_HardfaultHandler>

0800021c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800021c:	f7ff bffe 	b.w	800021c <__tx_SVCallHandler>

08000220 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000220:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000222:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000226:	4770      	bx	lr

08000228 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000228:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800022a:	f000 f891 	bl	8000350 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800022e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000232:	4770      	bx	lr

08000234 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000234:	f7ff bffe 	b.w	8000234 <__tx_NMIHandler>

08000238 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000238:	f7ff bffe 	b.w	8000238 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800023c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000240:	20002ea0 	.word	0x20002ea0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000244:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000248:	0019a27f 	.word	0x0019a27f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800024c:	40ff0000 	.word	0x40ff0000

08000250 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000250:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000254:	4a2a      	ldr	r2, [pc, #168]	; (8000300 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000256:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000258:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800025c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000260:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000264:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000266:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800026a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800026e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000272:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000276:	f3bf 8f6f 	isb	sy

0800027a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800027a:	e7fe      	b.n	800027a <__tx_wait_here>

0800027c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800027c:	4821      	ldr	r0, [pc, #132]	; (8000304 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800027e:	4a22      	ldr	r2, [pc, #136]	; (8000308 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000280:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000284:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000286:	b191      	cbz	r1, 80002ae <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000288:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800028a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800028e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000292:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000296:	d101      	bne.n	800029c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000298:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800029c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800029c:	4c1b      	ldr	r4, [pc, #108]	; (800030c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800029e:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002a2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002a4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002a8:	b10d      	cbz	r5, 80002ae <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002aa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002ac:	6023      	str	r3, [r4, #0]

080002ae <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ae:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002b0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002b2:	b1b1      	cbz	r1, 80002e2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002b4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002b6:	b662      	cpsie	i

080002b8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002b8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ba:	4c14      	ldr	r4, [pc, #80]	; (800030c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002bc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002be:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002c2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002c4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002c6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002ca:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002ce:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002d2:	d101      	bne.n	80002d8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002d4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002d8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002d8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002dc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002e0:	4770      	bx	lr

080002e2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002e2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002e4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002e6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002e8:	b909      	cbnz	r1, 80002ee <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80002ea:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80002ec:	e7f9      	b.n	80002e2 <__tx_ts_wait>

080002ee <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80002ee:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80002f2:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80002f6:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 80002fa:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 80002fc:	e7dc      	b.n	80002b8 <__tx_ts_restore>

080002fe <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 80002fe:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000300:	20002f3c 	.word	0x20002f3c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000304:	20002ea4 	.word	0x20002ea4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000308:	20002ea8 	.word	0x20002ea8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030c:	200034a8 	.word	0x200034a8

08000310 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000310:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000312:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000316:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800031a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800031e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000320:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000324:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000326:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000328:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800032a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800032c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800032e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000330:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000332:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000334:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000336:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000338:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800033c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800033e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000342:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000344:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000346:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800034a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800034c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800034e:	4770      	bx	lr

08000350 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000350:	4922      	ldr	r1, [pc, #136]	; (80003dc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000352:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000354:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000358:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800035c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800035e:	b13a      	cbz	r2, 8000370 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000360:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000364:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000366:	b91a      	cbnz	r2, 8000370 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800036a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800036e:	6018      	str	r0, [r3, #0]

08000370 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000370:	491d      	ldr	r1, [pc, #116]	; (80003e8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000372:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000374:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000376:	b122      	cbz	r2, 8000382 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800037a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800037e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000380:	e008      	b.n	8000394 <__tx_timer_done>

08000382 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000382:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000386:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000388:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800038a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800038c:	d101      	bne.n	8000392 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000390:	6818      	ldr	r0, [r3, #0]

08000392 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000392:	6008      	str	r0, [r1, #0]

08000394 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000396:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000398:	b912      	cbnz	r2, 80003a0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800039a:	4914      	ldr	r1, [pc, #80]	; (80003ec <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800039c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800039e:	b1d0      	cbz	r0, 80003d6 <__tx_timer_nothing_expired>

080003a0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003a0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003a4:	4911      	ldr	r1, [pc, #68]	; (80003ec <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003a6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003a8:	b108      	cbz	r0, 80003ae <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003aa:	f002 ffcf 	bl	800334c <_tx_timer_expiration_process>

080003ae <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003b0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003b2:	b172      	cbz	r2, 80003d2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003b4:	f002 ff3c 	bl	8003230 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003b8:	480f      	ldr	r0, [pc, #60]	; (80003f8 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ba:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003bc:	b949      	cbnz	r1, 80003d2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003be:	480f      	ldr	r0, [pc, #60]	; (80003fc <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003c0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c2:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003c4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003c6:	480f      	ldr	r0, [pc, #60]	; (8000404 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003cc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ce:	d000      	beq.n	80003d2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003d0:	6002      	str	r2, [r0, #0]

080003d2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003d6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003d6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003da:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003dc:	20002f48 	.word	0x20002f48
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003e0:	200034a8 	.word	0x200034a8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003e4:	20002f4c 	.word	0x20002f4c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e8:	20002fd8 	.word	0x20002fd8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003ec:	20002fdc 	.word	0x20002fdc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003f0:	20002fd4 	.word	0x20002fd4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003f4:	20002fd0 	.word	0x20002fd0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f8:	20002f3c 	.word	0x20002f3c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003fc:	20002ea4 	.word	0x20002ea4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000400:	20002ea8 	.word	0x20002ea8
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000404:	e000ed04 	.word	0xe000ed04
	...

08000410 <memchr>:
 8000410:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000414:	2a10      	cmp	r2, #16
 8000416:	db2b      	blt.n	8000470 <memchr+0x60>
 8000418:	f010 0f07 	tst.w	r0, #7
 800041c:	d008      	beq.n	8000430 <memchr+0x20>
 800041e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000422:	3a01      	subs	r2, #1
 8000424:	428b      	cmp	r3, r1
 8000426:	d02d      	beq.n	8000484 <memchr+0x74>
 8000428:	f010 0f07 	tst.w	r0, #7
 800042c:	b342      	cbz	r2, 8000480 <memchr+0x70>
 800042e:	d1f6      	bne.n	800041e <memchr+0xe>
 8000430:	b4f0      	push	{r4, r5, r6, r7}
 8000432:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000436:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800043a:	f022 0407 	bic.w	r4, r2, #7
 800043e:	f07f 0700 	mvns.w	r7, #0
 8000442:	2300      	movs	r3, #0
 8000444:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000448:	3c08      	subs	r4, #8
 800044a:	ea85 0501 	eor.w	r5, r5, r1
 800044e:	ea86 0601 	eor.w	r6, r6, r1
 8000452:	fa85 f547 	uadd8	r5, r5, r7
 8000456:	faa3 f587 	sel	r5, r3, r7
 800045a:	fa86 f647 	uadd8	r6, r6, r7
 800045e:	faa5 f687 	sel	r6, r5, r7
 8000462:	b98e      	cbnz	r6, 8000488 <memchr+0x78>
 8000464:	d1ee      	bne.n	8000444 <memchr+0x34>
 8000466:	bcf0      	pop	{r4, r5, r6, r7}
 8000468:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800046c:	f002 0207 	and.w	r2, r2, #7
 8000470:	b132      	cbz	r2, 8000480 <memchr+0x70>
 8000472:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000476:	3a01      	subs	r2, #1
 8000478:	ea83 0301 	eor.w	r3, r3, r1
 800047c:	b113      	cbz	r3, 8000484 <memchr+0x74>
 800047e:	d1f8      	bne.n	8000472 <memchr+0x62>
 8000480:	2000      	movs	r0, #0
 8000482:	4770      	bx	lr
 8000484:	3801      	subs	r0, #1
 8000486:	4770      	bx	lr
 8000488:	2d00      	cmp	r5, #0
 800048a:	bf06      	itte	eq
 800048c:	4635      	moveq	r5, r6
 800048e:	3803      	subeq	r0, #3
 8000490:	3807      	subne	r0, #7
 8000492:	f015 0f01 	tst.w	r5, #1
 8000496:	d107      	bne.n	80004a8 <memchr+0x98>
 8000498:	3001      	adds	r0, #1
 800049a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800049e:	bf02      	ittt	eq
 80004a0:	3001      	addeq	r0, #1
 80004a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004a6:	3001      	addeq	r0, #1
 80004a8:	bcf0      	pop	{r4, r5, r6, r7}
 80004aa:	3801      	subs	r0, #1
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <__aeabi_uldivmod>:
 80004b0:	b953      	cbnz	r3, 80004c8 <__aeabi_uldivmod+0x18>
 80004b2:	b94a      	cbnz	r2, 80004c8 <__aeabi_uldivmod+0x18>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	bf08      	it	eq
 80004b8:	2800      	cmpeq	r0, #0
 80004ba:	bf1c      	itt	ne
 80004bc:	f04f 31ff 	movne.w	r1, #4294967295
 80004c0:	f04f 30ff 	movne.w	r0, #4294967295
 80004c4:	f000 b970 	b.w	80007a8 <__aeabi_idiv0>
 80004c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004dc:	b004      	add	sp, #16
 80004de:	4770      	bx	lr

080004e0 <__udivmoddi4>:
 80004e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e4:	9e08      	ldr	r6, [sp, #32]
 80004e6:	460d      	mov	r5, r1
 80004e8:	4604      	mov	r4, r0
 80004ea:	460f      	mov	r7, r1
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d14a      	bne.n	8000586 <__udivmoddi4+0xa6>
 80004f0:	428a      	cmp	r2, r1
 80004f2:	4694      	mov	ip, r2
 80004f4:	d965      	bls.n	80005c2 <__udivmoddi4+0xe2>
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	b143      	cbz	r3, 800050e <__udivmoddi4+0x2e>
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	f1c3 0220 	rsb	r2, r3, #32
 8000504:	409f      	lsls	r7, r3
 8000506:	fa20 f202 	lsr.w	r2, r0, r2
 800050a:	4317      	orrs	r7, r2
 800050c:	409c      	lsls	r4, r3
 800050e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000512:	fa1f f58c 	uxth.w	r5, ip
 8000516:	fbb7 f1fe 	udiv	r1, r7, lr
 800051a:	0c22      	lsrs	r2, r4, #16
 800051c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000520:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000524:	fb01 f005 	mul.w	r0, r1, r5
 8000528:	4290      	cmp	r0, r2
 800052a:	d90a      	bls.n	8000542 <__udivmoddi4+0x62>
 800052c:	eb1c 0202 	adds.w	r2, ip, r2
 8000530:	f101 37ff 	add.w	r7, r1, #4294967295
 8000534:	f080 811c 	bcs.w	8000770 <__udivmoddi4+0x290>
 8000538:	4290      	cmp	r0, r2
 800053a:	f240 8119 	bls.w	8000770 <__udivmoddi4+0x290>
 800053e:	3902      	subs	r1, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a12      	subs	r2, r2, r0
 8000544:	b2a4      	uxth	r4, r4
 8000546:	fbb2 f0fe 	udiv	r0, r2, lr
 800054a:	fb0e 2210 	mls	r2, lr, r0, r2
 800054e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000552:	fb00 f505 	mul.w	r5, r0, r5
 8000556:	42a5      	cmp	r5, r4
 8000558:	d90a      	bls.n	8000570 <__udivmoddi4+0x90>
 800055a:	eb1c 0404 	adds.w	r4, ip, r4
 800055e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000562:	f080 8107 	bcs.w	8000774 <__udivmoddi4+0x294>
 8000566:	42a5      	cmp	r5, r4
 8000568:	f240 8104 	bls.w	8000774 <__udivmoddi4+0x294>
 800056c:	4464      	add	r4, ip
 800056e:	3802      	subs	r0, #2
 8000570:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000574:	1b64      	subs	r4, r4, r5
 8000576:	2100      	movs	r1, #0
 8000578:	b11e      	cbz	r6, 8000582 <__udivmoddi4+0xa2>
 800057a:	40dc      	lsrs	r4, r3
 800057c:	2300      	movs	r3, #0
 800057e:	e9c6 4300 	strd	r4, r3, [r6]
 8000582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000586:	428b      	cmp	r3, r1
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0xbc>
 800058a:	2e00      	cmp	r6, #0
 800058c:	f000 80ed 	beq.w	800076a <__udivmoddi4+0x28a>
 8000590:	2100      	movs	r1, #0
 8000592:	e9c6 0500 	strd	r0, r5, [r6]
 8000596:	4608      	mov	r0, r1
 8000598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059c:	fab3 f183 	clz	r1, r3
 80005a0:	2900      	cmp	r1, #0
 80005a2:	d149      	bne.n	8000638 <__udivmoddi4+0x158>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d302      	bcc.n	80005ae <__udivmoddi4+0xce>
 80005a8:	4282      	cmp	r2, r0
 80005aa:	f200 80f8 	bhi.w	800079e <__udivmoddi4+0x2be>
 80005ae:	1a84      	subs	r4, r0, r2
 80005b0:	eb65 0203 	sbc.w	r2, r5, r3
 80005b4:	2001      	movs	r0, #1
 80005b6:	4617      	mov	r7, r2
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d0e2      	beq.n	8000582 <__udivmoddi4+0xa2>
 80005bc:	e9c6 4700 	strd	r4, r7, [r6]
 80005c0:	e7df      	b.n	8000582 <__udivmoddi4+0xa2>
 80005c2:	b902      	cbnz	r2, 80005c6 <__udivmoddi4+0xe6>
 80005c4:	deff      	udf	#255	; 0xff
 80005c6:	fab2 f382 	clz	r3, r2
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	f040 8090 	bne.w	80006f0 <__udivmoddi4+0x210>
 80005d0:	1a8a      	subs	r2, r1, r2
 80005d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d6:	fa1f fe8c 	uxth.w	lr, ip
 80005da:	2101      	movs	r1, #1
 80005dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80005e0:	fb07 2015 	mls	r0, r7, r5, r2
 80005e4:	0c22      	lsrs	r2, r4, #16
 80005e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80005ea:	fb0e f005 	mul.w	r0, lr, r5
 80005ee:	4290      	cmp	r0, r2
 80005f0:	d908      	bls.n	8000604 <__udivmoddi4+0x124>
 80005f2:	eb1c 0202 	adds.w	r2, ip, r2
 80005f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80005fa:	d202      	bcs.n	8000602 <__udivmoddi4+0x122>
 80005fc:	4290      	cmp	r0, r2
 80005fe:	f200 80cb 	bhi.w	8000798 <__udivmoddi4+0x2b8>
 8000602:	4645      	mov	r5, r8
 8000604:	1a12      	subs	r2, r2, r0
 8000606:	b2a4      	uxth	r4, r4
 8000608:	fbb2 f0f7 	udiv	r0, r2, r7
 800060c:	fb07 2210 	mls	r2, r7, r0, r2
 8000610:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000614:	fb0e fe00 	mul.w	lr, lr, r0
 8000618:	45a6      	cmp	lr, r4
 800061a:	d908      	bls.n	800062e <__udivmoddi4+0x14e>
 800061c:	eb1c 0404 	adds.w	r4, ip, r4
 8000620:	f100 32ff 	add.w	r2, r0, #4294967295
 8000624:	d202      	bcs.n	800062c <__udivmoddi4+0x14c>
 8000626:	45a6      	cmp	lr, r4
 8000628:	f200 80bb 	bhi.w	80007a2 <__udivmoddi4+0x2c2>
 800062c:	4610      	mov	r0, r2
 800062e:	eba4 040e 	sub.w	r4, r4, lr
 8000632:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000636:	e79f      	b.n	8000578 <__udivmoddi4+0x98>
 8000638:	f1c1 0720 	rsb	r7, r1, #32
 800063c:	408b      	lsls	r3, r1
 800063e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000642:	ea4c 0c03 	orr.w	ip, ip, r3
 8000646:	fa05 f401 	lsl.w	r4, r5, r1
 800064a:	fa20 f307 	lsr.w	r3, r0, r7
 800064e:	40fd      	lsrs	r5, r7
 8000650:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000654:	4323      	orrs	r3, r4
 8000656:	fbb5 f8f9 	udiv	r8, r5, r9
 800065a:	fa1f fe8c 	uxth.w	lr, ip
 800065e:	fb09 5518 	mls	r5, r9, r8, r5
 8000662:	0c1c      	lsrs	r4, r3, #16
 8000664:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000668:	fb08 f50e 	mul.w	r5, r8, lr
 800066c:	42a5      	cmp	r5, r4
 800066e:	fa02 f201 	lsl.w	r2, r2, r1
 8000672:	fa00 f001 	lsl.w	r0, r0, r1
 8000676:	d90b      	bls.n	8000690 <__udivmoddi4+0x1b0>
 8000678:	eb1c 0404 	adds.w	r4, ip, r4
 800067c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000680:	f080 8088 	bcs.w	8000794 <__udivmoddi4+0x2b4>
 8000684:	42a5      	cmp	r5, r4
 8000686:	f240 8085 	bls.w	8000794 <__udivmoddi4+0x2b4>
 800068a:	f1a8 0802 	sub.w	r8, r8, #2
 800068e:	4464      	add	r4, ip
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	b29d      	uxth	r5, r3
 8000694:	fbb4 f3f9 	udiv	r3, r4, r9
 8000698:	fb09 4413 	mls	r4, r9, r3, r4
 800069c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80006a4:	45a6      	cmp	lr, r4
 80006a6:	d908      	bls.n	80006ba <__udivmoddi4+0x1da>
 80006a8:	eb1c 0404 	adds.w	r4, ip, r4
 80006ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80006b0:	d26c      	bcs.n	800078c <__udivmoddi4+0x2ac>
 80006b2:	45a6      	cmp	lr, r4
 80006b4:	d96a      	bls.n	800078c <__udivmoddi4+0x2ac>
 80006b6:	3b02      	subs	r3, #2
 80006b8:	4464      	add	r4, ip
 80006ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006be:	fba3 9502 	umull	r9, r5, r3, r2
 80006c2:	eba4 040e 	sub.w	r4, r4, lr
 80006c6:	42ac      	cmp	r4, r5
 80006c8:	46c8      	mov	r8, r9
 80006ca:	46ae      	mov	lr, r5
 80006cc:	d356      	bcc.n	800077c <__udivmoddi4+0x29c>
 80006ce:	d053      	beq.n	8000778 <__udivmoddi4+0x298>
 80006d0:	b156      	cbz	r6, 80006e8 <__udivmoddi4+0x208>
 80006d2:	ebb0 0208 	subs.w	r2, r0, r8
 80006d6:	eb64 040e 	sbc.w	r4, r4, lr
 80006da:	fa04 f707 	lsl.w	r7, r4, r7
 80006de:	40ca      	lsrs	r2, r1
 80006e0:	40cc      	lsrs	r4, r1
 80006e2:	4317      	orrs	r7, r2
 80006e4:	e9c6 7400 	strd	r7, r4, [r6]
 80006e8:	4618      	mov	r0, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f0:	f1c3 0120 	rsb	r1, r3, #32
 80006f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006f8:	fa20 f201 	lsr.w	r2, r0, r1
 80006fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000700:	409d      	lsls	r5, r3
 8000702:	432a      	orrs	r2, r5
 8000704:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000708:	fa1f fe8c 	uxth.w	lr, ip
 800070c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000710:	fb07 1510 	mls	r5, r7, r0, r1
 8000714:	0c11      	lsrs	r1, r2, #16
 8000716:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800071a:	fb00 f50e 	mul.w	r5, r0, lr
 800071e:	428d      	cmp	r5, r1
 8000720:	fa04 f403 	lsl.w	r4, r4, r3
 8000724:	d908      	bls.n	8000738 <__udivmoddi4+0x258>
 8000726:	eb1c 0101 	adds.w	r1, ip, r1
 800072a:	f100 38ff 	add.w	r8, r0, #4294967295
 800072e:	d22f      	bcs.n	8000790 <__udivmoddi4+0x2b0>
 8000730:	428d      	cmp	r5, r1
 8000732:	d92d      	bls.n	8000790 <__udivmoddi4+0x2b0>
 8000734:	3802      	subs	r0, #2
 8000736:	4461      	add	r1, ip
 8000738:	1b49      	subs	r1, r1, r5
 800073a:	b292      	uxth	r2, r2
 800073c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000740:	fb07 1115 	mls	r1, r7, r5, r1
 8000744:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000748:	fb05 f10e 	mul.w	r1, r5, lr
 800074c:	4291      	cmp	r1, r2
 800074e:	d908      	bls.n	8000762 <__udivmoddi4+0x282>
 8000750:	eb1c 0202 	adds.w	r2, ip, r2
 8000754:	f105 38ff 	add.w	r8, r5, #4294967295
 8000758:	d216      	bcs.n	8000788 <__udivmoddi4+0x2a8>
 800075a:	4291      	cmp	r1, r2
 800075c:	d914      	bls.n	8000788 <__udivmoddi4+0x2a8>
 800075e:	3d02      	subs	r5, #2
 8000760:	4462      	add	r2, ip
 8000762:	1a52      	subs	r2, r2, r1
 8000764:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000768:	e738      	b.n	80005dc <__udivmoddi4+0xfc>
 800076a:	4631      	mov	r1, r6
 800076c:	4630      	mov	r0, r6
 800076e:	e708      	b.n	8000582 <__udivmoddi4+0xa2>
 8000770:	4639      	mov	r1, r7
 8000772:	e6e6      	b.n	8000542 <__udivmoddi4+0x62>
 8000774:	4610      	mov	r0, r2
 8000776:	e6fb      	b.n	8000570 <__udivmoddi4+0x90>
 8000778:	4548      	cmp	r0, r9
 800077a:	d2a9      	bcs.n	80006d0 <__udivmoddi4+0x1f0>
 800077c:	ebb9 0802 	subs.w	r8, r9, r2
 8000780:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000784:	3b01      	subs	r3, #1
 8000786:	e7a3      	b.n	80006d0 <__udivmoddi4+0x1f0>
 8000788:	4645      	mov	r5, r8
 800078a:	e7ea      	b.n	8000762 <__udivmoddi4+0x282>
 800078c:	462b      	mov	r3, r5
 800078e:	e794      	b.n	80006ba <__udivmoddi4+0x1da>
 8000790:	4640      	mov	r0, r8
 8000792:	e7d1      	b.n	8000738 <__udivmoddi4+0x258>
 8000794:	46d0      	mov	r8, sl
 8000796:	e77b      	b.n	8000690 <__udivmoddi4+0x1b0>
 8000798:	3d02      	subs	r5, #2
 800079a:	4462      	add	r2, ip
 800079c:	e732      	b.n	8000604 <__udivmoddi4+0x124>
 800079e:	4608      	mov	r0, r1
 80007a0:	e70a      	b.n	80005b8 <__udivmoddi4+0xd8>
 80007a2:	4464      	add	r4, ip
 80007a4:	3802      	subs	r0, #2
 80007a6:	e742      	b.n	800062e <__udivmoddi4+0x14e>

080007a8 <__aeabi_idiv0>:
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop

080007ac <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007b4:	2334      	movs	r3, #52	; 0x34
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <tx_application_define+0x34>)
 80007be:	4909      	ldr	r1, [pc, #36]	; (80007e4 <tx_application_define+0x38>)
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <tx_application_define+0x3c>)
 80007c2:	f003 f86d 	bl	80038a0 <_txe_byte_pool_create>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d104      	bne.n	80007d6 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <tx_application_define+0x3c>)
 80007ce:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f000 f82f 	bl	8000834 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000088 	.word	0x20000088
 80007e4:	08004a24 	.word	0x08004a24
 80007e8:	20002888 	.word	0x20002888

080007ec <main_thread_entry>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */


void main_thread_entry(ULONG param){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	printf("[MAIN] Main thread init ......");
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <main_thread_entry+0x1c>)
 80007f6:	f003 fa95 	bl	8003d24 <iprintf>
	for(;;){
		printf("Main task running...");
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <main_thread_entry+0x20>)
 80007fc:	f003 fa92 	bl	8003d24 <iprintf>
		tx_thread_sleep(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f002 fa43 	bl	8002c8c <_tx_thread_sleep>
		printf("Main task running...");
 8000806:	e7f8      	b.n	80007fa <main_thread_entry+0xe>
 8000808:	08004a38 	.word	0x08004a38
 800080c:	08004a58 	.word	0x08004a58

08000810 <button_thread_entry>:
	}
}

void button_thread_entry(ULONG param){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]


	printf("[BUTTON] button thread init ......");
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <button_thread_entry+0x1c>)
 800081a:	f003 fa83 	bl	8003d24 <iprintf>
	for(;;){
		printf("button task running...");
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <button_thread_entry+0x20>)
 8000820:	f003 fa80 	bl	8003d24 <iprintf>
		tx_thread_sleep(150);
 8000824:	2096      	movs	r0, #150	; 0x96
 8000826:	f002 fa31 	bl	8002c8c <_tx_thread_sleep>
		printf("button task running...");
 800082a:	e7f8      	b.n	800081e <button_thread_entry+0xe>
 800082c:	08004a70 	.word	0x08004a70
 8000830:	08004a94 	.word	0x08004a94

08000834 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af08      	add	r7, sp, #32
 800083a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN App_ThreadX_Init */
  char * pointer;
  /* USER CODE END App_ThreadX_Init */
  //reserva memoria para el stack de la tarea main
  if(tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT) != TX_SUCCESS){
 8000844:	f107 010c 	add.w	r1, r7, #12
 8000848:	2300      	movs	r3, #0
 800084a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800084e:	6938      	ldr	r0, [r7, #16]
 8000850:	f002 ffb2 	bl	80037b8 <_txe_byte_allocate>

  }

  ret = tx_thread_create(&mainTask,
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	22b0      	movs	r2, #176	; 0xb0
 8000858:	9206      	str	r2, [sp, #24]
 800085a:	2201      	movs	r2, #1
 800085c:	9205      	str	r2, [sp, #20]
 800085e:	2200      	movs	r2, #0
 8000860:	9204      	str	r2, [sp, #16]
 8000862:	2202      	movs	r2, #2
 8000864:	9203      	str	r2, [sp, #12]
 8000866:	2202      	movs	r2, #2
 8000868:	9202      	str	r2, [sp, #8]
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	9201      	str	r2, [sp, #4]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2300      	movs	r3, #0
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <App_ThreadX_Init+0x84>)
 8000876:	4911      	ldr	r1, [pc, #68]	; (80008bc <App_ThreadX_Init+0x88>)
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <App_ThreadX_Init+0x8c>)
 800087a:	f003 f8b1 	bl	80039e0 <_txe_thread_create>
 800087e:	6178      	str	r0, [r7, #20]
						  TX_NO_TIME_SLICE, TX_AUTO_START);
  if(ret != TX_SUCCESS){

  }

  ret = tx_thread_create(&buttonTask,
 8000880:	23b0      	movs	r3, #176	; 0xb0
 8000882:	9306      	str	r3, [sp, #24]
 8000884:	2301      	movs	r3, #1
 8000886:	9305      	str	r3, [sp, #20]
 8000888:	2300      	movs	r3, #0
 800088a:	9304      	str	r3, [sp, #16]
 800088c:	2304      	movs	r3, #4
 800088e:	9303      	str	r3, [sp, #12]
 8000890:	2304      	movs	r3, #4
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <App_ThreadX_Init+0x90>)
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <App_ThreadX_Init+0x94>)
 80008a2:	490a      	ldr	r1, [pc, #40]	; (80008cc <App_ThreadX_Init+0x98>)
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <App_ThreadX_Init+0x9c>)
 80008a6:	f003 f89b 	bl	80039e0 <_txe_thread_create>
 80008aa:	6178      	str	r0, [r7, #20]
  						  button_stack,
  						  1024,
  						  4,
  						  4,
  						  TX_NO_TIME_SLICE, TX_AUTO_START);
  return ret;
 80008ac:	697b      	ldr	r3, [r7, #20]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	080007ed 	.word	0x080007ed
 80008bc:	08004aac 	.word	0x08004aac
 80008c0:	200028bc 	.word	0x200028bc
 80008c4:	20002a1c 	.word	0x20002a1c
 80008c8:	08000811 	.word	0x08000811
 80008cc:	08004ab8 	.word	0x08004ab8
 80008d0:	2000296c 	.word	0x2000296c

080008d4 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008d8:	f002 f830 	bl	800293c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2c      	ldr	r2, [pc, #176]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a25      	ldr	r2, [pc, #148]	; (80009b0 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <MX_GPIO_Init+0xd0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096c:	4811      	ldr	r0, [pc, #68]	; (80009b4 <MX_GPIO_Init+0xd4>)
 800096e:	f000 fd3d 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <MX_GPIO_Init+0xd8>)
 8000986:	f000 fb95 	bl	80010b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_GPIO_Init+0xd4>)
 80009a4:	f000 fb86 	bl	80010b4 <HAL_GPIO_Init>

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020000 	.word	0x40020000

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fa54 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f806 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f7ff ff8a 	bl	80008e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009cc:	f7ff ff82 	bl	80008d4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <main+0x14>
	...

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	2230      	movs	r2, #48	; 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f9f3 	bl	8003dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <SystemClock_Config+0xcc>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a30:	2301      	movs	r3, #1
 8000a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a48:	23a8      	movs	r3, #168	; 0xa8
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fce1 	bl	8001420 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a64:	f000 f832 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2105      	movs	r1, #5
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 ff42 	bl	8001910 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a92:	f000 f81b 	bl	8000acc <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3750      	adds	r7, #80	; 0x50
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40007000 	.word	0x40007000

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f9f9 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40001000 	.word	0x40001000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a32      	ldr	r2, [pc, #200]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <HAL_InitTick+0xe4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b54:	f107 0210 	add.w	r2, r7, #16
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f8e2 	bl	8001d28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b6e:	f001 f8c7 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8000b72:	6378      	str	r0, [r7, #52]	; 0x34
 8000b74:	e004      	b.n	8000b80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b76:	f001 f8c3 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b82:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <HAL_InitTick+0xe8>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	0c9b      	lsrs	r3, r3, #18
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <HAL_InitTick+0xec>)
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <HAL_InitTick+0xf0>)
 8000b92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <HAL_InitTick+0xec>)
 8000b96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_InitTick+0xec>)
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <HAL_InitTick+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_InitTick+0xec>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_InitTick+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb4:	4817      	ldr	r0, [pc, #92]	; (8000c14 <HAL_InitTick+0xec>)
 8000bb6:	f001 f8e9 	bl	8001d8c <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11b      	bne.n	8000c00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <HAL_InitTick+0xec>)
 8000bca:	f001 f939 	bl	8001e40 <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d111      	bne.n	8000c00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bdc:	2036      	movs	r0, #54	; 0x36
 8000bde:	f000 fa5b 	bl	8001098 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d808      	bhi.n	8000bfa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2036      	movs	r0, #54	; 0x36
 8000bee:	f000 fa37 	bl	8001060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_InitTick+0xf4>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e002      	b.n	8000c00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3738      	adds	r7, #56	; 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20002e1c 	.word	0x20002e1c
 8000c18:	40001000 	.word	0x40001000
 8000c1c:	20000004 	.word	0x20000004

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f001 f965 	bl	8001f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20002e1c 	.word	0x20002e1c

08000c60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d013      	beq.n	8000ca0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00b      	beq.n	8000ca0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c88:	e000      	b.n	8000c8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f9      	beq.n	8000c8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e00a      	b.n	8000cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc0:	f3af 8000 	nop.w
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	60ba      	str	r2, [r7, #8]
 8000ccc:	b2ca      	uxtb	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf0      	blt.n	8000cc0 <_read+0x12>
  }

  return len;
 8000cde:	687b      	ldr	r3, [r7, #4]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e009      	b.n	8000d0e <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ffac 	bl	8000c60 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbf1      	blt.n	8000cfa <_write+0x12>
  }
  return len;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_close>:

int _close(int file)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d48:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_isatty>:

int _isatty(int file)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f003 f858 	bl	8003e6c <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	20002e64 	.word	0x20002e64
 8000df0:	200035f8 	.word	0x200035f8

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f003 f817 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fdb7 	bl	80009bc <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e5c:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 8000e60:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e64:	200035f8 	.word	0x200035f8

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8d8 	bl	800104a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff fe44 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe1a 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20002e68 	.word	0x20002e68

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20002e68 	.word	0x20002e68

08000ef0 <__NVIC_SetPriorityGrouping>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4c 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001072:	f7ff ff61 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff ffb1 	bl	8000fe4 <NVIC_EncodePriority>
 8001082:	4602      	mov	r2, r0
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <__NVIC_SetPriority>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e16b      	b.n	80013a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 815a 	bne.w	80013a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	2b02      	cmp	r3, #2
 8001104:	d130      	bne.n	8001168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	f003 0201 	and.w	r2, r3, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b03      	cmp	r3, #3
 8001172:	d017      	beq.n	80011a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d123      	bne.n	80011f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	69b9      	ldr	r1, [r7, #24]
 80011f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80b4 	beq.w	80013a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a5f      	ldr	r2, [pc, #380]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <HAL_GPIO_Init+0x30c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a5b      	ldr	r2, [pc, #364]	; (80013c4 <HAL_GPIO_Init+0x310>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <HAL_GPIO_Init+0x314>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d02b      	beq.n	80012da <HAL_GPIO_Init+0x226>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a51      	ldr	r2, [pc, #324]	; (80013cc <HAL_GPIO_Init+0x318>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a50      	ldr	r2, [pc, #320]	; (80013d0 <HAL_GPIO_Init+0x31c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <HAL_GPIO_Init+0x320>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x21a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4e      	ldr	r2, [pc, #312]	; (80013d8 <HAL_GPIO_Init+0x324>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x216>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4d      	ldr	r2, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x328>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x212>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4c      	ldr	r2, [pc, #304]	; (80013e0 <HAL_GPIO_Init+0x32c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x20e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_GPIO_Init+0x330>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x20a>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x228>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x310>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_GPIO_Init+0x334>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_GPIO_Init+0x334>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae90 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e267      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d075      	beq.n	800152a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d00c      	beq.n	8001464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b85      	ldr	r3, [pc, #532]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001452:	2b08      	cmp	r3, #8
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001462:	d10b      	bne.n	800147c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d05b      	beq.n	8001528 <HAL_RCC_OscConfig+0x108>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d157      	bne.n	8001528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e242      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001484:	d106      	bne.n	8001494 <HAL_RCC_OscConfig+0x74>
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x98>
 800149e:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6f      	ldr	r2, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6d      	ldr	r3, [pc, #436]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6c      	ldr	r2, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xb0>
 80014b8:	4b69      	ldr	r3, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a68      	ldr	r2, [pc, #416]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b66      	ldr	r3, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a65      	ldr	r2, [pc, #404]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcfe 	bl	8000ed8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcfa 	bl	8000ed8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e207      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xc0>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcea 	bl	8000ed8 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fce6 	bl	8000ed8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1f3      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b51      	ldr	r3, [pc, #324]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0xe8>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b41      	ldr	r3, [pc, #260]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c7      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4937      	ldr	r1, [pc, #220]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x244>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fc9f 	bl	8000ed8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc9b 	bl	8000ed8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a8      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4925      	ldr	r1, [pc, #148]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_RCC_OscConfig+0x244>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc7e 	bl	8000ed8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc7a 	bl	8000ed8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e187      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d036      	beq.n	8001678 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d016      	beq.n	8001640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x248>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fc5e 	bl	8000ed8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc5a 	bl	8000ed8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e167      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x240>)
 8001634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x200>
 800163e:	e01b      	b.n	8001678 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_OscConfig+0x248>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fc47 	bl	8000ed8 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	e00e      	b.n	800166c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fc43 	bl	8000ed8 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d907      	bls.n	800166c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e150      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000
 8001668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b88      	ldr	r3, [pc, #544]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ea      	bne.n	800164e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8097 	beq.w	80017b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b81      	ldr	r3, [pc, #516]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10f      	bne.n	80016b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b7d      	ldr	r3, [pc, #500]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a7c      	ldr	r2, [pc, #496]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	4b77      	ldr	r3, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c2:	4b74      	ldr	r3, [pc, #464]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a73      	ldr	r2, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ce:	f7ff fc03 	bl	8000ed8 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fbff 	bl	8000ed8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e10c      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <HAL_RCC_OscConfig+0x474>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x2ea>
 80016fc:	4b64      	ldr	r3, [pc, #400]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a63      	ldr	r2, [pc, #396]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	e01c      	b.n	8001744 <HAL_RCC_OscConfig+0x324>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x30c>
 8001712:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a5e      	ldr	r2, [pc, #376]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a5b      	ldr	r2, [pc, #364]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x324>
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001730:	4a57      	ldr	r2, [pc, #348]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	; 0x70
 8001738:	4b55      	ldr	r3, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a54      	ldr	r2, [pc, #336]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d015      	beq.n	8001778 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff fbc4 	bl	8000ed8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fbc0 	bl	8000ed8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0cb      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ee      	beq.n	8001754 <HAL_RCC_OscConfig+0x334>
 8001776:	e014      	b.n	80017a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fbae 	bl	8000ed8 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001780:	f7ff fbaa 	bl	8000ed8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0b5      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	4b3e      	ldr	r3, [pc, #248]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1ee      	bne.n	8001780 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a8:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a38      	ldr	r2, [pc, #224]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a1 	beq.w	8001900 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017be:	4b34      	ldr	r3, [pc, #208]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d05c      	beq.n	8001884 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d141      	bne.n	8001856 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb7e 	bl	8000ed8 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb7a 	bl	8000ed8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e087      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3b01      	subs	r3, #1
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	491b      	ldr	r1, [pc, #108]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x478>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb53 	bl	8000ed8 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fb4f 	bl	8000ed8 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e05c      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x416>
 8001854:	e054      	b.n	8001900 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x478>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff fb3c 	bl	8000ed8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fb38 	bl	8000ed8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e045      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_RCC_OscConfig+0x470>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x444>
 8001882:	e03d      	b.n	8001900 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e038      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000
 8001898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x4ec>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d028      	beq.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d121      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d11a      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018cc:	4013      	ands	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0cc      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b59      	ldr	r3, [pc, #356]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a58      	ldr	r2, [pc, #352]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800197c:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	494d      	ldr	r1, [pc, #308]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d044      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d119      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e07f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e067      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4934      	ldr	r1, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fa6a 	bl	8000ed8 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff fa66 	bl	8000ed8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d20c      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e032      	b.n	8001abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4916      	ldr	r1, [pc, #88]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	490e      	ldr	r1, [pc, #56]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a96:	f000 f821 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	490a      	ldr	r1, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f836 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08004adc 	.word	0x08004adc
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b094      	sub	sp, #80	; 0x50
 8001ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aec:	2300      	movs	r3, #0
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af4:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d00d      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x40>
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	f200 80e1 	bhi.w	8001cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0e:	e0db      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b14:	e0db      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1a:	e0d8      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b26:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d063      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
 8001b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b4e:	4622      	mov	r2, r4
 8001b50:	462b      	mov	r3, r5
 8001b52:	f04f 0000 	mov.w	r0, #0
 8001b56:	f04f 0100 	mov.w	r1, #0
 8001b5a:	0159      	lsls	r1, r3, #5
 8001b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b60:	0150      	lsls	r0, r2, #5
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4621      	mov	r1, r4
 8001b68:	1a51      	subs	r1, r2, r1
 8001b6a:	6139      	str	r1, [r7, #16]
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b80:	4659      	mov	r1, fp
 8001b82:	018b      	lsls	r3, r1, #6
 8001b84:	4651      	mov	r1, sl
 8001b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	018a      	lsls	r2, r1, #6
 8001b8e:	4651      	mov	r1, sl
 8001b90:	ebb2 0801 	subs.w	r8, r2, r1
 8001b94:	4659      	mov	r1, fp
 8001b96:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bae:	4690      	mov	r8, r2
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	eb18 0303 	adds.w	r3, r8, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	eb49 0303 	adc.w	r3, r9, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	024b      	lsls	r3, r1, #9
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd8:	4621      	mov	r1, r4
 8001bda:	024a      	lsls	r2, r1, #9
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be2:	2200      	movs	r2, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bec:	f7fe fc60 	bl	80004b0 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf8:	e058      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	099b      	lsrs	r3, r3, #6
 8001c00:	2200      	movs	r2, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	4611      	mov	r1, r2
 8001c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c14:	4642      	mov	r2, r8
 8001c16:	464b      	mov	r3, r9
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	0159      	lsls	r1, r3, #5
 8001c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c26:	0150      	lsls	r0, r2, #5
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c32:	4649      	mov	r1, r9
 8001c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c50:	eb63 050b 	sbc.w	r5, r3, fp
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	00eb      	lsls	r3, r5, #3
 8001c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c62:	00e2      	lsls	r2, r4, #3
 8001c64:	4614      	mov	r4, r2
 8001c66:	461d      	mov	r5, r3
 8001c68:	4643      	mov	r3, r8
 8001c6a:	18e3      	adds	r3, r4, r3
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	464b      	mov	r3, r9
 8001c70:	eb45 0303 	adc.w	r3, r5, r3
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c82:	4629      	mov	r1, r5
 8001c84:	028b      	lsls	r3, r1, #10
 8001c86:	4621      	mov	r1, r4
 8001c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	028a      	lsls	r2, r1, #10
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c96:	2200      	movs	r2, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	61fa      	str	r2, [r7, #28]
 8001c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca0:	f7fe fc06 	bl	80004b0 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4613      	mov	r3, r2
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc6:	e002      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3750      	adds	r7, #80	; 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	00f42400 	.word	0x00f42400
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0a9b      	lsrs	r3, r3, #10
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	08004aec 	.word	0x08004aec

08001d28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	220f      	movs	r2, #15
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCC_GetClockConfig+0x60>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0207 	and.w	r2, r3, #7
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e041      	b.n	8001e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f839 	bl	8001e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 f9d8 	bl	8002180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d001      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e04e      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d022      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d01d      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d010      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	e007      	b.n	8001ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8ee 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8e0 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8f1 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8c4 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8b6 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8c7 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f89a 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f88c 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f89d 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b10      	cmp	r3, #16
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2208      	movs	r2, #8
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f870 	bl	8002144 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f862 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f873 	bl	8002158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0201 	mvn.w	r2, #1
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fd02 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f902 	bl	80022d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f838 	bl	800216c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b20      	cmp	r3, #32
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0220 	mvn.w	r2, #32
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8cc 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a40      	ldr	r2, [pc, #256]	; (8002294 <TIM_Base_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d00f      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3c      	ldr	r2, [pc, #240]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d108      	bne.n	80021d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <TIM_Base_SetConfig+0x114>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d027      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <TIM_Base_SetConfig+0x118>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d023      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <TIM_Base_SetConfig+0x11c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <TIM_Base_SetConfig+0x120>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a29      	ldr	r2, [pc, #164]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d017      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <TIM_Base_SetConfig+0x128>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00f      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <TIM_Base_SetConfig+0x130>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00b      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <TIM_Base_SetConfig+0x134>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <TIM_Base_SetConfig+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <TIM_Base_SetConfig+0x13c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d108      	bne.n	8002244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <TIM_Base_SetConfig+0x114>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0xf8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <TIM_Base_SetConfig+0x124>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d103      	bne.n	8002280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800
 80022a0:	40000c00 	.word	0x40000c00
 80022a4:	40010400 	.word	0x40010400
 80022a8:	40014000 	.word	0x40014000
 80022ac:	40014400 	.word	0x40014400
 80022b0:	40014800 	.word	0x40014800
 80022b4:	40001800 	.word	0x40001800
 80022b8:	40001c00 	.word	0x40001c00
 80022bc:	40002000 	.word	0x40002000

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b096      	sub	sp, #88	; 0x58
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3303      	adds	r3, #3
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8002308:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800230a:	b672      	cpsid	i
#endif
    return(int_posture);
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800230e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002310:	4b55      	ldr	r3, [pc, #340]	; (8002468 <_tx_byte_allocate+0x180>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8002316:	2300      	movs	r3, #0
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800231e:	621a      	str	r2, [r3, #32]
 8002320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f383 8810 	msr	PRIMASK, r3
}
 800232a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f9b2 	bl	8002698 <_tx_byte_pool_search>
 8002334:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002336:	f3ef 8310 	mrs	r3, PRIMASK
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002340:	b672      	cpsid	i
    return(int_posture);
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8002344:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8002346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800234c:	2301      	movs	r3, #1
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002350:	e006      	b.n	8002360 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002358:	429a      	cmp	r2, r3
 800235a:	d101      	bne.n	8002360 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800235c:	2301      	movs	r3, #1
 800235e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8002360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0d9      	beq.n	800231a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800236a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <_tx_byte_allocate+0x9c>
 8002372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002374:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800237e:	2300      	movs	r3, #0
 8002380:	653b      	str	r3, [r7, #80]	; 0x50
 8002382:	e06c      	b.n	800245e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d061      	beq.n	800244e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <_tx_byte_allocate+0x184>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8002392:	2310      	movs	r3, #16
 8002394:	653b      	str	r3, [r7, #80]	; 0x50
 8002396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002398:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f383 8810 	msr	PRIMASK, r3
}
 80023a0:	e05d      	b.n	800245e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80023a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a4:	4a32      	ldr	r2, [pc, #200]	; (8002470 <_tx_byte_allocate+0x188>)
 80023a6:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80023b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80023d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80023ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ee:	675a      	str	r2, [r3, #116]	; 0x74
 80023f0:	e011      	b.n	8002416 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023fc:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8002404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002408:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800240e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8002410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002414:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8002416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002418:	2209      	movs	r2, #9
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	2201      	movs	r2, #1
 8002420:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <_tx_byte_allocate+0x184>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <_tx_byte_allocate+0x184>)
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002434:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f383 8810 	msr	PRIMASK, r3
}
 800243c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800243e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002440:	f000 fdde 	bl	8003000 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8002444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244a:	653b      	str	r3, [r7, #80]	; 0x50
 800244c:	e007      	b.n	800245e <_tx_byte_allocate+0x176>
 800244e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002450:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800245a:	2310      	movs	r3, #16
 800245c:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800245e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8002460:	4618      	mov	r0, r3
 8002462:	3758      	adds	r7, #88	; 0x58
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20002ea4 	.word	0x20002ea4
 800246c:	20002f3c 	.word	0x20002f3c
 8002470:	08002475 	.word	0x08002475

08002474 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08e      	sub	sp, #56	; 0x38
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800247e:	f3ef 8310 	mrs	r3, PRIMASK
 8002482:	623b      	str	r3, [r7, #32]
    return(posture);
 8002484:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8002486:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002488:	b672      	cpsid	i
    return(int_posture);
 800248a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800248c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002492:	4a33      	ldr	r2, [pc, #204]	; (8002560 <_tx_byte_pool_cleanup+0xec>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d158      	bne.n	800254a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d152      	bne.n	800254a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d04c      	beq.n	800254a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <_tx_byte_pool_cleanup+0xf0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d147      	bne.n	800254a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d043      	beq.n	800254a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
 80024e4:	e013      	b.n	800250e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d102      	bne.n	800250e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	2b09      	cmp	r3, #9
 8002514:	d119      	bne.n	800254a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2210      	movs	r2, #16
 800251a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <_tx_byte_pool_cleanup+0xf4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a10      	ldr	r2, [pc, #64]	; (8002568 <_tx_byte_pool_cleanup+0xf4>)
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fc63 	bl	8002e00 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800253a:	f3ef 8310 	mrs	r3, PRIMASK
 800253e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002540:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002542:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002544:	b672      	cpsid	i
    return(int_posture);
 8002546:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f383 8810 	msr	PRIMASK, r3
}
 8002554:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8002556:	bf00      	nop
 8002558:	3738      	adds	r7, #56	; 0x38
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	08002475 	.word	0x08002475
 8002564:	42595445 	.word	0x42595445
 8002568:	20002f3c 	.word	0x20002f3c

0800256c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800257a:	2234      	movs	r2, #52	; 0x34
 800257c:	2100      	movs	r1, #0
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f001 fc25 	bl	8003dce <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1a3 0208 	sub.w	r2, r3, #8
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2202      	movs	r2, #2
 80025b8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80025be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	3b04      	subs	r3, #4
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80025da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025dc:	3b04      	subs	r3, #4
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	3304      	adds	r3, #4
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <_tx_byte_pool_create+0x11c>)
 800260a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002612:	f3ef 8310 	mrs	r3, PRIMASK
 8002616:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002618:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800261a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800261c:	b672      	cpsid	i
    return(int_posture);
 800261e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002620:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <_tx_byte_pool_create+0x120>)
 8002626:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <_tx_byte_pool_create+0x124>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <_tx_byte_pool_create+0x128>)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
 8002642:	e011      	b.n	8002668 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_tx_byte_pool_create+0x128>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <_tx_byte_pool_create+0x124>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <_tx_byte_pool_create+0x124>)
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f383 8810 	msr	PRIMASK, r3
}
 800267c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	; 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	ffffeeee 	.word	0xffffeeee
 800268c:	42595445 	.word	0x42595445
 8002690:	20002e98 	.word	0x20002e98
 8002694:	20002e94 	.word	0x20002e94

08002698 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8002698:	b480      	push	{r7}
 800269a:	b097      	sub	sp, #92	; 0x5c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80026a6:	f3ef 8310 	mrs	r3, PRIMASK
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80026ae:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80026b0:	b672      	cpsid	i
    return(int_posture);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	3b02      	subs	r3, #2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d308      	bcc.n	80026e0 <_tx_byte_pool_search+0x48>
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f383 8810 	msr	PRIMASK, r3
}
 80026d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
 80026de:	e0dd      	b.n	800289c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80026e0:	4b72      	ldr	r3, [pc, #456]	; (80028ac <_tx_byte_pool_search+0x214>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ea:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80026fa:	2300      	movs	r3, #0
 80026fc:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80026fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002700:	3304      	adds	r3, #4
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <_tx_byte_pool_search+0x218>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d143      	bne.n	800279a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8002712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800271c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800271e:	2301      	movs	r3, #1
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800272c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	3b08      	subs	r3, #8
 8002738:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800273a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d257      	bcs.n	80027f2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8002742:	2300      	movs	r3, #0
 8002744:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	3304      	adds	r3, #4
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a56      	ldr	r2, [pc, #344]	; (80028b0 <_tx_byte_pool_search+0x218>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d113      	bne.n	8002782 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	1e5a      	subs	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002776:	429a      	cmp	r2, r3
 8002778:	d114      	bne.n	80027a4 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800277e:	615a      	str	r2, [r3, #20]
 8002780:	e010      	b.n	80027a4 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800278c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	3b01      	subs	r3, #1
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
 8002798:	e004      	b.n	80027a4 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80027a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	3b01      	subs	r3, #1
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	f383 8810 	msr	PRIMASK, r3
}
 80027ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80027bc:	f3ef 8310 	mrs	r3, PRIMASK
 80027c0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80027c2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80027c4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80027c6:	b672      	cpsid	i
    return(int_posture);
 80027c8:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d009      	beq.n	80027ea <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	3301      	adds	r3, #1
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d186      	bne.n	80026fe <_tx_byte_pool_search+0x66>
 80027f0:	e000      	b.n	80027f4 <_tx_byte_pool_search+0x15c>
                    break;
 80027f2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80027f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d048      	beq.n	800288c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80027fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b13      	cmp	r3, #19
 8002802:	d91e      	bls.n	8002842 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3308      	adds	r3, #8
 8002808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800280a:	4413      	add	r3, r2
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8002812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	3304      	adds	r3, #4
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <_tx_byte_pool_search+0x218>)
 800282c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8002842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002844:	3304      	adds	r3, #4
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f1a3 0208 	sub.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002868:	429a      	cmp	r2, r3
 800286a:	d105      	bne.n	8002878 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800286c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8002884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002886:	3308      	adds	r3, #8
 8002888:	653b      	str	r3, [r7, #80]	; 0x50
 800288a:	e007      	b.n	800289c <_tx_byte_pool_search+0x204>
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f383 8810 	msr	PRIMASK, r3
}
 8002896:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800289c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800289e:	4618      	mov	r0, r3
 80028a0:	375c      	adds	r7, #92	; 0x5c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20002ea4 	.word	0x20002ea4
 80028b0:	ffffeeee 	.word	0xffffeeee

080028b4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80028b8:	f000 f960 	bl	8002b7c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80028bc:	f000 fd68 	bl	8003390 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <_tx_initialize_high_level+0x58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <_tx_initialize_high_level+0x5c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_tx_initialize_high_level+0x60>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_tx_initialize_high_level+0x64>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <_tx_initialize_high_level+0x68>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_tx_initialize_high_level+0x6c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <_tx_initialize_high_level+0x70>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <_tx_initialize_high_level+0x74>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <_tx_initialize_high_level+0x78>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <_tx_initialize_high_level+0x7c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <_tx_initialize_high_level+0x80>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <_tx_initialize_high_level+0x84>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
#endif
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20002e6c 	.word	0x20002e6c
 8002910:	20002e70 	.word	0x20002e70
 8002914:	20002e74 	.word	0x20002e74
 8002918:	20002e78 	.word	0x20002e78
 800291c:	20002e7c 	.word	0x20002e7c
 8002920:	20002e80 	.word	0x20002e80
 8002924:	20002e8c 	.word	0x20002e8c
 8002928:	20002e90 	.word	0x20002e90
 800292c:	20002e94 	.word	0x20002e94
 8002930:	20002e98 	.word	0x20002e98
 8002934:	20002e84 	.word	0x20002e84
 8002938:	20002e88 	.word	0x20002e88

0800293c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <_tx_initialize_kernel_enter+0x48>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8002948:	d00c      	beq.n	8002964 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <_tx_initialize_kernel_enter+0x48>)
 800294c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8002950:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8002952:	f7fd fc3d 	bl	80001d0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8002956:	f7ff ffad 	bl	80028b4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <_tx_initialize_kernel_enter+0x4c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <_tx_initialize_kernel_enter+0x4c>)
 8002962:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <_tx_initialize_kernel_enter+0x48>)
 8002966:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800296a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <_tx_initialize_kernel_enter+0x50>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd ff1b 	bl	80007ac <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8002976:	4b03      	ldr	r3, [pc, #12]	; (8002984 <_tx_initialize_kernel_enter+0x48>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800297c:	f7fd fc68 	bl	8000250 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000000c 	.word	0x2000000c
 8002988:	20002f3c 	.word	0x20002f3c
 800298c:	20002e9c 	.word	0x20002e9c

08002990 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b092      	sub	sp, #72	; 0x48
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800299e:	2300      	movs	r3, #0
 80029a0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80029a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029a4:	21ef      	movs	r1, #239	; 0xef
 80029a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80029a8:	f001 fa11 	bl	8003dce <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80029ac:	22b0      	movs	r2, #176	; 0xb0
 80029ae:	2100      	movs	r1, #0
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f001 fa0c 	bl	8003dce <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029cc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029d2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029e6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ec:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80029f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	3b01      	subs	r3, #1
 80029fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a00:	4413      	add	r3, r2
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a08:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8002a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d007      	beq.n	8002a22 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002a20:	e006      	b.n	8002a30 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a26:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2203      	movs	r2, #3
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a48      	ldr	r2, [pc, #288]	; (8002b5c <_tx_thread_create+0x1cc>)
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8002a42:	4947      	ldr	r1, [pc, #284]	; (8002b60 <_tx_thread_create+0x1d0>)
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7fd fc63 	bl	8000310 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002a54:	b672      	cpsid	i
    return(int_posture);
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8002a58:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a41      	ldr	r2, [pc, #260]	; (8002b64 <_tx_thread_create+0x1d4>)
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8002a60:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <_tx_thread_create+0x1d8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8002a68:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <_tx_thread_create+0x1dc>)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002a7e:	e016      	b.n	8002aae <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8002a80:	4b3a      	ldr	r3, [pc, #232]	; (8002b6c <_tx_thread_create+0x1dc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8002aae:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <_tx_thread_create+0x1d8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <_tx_thread_create+0x1d8>)
 8002ab6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <_tx_thread_create+0x1e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <_tx_thread_create+0x1e0>)
 8002ac0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8002ac2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d129      	bne.n	8002b1c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002ac8:	f3ef 8305 	mrs	r3, IPSR
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <_tx_thread_create+0x1e4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8002ada:	d30d      	bcc.n	8002af8 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <_tx_thread_create+0x1e8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8002aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002af6:	e001      	b.n	8002afc <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	647b      	str	r3, [r7, #68]	; 0x44
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f383 8810 	msr	PRIMASK, r3
}
 8002b06:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f979 	bl	8002e00 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8002b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01e      	beq.n	8002b52 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8002b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b1a:	e01a      	b.n	8002b52 <_tx_thread_create+0x1c2>
 8002b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002b28:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2c:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002b30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002b32:	b672      	cpsid	i
    return(int_posture);
 8002b34:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <_tx_thread_create+0x1e0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	; (8002b70 <_tx_thread_create+0x1e0>)
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002b4e:	f000 f91d 	bl	8002d8c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3748      	adds	r7, #72	; 0x48
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	080032d5 	.word	0x080032d5
 8002b60:	08002bf5 	.word	0x08002bf5
 8002b64:	54485244 	.word	0x54485244
 8002b68:	20002eb0 	.word	0x20002eb0
 8002b6c:	20002eac 	.word	0x20002eac
 8002b70:	20002f3c 	.word	0x20002f3c
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	20002ea8 	.word	0x20002ea8

08002b7c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <_tx_thread_initialize+0x50>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <_tx_thread_initialize+0x54>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <_tx_thread_initialize+0x58>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <_tx_thread_initialize+0x5c>)
 8002b94:	2220      	movs	r2, #32
 8002b96:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	480f      	ldr	r0, [pc, #60]	; (8002bdc <_tx_thread_initialize+0x60>)
 8002b9e:	f001 f916 	bl	8003dce <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <_tx_thread_initialize+0x64>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <_tx_thread_initialize+0x68>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <_tx_thread_initialize+0x6c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8002bb4:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <_tx_thread_initialize+0x70>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <_tx_thread_initialize+0x74>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <_tx_thread_initialize+0x74>)
 8002bc4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20002ea4 	.word	0x20002ea4
 8002bd0:	20002ea8 	.word	0x20002ea8
 8002bd4:	20002eb4 	.word	0x20002eb4
 8002bd8:	20002eb8 	.word	0x20002eb8
 8002bdc:	20002ebc 	.word	0x20002ebc
 8002be0:	20002eac 	.word	0x20002eac
 8002be4:	20002eb0 	.word	0x20002eb0
 8002be8:	20002f3c 	.word	0x20002f3c
 8002bec:	20002f40 	.word	0x20002f40
 8002bf0:	20002f44 	.word	0x20002f44

08002bf4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <_tx_thread_shell_entry+0x8c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <_tx_thread_shell_entry+0x90>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <_tx_thread_shell_entry+0x90>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69f8      	ldr	r0, [r7, #28]
 8002c1a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c20:	607b      	str	r3, [r7, #4]
    return(posture);
 8002c22:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002c24:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002c26:	b672      	cpsid	i
    return(int_posture);
 8002c28:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8002c2a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	2201      	movs	r2, #1
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <_tx_thread_shell_entry+0x94>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <_tx_thread_shell_entry+0x94>)
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f383 8810 	msr	PRIMASK, r3
}
 8002c52:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8002c54:	f3ef 8314 	mrs	r3, CONTROL
 8002c58:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8002c5a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f383 8814 	msr	CONTROL, r3
}
 8002c70:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8002c72:	69f8      	ldr	r0, [r7, #28]
 8002c74:	f000 f9c4 	bl	8003000 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002c78:	bf00      	nop
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20002ea4 	.word	0x20002ea4
 8002c84:	20002f40 	.word	0x20002f40
 8002c88:	20002f3c 	.word	0x20002f3c

08002c8c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c94:	f3ef 8310 	mrs	r3, PRIMASK
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8002c9e:	b672      	cpsid	i
    return(int_posture);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002ca4:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <_tx_thread_sleep+0xf0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <_tx_thread_sleep+0x36>
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002cbc:	2313      	movs	r3, #19
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc0:	e056      	b.n	8002d70 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002cc2:	f3ef 8305 	mrs	r3, IPSR
 8002cc6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8002cc8:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <_tx_thread_sleep+0xf4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <_tx_thread_sleep+0x5a>
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002ce0:	2313      	movs	r3, #19
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce4:	e044      	b.n	8002d70 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <_tx_thread_sleep+0xf8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d108      	bne.n	8002d00 <_tx_thread_sleep+0x74>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f383 8810 	msr	PRIMASK, r3
}
 8002cf8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002cfa:	2313      	movs	r3, #19
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfe:	e037      	b.n	8002d70 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <_tx_thread_sleep+0x8c>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f383 8810 	msr	PRIMASK, r3
}
 8002d10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
 8002d16:	e02b      	b.n	8002d70 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <_tx_thread_sleep+0xfc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <_tx_thread_sleep+0xa6>
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8002d2c:	2313      	movs	r3, #19
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d30:	e01e      	b.n	8002d70 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2204      	movs	r2, #4
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <_tx_thread_sleep+0xfc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <_tx_thread_sleep+0xfc>)
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8002d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d64:	f000 f94c 	bl	8003000 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3738      	adds	r7, #56	; 0x38
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20002ea4 	.word	0x20002ea4
 8002d80:	2000000c 	.word	0x2000000c
 8002d84:	20002fec 	.word	0x20002fec
 8002d88:	20002f3c 	.word	0x20002f3c

08002d8c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <_tx_thread_system_preempt_check+0x64>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d121      	bne.n	8002de2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_tx_thread_system_preempt_check+0x68>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <_tx_thread_system_preempt_check+0x6c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d017      	beq.n	8002de2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <_tx_thread_system_preempt_check+0x70>)
 8002db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002dba:	f3ef 8305 	mrs	r3, IPSR
 8002dbe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8002dc0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dca:	60fb      	str	r3, [r7, #12]
    return(posture);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8002dce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002dd0:	b662      	cpsie	i
}
 8002dd2:	bf00      	nop
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f383 8810 	msr	PRIMASK, r3
}
 8002dde:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8002de0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8002de2:	bf00      	nop
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20002f3c 	.word	0x20002f3c
 8002df4:	20002ea4 	.word	0x20002ea4
 8002df8:	20002ea8 	.word	0x20002ea8
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b096      	sub	sp, #88	; 0x58
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e12:	b672      	cpsid	i
    return(int_posture);
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8002e16:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	334c      	adds	r3, #76	; 0x4c
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fb91 	bl	800354c <_tx_timer_system_deactivate>
 8002e2a:	e002      	b.n	8002e32 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8002e32:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <_tx_thread_system_resume+0x1e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <_tx_thread_system_resume+0x1e4>)
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 8083 	bne.w	8002f4c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8097 	beq.w	8002f7e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d172      	bne.n	8002f3e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8002e64:	4a60      	ldr	r2, [pc, #384]	; (8002fe8 <_tx_thread_system_resume+0x1e8>)
 8002e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d154      	bne.n	8002f1e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8002e74:	495c      	ldr	r1, [pc, #368]	; (8002fe8 <_tx_thread_system_resume+0x1e8>)
 8002e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <_tx_thread_system_resume+0x1ec>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	4a53      	ldr	r2, [pc, #332]	; (8002fec <_tx_thread_system_resume+0x1ec>)
 8002e9e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <_tx_thread_system_resume+0x1f0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d269      	bcs.n	8002f7e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8002eaa:	4a51      	ldr	r2, [pc, #324]	; (8002ff0 <_tx_thread_system_resume+0x1f0>)
 8002eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eae:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <_tx_thread_system_resume+0x1f4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8002eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8002ebc:	4a4d      	ldr	r2, [pc, #308]	; (8002ff4 <_tx_thread_system_resume+0x1f4>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e05c      	b.n	8002f7e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8002ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d257      	bcs.n	8002f7e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8002ece:	4a49      	ldr	r2, [pc, #292]	; (8002ff4 <_tx_thread_system_resume+0x1f4>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	f383 8810 	msr	PRIMASK, r3
}
 8002ede:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <_tx_thread_system_resume+0x1e4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8002ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d174      	bne.n	8002fd6 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <_tx_thread_system_resume+0x1f8>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002ef4:	f3ef 8305 	mrs	r3, IPSR
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10c      	bne.n	8002f1a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002f00:	f3ef 8310 	mrs	r3, PRIMASK
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8002f08:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002f0a:	b662      	cpsie	i
}
 8002f0c:	bf00      	nop
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	bf00      	nop
}
 8002f1a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8002f1c:	e05b      	b.n	8002fd6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8002f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f3a:	621a      	str	r2, [r3, #32]
 8002f3c:	e01f      	b.n	8002f7e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2203      	movs	r2, #3
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
 8002f4a:	e018      	b.n	8002f7e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d014      	beq.n	8002f7e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d010      	beq.n	8002f7e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f70:	e005      	b.n	8002f7e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <_tx_thread_system_resume+0x1fc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f86:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f383 8810 	msr	PRIMASK, r3
}
 8002f8e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <_tx_thread_system_resume+0x1f4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d020      	beq.n	8002fdc <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <_tx_thread_system_resume+0x1e4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8002fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11a      	bne.n	8002fdc <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <_tx_thread_system_resume+0x1f8>)
 8002fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fac:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002fae:	f3ef 8305 	mrs	r3, IPSR
 8002fb2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8002fb4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002fba:	f3ef 8310 	mrs	r3, PRIMASK
 8002fbe:	613b      	str	r3, [r7, #16]
    return(posture);
 8002fc0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8002fc2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8002fc4:	b662      	cpsie	i
}
 8002fc6:	bf00      	nop
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f383 8810 	msr	PRIMASK, r3
}
 8002fd2:	bf00      	nop
}
 8002fd4:	e001      	b.n	8002fda <_tx_thread_system_resume+0x1da>
                                return;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <_tx_thread_system_resume+0x1dc>
 8002fda:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8002fdc:	3758      	adds	r7, #88	; 0x58
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20002f3c 	.word	0x20002f3c
 8002fe8:	20002ebc 	.word	0x20002ebc
 8002fec:	20002eb4 	.word	0x20002eb4
 8002ff0:	20002eb8 	.word	0x20002eb8
 8002ff4:	20002ea8 	.word	0x20002ea8
 8002ff8:	e000ed04 	.word	0xe000ed04
 8002ffc:	20002ea4 	.word	0x20002ea4

08003000 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b09e      	sub	sp, #120	; 0x78
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003008:	4b81      	ldr	r3, [pc, #516]	; (8003210 <_tx_thread_system_suspend+0x210>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800300e:	f3ef 8310 	mrs	r3, PRIMASK
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8003014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8003018:	b672      	cpsid	i
    return(int_posture);
 800301a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800301c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003022:	429a      	cmp	r2, r3
 8003024:	d112      	bne.n	800304c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8003032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d004      	beq.n	8003044 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	334c      	adds	r3, #76	; 0x4c
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fa22 	bl	8003488 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4a72      	ldr	r2, [pc, #456]	; (8003214 <_tx_thread_system_suspend+0x214>)
 800304a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800304c:	4b72      	ldr	r3, [pc, #456]	; (8003218 <_tx_thread_system_suspend+0x218>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	4a71      	ldr	r2, [pc, #452]	; (8003218 <_tx_thread_system_suspend+0x218>)
 8003054:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	2b01      	cmp	r3, #1
 800305c:	f040 80a6 	bne.w	80031ac <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8003072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	429a      	cmp	r2, r3
 8003078:	d015      	beq.n	80030a6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8003080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8003086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003088:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800308a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800308c:	4a63      	ldr	r2, [pc, #396]	; (800321c <_tx_thread_system_suspend+0x21c>)
 800308e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d157      	bne.n	800314a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800309a:	4960      	ldr	r1, [pc, #384]	; (800321c <_tx_thread_system_suspend+0x21c>)
 800309c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80030a4:	e051      	b.n	800314a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80030a6:	4a5d      	ldr	r2, [pc, #372]	; (800321c <_tx_thread_system_suspend+0x21c>)
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	2100      	movs	r1, #0
 80030ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80030b0:	2201      	movs	r2, #1
 80030b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80030ba:	4b59      	ldr	r3, [pc, #356]	; (8003220 <_tx_thread_system_suspend+0x220>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4013      	ands	r3, r2
 80030c4:	4a56      	ldr	r2, [pc, #344]	; (8003220 <_tx_thread_system_suspend+0x220>)
 80030c6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80030c8:	2300      	movs	r3, #0
 80030ca:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80030cc:	4b54      	ldr	r3, [pc, #336]	; (8003220 <_tx_thread_system_suspend+0x220>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12b      	bne.n	8003130 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80030d8:	4b52      	ldr	r3, [pc, #328]	; (8003224 <_tx_thread_system_suspend+0x224>)
 80030da:	2220      	movs	r2, #32
 80030dc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80030de:	4b52      	ldr	r3, [pc, #328]	; (8003228 <_tx_thread_system_suspend+0x228>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80030f0:	4b49      	ldr	r3, [pc, #292]	; (8003218 <_tx_thread_system_suspend+0x218>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80030f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 8081 	bne.w	8003200 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80030fe:	4b4b      	ldr	r3, [pc, #300]	; (800322c <_tx_thread_system_suspend+0x22c>)
 8003100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003104:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003106:	f3ef 8305 	mrs	r3, IPSR
 800310a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800310c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8003118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800311c:	b662      	cpsie	i
}
 800311e:	bf00      	nop
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	bf00      	nop
}
 800312c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800312e:	e067      	b.n	8003200 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8003130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	65bb      	str	r3, [r7, #88]	; 0x58
 8003138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8003140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	4413      	add	r3, r2
 8003146:	4a37      	ldr	r2, [pc, #220]	; (8003224 <_tx_thread_system_suspend+0x224>)
 8003148:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <_tx_thread_system_suspend+0x228>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	d12b      	bne.n	80031ac <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003154:	4b33      	ldr	r3, [pc, #204]	; (8003224 <_tx_thread_system_suspend+0x224>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a30      	ldr	r2, [pc, #192]	; (800321c <_tx_thread_system_suspend+0x21c>)
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	4a32      	ldr	r2, [pc, #200]	; (8003228 <_tx_thread_system_suspend+0x228>)
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	f383 8810 	msr	PRIMASK, r3
}
 800316c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800316e:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <_tx_thread_system_suspend+0x218>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8003174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003176:	2b00      	cmp	r3, #0
 8003178:	d144      	bne.n	8003204 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <_tx_thread_system_suspend+0x22c>)
 800317c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003180:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003182:	f3ef 8305 	mrs	r3, IPSR
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800318e:	f3ef 8310 	mrs	r3, PRIMASK
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003198:	b662      	cpsie	i
}
 800319a:	bf00      	nop
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f383 8810 	msr	PRIMASK, r3
}
 80031a6:	bf00      	nop
}
 80031a8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80031aa:	e02b      	b.n	8003204 <_tx_thread_system_suspend+0x204>
 80031ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <_tx_thread_system_suspend+0x228>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031be:	429a      	cmp	r2, r3
 80031c0:	d022      	beq.n	8003208 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <_tx_thread_system_suspend+0x218>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 80031c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11c      	bne.n	8003208 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <_tx_thread_system_suspend+0x22c>)
 80031d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80031d6:	f3ef 8305 	mrs	r3, IPSR
 80031da:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80031dc:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80031e2:	f3ef 8310 	mrs	r3, PRIMASK
 80031e6:	617b      	str	r3, [r7, #20]
    return(posture);
 80031e8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80031ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80031ec:	b662      	cpsie	i
}
 80031ee:	bf00      	nop
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	bf00      	nop
}
 80031fc:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80031fe:	e003      	b.n	8003208 <_tx_thread_system_suspend+0x208>
                return;
 8003200:	bf00      	nop
 8003202:	e002      	b.n	800320a <_tx_thread_system_suspend+0x20a>
            return;
 8003204:	bf00      	nop
 8003206:	e000      	b.n	800320a <_tx_thread_system_suspend+0x20a>
    return;
 8003208:	bf00      	nop
}
 800320a:	3778      	adds	r7, #120	; 0x78
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20002ea4 	.word	0x20002ea4
 8003214:	200034a8 	.word	0x200034a8
 8003218:	20002f3c 	.word	0x20002f3c
 800321c:	20002ebc 	.word	0x20002ebc
 8003220:	20002eb4 	.word	0x20002eb4
 8003224:	20002eb8 	.word	0x20002eb8
 8003228:	20002ea8 	.word	0x20002ea8
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <_tx_thread_time_slice+0x8c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800323c:	f3ef 8310 	mrs	r3, PRIMASK
 8003240:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003242:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8003244:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003246:	b672      	cpsid	i
    return(int_posture);
 8003248:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800324a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800324c:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <_tx_thread_time_slice+0x90>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d024      	beq.n	80032a2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	2b00      	cmp	r3, #0
 800325e:	d120      	bne.n	80032a2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <_tx_thread_time_slice+0x94>)
 800326e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	429a      	cmp	r2, r3
 8003278:	d013      	beq.n	80032a2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	429a      	cmp	r2, r3
 8003284:	d10d      	bne.n	80032a2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6a12      	ldr	r2, [r2, #32]
 800328e:	490e      	ldr	r1, [pc, #56]	; (80032c8 <_tx_thread_time_slice+0x98>)
 8003290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <_tx_thread_time_slice+0x9c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <_tx_thread_time_slice+0x98>)
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <_tx_thread_time_slice+0xa0>)
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20002ea4 	.word	0x20002ea4
 80032c0:	20002f4c 	.word	0x20002f4c
 80032c4:	200034a8 	.word	0x200034a8
 80032c8:	20002ebc 	.word	0x20002ebc
 80032cc:	20002eb8 	.word	0x20002eb8
 80032d0:	20002ea8 	.word	0x20002ea8

080032d4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80032e0:	f3ef 8310 	mrs	r3, PRIMASK
 80032e4:	617b      	str	r3, [r7, #20]
    return(posture);
 80032e6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80032e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80032ea:	b672      	cpsid	i
    return(int_posture);
 80032ec:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80032ee:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d10e      	bne.n	8003316 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <_tx_thread_timeout+0x74>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <_tx_thread_timeout+0x74>)
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800330e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003310:	f7ff fd76 	bl	8002e00 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003314:	e013      	b.n	800333e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f383 8810 	msr	PRIMASK, r3
}
 800332e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	69b9      	ldr	r1, [r7, #24]
 800333a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800333c:	4798      	blx	r3
}
 800333e:	bf00      	nop
 8003340:	3728      	adds	r7, #40	; 0x28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20002f3c 	.word	0x20002f3c

0800334c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	607b      	str	r3, [r7, #4]
    return(posture);
 8003358:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800335a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800335c:	b672      	cpsid	i
    return(int_posture);
 800335e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8003360:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <_tx_timer_expiration_process+0x3c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <_tx_timer_expiration_process+0x3c>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003378:	4804      	ldr	r0, [pc, #16]	; (800338c <_tx_timer_expiration_process+0x40>)
 800337a:	f7ff fd41 	bl	8002e00 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20002f3c 	.word	0x20002f3c
 800338c:	20002fec 	.word	0x20002fec

08003390 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003396:	4b28      	ldr	r3, [pc, #160]	; (8003438 <_tx_timer_initialize+0xa8>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <_tx_timer_initialize+0xac>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <_tx_timer_initialize+0xb0>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80033a8:	4b26      	ldr	r3, [pc, #152]	; (8003444 <_tx_timer_initialize+0xb4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <_tx_timer_initialize+0xb8>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	2100      	movs	r1, #0
 80033b8:	4824      	ldr	r0, [pc, #144]	; (800344c <_tx_timer_initialize+0xbc>)
 80033ba:	f000 fd08 	bl	8003dce <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <_tx_timer_initialize+0xc0>)
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <_tx_timer_initialize+0xbc>)
 80033c2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80033c4:	4b23      	ldr	r3, [pc, #140]	; (8003454 <_tx_timer_initialize+0xc4>)
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <_tx_timer_initialize+0xbc>)
 80033c8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <_tx_timer_initialize+0xc8>)
 80033cc:	4a23      	ldr	r2, [pc, #140]	; (800345c <_tx_timer_initialize+0xcc>)
 80033ce:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <_tx_timer_initialize+0xc8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <_tx_timer_initialize+0xc8>)
 80033d8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80033da:	4b21      	ldr	r3, [pc, #132]	; (8003460 <_tx_timer_initialize+0xd0>)
 80033dc:	4a21      	ldr	r2, [pc, #132]	; (8003464 <_tx_timer_initialize+0xd4>)
 80033de:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <_tx_timer_initialize+0xd8>)
 80033e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <_tx_timer_initialize+0xdc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <_tx_timer_initialize+0xd0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <_tx_timer_initialize+0xd8>)
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	491d      	ldr	r1, [pc, #116]	; (800346c <_tx_timer_initialize+0xdc>)
 80033f8:	6809      	ldr	r1, [r1, #0]
 80033fa:	481c      	ldr	r0, [pc, #112]	; (800346c <_tx_timer_initialize+0xdc>)
 80033fc:	6800      	ldr	r0, [r0, #0]
 80033fe:	2400      	movs	r4, #0
 8003400:	9405      	str	r4, [sp, #20]
 8003402:	2400      	movs	r4, #0
 8003404:	9404      	str	r4, [sp, #16]
 8003406:	9003      	str	r0, [sp, #12]
 8003408:	9102      	str	r1, [sp, #8]
 800340a:	9201      	str	r2, [sp, #4]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	4b18      	ldr	r3, [pc, #96]	; (8003470 <_tx_timer_initialize+0xe0>)
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <_tx_timer_initialize+0xe4>)
 8003412:	4919      	ldr	r1, [pc, #100]	; (8003478 <_tx_timer_initialize+0xe8>)
 8003414:	4819      	ldr	r0, [pc, #100]	; (800347c <_tx_timer_initialize+0xec>)
 8003416:	f7ff fabb 	bl	8002990 <_tx_thread_create>
 800341a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e5      	bne.n	80033ee <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <_tx_timer_initialize+0xf0>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <_tx_timer_initialize+0xf4>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop
 8003438:	20002f48 	.word	0x20002f48
 800343c:	200034a8 	.word	0x200034a8
 8003440:	20002f4c 	.word	0x20002f4c
 8003444:	20002fdc 	.word	0x20002fdc
 8003448:	20002fe8 	.word	0x20002fe8
 800344c:	20002f50 	.word	0x20002f50
 8003450:	20002fd0 	.word	0x20002fd0
 8003454:	20002fd8 	.word	0x20002fd8
 8003458:	20002fd4 	.word	0x20002fd4
 800345c:	20002fcc 	.word	0x20002fcc
 8003460:	2000309c 	.word	0x2000309c
 8003464:	200030a8 	.word	0x200030a8
 8003468:	200030a0 	.word	0x200030a0
 800346c:	200030a4 	.word	0x200030a4
 8003470:	4154494d 	.word	0x4154494d
 8003474:	080035bd 	.word	0x080035bd
 8003478:	08004ac8 	.word	0x08004ac8
 800347c:	20002fec 	.word	0x20002fec
 8003480:	20002fe0 	.word	0x20002fe0
 8003484:	20002fe4 	.word	0x20002fe4

08003488 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04a      	beq.n	8003532 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d046      	beq.n	8003532 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d142      	bne.n	8003532 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d902      	bls.n	80034b8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80034b2:	231f      	movs	r3, #31
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e002      	b.n	80034be <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <_tx_timer_system_activate+0xb8>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <_tx_timer_system_activate+0xbc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d30b      	bcc.n	80034ec <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <_tx_timer_system_activate+0xbc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	109b      	asrs	r3, r3, #2
 80034de:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <_tx_timer_system_activate+0xc0>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e011      	b.n	800352c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8003532:	bf00      	nop
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20002fd8 	.word	0x20002fd8
 8003544:	20002fd4 	.word	0x20002fd4
 8003548:	20002fd0 	.word	0x20002fd0

0800354c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d026      	beq.n	80035ae <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d108      	bne.n	8003580 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d117      	bne.n	80035a8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e013      	b.n	80035a8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d105      	bne.n	80035a8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
    }
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b098      	sub	sp, #96	; 0x60
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80035c4:	2300      	movs	r3, #0
 80035c6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a73      	ldr	r2, [pc, #460]	; (8003798 <_tx_timer_thread_entry+0x1dc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	f040 80de 	bne.w	800378e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80035d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80035dc:	b672      	cpsid	i
    return(int_posture);
 80035de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80035e0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80035e2:	4b6e      	ldr	r3, [pc, #440]	; (800379c <_tx_timer_thread_entry+0x1e0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f107 020c 	add.w	r2, r7, #12
 80035f6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <_tx_timer_thread_entry+0x1e0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <_tx_timer_thread_entry+0x1e0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3304      	adds	r3, #4
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <_tx_timer_thread_entry+0x1e0>)
 8003608:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800360a:	4b64      	ldr	r3, [pc, #400]	; (800379c <_tx_timer_thread_entry+0x1e0>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <_tx_timer_thread_entry+0x1e4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d103      	bne.n	800361e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <_tx_timer_thread_entry+0x1e8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a60      	ldr	r2, [pc, #384]	; (800379c <_tx_timer_thread_entry+0x1e0>)
 800361c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <_tx_timer_thread_entry+0x1ec>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800363a:	b672      	cpsid	i
    return(int_posture);
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800363e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8003640:	e07f      	b.n	8003742 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8003650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	429a      	cmp	r2, r3
 8003656:	d102      	bne.n	800365e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e00e      	b.n	800367c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8003664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003668:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800366a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8003670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003672:	f107 020c 	add.w	r2, r7, #12
 8003676:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800367c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b20      	cmp	r3, #32
 8003682:	d911      	bls.n	80036a8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8003684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003696:	f107 0208 	add.w	r2, r7, #8
 800369a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	e01a      	b.n	80036de <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80036a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80036ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80036bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80036c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c6:	f107 0208 	add.w	r2, r7, #8
 80036ca:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80036cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036d0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	e002      	b.n	80036de <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80036d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80036de:	4a33      	ldr	r2, [pc, #204]	; (80037ac <_tx_timer_thread_entry+0x1f0>)
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80036f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80036f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80036fa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003706:	b672      	cpsid	i
    return(int_posture);
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800370a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800370c:	4b27      	ldr	r3, [pc, #156]	; (80037ac <_tx_timer_thread_entry+0x1f0>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003716:	429a      	cmp	r2, r3
 8003718:	d105      	bne.n	8003726 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800371a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800371c:	2200      	movs	r2, #0
 800371e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8003720:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003722:	f7ff feb1 	bl	8003488 <_tx_timer_system_activate>
 8003726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003728:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003732:	f3ef 8310 	mrs	r3, PRIMASK
 8003736:	623b      	str	r3, [r7, #32]
    return(posture);
 8003738:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800373a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800373c:	b672      	cpsid	i
    return(int_posture);
 800373e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8003740:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af7c 	bne.w	8003642 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <_tx_timer_thread_entry+0x1ec>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <_tx_timer_thread_entry+0x1f4>)
 8003754:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003758:	2203      	movs	r2, #3
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800375c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375e:	2201      	movs	r2, #1
 8003760:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <_tx_timer_thread_entry+0x1f8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <_tx_timer_thread_entry+0x1f8>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003778:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800377a:	f7ff fc41 	bl	8003000 <_tx_thread_system_suspend>
 800377e:	e728      	b.n	80035d2 <_tx_timer_thread_entry+0x16>
 8003780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003782:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	bf00      	nop
            TX_DISABLE
 800378c:	e721      	b.n	80035d2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800378e:	bf00      	nop
 8003790:	3760      	adds	r7, #96	; 0x60
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	4154494d 	.word	0x4154494d
 800379c:	20002fd8 	.word	0x20002fd8
 80037a0:	20002fd4 	.word	0x20002fd4
 80037a4:	20002fd0 	.word	0x20002fd0
 80037a8:	20002fdc 	.word	0x20002fdc
 80037ac:	20002fe8 	.word	0x20002fe8
 80037b0:	20002fec 	.word	0x20002fec
 80037b4:	20002f3c 	.word	0x20002f3c

080037b8 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80037c6:	2300      	movs	r3, #0
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80037d0:	2302      	movs	r3, #2
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	e029      	b.n	800382a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <_txe_byte_allocate+0xd8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d002      	beq.n	80037e6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80037e0:	2302      	movs	r3, #2
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e021      	b.n	800382a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80037ec:	2303      	movs	r3, #3
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	e01b      	b.n	800382a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80037f8:	2305      	movs	r3, #5
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	e015      	b.n	800382a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d902      	bls.n	800380e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8003808:	2305      	movs	r3, #5
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	e00d      	b.n	800382a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003814:	f3ef 8305 	mrs	r3, IPSR
 8003818:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800381a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <_txe_byte_allocate+0xdc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8003826:	2304      	movs	r3, #4
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	2b00      	cmp	r3, #0
 800382e:	d108      	bne.n	8003842 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <_txe_byte_allocate+0xe0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <_txe_byte_allocate+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800383e:	2313      	movs	r3, #19
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d114      	bne.n	8003872 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003848:	f3ef 8305 	mrs	r3, IPSR
 800384c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800384e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <_txe_byte_allocate+0xdc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800385a:	f3ef 8305 	mrs	r3, IPSR
 800385e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003860:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <_txe_byte_allocate+0xdc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800386c:	d201      	bcs.n	8003872 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800386e:	2313      	movs	r3, #19
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7fe fd32 	bl	80022e8 <_tx_byte_allocate>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	42595445 	.word	0x42595445
 8003894:	2000000c 	.word	0x2000000c
 8003898:	20002ea4 	.word	0x20002ea4
 800389c:	20002fec 	.word	0x20002fec

080038a0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b092      	sub	sp, #72	; 0x48
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80038ae:	2300      	movs	r3, #0
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80038b8:	2302      	movs	r3, #2
 80038ba:	647b      	str	r3, [r7, #68]	; 0x44
 80038bc:	e075      	b.n	80039aa <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80038be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c0:	2b34      	cmp	r3, #52	; 0x34
 80038c2:	d002      	beq.n	80038ca <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80038c4:	2302      	movs	r3, #2
 80038c6:	647b      	str	r3, [r7, #68]	; 0x44
 80038c8:	e06f      	b.n	80039aa <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80038ca:	f3ef 8310 	mrs	r3, PRIMASK
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80038d4:	b672      	cpsid	i
    return(int_posture);
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <_txe_byte_pool_create+0x128>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <_txe_byte_pool_create+0x128>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <_txe_byte_pool_create+0x12c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	643b      	str	r3, [r7, #64]	; 0x40
 80038fa:	e009      	b.n	8003910 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003900:	429a      	cmp	r2, r3
 8003902:	d00b      	beq.n	800391c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390c:	3301      	adds	r3, #1
 800390e:	643b      	str	r3, [r7, #64]	; 0x40
 8003910:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <_txe_byte_pool_create+0x130>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003916:	429a      	cmp	r2, r3
 8003918:	d3f0      	bcc.n	80038fc <_txe_byte_pool_create+0x5c>
 800391a:	e000      	b.n	800391e <_txe_byte_pool_create+0x7e>
                break;
 800391c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800391e:	f3ef 8310 	mrs	r3, PRIMASK
 8003922:	623b      	str	r3, [r7, #32]
    return(posture);
 8003924:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003926:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003928:	b672      	cpsid	i
    return(int_posture);
 800392a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <_txe_byte_pool_create+0x128>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <_txe_byte_pool_create+0x128>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003944:	f7ff fa22 	bl	8002d8c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394c:	429a      	cmp	r2, r3
 800394e:	d102      	bne.n	8003956 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8003950:	2302      	movs	r3, #2
 8003952:	647b      	str	r3, [r7, #68]	; 0x44
 8003954:	e029      	b.n	80039aa <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800395c:	2303      	movs	r3, #3
 800395e:	647b      	str	r3, [r7, #68]	; 0x44
 8003960:	e023      	b.n	80039aa <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b63      	cmp	r3, #99	; 0x63
 8003966:	d802      	bhi.n	800396e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8003968:	2305      	movs	r3, #5
 800396a:	647b      	str	r3, [r7, #68]	; 0x44
 800396c:	e01d      	b.n	80039aa <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <_txe_byte_pool_create+0x134>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <_txe_byte_pool_create+0x138>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800397c:	2313      	movs	r3, #19
 800397e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003980:	f3ef 8305 	mrs	r3, IPSR
 8003984:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003986:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <_txe_byte_pool_create+0x13c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003992:	f3ef 8305 	mrs	r3, IPSR
 8003996:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003998:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <_txe_byte_pool_create+0x13c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80039a4:	d201      	bcs.n	80039aa <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80039a6:	2313      	movs	r3, #19
 80039a8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80039aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7fe fdd8 	bl	800256c <_tx_byte_pool_create>
 80039bc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80039be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3748      	adds	r7, #72	; 0x48
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20002f3c 	.word	0x20002f3c
 80039cc:	20002e94 	.word	0x20002e94
 80039d0:	20002e98 	.word	0x20002e98
 80039d4:	20002ea4 	.word	0x20002ea4
 80039d8:	20002fec 	.word	0x20002fec
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b09a      	sub	sp, #104	; 0x68
 80039e4:	af06      	add	r7, sp, #24
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80039ee:	2300      	movs	r3, #0
 80039f0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80039f8:	230e      	movs	r3, #14
 80039fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039fc:	e0bb      	b.n	8003b76 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80039fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a00:	2bb0      	cmp	r3, #176	; 0xb0
 8003a02:	d002      	beq.n	8003a0a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003a04:	230e      	movs	r3, #14
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	e0b5      	b.n	8003b76 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a14:	b672      	cpsid	i
    return(int_posture);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003a1a:	4b64      	ldr	r3, [pc, #400]	; (8003bac <_txe_thread_create+0x1cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a62      	ldr	r2, [pc, #392]	; (8003bac <_txe_thread_create+0x1cc>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8003a34:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <_txe_thread_create+0x1d0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8003a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a40:	3b01      	subs	r3, #1
 8003a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a44:	4413      	add	r3, r2
 8003a46:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8003a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a50:	e02b      	b.n	8003aaa <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d101      	bne.n	8003a5e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d028      	beq.n	8003ab6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8003a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d308      	bcc.n	8003a80 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d203      	bcs.n	8003a80 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8003a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d308      	bcc.n	8003a9c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d203      	bcs.n	8003a9c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aaa:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <_txe_thread_create+0x1d4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3ce      	bcc.n	8003a52 <_txe_thread_create+0x72>
 8003ab4:	e000      	b.n	8003ab8 <_txe_thread_create+0xd8>
                break;
 8003ab6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8003abc:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003abe:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003ac0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003ac2:	b672      	cpsid	i
    return(int_posture);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003ac8:	4b38      	ldr	r3, [pc, #224]	; (8003bac <_txe_thread_create+0x1cc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	4a37      	ldr	r2, [pc, #220]	; (8003bac <_txe_thread_create+0x1cc>)
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f383 8810 	msr	PRIMASK, r3
}
 8003adc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003ade:	f7ff f955 	bl	8002d8c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d102      	bne.n	8003af0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8003aea:	230e      	movs	r3, #14
 8003aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aee:	e042      	b.n	8003b76 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8003af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003af6:	2303      	movs	r3, #3
 8003af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003afa:	e03c      	b.n	8003b76 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003b02:	2303      	movs	r3, #3
 8003b04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b06:	e036      	b.n	8003b76 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8003b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b0a:	2bc7      	cmp	r3, #199	; 0xc7
 8003b0c:	d802      	bhi.n	8003b14 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8003b0e:	2305      	movs	r3, #5
 8003b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b12:	e030      	b.n	8003b76 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	2b1f      	cmp	r3, #31
 8003b18:	d902      	bls.n	8003b20 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8003b1a:	230f      	movs	r3, #15
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1e:	e02a      	b.n	8003b76 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8003b20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d902      	bls.n	8003b2e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8003b28:	2318      	movs	r3, #24
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	e023      	b.n	8003b76 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d902      	bls.n	8003b3a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8003b34:	2310      	movs	r3, #16
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	e01d      	b.n	8003b76 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <_txe_thread_create+0x1d8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <_txe_thread_create+0x1dc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003b48:	2313      	movs	r3, #19
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003b4c:	f3ef 8305 	mrs	r3, IPSR
 8003b50:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003b52:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <_txe_thread_create+0x1e0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003b5e:	f3ef 8305 	mrs	r3, IPSR
 8003b62:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003b64:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <_txe_thread_create+0x1e0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003b70:	d201      	bcs.n	8003b76 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003b72:	2313      	movs	r3, #19
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d112      	bne.n	8003ba2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8003b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7e:	9305      	str	r3, [sp, #20]
 8003b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b86:	9303      	str	r3, [sp, #12]
 8003b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b8a:	9302      	str	r3, [sp, #8]
 8003b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7fe fef8 	bl	8002990 <_tx_thread_create>
 8003ba0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3750      	adds	r7, #80	; 0x50
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20002f3c 	.word	0x20002f3c
 8003bb0:	20002eac 	.word	0x20002eac
 8003bb4:	20002eb0 	.word	0x20002eb0
 8003bb8:	20002ea4 	.word	0x20002ea4
 8003bbc:	20002fec 	.word	0x20002fec
 8003bc0:	2000000c 	.word	0x2000000c

08003bc4 <std>:
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	4604      	mov	r4, r0
 8003bca:	e9c0 3300 	strd	r3, r3, [r0]
 8003bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bd2:	6083      	str	r3, [r0, #8]
 8003bd4:	8181      	strh	r1, [r0, #12]
 8003bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8003bd8:	81c2      	strh	r2, [r0, #14]
 8003bda:	6183      	str	r3, [r0, #24]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	2208      	movs	r2, #8
 8003be0:	305c      	adds	r0, #92	; 0x5c
 8003be2:	f000 f8f4 	bl	8003dce <memset>
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <std+0x38>)
 8003be8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <std+0x3c>)
 8003bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <std+0x40>)
 8003bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <std+0x44>)
 8003bf4:	6224      	str	r4, [r4, #32]
 8003bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08003d49 	.word	0x08003d49
 8003c00:	08003d6b 	.word	0x08003d6b
 8003c04:	08003da3 	.word	0x08003da3
 8003c08:	08003dc7 	.word	0x08003dc7

08003c0c <stdio_exit_handler>:
 8003c0c:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <stdio_exit_handler+0xc>)
 8003c0e:	4903      	ldr	r1, [pc, #12]	; (8003c1c <stdio_exit_handler+0x10>)
 8003c10:	4803      	ldr	r0, [pc, #12]	; (8003c20 <stdio_exit_handler+0x14>)
 8003c12:	f000 b869 	b.w	8003ce8 <_fwalk_sglue>
 8003c16:	bf00      	nop
 8003c18:	20000010 	.word	0x20000010
 8003c1c:	08004769 	.word	0x08004769
 8003c20:	2000001c 	.word	0x2000001c

08003c24 <cleanup_stdio>:
 8003c24:	6841      	ldr	r1, [r0, #4]
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <cleanup_stdio+0x34>)
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	d001      	beq.n	8003c34 <cleanup_stdio+0x10>
 8003c30:	f000 fd9a 	bl	8004768 <_fflush_r>
 8003c34:	68a1      	ldr	r1, [r4, #8]
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <cleanup_stdio+0x38>)
 8003c38:	4299      	cmp	r1, r3
 8003c3a:	d002      	beq.n	8003c42 <cleanup_stdio+0x1e>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 fd93 	bl	8004768 <_fflush_r>
 8003c42:	68e1      	ldr	r1, [r4, #12]
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <cleanup_stdio+0x3c>)
 8003c46:	4299      	cmp	r1, r3
 8003c48:	d004      	beq.n	8003c54 <cleanup_stdio+0x30>
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c50:	f000 bd8a 	b.w	8004768 <_fflush_r>
 8003c54:	bd10      	pop	{r4, pc}
 8003c56:	bf00      	nop
 8003c58:	200034ac 	.word	0x200034ac
 8003c5c:	20003514 	.word	0x20003514
 8003c60:	2000357c 	.word	0x2000357c

08003c64 <global_stdio_init.part.0>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <global_stdio_init.part.0+0x30>)
 8003c68:	4c0b      	ldr	r4, [pc, #44]	; (8003c98 <global_stdio_init.part.0+0x34>)
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <global_stdio_init.part.0+0x38>)
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	4620      	mov	r0, r4
 8003c70:	2200      	movs	r2, #0
 8003c72:	2104      	movs	r1, #4
 8003c74:	f7ff ffa6 	bl	8003bc4 <std>
 8003c78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2109      	movs	r1, #9
 8003c80:	f7ff ffa0 	bl	8003bc4 <std>
 8003c84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c88:	2202      	movs	r2, #2
 8003c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8e:	2112      	movs	r1, #18
 8003c90:	f7ff bf98 	b.w	8003bc4 <std>
 8003c94:	200035e4 	.word	0x200035e4
 8003c98:	200034ac 	.word	0x200034ac
 8003c9c:	08003c0d 	.word	0x08003c0d

08003ca0 <__sfp_lock_acquire>:
 8003ca0:	4801      	ldr	r0, [pc, #4]	; (8003ca8 <__sfp_lock_acquire+0x8>)
 8003ca2:	f000 b90d 	b.w	8003ec0 <__retarget_lock_acquire_recursive>
 8003ca6:	bf00      	nop
 8003ca8:	200035ed 	.word	0x200035ed

08003cac <__sfp_lock_release>:
 8003cac:	4801      	ldr	r0, [pc, #4]	; (8003cb4 <__sfp_lock_release+0x8>)
 8003cae:	f000 b908 	b.w	8003ec2 <__retarget_lock_release_recursive>
 8003cb2:	bf00      	nop
 8003cb4:	200035ed 	.word	0x200035ed

08003cb8 <__sinit>:
 8003cb8:	b510      	push	{r4, lr}
 8003cba:	4604      	mov	r4, r0
 8003cbc:	f7ff fff0 	bl	8003ca0 <__sfp_lock_acquire>
 8003cc0:	6a23      	ldr	r3, [r4, #32]
 8003cc2:	b11b      	cbz	r3, 8003ccc <__sinit+0x14>
 8003cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc8:	f7ff bff0 	b.w	8003cac <__sfp_lock_release>
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <__sinit+0x28>)
 8003cce:	6223      	str	r3, [r4, #32]
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <__sinit+0x2c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f5      	bne.n	8003cc4 <__sinit+0xc>
 8003cd8:	f7ff ffc4 	bl	8003c64 <global_stdio_init.part.0>
 8003cdc:	e7f2      	b.n	8003cc4 <__sinit+0xc>
 8003cde:	bf00      	nop
 8003ce0:	08003c25 	.word	0x08003c25
 8003ce4:	200035e4 	.word	0x200035e4

08003ce8 <_fwalk_sglue>:
 8003ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cec:	4607      	mov	r7, r0
 8003cee:	4688      	mov	r8, r1
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8003cfc:	d505      	bpl.n	8003d0a <_fwalk_sglue+0x22>
 8003cfe:	6824      	ldr	r4, [r4, #0]
 8003d00:	2c00      	cmp	r4, #0
 8003d02:	d1f7      	bne.n	8003cf4 <_fwalk_sglue+0xc>
 8003d04:	4630      	mov	r0, r6
 8003d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d907      	bls.n	8003d20 <_fwalk_sglue+0x38>
 8003d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d14:	3301      	adds	r3, #1
 8003d16:	d003      	beq.n	8003d20 <_fwalk_sglue+0x38>
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	47c0      	blx	r8
 8003d1e:	4306      	orrs	r6, r0
 8003d20:	3568      	adds	r5, #104	; 0x68
 8003d22:	e7e9      	b.n	8003cf8 <_fwalk_sglue+0x10>

08003d24 <iprintf>:
 8003d24:	b40f      	push	{r0, r1, r2, r3}
 8003d26:	b507      	push	{r0, r1, r2, lr}
 8003d28:	4906      	ldr	r1, [pc, #24]	; (8003d44 <iprintf+0x20>)
 8003d2a:	ab04      	add	r3, sp, #16
 8003d2c:	6808      	ldr	r0, [r1, #0]
 8003d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d32:	6881      	ldr	r1, [r0, #8]
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	f000 f9e7 	bl	8004108 <_vfiprintf_r>
 8003d3a:	b003      	add	sp, #12
 8003d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d40:	b004      	add	sp, #16
 8003d42:	4770      	bx	lr
 8003d44:	20000068 	.word	0x20000068

08003d48 <__sread>:
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d50:	f000 f868 	bl	8003e24 <_read_r>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	bfab      	itete	ge
 8003d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d5c:	181b      	addge	r3, r3, r0
 8003d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d62:	bfac      	ite	ge
 8003d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d66:	81a3      	strhlt	r3, [r4, #12]
 8003d68:	bd10      	pop	{r4, pc}

08003d6a <__swrite>:
 8003d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	461f      	mov	r7, r3
 8003d70:	898b      	ldrh	r3, [r1, #12]
 8003d72:	05db      	lsls	r3, r3, #23
 8003d74:	4605      	mov	r5, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	4616      	mov	r6, r2
 8003d7a:	d505      	bpl.n	8003d88 <__swrite+0x1e>
 8003d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d80:	2302      	movs	r3, #2
 8003d82:	2200      	movs	r2, #0
 8003d84:	f000 f83c 	bl	8003e00 <_lseek_r>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	4632      	mov	r2, r6
 8003d96:	463b      	mov	r3, r7
 8003d98:	4628      	mov	r0, r5
 8003d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9e:	f000 b853 	b.w	8003e48 <_write_r>

08003da2 <__sseek>:
 8003da2:	b510      	push	{r4, lr}
 8003da4:	460c      	mov	r4, r1
 8003da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003daa:	f000 f829 	bl	8003e00 <_lseek_r>
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	bf15      	itete	ne
 8003db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dbe:	81a3      	strheq	r3, [r4, #12]
 8003dc0:	bf18      	it	ne
 8003dc2:	81a3      	strhne	r3, [r4, #12]
 8003dc4:	bd10      	pop	{r4, pc}

08003dc6 <__sclose>:
 8003dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dca:	f000 b809 	b.w	8003de0 <_close_r>

08003dce <memset>:
 8003dce:	4402      	add	r2, r0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d100      	bne.n	8003dd8 <memset+0xa>
 8003dd6:	4770      	bx	lr
 8003dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003ddc:	e7f9      	b.n	8003dd2 <memset+0x4>
	...

08003de0 <_close_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d06      	ldr	r5, [pc, #24]	; (8003dfc <_close_r+0x1c>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	f7fc ff98 	bl	8000d20 <_close>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_close_r+0x1a>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_close_r+0x1a>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	200035e8 	.word	0x200035e8

08003e00 <_lseek_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4d07      	ldr	r5, [pc, #28]	; (8003e20 <_lseek_r+0x20>)
 8003e04:	4604      	mov	r4, r0
 8003e06:	4608      	mov	r0, r1
 8003e08:	4611      	mov	r1, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	602a      	str	r2, [r5, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f7fc ffad 	bl	8000d6e <_lseek>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_lseek_r+0x1e>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_lseek_r+0x1e>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	200035e8 	.word	0x200035e8

08003e24 <_read_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_read_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fc ff3b 	bl	8000cae <_read>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_read_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_read_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	200035e8 	.word	0x200035e8

08003e48 <_write_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <_write_r+0x20>)
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	4608      	mov	r0, r1
 8003e50:	4611      	mov	r1, r2
 8003e52:	2200      	movs	r2, #0
 8003e54:	602a      	str	r2, [r5, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fc ff46 	bl	8000ce8 <_write>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_write_r+0x1e>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_write_r+0x1e>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	200035e8 	.word	0x200035e8

08003e6c <__errno>:
 8003e6c:	4b01      	ldr	r3, [pc, #4]	; (8003e74 <__errno+0x8>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000068 	.word	0x20000068

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4d0d      	ldr	r5, [pc, #52]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7c:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e7e:	1b64      	subs	r4, r4, r5
 8003e80:	10a4      	asrs	r4, r4, #2
 8003e82:	2600      	movs	r6, #0
 8003e84:	42a6      	cmp	r6, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	4d0b      	ldr	r5, [pc, #44]	; (8003eb8 <__libc_init_array+0x40>)
 8003e8a:	4c0c      	ldr	r4, [pc, #48]	; (8003ebc <__libc_init_array+0x44>)
 8003e8c:	f000 fdbe 	bl	8004a0c <_init>
 8003e90:	1b64      	subs	r4, r4, r5
 8003e92:	10a4      	asrs	r4, r4, #2
 8003e94:	2600      	movs	r6, #0
 8003e96:	42a6      	cmp	r6, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea0:	4798      	blx	r3
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eaa:	4798      	blx	r3
 8003eac:	3601      	adds	r6, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08004b30 	.word	0x08004b30
 8003eb4:	08004b30 	.word	0x08004b30
 8003eb8:	08004b30 	.word	0x08004b30
 8003ebc:	08004b34 	.word	0x08004b34

08003ec0 <__retarget_lock_acquire_recursive>:
 8003ec0:	4770      	bx	lr

08003ec2 <__retarget_lock_release_recursive>:
 8003ec2:	4770      	bx	lr

08003ec4 <_free_r>:
 8003ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ec6:	2900      	cmp	r1, #0
 8003ec8:	d044      	beq.n	8003f54 <_free_r+0x90>
 8003eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ece:	9001      	str	r0, [sp, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8003ed6:	bfb8      	it	lt
 8003ed8:	18e4      	addlt	r4, r4, r3
 8003eda:	f000 f8df 	bl	800409c <__malloc_lock>
 8003ede:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <_free_r+0x94>)
 8003ee0:	9801      	ldr	r0, [sp, #4]
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	b933      	cbnz	r3, 8003ef4 <_free_r+0x30>
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	6014      	str	r4, [r2, #0]
 8003eea:	b003      	add	sp, #12
 8003eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ef0:	f000 b8da 	b.w	80040a8 <__malloc_unlock>
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d908      	bls.n	8003f0a <_free_r+0x46>
 8003ef8:	6825      	ldr	r5, [r4, #0]
 8003efa:	1961      	adds	r1, r4, r5
 8003efc:	428b      	cmp	r3, r1
 8003efe:	bf01      	itttt	eq
 8003f00:	6819      	ldreq	r1, [r3, #0]
 8003f02:	685b      	ldreq	r3, [r3, #4]
 8003f04:	1949      	addeq	r1, r1, r5
 8003f06:	6021      	streq	r1, [r4, #0]
 8003f08:	e7ed      	b.n	8003ee6 <_free_r+0x22>
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	b10b      	cbz	r3, 8003f14 <_free_r+0x50>
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	d9fa      	bls.n	8003f0a <_free_r+0x46>
 8003f14:	6811      	ldr	r1, [r2, #0]
 8003f16:	1855      	adds	r5, r2, r1
 8003f18:	42a5      	cmp	r5, r4
 8003f1a:	d10b      	bne.n	8003f34 <_free_r+0x70>
 8003f1c:	6824      	ldr	r4, [r4, #0]
 8003f1e:	4421      	add	r1, r4
 8003f20:	1854      	adds	r4, r2, r1
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	6011      	str	r1, [r2, #0]
 8003f26:	d1e0      	bne.n	8003eea <_free_r+0x26>
 8003f28:	681c      	ldr	r4, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	6053      	str	r3, [r2, #4]
 8003f2e:	440c      	add	r4, r1
 8003f30:	6014      	str	r4, [r2, #0]
 8003f32:	e7da      	b.n	8003eea <_free_r+0x26>
 8003f34:	d902      	bls.n	8003f3c <_free_r+0x78>
 8003f36:	230c      	movs	r3, #12
 8003f38:	6003      	str	r3, [r0, #0]
 8003f3a:	e7d6      	b.n	8003eea <_free_r+0x26>
 8003f3c:	6825      	ldr	r5, [r4, #0]
 8003f3e:	1961      	adds	r1, r4, r5
 8003f40:	428b      	cmp	r3, r1
 8003f42:	bf04      	itt	eq
 8003f44:	6819      	ldreq	r1, [r3, #0]
 8003f46:	685b      	ldreq	r3, [r3, #4]
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	bf04      	itt	eq
 8003f4c:	1949      	addeq	r1, r1, r5
 8003f4e:	6021      	streq	r1, [r4, #0]
 8003f50:	6054      	str	r4, [r2, #4]
 8003f52:	e7ca      	b.n	8003eea <_free_r+0x26>
 8003f54:	b003      	add	sp, #12
 8003f56:	bd30      	pop	{r4, r5, pc}
 8003f58:	200035f0 	.word	0x200035f0

08003f5c <sbrk_aligned>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4e0e      	ldr	r6, [pc, #56]	; (8003f98 <sbrk_aligned+0x3c>)
 8003f60:	460c      	mov	r4, r1
 8003f62:	6831      	ldr	r1, [r6, #0]
 8003f64:	4605      	mov	r5, r0
 8003f66:	b911      	cbnz	r1, 8003f6e <sbrk_aligned+0x12>
 8003f68:	f000 fcbc 	bl	80048e4 <_sbrk_r>
 8003f6c:	6030      	str	r0, [r6, #0]
 8003f6e:	4621      	mov	r1, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	f000 fcb7 	bl	80048e4 <_sbrk_r>
 8003f76:	1c43      	adds	r3, r0, #1
 8003f78:	d00a      	beq.n	8003f90 <sbrk_aligned+0x34>
 8003f7a:	1cc4      	adds	r4, r0, #3
 8003f7c:	f024 0403 	bic.w	r4, r4, #3
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d007      	beq.n	8003f94 <sbrk_aligned+0x38>
 8003f84:	1a21      	subs	r1, r4, r0
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 fcac 	bl	80048e4 <_sbrk_r>
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d101      	bne.n	8003f94 <sbrk_aligned+0x38>
 8003f90:	f04f 34ff 	mov.w	r4, #4294967295
 8003f94:	4620      	mov	r0, r4
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	200035f4 	.word	0x200035f4

08003f9c <_malloc_r>:
 8003f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	1ccd      	adds	r5, r1, #3
 8003fa2:	f025 0503 	bic.w	r5, r5, #3
 8003fa6:	3508      	adds	r5, #8
 8003fa8:	2d0c      	cmp	r5, #12
 8003faa:	bf38      	it	cc
 8003fac:	250c      	movcc	r5, #12
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	db01      	blt.n	8003fb8 <_malloc_r+0x1c>
 8003fb4:	42a9      	cmp	r1, r5
 8003fb6:	d905      	bls.n	8003fc4 <_malloc_r+0x28>
 8003fb8:	230c      	movs	r3, #12
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004098 <_malloc_r+0xfc>
 8003fc8:	f000 f868 	bl	800409c <__malloc_lock>
 8003fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd0:	461c      	mov	r4, r3
 8003fd2:	bb5c      	cbnz	r4, 800402c <_malloc_r+0x90>
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f7ff ffc0 	bl	8003f5c <sbrk_aligned>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	4604      	mov	r4, r0
 8003fe0:	d155      	bne.n	800408e <_malloc_r+0xf2>
 8003fe2:	f8d8 4000 	ldr.w	r4, [r8]
 8003fe6:	4626      	mov	r6, r4
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	d145      	bne.n	8004078 <_malloc_r+0xdc>
 8003fec:	2c00      	cmp	r4, #0
 8003fee:	d048      	beq.n	8004082 <_malloc_r+0xe6>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	eb04 0903 	add.w	r9, r4, r3
 8003ffa:	f000 fc73 	bl	80048e4 <_sbrk_r>
 8003ffe:	4581      	cmp	r9, r0
 8004000:	d13f      	bne.n	8004082 <_malloc_r+0xe6>
 8004002:	6821      	ldr	r1, [r4, #0]
 8004004:	1a6d      	subs	r5, r5, r1
 8004006:	4629      	mov	r1, r5
 8004008:	4638      	mov	r0, r7
 800400a:	f7ff ffa7 	bl	8003f5c <sbrk_aligned>
 800400e:	3001      	adds	r0, #1
 8004010:	d037      	beq.n	8004082 <_malloc_r+0xe6>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	442b      	add	r3, r5
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	f8d8 3000 	ldr.w	r3, [r8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d038      	beq.n	8004092 <_malloc_r+0xf6>
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	42a2      	cmp	r2, r4
 8004024:	d12b      	bne.n	800407e <_malloc_r+0xe2>
 8004026:	2200      	movs	r2, #0
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	e00f      	b.n	800404c <_malloc_r+0xb0>
 800402c:	6822      	ldr	r2, [r4, #0]
 800402e:	1b52      	subs	r2, r2, r5
 8004030:	d41f      	bmi.n	8004072 <_malloc_r+0xd6>
 8004032:	2a0b      	cmp	r2, #11
 8004034:	d917      	bls.n	8004066 <_malloc_r+0xca>
 8004036:	1961      	adds	r1, r4, r5
 8004038:	42a3      	cmp	r3, r4
 800403a:	6025      	str	r5, [r4, #0]
 800403c:	bf18      	it	ne
 800403e:	6059      	strne	r1, [r3, #4]
 8004040:	6863      	ldr	r3, [r4, #4]
 8004042:	bf08      	it	eq
 8004044:	f8c8 1000 	streq.w	r1, [r8]
 8004048:	5162      	str	r2, [r4, r5]
 800404a:	604b      	str	r3, [r1, #4]
 800404c:	4638      	mov	r0, r7
 800404e:	f104 060b 	add.w	r6, r4, #11
 8004052:	f000 f829 	bl	80040a8 <__malloc_unlock>
 8004056:	f026 0607 	bic.w	r6, r6, #7
 800405a:	1d23      	adds	r3, r4, #4
 800405c:	1af2      	subs	r2, r6, r3
 800405e:	d0ae      	beq.n	8003fbe <_malloc_r+0x22>
 8004060:	1b9b      	subs	r3, r3, r6
 8004062:	50a3      	str	r3, [r4, r2]
 8004064:	e7ab      	b.n	8003fbe <_malloc_r+0x22>
 8004066:	42a3      	cmp	r3, r4
 8004068:	6862      	ldr	r2, [r4, #4]
 800406a:	d1dd      	bne.n	8004028 <_malloc_r+0x8c>
 800406c:	f8c8 2000 	str.w	r2, [r8]
 8004070:	e7ec      	b.n	800404c <_malloc_r+0xb0>
 8004072:	4623      	mov	r3, r4
 8004074:	6864      	ldr	r4, [r4, #4]
 8004076:	e7ac      	b.n	8003fd2 <_malloc_r+0x36>
 8004078:	4634      	mov	r4, r6
 800407a:	6876      	ldr	r6, [r6, #4]
 800407c:	e7b4      	b.n	8003fe8 <_malloc_r+0x4c>
 800407e:	4613      	mov	r3, r2
 8004080:	e7cc      	b.n	800401c <_malloc_r+0x80>
 8004082:	230c      	movs	r3, #12
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4638      	mov	r0, r7
 8004088:	f000 f80e 	bl	80040a8 <__malloc_unlock>
 800408c:	e797      	b.n	8003fbe <_malloc_r+0x22>
 800408e:	6025      	str	r5, [r4, #0]
 8004090:	e7dc      	b.n	800404c <_malloc_r+0xb0>
 8004092:	605b      	str	r3, [r3, #4]
 8004094:	deff      	udf	#255	; 0xff
 8004096:	bf00      	nop
 8004098:	200035f0 	.word	0x200035f0

0800409c <__malloc_lock>:
 800409c:	4801      	ldr	r0, [pc, #4]	; (80040a4 <__malloc_lock+0x8>)
 800409e:	f7ff bf0f 	b.w	8003ec0 <__retarget_lock_acquire_recursive>
 80040a2:	bf00      	nop
 80040a4:	200035ec 	.word	0x200035ec

080040a8 <__malloc_unlock>:
 80040a8:	4801      	ldr	r0, [pc, #4]	; (80040b0 <__malloc_unlock+0x8>)
 80040aa:	f7ff bf0a 	b.w	8003ec2 <__retarget_lock_release_recursive>
 80040ae:	bf00      	nop
 80040b0:	200035ec 	.word	0x200035ec

080040b4 <__sfputc_r>:
 80040b4:	6893      	ldr	r3, [r2, #8]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	b410      	push	{r4}
 80040bc:	6093      	str	r3, [r2, #8]
 80040be:	da08      	bge.n	80040d2 <__sfputc_r+0x1e>
 80040c0:	6994      	ldr	r4, [r2, #24]
 80040c2:	42a3      	cmp	r3, r4
 80040c4:	db01      	blt.n	80040ca <__sfputc_r+0x16>
 80040c6:	290a      	cmp	r1, #10
 80040c8:	d103      	bne.n	80040d2 <__sfputc_r+0x1e>
 80040ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ce:	f000 bb73 	b.w	80047b8 <__swbuf_r>
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	1c58      	adds	r0, r3, #1
 80040d6:	6010      	str	r0, [r2, #0]
 80040d8:	7019      	strb	r1, [r3, #0]
 80040da:	4608      	mov	r0, r1
 80040dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <__sfputs_r>:
 80040e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e4:	4606      	mov	r6, r0
 80040e6:	460f      	mov	r7, r1
 80040e8:	4614      	mov	r4, r2
 80040ea:	18d5      	adds	r5, r2, r3
 80040ec:	42ac      	cmp	r4, r5
 80040ee:	d101      	bne.n	80040f4 <__sfputs_r+0x12>
 80040f0:	2000      	movs	r0, #0
 80040f2:	e007      	b.n	8004104 <__sfputs_r+0x22>
 80040f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f8:	463a      	mov	r2, r7
 80040fa:	4630      	mov	r0, r6
 80040fc:	f7ff ffda 	bl	80040b4 <__sfputc_r>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d1f3      	bne.n	80040ec <__sfputs_r+0xa>
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004108 <_vfiprintf_r>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	460d      	mov	r5, r1
 800410e:	b09d      	sub	sp, #116	; 0x74
 8004110:	4614      	mov	r4, r2
 8004112:	4698      	mov	r8, r3
 8004114:	4606      	mov	r6, r0
 8004116:	b118      	cbz	r0, 8004120 <_vfiprintf_r+0x18>
 8004118:	6a03      	ldr	r3, [r0, #32]
 800411a:	b90b      	cbnz	r3, 8004120 <_vfiprintf_r+0x18>
 800411c:	f7ff fdcc 	bl	8003cb8 <__sinit>
 8004120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004122:	07d9      	lsls	r1, r3, #31
 8004124:	d405      	bmi.n	8004132 <_vfiprintf_r+0x2a>
 8004126:	89ab      	ldrh	r3, [r5, #12]
 8004128:	059a      	lsls	r2, r3, #22
 800412a:	d402      	bmi.n	8004132 <_vfiprintf_r+0x2a>
 800412c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800412e:	f7ff fec7 	bl	8003ec0 <__retarget_lock_acquire_recursive>
 8004132:	89ab      	ldrh	r3, [r5, #12]
 8004134:	071b      	lsls	r3, r3, #28
 8004136:	d501      	bpl.n	800413c <_vfiprintf_r+0x34>
 8004138:	692b      	ldr	r3, [r5, #16]
 800413a:	b99b      	cbnz	r3, 8004164 <_vfiprintf_r+0x5c>
 800413c:	4629      	mov	r1, r5
 800413e:	4630      	mov	r0, r6
 8004140:	f000 fb78 	bl	8004834 <__swsetup_r>
 8004144:	b170      	cbz	r0, 8004164 <_vfiprintf_r+0x5c>
 8004146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004148:	07dc      	lsls	r4, r3, #31
 800414a:	d504      	bpl.n	8004156 <_vfiprintf_r+0x4e>
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	b01d      	add	sp, #116	; 0x74
 8004152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	0598      	lsls	r0, r3, #22
 800415a:	d4f7      	bmi.n	800414c <_vfiprintf_r+0x44>
 800415c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800415e:	f7ff feb0 	bl	8003ec2 <__retarget_lock_release_recursive>
 8004162:	e7f3      	b.n	800414c <_vfiprintf_r+0x44>
 8004164:	2300      	movs	r3, #0
 8004166:	9309      	str	r3, [sp, #36]	; 0x24
 8004168:	2320      	movs	r3, #32
 800416a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800416e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004172:	2330      	movs	r3, #48	; 0x30
 8004174:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004328 <_vfiprintf_r+0x220>
 8004178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800417c:	f04f 0901 	mov.w	r9, #1
 8004180:	4623      	mov	r3, r4
 8004182:	469a      	mov	sl, r3
 8004184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004188:	b10a      	cbz	r2, 800418e <_vfiprintf_r+0x86>
 800418a:	2a25      	cmp	r2, #37	; 0x25
 800418c:	d1f9      	bne.n	8004182 <_vfiprintf_r+0x7a>
 800418e:	ebba 0b04 	subs.w	fp, sl, r4
 8004192:	d00b      	beq.n	80041ac <_vfiprintf_r+0xa4>
 8004194:	465b      	mov	r3, fp
 8004196:	4622      	mov	r2, r4
 8004198:	4629      	mov	r1, r5
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff ffa1 	bl	80040e2 <__sfputs_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	f000 80a9 	beq.w	80042f8 <_vfiprintf_r+0x1f0>
 80041a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a8:	445a      	add	r2, fp
 80041aa:	9209      	str	r2, [sp, #36]	; 0x24
 80041ac:	f89a 3000 	ldrb.w	r3, [sl]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a1 	beq.w	80042f8 <_vfiprintf_r+0x1f0>
 80041b6:	2300      	movs	r3, #0
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041c0:	f10a 0a01 	add.w	sl, sl, #1
 80041c4:	9304      	str	r3, [sp, #16]
 80041c6:	9307      	str	r3, [sp, #28]
 80041c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041cc:	931a      	str	r3, [sp, #104]	; 0x68
 80041ce:	4654      	mov	r4, sl
 80041d0:	2205      	movs	r2, #5
 80041d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d6:	4854      	ldr	r0, [pc, #336]	; (8004328 <_vfiprintf_r+0x220>)
 80041d8:	f7fc f91a 	bl	8000410 <memchr>
 80041dc:	9a04      	ldr	r2, [sp, #16]
 80041de:	b9d8      	cbnz	r0, 8004218 <_vfiprintf_r+0x110>
 80041e0:	06d1      	lsls	r1, r2, #27
 80041e2:	bf44      	itt	mi
 80041e4:	2320      	movmi	r3, #32
 80041e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ea:	0713      	lsls	r3, r2, #28
 80041ec:	bf44      	itt	mi
 80041ee:	232b      	movmi	r3, #43	; 0x2b
 80041f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041f4:	f89a 3000 	ldrb.w	r3, [sl]
 80041f8:	2b2a      	cmp	r3, #42	; 0x2a
 80041fa:	d015      	beq.n	8004228 <_vfiprintf_r+0x120>
 80041fc:	9a07      	ldr	r2, [sp, #28]
 80041fe:	4654      	mov	r4, sl
 8004200:	2000      	movs	r0, #0
 8004202:	f04f 0c0a 	mov.w	ip, #10
 8004206:	4621      	mov	r1, r4
 8004208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420c:	3b30      	subs	r3, #48	; 0x30
 800420e:	2b09      	cmp	r3, #9
 8004210:	d94d      	bls.n	80042ae <_vfiprintf_r+0x1a6>
 8004212:	b1b0      	cbz	r0, 8004242 <_vfiprintf_r+0x13a>
 8004214:	9207      	str	r2, [sp, #28]
 8004216:	e014      	b.n	8004242 <_vfiprintf_r+0x13a>
 8004218:	eba0 0308 	sub.w	r3, r0, r8
 800421c:	fa09 f303 	lsl.w	r3, r9, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	46a2      	mov	sl, r4
 8004226:	e7d2      	b.n	80041ce <_vfiprintf_r+0xc6>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	1d19      	adds	r1, r3, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	9103      	str	r1, [sp, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	bfbb      	ittet	lt
 8004234:	425b      	neglt	r3, r3
 8004236:	f042 0202 	orrlt.w	r2, r2, #2
 800423a:	9307      	strge	r3, [sp, #28]
 800423c:	9307      	strlt	r3, [sp, #28]
 800423e:	bfb8      	it	lt
 8004240:	9204      	strlt	r2, [sp, #16]
 8004242:	7823      	ldrb	r3, [r4, #0]
 8004244:	2b2e      	cmp	r3, #46	; 0x2e
 8004246:	d10c      	bne.n	8004262 <_vfiprintf_r+0x15a>
 8004248:	7863      	ldrb	r3, [r4, #1]
 800424a:	2b2a      	cmp	r3, #42	; 0x2a
 800424c:	d134      	bne.n	80042b8 <_vfiprintf_r+0x1b0>
 800424e:	9b03      	ldr	r3, [sp, #12]
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	9203      	str	r2, [sp, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfb8      	it	lt
 800425a:	f04f 33ff 	movlt.w	r3, #4294967295
 800425e:	3402      	adds	r4, #2
 8004260:	9305      	str	r3, [sp, #20]
 8004262:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004338 <_vfiprintf_r+0x230>
 8004266:	7821      	ldrb	r1, [r4, #0]
 8004268:	2203      	movs	r2, #3
 800426a:	4650      	mov	r0, sl
 800426c:	f7fc f8d0 	bl	8000410 <memchr>
 8004270:	b138      	cbz	r0, 8004282 <_vfiprintf_r+0x17a>
 8004272:	9b04      	ldr	r3, [sp, #16]
 8004274:	eba0 000a 	sub.w	r0, r0, sl
 8004278:	2240      	movs	r2, #64	; 0x40
 800427a:	4082      	lsls	r2, r0
 800427c:	4313      	orrs	r3, r2
 800427e:	3401      	adds	r4, #1
 8004280:	9304      	str	r3, [sp, #16]
 8004282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004286:	4829      	ldr	r0, [pc, #164]	; (800432c <_vfiprintf_r+0x224>)
 8004288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800428c:	2206      	movs	r2, #6
 800428e:	f7fc f8bf 	bl	8000410 <memchr>
 8004292:	2800      	cmp	r0, #0
 8004294:	d03f      	beq.n	8004316 <_vfiprintf_r+0x20e>
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <_vfiprintf_r+0x228>)
 8004298:	bb1b      	cbnz	r3, 80042e2 <_vfiprintf_r+0x1da>
 800429a:	9b03      	ldr	r3, [sp, #12]
 800429c:	3307      	adds	r3, #7
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	3308      	adds	r3, #8
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a8:	443b      	add	r3, r7
 80042aa:	9309      	str	r3, [sp, #36]	; 0x24
 80042ac:	e768      	b.n	8004180 <_vfiprintf_r+0x78>
 80042ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80042b2:	460c      	mov	r4, r1
 80042b4:	2001      	movs	r0, #1
 80042b6:	e7a6      	b.n	8004206 <_vfiprintf_r+0xfe>
 80042b8:	2300      	movs	r3, #0
 80042ba:	3401      	adds	r4, #1
 80042bc:	9305      	str	r3, [sp, #20]
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0c0a 	mov.w	ip, #10
 80042c4:	4620      	mov	r0, r4
 80042c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042ca:	3a30      	subs	r2, #48	; 0x30
 80042cc:	2a09      	cmp	r2, #9
 80042ce:	d903      	bls.n	80042d8 <_vfiprintf_r+0x1d0>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0c6      	beq.n	8004262 <_vfiprintf_r+0x15a>
 80042d4:	9105      	str	r1, [sp, #20]
 80042d6:	e7c4      	b.n	8004262 <_vfiprintf_r+0x15a>
 80042d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80042dc:	4604      	mov	r4, r0
 80042de:	2301      	movs	r3, #1
 80042e0:	e7f0      	b.n	80042c4 <_vfiprintf_r+0x1bc>
 80042e2:	ab03      	add	r3, sp, #12
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	462a      	mov	r2, r5
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <_vfiprintf_r+0x22c>)
 80042ea:	a904      	add	r1, sp, #16
 80042ec:	4630      	mov	r0, r6
 80042ee:	f3af 8000 	nop.w
 80042f2:	4607      	mov	r7, r0
 80042f4:	1c78      	adds	r0, r7, #1
 80042f6:	d1d6      	bne.n	80042a6 <_vfiprintf_r+0x19e>
 80042f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042fa:	07d9      	lsls	r1, r3, #31
 80042fc:	d405      	bmi.n	800430a <_vfiprintf_r+0x202>
 80042fe:	89ab      	ldrh	r3, [r5, #12]
 8004300:	059a      	lsls	r2, r3, #22
 8004302:	d402      	bmi.n	800430a <_vfiprintf_r+0x202>
 8004304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004306:	f7ff fddc 	bl	8003ec2 <__retarget_lock_release_recursive>
 800430a:	89ab      	ldrh	r3, [r5, #12]
 800430c:	065b      	lsls	r3, r3, #25
 800430e:	f53f af1d 	bmi.w	800414c <_vfiprintf_r+0x44>
 8004312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004314:	e71c      	b.n	8004150 <_vfiprintf_r+0x48>
 8004316:	ab03      	add	r3, sp, #12
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	462a      	mov	r2, r5
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <_vfiprintf_r+0x22c>)
 800431e:	a904      	add	r1, sp, #16
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f879 	bl	8004418 <_printf_i>
 8004326:	e7e4      	b.n	80042f2 <_vfiprintf_r+0x1ea>
 8004328:	08004af4 	.word	0x08004af4
 800432c:	08004afe 	.word	0x08004afe
 8004330:	00000000 	.word	0x00000000
 8004334:	080040e3 	.word	0x080040e3
 8004338:	08004afa 	.word	0x08004afa

0800433c <_printf_common>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	4616      	mov	r6, r2
 8004342:	4699      	mov	r9, r3
 8004344:	688a      	ldr	r2, [r1, #8]
 8004346:	690b      	ldr	r3, [r1, #16]
 8004348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800434c:	4293      	cmp	r3, r2
 800434e:	bfb8      	it	lt
 8004350:	4613      	movlt	r3, r2
 8004352:	6033      	str	r3, [r6, #0]
 8004354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004358:	4607      	mov	r7, r0
 800435a:	460c      	mov	r4, r1
 800435c:	b10a      	cbz	r2, 8004362 <_printf_common+0x26>
 800435e:	3301      	adds	r3, #1
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	0699      	lsls	r1, r3, #26
 8004366:	bf42      	ittt	mi
 8004368:	6833      	ldrmi	r3, [r6, #0]
 800436a:	3302      	addmi	r3, #2
 800436c:	6033      	strmi	r3, [r6, #0]
 800436e:	6825      	ldr	r5, [r4, #0]
 8004370:	f015 0506 	ands.w	r5, r5, #6
 8004374:	d106      	bne.n	8004384 <_printf_common+0x48>
 8004376:	f104 0a19 	add.w	sl, r4, #25
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	6832      	ldr	r2, [r6, #0]
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	42ab      	cmp	r3, r5
 8004382:	dc26      	bgt.n	80043d2 <_printf_common+0x96>
 8004384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004388:	1e13      	subs	r3, r2, #0
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	bf18      	it	ne
 800438e:	2301      	movne	r3, #1
 8004390:	0692      	lsls	r2, r2, #26
 8004392:	d42b      	bmi.n	80043ec <_printf_common+0xb0>
 8004394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004398:	4649      	mov	r1, r9
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d01e      	beq.n	80043e0 <_printf_common+0xa4>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	6922      	ldr	r2, [r4, #16]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf02      	ittt	eq
 80043ae:	68e5      	ldreq	r5, [r4, #12]
 80043b0:	6833      	ldreq	r3, [r6, #0]
 80043b2:	1aed      	subeq	r5, r5, r3
 80043b4:	68a3      	ldr	r3, [r4, #8]
 80043b6:	bf0c      	ite	eq
 80043b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043bc:	2500      	movne	r5, #0
 80043be:	4293      	cmp	r3, r2
 80043c0:	bfc4      	itt	gt
 80043c2:	1a9b      	subgt	r3, r3, r2
 80043c4:	18ed      	addgt	r5, r5, r3
 80043c6:	2600      	movs	r6, #0
 80043c8:	341a      	adds	r4, #26
 80043ca:	42b5      	cmp	r5, r6
 80043cc:	d11a      	bne.n	8004404 <_printf_common+0xc8>
 80043ce:	2000      	movs	r0, #0
 80043d0:	e008      	b.n	80043e4 <_printf_common+0xa8>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4652      	mov	r2, sl
 80043d6:	4649      	mov	r1, r9
 80043d8:	4638      	mov	r0, r7
 80043da:	47c0      	blx	r8
 80043dc:	3001      	adds	r0, #1
 80043de:	d103      	bne.n	80043e8 <_printf_common+0xac>
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	3501      	adds	r5, #1
 80043ea:	e7c6      	b.n	800437a <_printf_common+0x3e>
 80043ec:	18e1      	adds	r1, r4, r3
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	2030      	movs	r0, #48	; 0x30
 80043f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043f6:	4422      	add	r2, r4
 80043f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004400:	3302      	adds	r3, #2
 8004402:	e7c7      	b.n	8004394 <_printf_common+0x58>
 8004404:	2301      	movs	r3, #1
 8004406:	4622      	mov	r2, r4
 8004408:	4649      	mov	r1, r9
 800440a:	4638      	mov	r0, r7
 800440c:	47c0      	blx	r8
 800440e:	3001      	adds	r0, #1
 8004410:	d0e6      	beq.n	80043e0 <_printf_common+0xa4>
 8004412:	3601      	adds	r6, #1
 8004414:	e7d9      	b.n	80043ca <_printf_common+0x8e>
	...

08004418 <_printf_i>:
 8004418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	7e0f      	ldrb	r7, [r1, #24]
 800441e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004420:	2f78      	cmp	r7, #120	; 0x78
 8004422:	4691      	mov	r9, r2
 8004424:	4680      	mov	r8, r0
 8004426:	460c      	mov	r4, r1
 8004428:	469a      	mov	sl, r3
 800442a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800442e:	d807      	bhi.n	8004440 <_printf_i+0x28>
 8004430:	2f62      	cmp	r7, #98	; 0x62
 8004432:	d80a      	bhi.n	800444a <_printf_i+0x32>
 8004434:	2f00      	cmp	r7, #0
 8004436:	f000 80d4 	beq.w	80045e2 <_printf_i+0x1ca>
 800443a:	2f58      	cmp	r7, #88	; 0x58
 800443c:	f000 80c0 	beq.w	80045c0 <_printf_i+0x1a8>
 8004440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004448:	e03a      	b.n	80044c0 <_printf_i+0xa8>
 800444a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800444e:	2b15      	cmp	r3, #21
 8004450:	d8f6      	bhi.n	8004440 <_printf_i+0x28>
 8004452:	a101      	add	r1, pc, #4	; (adr r1, 8004458 <_printf_i+0x40>)
 8004454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004458:	080044b1 	.word	0x080044b1
 800445c:	080044c5 	.word	0x080044c5
 8004460:	08004441 	.word	0x08004441
 8004464:	08004441 	.word	0x08004441
 8004468:	08004441 	.word	0x08004441
 800446c:	08004441 	.word	0x08004441
 8004470:	080044c5 	.word	0x080044c5
 8004474:	08004441 	.word	0x08004441
 8004478:	08004441 	.word	0x08004441
 800447c:	08004441 	.word	0x08004441
 8004480:	08004441 	.word	0x08004441
 8004484:	080045c9 	.word	0x080045c9
 8004488:	080044f1 	.word	0x080044f1
 800448c:	08004583 	.word	0x08004583
 8004490:	08004441 	.word	0x08004441
 8004494:	08004441 	.word	0x08004441
 8004498:	080045eb 	.word	0x080045eb
 800449c:	08004441 	.word	0x08004441
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	08004441 	.word	0x08004441
 80044a8:	08004441 	.word	0x08004441
 80044ac:	0800458b 	.word	0x0800458b
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	602a      	str	r2, [r5, #0]
 80044b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044c0:	2301      	movs	r3, #1
 80044c2:	e09f      	b.n	8004604 <_printf_i+0x1ec>
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	0607      	lsls	r7, r0, #24
 80044ca:	f103 0104 	add.w	r1, r3, #4
 80044ce:	6029      	str	r1, [r5, #0]
 80044d0:	d501      	bpl.n	80044d6 <_printf_i+0xbe>
 80044d2:	681e      	ldr	r6, [r3, #0]
 80044d4:	e003      	b.n	80044de <_printf_i+0xc6>
 80044d6:	0646      	lsls	r6, r0, #25
 80044d8:	d5fb      	bpl.n	80044d2 <_printf_i+0xba>
 80044da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044de:	2e00      	cmp	r6, #0
 80044e0:	da03      	bge.n	80044ea <_printf_i+0xd2>
 80044e2:	232d      	movs	r3, #45	; 0x2d
 80044e4:	4276      	negs	r6, r6
 80044e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ea:	485a      	ldr	r0, [pc, #360]	; (8004654 <_printf_i+0x23c>)
 80044ec:	230a      	movs	r3, #10
 80044ee:	e012      	b.n	8004516 <_printf_i+0xfe>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	1d19      	adds	r1, r3, #4
 80044f6:	6029      	str	r1, [r5, #0]
 80044f8:	0605      	lsls	r5, r0, #24
 80044fa:	d501      	bpl.n	8004500 <_printf_i+0xe8>
 80044fc:	681e      	ldr	r6, [r3, #0]
 80044fe:	e002      	b.n	8004506 <_printf_i+0xee>
 8004500:	0641      	lsls	r1, r0, #25
 8004502:	d5fb      	bpl.n	80044fc <_printf_i+0xe4>
 8004504:	881e      	ldrh	r6, [r3, #0]
 8004506:	4853      	ldr	r0, [pc, #332]	; (8004654 <_printf_i+0x23c>)
 8004508:	2f6f      	cmp	r7, #111	; 0x6f
 800450a:	bf0c      	ite	eq
 800450c:	2308      	moveq	r3, #8
 800450e:	230a      	movne	r3, #10
 8004510:	2100      	movs	r1, #0
 8004512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004516:	6865      	ldr	r5, [r4, #4]
 8004518:	60a5      	str	r5, [r4, #8]
 800451a:	2d00      	cmp	r5, #0
 800451c:	bfa2      	ittt	ge
 800451e:	6821      	ldrge	r1, [r4, #0]
 8004520:	f021 0104 	bicge.w	r1, r1, #4
 8004524:	6021      	strge	r1, [r4, #0]
 8004526:	b90e      	cbnz	r6, 800452c <_printf_i+0x114>
 8004528:	2d00      	cmp	r5, #0
 800452a:	d04b      	beq.n	80045c4 <_printf_i+0x1ac>
 800452c:	4615      	mov	r5, r2
 800452e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004532:	fb03 6711 	mls	r7, r3, r1, r6
 8004536:	5dc7      	ldrb	r7, [r0, r7]
 8004538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800453c:	4637      	mov	r7, r6
 800453e:	42bb      	cmp	r3, r7
 8004540:	460e      	mov	r6, r1
 8004542:	d9f4      	bls.n	800452e <_printf_i+0x116>
 8004544:	2b08      	cmp	r3, #8
 8004546:	d10b      	bne.n	8004560 <_printf_i+0x148>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	07de      	lsls	r6, r3, #31
 800454c:	d508      	bpl.n	8004560 <_printf_i+0x148>
 800454e:	6923      	ldr	r3, [r4, #16]
 8004550:	6861      	ldr	r1, [r4, #4]
 8004552:	4299      	cmp	r1, r3
 8004554:	bfde      	ittt	le
 8004556:	2330      	movle	r3, #48	; 0x30
 8004558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800455c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004560:	1b52      	subs	r2, r2, r5
 8004562:	6122      	str	r2, [r4, #16]
 8004564:	f8cd a000 	str.w	sl, [sp]
 8004568:	464b      	mov	r3, r9
 800456a:	aa03      	add	r2, sp, #12
 800456c:	4621      	mov	r1, r4
 800456e:	4640      	mov	r0, r8
 8004570:	f7ff fee4 	bl	800433c <_printf_common>
 8004574:	3001      	adds	r0, #1
 8004576:	d14a      	bne.n	800460e <_printf_i+0x1f6>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	b004      	add	sp, #16
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	f043 0320 	orr.w	r3, r3, #32
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	4833      	ldr	r0, [pc, #204]	; (8004658 <_printf_i+0x240>)
 800458c:	2778      	movs	r7, #120	; 0x78
 800458e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	6829      	ldr	r1, [r5, #0]
 8004596:	061f      	lsls	r7, r3, #24
 8004598:	f851 6b04 	ldr.w	r6, [r1], #4
 800459c:	d402      	bmi.n	80045a4 <_printf_i+0x18c>
 800459e:	065f      	lsls	r7, r3, #25
 80045a0:	bf48      	it	mi
 80045a2:	b2b6      	uxthmi	r6, r6
 80045a4:	07df      	lsls	r7, r3, #31
 80045a6:	bf48      	it	mi
 80045a8:	f043 0320 	orrmi.w	r3, r3, #32
 80045ac:	6029      	str	r1, [r5, #0]
 80045ae:	bf48      	it	mi
 80045b0:	6023      	strmi	r3, [r4, #0]
 80045b2:	b91e      	cbnz	r6, 80045bc <_printf_i+0x1a4>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f023 0320 	bic.w	r3, r3, #32
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	2310      	movs	r3, #16
 80045be:	e7a7      	b.n	8004510 <_printf_i+0xf8>
 80045c0:	4824      	ldr	r0, [pc, #144]	; (8004654 <_printf_i+0x23c>)
 80045c2:	e7e4      	b.n	800458e <_printf_i+0x176>
 80045c4:	4615      	mov	r5, r2
 80045c6:	e7bd      	b.n	8004544 <_printf_i+0x12c>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	6826      	ldr	r6, [r4, #0]
 80045cc:	6961      	ldr	r1, [r4, #20]
 80045ce:	1d18      	adds	r0, r3, #4
 80045d0:	6028      	str	r0, [r5, #0]
 80045d2:	0635      	lsls	r5, r6, #24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	d501      	bpl.n	80045dc <_printf_i+0x1c4>
 80045d8:	6019      	str	r1, [r3, #0]
 80045da:	e002      	b.n	80045e2 <_printf_i+0x1ca>
 80045dc:	0670      	lsls	r0, r6, #25
 80045de:	d5fb      	bpl.n	80045d8 <_printf_i+0x1c0>
 80045e0:	8019      	strh	r1, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	4615      	mov	r5, r2
 80045e8:	e7bc      	b.n	8004564 <_printf_i+0x14c>
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	1d1a      	adds	r2, r3, #4
 80045ee:	602a      	str	r2, [r5, #0]
 80045f0:	681d      	ldr	r5, [r3, #0]
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	2100      	movs	r1, #0
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7fb ff0a 	bl	8000410 <memchr>
 80045fc:	b108      	cbz	r0, 8004602 <_printf_i+0x1ea>
 80045fe:	1b40      	subs	r0, r0, r5
 8004600:	6060      	str	r0, [r4, #4]
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	2300      	movs	r3, #0
 8004608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800460c:	e7aa      	b.n	8004564 <_printf_i+0x14c>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	462a      	mov	r2, r5
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	47d0      	blx	sl
 8004618:	3001      	adds	r0, #1
 800461a:	d0ad      	beq.n	8004578 <_printf_i+0x160>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	079b      	lsls	r3, r3, #30
 8004620:	d413      	bmi.n	800464a <_printf_i+0x232>
 8004622:	68e0      	ldr	r0, [r4, #12]
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	4298      	cmp	r0, r3
 8004628:	bfb8      	it	lt
 800462a:	4618      	movlt	r0, r3
 800462c:	e7a6      	b.n	800457c <_printf_i+0x164>
 800462e:	2301      	movs	r3, #1
 8004630:	4632      	mov	r2, r6
 8004632:	4649      	mov	r1, r9
 8004634:	4640      	mov	r0, r8
 8004636:	47d0      	blx	sl
 8004638:	3001      	adds	r0, #1
 800463a:	d09d      	beq.n	8004578 <_printf_i+0x160>
 800463c:	3501      	adds	r5, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	9903      	ldr	r1, [sp, #12]
 8004642:	1a5b      	subs	r3, r3, r1
 8004644:	42ab      	cmp	r3, r5
 8004646:	dcf2      	bgt.n	800462e <_printf_i+0x216>
 8004648:	e7eb      	b.n	8004622 <_printf_i+0x20a>
 800464a:	2500      	movs	r5, #0
 800464c:	f104 0619 	add.w	r6, r4, #25
 8004650:	e7f5      	b.n	800463e <_printf_i+0x226>
 8004652:	bf00      	nop
 8004654:	08004b05 	.word	0x08004b05
 8004658:	08004b16 	.word	0x08004b16

0800465c <__sflush_r>:
 800465c:	898a      	ldrh	r2, [r1, #12]
 800465e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	0710      	lsls	r0, r2, #28
 8004666:	460c      	mov	r4, r1
 8004668:	d458      	bmi.n	800471c <__sflush_r+0xc0>
 800466a:	684b      	ldr	r3, [r1, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	dc05      	bgt.n	800467c <__sflush_r+0x20>
 8004670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	dc02      	bgt.n	800467c <__sflush_r+0x20>
 8004676:	2000      	movs	r0, #0
 8004678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800467c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800467e:	2e00      	cmp	r6, #0
 8004680:	d0f9      	beq.n	8004676 <__sflush_r+0x1a>
 8004682:	2300      	movs	r3, #0
 8004684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004688:	682f      	ldr	r7, [r5, #0]
 800468a:	6a21      	ldr	r1, [r4, #32]
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	d032      	beq.n	80046f6 <__sflush_r+0x9a>
 8004690:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	075a      	lsls	r2, r3, #29
 8004696:	d505      	bpl.n	80046a4 <__sflush_r+0x48>
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	1ac0      	subs	r0, r0, r3
 800469c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800469e:	b10b      	cbz	r3, 80046a4 <__sflush_r+0x48>
 80046a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046a2:	1ac0      	subs	r0, r0, r3
 80046a4:	2300      	movs	r3, #0
 80046a6:	4602      	mov	r2, r0
 80046a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046aa:	6a21      	ldr	r1, [r4, #32]
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b0      	blx	r6
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	d106      	bne.n	80046c4 <__sflush_r+0x68>
 80046b6:	6829      	ldr	r1, [r5, #0]
 80046b8:	291d      	cmp	r1, #29
 80046ba:	d82b      	bhi.n	8004714 <__sflush_r+0xb8>
 80046bc:	4a29      	ldr	r2, [pc, #164]	; (8004764 <__sflush_r+0x108>)
 80046be:	410a      	asrs	r2, r1
 80046c0:	07d6      	lsls	r6, r2, #31
 80046c2:	d427      	bmi.n	8004714 <__sflush_r+0xb8>
 80046c4:	2200      	movs	r2, #0
 80046c6:	6062      	str	r2, [r4, #4]
 80046c8:	04d9      	lsls	r1, r3, #19
 80046ca:	6922      	ldr	r2, [r4, #16]
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	d504      	bpl.n	80046da <__sflush_r+0x7e>
 80046d0:	1c42      	adds	r2, r0, #1
 80046d2:	d101      	bne.n	80046d8 <__sflush_r+0x7c>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b903      	cbnz	r3, 80046da <__sflush_r+0x7e>
 80046d8:	6560      	str	r0, [r4, #84]	; 0x54
 80046da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046dc:	602f      	str	r7, [r5, #0]
 80046de:	2900      	cmp	r1, #0
 80046e0:	d0c9      	beq.n	8004676 <__sflush_r+0x1a>
 80046e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046e6:	4299      	cmp	r1, r3
 80046e8:	d002      	beq.n	80046f0 <__sflush_r+0x94>
 80046ea:	4628      	mov	r0, r5
 80046ec:	f7ff fbea 	bl	8003ec4 <_free_r>
 80046f0:	2000      	movs	r0, #0
 80046f2:	6360      	str	r0, [r4, #52]	; 0x34
 80046f4:	e7c0      	b.n	8004678 <__sflush_r+0x1c>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b0      	blx	r6
 80046fc:	1c41      	adds	r1, r0, #1
 80046fe:	d1c8      	bne.n	8004692 <__sflush_r+0x36>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0c5      	beq.n	8004692 <__sflush_r+0x36>
 8004706:	2b1d      	cmp	r3, #29
 8004708:	d001      	beq.n	800470e <__sflush_r+0xb2>
 800470a:	2b16      	cmp	r3, #22
 800470c:	d101      	bne.n	8004712 <__sflush_r+0xb6>
 800470e:	602f      	str	r7, [r5, #0]
 8004710:	e7b1      	b.n	8004676 <__sflush_r+0x1a>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	e7ad      	b.n	8004678 <__sflush_r+0x1c>
 800471c:	690f      	ldr	r7, [r1, #16]
 800471e:	2f00      	cmp	r7, #0
 8004720:	d0a9      	beq.n	8004676 <__sflush_r+0x1a>
 8004722:	0793      	lsls	r3, r2, #30
 8004724:	680e      	ldr	r6, [r1, #0]
 8004726:	bf08      	it	eq
 8004728:	694b      	ldreq	r3, [r1, #20]
 800472a:	600f      	str	r7, [r1, #0]
 800472c:	bf18      	it	ne
 800472e:	2300      	movne	r3, #0
 8004730:	eba6 0807 	sub.w	r8, r6, r7
 8004734:	608b      	str	r3, [r1, #8]
 8004736:	f1b8 0f00 	cmp.w	r8, #0
 800473a:	dd9c      	ble.n	8004676 <__sflush_r+0x1a>
 800473c:	6a21      	ldr	r1, [r4, #32]
 800473e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004740:	4643      	mov	r3, r8
 8004742:	463a      	mov	r2, r7
 8004744:	4628      	mov	r0, r5
 8004746:	47b0      	blx	r6
 8004748:	2800      	cmp	r0, #0
 800474a:	dc06      	bgt.n	800475a <__sflush_r+0xfe>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e78e      	b.n	8004678 <__sflush_r+0x1c>
 800475a:	4407      	add	r7, r0
 800475c:	eba8 0800 	sub.w	r8, r8, r0
 8004760:	e7e9      	b.n	8004736 <__sflush_r+0xda>
 8004762:	bf00      	nop
 8004764:	dfbffffe 	.word	0xdfbffffe

08004768 <_fflush_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	4605      	mov	r5, r0
 800476e:	460c      	mov	r4, r1
 8004770:	b913      	cbnz	r3, 8004778 <_fflush_r+0x10>
 8004772:	2500      	movs	r5, #0
 8004774:	4628      	mov	r0, r5
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	b118      	cbz	r0, 8004782 <_fflush_r+0x1a>
 800477a:	6a03      	ldr	r3, [r0, #32]
 800477c:	b90b      	cbnz	r3, 8004782 <_fflush_r+0x1a>
 800477e:	f7ff fa9b 	bl	8003cb8 <__sinit>
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f3      	beq.n	8004772 <_fflush_r+0xa>
 800478a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800478c:	07d0      	lsls	r0, r2, #31
 800478e:	d404      	bmi.n	800479a <_fflush_r+0x32>
 8004790:	0599      	lsls	r1, r3, #22
 8004792:	d402      	bmi.n	800479a <_fflush_r+0x32>
 8004794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004796:	f7ff fb93 	bl	8003ec0 <__retarget_lock_acquire_recursive>
 800479a:	4628      	mov	r0, r5
 800479c:	4621      	mov	r1, r4
 800479e:	f7ff ff5d 	bl	800465c <__sflush_r>
 80047a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047a4:	07da      	lsls	r2, r3, #31
 80047a6:	4605      	mov	r5, r0
 80047a8:	d4e4      	bmi.n	8004774 <_fflush_r+0xc>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	d4e1      	bmi.n	8004774 <_fflush_r+0xc>
 80047b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047b2:	f7ff fb86 	bl	8003ec2 <__retarget_lock_release_recursive>
 80047b6:	e7dd      	b.n	8004774 <_fflush_r+0xc>

080047b8 <__swbuf_r>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	460e      	mov	r6, r1
 80047bc:	4614      	mov	r4, r2
 80047be:	4605      	mov	r5, r0
 80047c0:	b118      	cbz	r0, 80047ca <__swbuf_r+0x12>
 80047c2:	6a03      	ldr	r3, [r0, #32]
 80047c4:	b90b      	cbnz	r3, 80047ca <__swbuf_r+0x12>
 80047c6:	f7ff fa77 	bl	8003cb8 <__sinit>
 80047ca:	69a3      	ldr	r3, [r4, #24]
 80047cc:	60a3      	str	r3, [r4, #8]
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	071a      	lsls	r2, r3, #28
 80047d2:	d525      	bpl.n	8004820 <__swbuf_r+0x68>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	b31b      	cbz	r3, 8004820 <__swbuf_r+0x68>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	1a98      	subs	r0, r3, r2
 80047de:	6963      	ldr	r3, [r4, #20]
 80047e0:	b2f6      	uxtb	r6, r6
 80047e2:	4283      	cmp	r3, r0
 80047e4:	4637      	mov	r7, r6
 80047e6:	dc04      	bgt.n	80047f2 <__swbuf_r+0x3a>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f7ff ffbc 	bl	8004768 <_fflush_r>
 80047f0:	b9e0      	cbnz	r0, 800482c <__swbuf_r+0x74>
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	6022      	str	r2, [r4, #0]
 80047fe:	701e      	strb	r6, [r3, #0]
 8004800:	6962      	ldr	r2, [r4, #20]
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	429a      	cmp	r2, r3
 8004806:	d004      	beq.n	8004812 <__swbuf_r+0x5a>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	07db      	lsls	r3, r3, #31
 800480c:	d506      	bpl.n	800481c <__swbuf_r+0x64>
 800480e:	2e0a      	cmp	r6, #10
 8004810:	d104      	bne.n	800481c <__swbuf_r+0x64>
 8004812:	4621      	mov	r1, r4
 8004814:	4628      	mov	r0, r5
 8004816:	f7ff ffa7 	bl	8004768 <_fflush_r>
 800481a:	b938      	cbnz	r0, 800482c <__swbuf_r+0x74>
 800481c:	4638      	mov	r0, r7
 800481e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	f000 f806 	bl	8004834 <__swsetup_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	d0d5      	beq.n	80047d8 <__swbuf_r+0x20>
 800482c:	f04f 37ff 	mov.w	r7, #4294967295
 8004830:	e7f4      	b.n	800481c <__swbuf_r+0x64>
	...

08004834 <__swsetup_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <__swsetup_r+0xac>)
 8004838:	4605      	mov	r5, r0
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	460c      	mov	r4, r1
 800483e:	b118      	cbz	r0, 8004848 <__swsetup_r+0x14>
 8004840:	6a03      	ldr	r3, [r0, #32]
 8004842:	b90b      	cbnz	r3, 8004848 <__swsetup_r+0x14>
 8004844:	f7ff fa38 	bl	8003cb8 <__sinit>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800484e:	0718      	lsls	r0, r3, #28
 8004850:	d422      	bmi.n	8004898 <__swsetup_r+0x64>
 8004852:	06d9      	lsls	r1, r3, #27
 8004854:	d407      	bmi.n	8004866 <__swsetup_r+0x32>
 8004856:	2309      	movs	r3, #9
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800485e:	81a3      	strh	r3, [r4, #12]
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	e034      	b.n	80048d0 <__swsetup_r+0x9c>
 8004866:	0758      	lsls	r0, r3, #29
 8004868:	d512      	bpl.n	8004890 <__swsetup_r+0x5c>
 800486a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800486c:	b141      	cbz	r1, 8004880 <__swsetup_r+0x4c>
 800486e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004872:	4299      	cmp	r1, r3
 8004874:	d002      	beq.n	800487c <__swsetup_r+0x48>
 8004876:	4628      	mov	r0, r5
 8004878:	f7ff fb24 	bl	8003ec4 <_free_r>
 800487c:	2300      	movs	r3, #0
 800487e:	6363      	str	r3, [r4, #52]	; 0x34
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004886:	81a3      	strh	r3, [r4, #12]
 8004888:	2300      	movs	r3, #0
 800488a:	6063      	str	r3, [r4, #4]
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f043 0308 	orr.w	r3, r3, #8
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	b94b      	cbnz	r3, 80048b0 <__swsetup_r+0x7c>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a6:	d003      	beq.n	80048b0 <__swsetup_r+0x7c>
 80048a8:	4621      	mov	r1, r4
 80048aa:	4628      	mov	r0, r5
 80048ac:	f000 f850 	bl	8004950 <__smakebuf_r>
 80048b0:	89a0      	ldrh	r0, [r4, #12]
 80048b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048b6:	f010 0301 	ands.w	r3, r0, #1
 80048ba:	d00a      	beq.n	80048d2 <__swsetup_r+0x9e>
 80048bc:	2300      	movs	r3, #0
 80048be:	60a3      	str	r3, [r4, #8]
 80048c0:	6963      	ldr	r3, [r4, #20]
 80048c2:	425b      	negs	r3, r3
 80048c4:	61a3      	str	r3, [r4, #24]
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	b943      	cbnz	r3, 80048dc <__swsetup_r+0xa8>
 80048ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048ce:	d1c4      	bne.n	800485a <__swsetup_r+0x26>
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	0781      	lsls	r1, r0, #30
 80048d4:	bf58      	it	pl
 80048d6:	6963      	ldrpl	r3, [r4, #20]
 80048d8:	60a3      	str	r3, [r4, #8]
 80048da:	e7f4      	b.n	80048c6 <__swsetup_r+0x92>
 80048dc:	2000      	movs	r0, #0
 80048de:	e7f7      	b.n	80048d0 <__swsetup_r+0x9c>
 80048e0:	20000068 	.word	0x20000068

080048e4 <_sbrk_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d06      	ldr	r5, [pc, #24]	; (8004900 <_sbrk_r+0x1c>)
 80048e8:	2300      	movs	r3, #0
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fc fa4a 	bl	8000d88 <_sbrk>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_sbrk_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_sbrk_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200035e8 	.word	0x200035e8

08004904 <__swhatbuf_r>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	460c      	mov	r4, r1
 8004908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490c:	2900      	cmp	r1, #0
 800490e:	b096      	sub	sp, #88	; 0x58
 8004910:	4615      	mov	r5, r2
 8004912:	461e      	mov	r6, r3
 8004914:	da0d      	bge.n	8004932 <__swhatbuf_r+0x2e>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	f013 0f80 	tst.w	r3, #128	; 0x80
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	bf0c      	ite	eq
 8004922:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004926:	2340      	movne	r3, #64	; 0x40
 8004928:	2000      	movs	r0, #0
 800492a:	6031      	str	r1, [r6, #0]
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	b016      	add	sp, #88	; 0x58
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	466a      	mov	r2, sp
 8004934:	f000 f848 	bl	80049c8 <_fstat_r>
 8004938:	2800      	cmp	r0, #0
 800493a:	dbec      	blt.n	8004916 <__swhatbuf_r+0x12>
 800493c:	9901      	ldr	r1, [sp, #4]
 800493e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004942:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004946:	4259      	negs	r1, r3
 8004948:	4159      	adcs	r1, r3
 800494a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494e:	e7eb      	b.n	8004928 <__swhatbuf_r+0x24>

08004950 <__smakebuf_r>:
 8004950:	898b      	ldrh	r3, [r1, #12]
 8004952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004954:	079d      	lsls	r5, r3, #30
 8004956:	4606      	mov	r6, r0
 8004958:	460c      	mov	r4, r1
 800495a:	d507      	bpl.n	800496c <__smakebuf_r+0x1c>
 800495c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	2301      	movs	r3, #1
 8004966:	6163      	str	r3, [r4, #20]
 8004968:	b002      	add	sp, #8
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	ab01      	add	r3, sp, #4
 800496e:	466a      	mov	r2, sp
 8004970:	f7ff ffc8 	bl	8004904 <__swhatbuf_r>
 8004974:	9900      	ldr	r1, [sp, #0]
 8004976:	4605      	mov	r5, r0
 8004978:	4630      	mov	r0, r6
 800497a:	f7ff fb0f 	bl	8003f9c <_malloc_r>
 800497e:	b948      	cbnz	r0, 8004994 <__smakebuf_r+0x44>
 8004980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004984:	059a      	lsls	r2, r3, #22
 8004986:	d4ef      	bmi.n	8004968 <__smakebuf_r+0x18>
 8004988:	f023 0303 	bic.w	r3, r3, #3
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	81a3      	strh	r3, [r4, #12]
 8004992:	e7e3      	b.n	800495c <__smakebuf_r+0xc>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	6020      	str	r0, [r4, #0]
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	9b00      	ldr	r3, [sp, #0]
 80049a0:	6163      	str	r3, [r4, #20]
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	6120      	str	r0, [r4, #16]
 80049a6:	b15b      	cbz	r3, 80049c0 <__smakebuf_r+0x70>
 80049a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f81d 	bl	80049ec <_isatty_r>
 80049b2:	b128      	cbz	r0, 80049c0 <__smakebuf_r+0x70>
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	431d      	orrs	r5, r3
 80049c4:	81a5      	strh	r5, [r4, #12]
 80049c6:	e7cf      	b.n	8004968 <__smakebuf_r+0x18>

080049c8 <_fstat_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d07      	ldr	r5, [pc, #28]	; (80049e8 <_fstat_r+0x20>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	4611      	mov	r1, r2
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	f7fc f9af 	bl	8000d38 <_fstat>
 80049da:	1c43      	adds	r3, r0, #1
 80049dc:	d102      	bne.n	80049e4 <_fstat_r+0x1c>
 80049de:	682b      	ldr	r3, [r5, #0]
 80049e0:	b103      	cbz	r3, 80049e4 <_fstat_r+0x1c>
 80049e2:	6023      	str	r3, [r4, #0]
 80049e4:	bd38      	pop	{r3, r4, r5, pc}
 80049e6:	bf00      	nop
 80049e8:	200035e8 	.word	0x200035e8

080049ec <_isatty_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	; (8004a08 <_isatty_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fc f9ae 	bl	8000d58 <_isatty>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_isatty_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_isatty_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	200035e8 	.word	0x200035e8

08004a0c <_init>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr

08004a18 <_fini>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr
