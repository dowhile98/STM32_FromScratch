
ETH_MQTT_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001282c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e34  080129e0  080129e0  000229e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014814  08014814  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08014814  08014814  00024814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801481c  0801481c  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801481c  0801481c  0002481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014820  08014820  00024820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08014824  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030104  2**0
                  CONTENTS
 10 .bss          00008644  20000104  20000104  00030104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008748  20008748  00030104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023c81  00000000  00000000  00030177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004573  00000000  00000000  00053df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ba8  00000000  00000000  00058370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015b7  00000000  00000000  00059f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020fc9  00000000  00000000  0005b4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e13d  00000000  00000000  0007c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bafde  00000000  00000000  0009a5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009700  00000000  00000000  001555b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0015ecb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000104 	.word	0x20000104
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080129c4 	.word	0x080129c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000108 	.word	0x20000108
 80001ec:	080129c4 	.word	0x080129c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__gedf2>:
 800086c:	f04f 3cff 	mov.w	ip, #4294967295
 8000870:	e006      	b.n	8000880 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__ledf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	e002      	b.n	8000880 <__cmpdf2+0x4>
 800087a:	bf00      	nop

0800087c <__cmpdf2>:
 800087c:	f04f 0c01 	mov.w	ip, #1
 8000880:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800088c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000896:	d01b      	beq.n	80008d0 <__cmpdf2+0x54>
 8000898:	b001      	add	sp, #4
 800089a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800089e:	bf0c      	ite	eq
 80008a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008a4:	ea91 0f03 	teqne	r1, r3
 80008a8:	bf02      	ittt	eq
 80008aa:	ea90 0f02 	teqeq	r0, r2
 80008ae:	2000      	moveq	r0, #0
 80008b0:	4770      	bxeq	lr
 80008b2:	f110 0f00 	cmn.w	r0, #0
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf58      	it	pl
 80008bc:	4299      	cmppl	r1, r3
 80008be:	bf08      	it	eq
 80008c0:	4290      	cmpeq	r0, r2
 80008c2:	bf2c      	ite	cs
 80008c4:	17d8      	asrcs	r0, r3, #31
 80008c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	4770      	bx	lr
 80008d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d102      	bne.n	80008e0 <__cmpdf2+0x64>
 80008da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008de:	d107      	bne.n	80008f0 <__cmpdf2+0x74>
 80008e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d1d6      	bne.n	8000898 <__cmpdf2+0x1c>
 80008ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ee:	d0d3      	beq.n	8000898 <__cmpdf2+0x1c>
 80008f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdrcmple>:
 80008f8:	4684      	mov	ip, r0
 80008fa:	4610      	mov	r0, r2
 80008fc:	4662      	mov	r2, ip
 80008fe:	468c      	mov	ip, r1
 8000900:	4619      	mov	r1, r3
 8000902:	4663      	mov	r3, ip
 8000904:	e000      	b.n	8000908 <__aeabi_cdcmpeq>
 8000906:	bf00      	nop

08000908 <__aeabi_cdcmpeq>:
 8000908:	b501      	push	{r0, lr}
 800090a:	f7ff ffb7 	bl	800087c <__cmpdf2>
 800090e:	2800      	cmp	r0, #0
 8000910:	bf48      	it	mi
 8000912:	f110 0f00 	cmnmi.w	r0, #0
 8000916:	bd01      	pop	{r0, pc}

08000918 <__aeabi_dcmpeq>:
 8000918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800091c:	f7ff fff4 	bl	8000908 <__aeabi_cdcmpeq>
 8000920:	bf0c      	ite	eq
 8000922:	2001      	moveq	r0, #1
 8000924:	2000      	movne	r0, #0
 8000926:	f85d fb08 	ldr.w	pc, [sp], #8
 800092a:	bf00      	nop

0800092c <__aeabi_dcmplt>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff ffea 	bl	8000908 <__aeabi_cdcmpeq>
 8000934:	bf34      	ite	cc
 8000936:	2001      	movcc	r0, #1
 8000938:	2000      	movcs	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmple>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffe0 	bl	8000908 <__aeabi_cdcmpeq>
 8000948:	bf94      	ite	ls
 800094a:	2001      	movls	r0, #1
 800094c:	2000      	movhi	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmpge>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffce 	bl	80008f8 <__aeabi_cdrcmple>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpgt>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffc4 	bl	80008f8 <__aeabi_cdrcmple>
 8000970:	bf34      	ite	cc
 8000972:	2001      	movcc	r0, #1
 8000974:	2000      	movcs	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5100 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	20f0      	movs	r0, #240	; 0xf0
 8000cd6:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	0a12      	lsrs	r2, r2, #8
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d02:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	4798      	blx	r3
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000004 	.word	0x20000004

08000d14 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	0a12      	lsrs	r2, r2, #8
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	4610      	mov	r0, r2
 8000d48:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4798      	blx	r3
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4798      	blx	r3
   return ret;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000004 	.word	0x20000004

08000d70 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	82fb      	strh	r3, [r7, #22]
 8000d92:	e02a      	b.n	8000dea <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	20f0      	movs	r0, #240	; 0xf0
 8000da0:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	b291      	uxth	r1, r2
 8000daa:	8afa      	ldrh	r2, [r7, #22]
 8000dac:	440a      	add	r2, r1
 8000dae:	b292      	uxth	r2, r2
 8000db0:	0a12      	lsrs	r2, r2, #8
 8000db2:	b292      	uxth	r2, r2
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4610      	mov	r0, r2
 8000db8:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	b2d1      	uxtb	r1, r2
 8000dc2:	8afa      	ldrh	r2, [r7, #22]
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440a      	add	r2, r1
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	8afa      	ldrh	r2, [r7, #22]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	440a      	add	r2, r1
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 8000de4:	8afb      	ldrh	r3, [r7, #22]
 8000de6:	3301      	adds	r3, #1
 8000de8:	82fb      	strh	r3, [r7, #22]
 8000dea:	8afa      	ldrh	r2, [r7, #22]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d3d0      	bcc.n	8000d94 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4798      	blx	r3
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000004 	.word	0x20000004

08000e0c <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	82fb      	strh	r3, [r7, #22]
 8000e2e:	e02a      	b.n	8000e86 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	b291      	uxth	r1, r2
 8000e46:	8afa      	ldrh	r2, [r7, #22]
 8000e48:	440a      	add	r2, r1
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	0a12      	lsrs	r2, r2, #8
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	4610      	mov	r0, r2
 8000e54:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	b2d1      	uxtb	r1, r2
 8000e5e:	8afa      	ldrh	r2, [r7, #22]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440a      	add	r2, r1
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	4610      	mov	r0, r2
 8000e68:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	8afa      	ldrh	r2, [r7, #22]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	188c      	adds	r4, r1, r2
 8000e74:	4798      	blx	r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000e80:	8afb      	ldrh	r3, [r7, #22]
 8000e82:	3301      	adds	r3, #1
 8000e84:	82fb      	strh	r3, [r7, #22]
 8000e86:	8afa      	ldrh	r2, [r7, #22]
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3d0      	bcc.n	8000e30 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4798      	blx	r3
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	81fb      	strh	r3, [r7, #14]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	3320      	adds	r3, #32
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff26 	bl	8000d14 <WIZCHIP_READ>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000ecc:	89bb      	ldrh	r3, [r7, #12]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b29c      	uxth	r4, r3
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	3321      	adds	r3, #33	; 0x21
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff1a 	bl	8000d14 <WIZCHIP_READ>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4423      	add	r3, r4
 8000ee6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d016      	beq.n	8000f1c <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	3320      	adds	r3, #32
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff0c 	bl	8000d14 <WIZCHIP_READ>
 8000efc:	4603      	mov	r3, r0
 8000efe:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f00:	89fb      	ldrh	r3, [r7, #14]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b29c      	uxth	r4, r3
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	3321      	adds	r3, #33	; 0x21
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff00 	bl	8000d14 <WIZCHIP_READ>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4423      	add	r3, r4
 8000f1a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000f1c:	89fa      	ldrh	r2, [r7, #14]
 8000f1e:	89bb      	ldrh	r3, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d1ca      	bne.n	8000eba <getSn_TX_FSR+0x12>
   return val;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}

08000f2e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	81fb      	strh	r3, [r7, #14]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	3304      	adds	r3, #4
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	3326      	adds	r3, #38	; 0x26
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fee3 	bl	8000d14 <WIZCHIP_READ>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000f52:	89bb      	ldrh	r3, [r7, #12]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b29c      	uxth	r4, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	3327      	adds	r3, #39	; 0x27
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fed7 	bl	8000d14 <WIZCHIP_READ>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4423      	add	r3, r4
 8000f6c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d016      	beq.n	8000fa2 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	3304      	adds	r3, #4
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	3326      	adds	r3, #38	; 0x26
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fec9 	bl	8000d14 <WIZCHIP_READ>
 8000f82:	4603      	mov	r3, r0
 8000f84:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b29c      	uxth	r4, r3
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3304      	adds	r3, #4
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	3327      	adds	r3, #39	; 0x27
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff febd 	bl	8000d14 <WIZCHIP_READ>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4423      	add	r3, r4
 8000fa0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000fa2:	89fa      	ldrh	r2, [r7, #14]
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d1ca      	bne.n	8000f40 <getSn_RX_RSR+0x12>
   return val;
 8000faa:	89fb      	ldrh	r3, [r7, #14]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 8000fbe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fc2:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e020      	b.n	800100c <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 8000fca:	201a      	movs	r0, #26
 8000fcc:	f7ff fea2 	bl	8000d14 <WIZCHIP_READ>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	ea01 0203 	and.w	r2, r1, r3
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa42 f303 	asr.w	r3, r2, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbd9      	blt.n	8000fca <getSn_RxBASE+0x16>

   return rxbase;
 8001016:	68bb      	ldr	r3, [r7, #8]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 800102a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102e:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e020      	b.n	8001078 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 8001036:	201b      	movs	r0, #27
 8001038:	f7ff fe6c 	bl	8000d14 <WIZCHIP_READ>
 800103c:	4603      	mov	r3, r0
 800103e:	4619      	mov	r1, r3
 8001040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	ea01 0203 	and.w	r2, r1, r3
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa42 f303 	asr.w	r3, r2, r3
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	461a      	mov	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3301      	adds	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbd9      	blt.n	8001036 <getSn_TxBASE+0x16>
   return txbase;
 8001082:	68bb      	ldr	r3, [r7, #8]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3304      	adds	r3, #4
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	3324      	adds	r3, #36	; 0x24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe35 	bl	8000d14 <WIZCHIP_READ>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29c      	uxth	r4, r3
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3304      	adds	r3, #4
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	3325      	adds	r3, #37	; 0x25
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe2a 	bl	8000d14 <WIZCHIP_READ>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4423      	add	r3, r4
 80010c6:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 80010c8:	201b      	movs	r0, #27
 80010ca:	f7ff fe23 	bl	8000d14 <WIZCHIP_READ>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	ea01 0203 	and.w	r2, r1, r3
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fe:	4013      	ands	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff8a 	bl	8001020 <getSn_TxBASE>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	89bb      	ldrh	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 8001116:	89ba      	ldrh	r2, [r7, #12]
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	18d4      	adds	r4, r2, r3
 800111c:	201b      	movs	r0, #27
 800111e:	f7ff fdf9 	bl	8000d14 <WIZCHIP_READ>
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	ea01 0203 	and.w	r2, r1, r3
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa42 f303 	asr.w	r3, r2, r3
 800113c:	2201      	movs	r2, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	429c      	cmp	r4, r3
 8001148:	dd33      	ble.n	80011b2 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 800114a:	201b      	movs	r0, #27
 800114c:	f7ff fde2 	bl	8000d14 <WIZCHIP_READ>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	ea01 0203 	and.w	r2, r1, r3
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa42 f303 	asr.w	r3, r2, r3
 800116a:	2201      	movs	r2, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	b29b      	uxth	r3, r3
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	b29a      	uxth	r2, r3
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 800117c:	897b      	ldrh	r3, [r7, #10]
 800117e:	893a      	ldrh	r2, [r7, #8]
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fdf4 	bl	8000d70 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8001188:	893b      	ldrh	r3, [r7, #8]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8001190:	88ba      	ldrh	r2, [r7, #4]
 8001192:	893b      	ldrh	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff40 	bl	8001020 <getSn_TxBASE>
 80011a0:	4603      	mov	r3, r0
 80011a2:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	893a      	ldrh	r2, [r7, #8]
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fde0 	bl	8000d70 <WIZCHIP_WRITE_BUF>
 80011b0:	e005      	b.n	80011be <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 80011b2:	897b      	ldrh	r3, [r7, #10]
 80011b4:	88ba      	ldrh	r2, [r7, #4]
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fdd9 	bl	8000d70 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 80011be:	89fa      	ldrh	r2, [r7, #14]
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3304      	adds	r3, #4
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	3324      	adds	r3, #36	; 0x24
 80011ce:	461a      	mov	r2, r3
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f7ff fd6c 	bl	8000cb8 <WIZCHIP_WRITE>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	3304      	adds	r3, #4
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	3325      	adds	r3, #37	; 0x25
 80011e8:	461a      	mov	r2, r3
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f7ff fd61 	bl	8000cb8 <WIZCHIP_WRITE>
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	6039      	str	r1, [r7, #0]
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3304      	adds	r3, #4
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	3328      	adds	r3, #40	; 0x28
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd7c 	bl	8000d14 <WIZCHIP_READ>
 800121c:	4603      	mov	r3, r0
 800121e:	b29b      	uxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29c      	uxth	r4, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	3304      	adds	r3, #4
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	3329      	adds	r3, #41	; 0x29
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fd71 	bl	8000d14 <WIZCHIP_READ>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	4423      	add	r3, r4
 8001238:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800123a:	201a      	movs	r0, #26
 800123c:	f7ff fd6a 	bl	8000d14 <WIZCHIP_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	ea01 0203 	and.w	r2, r1, r3
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa42 f303 	asr.w	r3, r2, r3
 800125a:	2201      	movs	r2, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	4013      	ands	r3, r2
 800126e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe9e 	bl	8000fb4 <getSn_RxBASE>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	89bb      	ldrh	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8001282:	89ba      	ldrh	r2, [r7, #12]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	18d4      	adds	r4, r2, r3
 8001288:	201a      	movs	r0, #26
 800128a:	f7ff fd43 	bl	8000d14 <WIZCHIP_READ>
 800128e:	4603      	mov	r3, r0
 8001290:	4619      	mov	r1, r3
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	ea01 0203 	and.w	r2, r1, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	2201      	movs	r2, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	029b      	lsls	r3, r3, #10
 80012b2:	429c      	cmp	r4, r3
 80012b4:	dd33      	ble.n	800131e <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 80012b6:	201a      	movs	r0, #26
 80012b8:	f7ff fd2c 	bl	8000d14 <WIZCHIP_READ>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	ea01 0203 	and.w	r2, r1, r3
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa42 f303 	asr.w	r3, r2, r3
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	89bb      	ldrh	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80012e8:	897b      	ldrh	r3, [r7, #10]
 80012ea:	893a      	ldrh	r2, [r7, #8]
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd8c 	bl	8000e0c <WIZCHIP_READ_BUF>
    wizdata += size;
 80012f4:	893b      	ldrh	r3, [r7, #8]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	603b      	str	r3, [r7, #0]
    size = len - size;
 80012fc:	88ba      	ldrh	r2, [r7, #4]
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe54 	bl	8000fb4 <getSn_RxBASE>
 800130c:	4603      	mov	r3, r0
 800130e:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 8001310:	897b      	ldrh	r3, [r7, #10]
 8001312:	893a      	ldrh	r2, [r7, #8]
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd78 	bl	8000e0c <WIZCHIP_READ_BUF>
 800131c:	e005      	b.n	800132a <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	88ba      	ldrh	r2, [r7, #4]
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd71 	bl	8000e0c <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 800132a:	89fa      	ldrh	r2, [r7, #14]
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3304      	adds	r3, #4
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	3328      	adds	r3, #40	; 0x28
 800133a:	461a      	mov	r2, r3
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f7ff fcb6 	bl	8000cb8 <WIZCHIP_WRITE>
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	3304      	adds	r3, #4
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	3329      	adds	r3, #41	; 0x29
 8001354:	461a      	mov	r2, r3
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f7ff fcab 	bl	8000cb8 <WIZCHIP_WRITE>
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}

0800136a <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800136a:	b590      	push	{r4, r7, lr}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	460a      	mov	r2, r1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	4613      	mov	r3, r2
 8001378:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	3304      	adds	r3, #4
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	3328      	adds	r3, #40	; 0x28
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcc6 	bl	8000d14 <WIZCHIP_READ>
 8001388:	4603      	mov	r3, r0
 800138a:	b29b      	uxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29c      	uxth	r4, r3
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3304      	adds	r3, #4
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	3329      	adds	r3, #41	; 0x29
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fcbb 	bl	8000d14 <WIZCHIP_READ>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4423      	add	r3, r4
 80013a4:	81fb      	strh	r3, [r7, #14]
  
  ptr += len;
 80013a6:	89fa      	ldrh	r2, [r7, #14]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	81fb      	strh	r3, [r7, #14]
  setSn_RX_RD(sn,ptr);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3304      	adds	r3, #4
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	3328      	adds	r3, #40	; 0x28
 80013b6:	461a      	mov	r2, r3
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f7ff fc78 	bl	8000cb8 <WIZCHIP_WRITE>
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3304      	adds	r3, #4
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	3329      	adds	r3, #41	; 0x29
 80013d0:	461a      	mov	r2, r3
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff fc6d 	bl	8000cb8 <WIZCHIP_WRITE>
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
	...

080013e8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	4603      	mov	r3, r0
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	460b      	mov	r3, r1
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d902      	bls.n	8001412 <socket+0x2a>
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	e0de      	b.n	80015d0 <socket+0x1e8>
	switch(protocol)
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d019      	beq.n	800144c <socket+0x64>
 8001418:	2b05      	cmp	r3, #5
 800141a:	dc14      	bgt.n	8001446 <socket+0x5e>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <socket+0x44>
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd10      	ble.n	8001446 <socket+0x5e>
 8001424:	3b02      	subs	r3, #2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d80d      	bhi.n	8001446 <socket+0x5e>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800142a:	e012      	b.n	8001452 <socket+0x6a>
            getSIPR((uint8_t*)&taddr);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2204      	movs	r2, #4
 8001432:	4619      	mov	r1, r3
 8001434:	200f      	movs	r0, #15
 8001436:	f7ff fce9 	bl	8000e0c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d107      	bne.n	8001450 <socket+0x68>
 8001440:	f06f 0302 	mvn.w	r3, #2
 8001444:	e0c4      	b.n	80015d0 <socket+0x1e8>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001446:	f06f 0304 	mvn.w	r3, #4
 800144a:	e0c1      	b.n	80015d0 <socket+0x1e8>
         break;
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <socket+0x6a>
	    break;
 8001450:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <socket+0x7a>
 800145c:	f06f 0305 	mvn.w	r3, #5
 8001460:	e0b6      	b.n	80015d0 <socket+0x1e8>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <socket+0xba>
	{
   	switch(protocol)
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d002      	beq.n	8001474 <socket+0x8c>
 800146e:	2b02      	cmp	r3, #2
 8001470:	d008      	beq.n	8001484 <socket+0x9c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001472:	e016      	b.n	80014a2 <socket+0xba>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10e      	bne.n	800149c <socket+0xb4>
 800147e:	f06f 0305 	mvn.w	r3, #5
 8001482:	e0a5      	b.n	80015d0 <socket+0x1e8>
   	      if(flag & SF_IGMP_VER2)
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <socket+0xb8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800148e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db04      	blt.n	80014a0 <socket+0xb8>
 8001496:	f06f 0305 	mvn.w	r3, #5
 800149a:	e099      	b.n	80015d0 <socket+0x1e8>
   	      break;
 800149c:	bf00      	nop
 800149e:	e000      	b.n	80014a2 <socket+0xba>
   	      break;
 80014a0:	bf00      	nop
   	}
   }
	close(sn);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f8a1 	bl	80015ec <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3304      	adds	r3, #4
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	4618      	mov	r0, r3
 80014b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b6:	f023 030f 	bic.w	r3, r3, #15
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fbf6 	bl	8000cb8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d110      	bne.n	80014f4 <socket+0x10c>
	{
	   port = sock_any_port++;
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <socket+0x1f0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	b291      	uxth	r1, r2
 80014da:	4a3f      	ldr	r2, [pc, #252]	; (80015d8 <socket+0x1f0>)
 80014dc:	8011      	strh	r1, [r2, #0]
 80014de:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <socket+0x1f0>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d103      	bne.n	80014f4 <socket+0x10c>
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <socket+0x1f0>)
 80014ee:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80014f2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	3304      	adds	r3, #4
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	3304      	adds	r3, #4
 80014fc:	461a      	mov	r2, r3
 80014fe:	88bb      	ldrh	r3, [r7, #4]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f7ff fbd5 	bl	8000cb8 <WIZCHIP_WRITE>
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	3304      	adds	r3, #4
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	3305      	adds	r3, #5
 8001516:	461a      	mov	r2, r3
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fbca 	bl	8000cb8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3304      	adds	r3, #4
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	3301      	adds	r3, #1
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fbc2 	bl	8000cb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001534:	bf00      	nop
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3304      	adds	r3, #4
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	3301      	adds	r3, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fbe8 	bl	8000d14 <WIZCHIP_READ>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f5      	bne.n	8001536 <socket+0x14e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2201      	movs	r2, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	b21b      	sxth	r3, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <socket+0x1f4>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4013      	ands	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <socket+0x1f4>)
 8001566:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <socket+0x1f4>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <socket+0x1f4>)
 8001584:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	b21b      	sxth	r3, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <socket+0x1f8>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4013      	ands	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <socket+0x1f8>)
 80015a2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <socket+0x1fc>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <socket+0x200>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80015b6:	bf00      	nop
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	3304      	adds	r3, #4
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	3303      	adds	r3, #3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fba7 	bl	8000d14 <WIZCHIP_READ>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f5      	beq.n	80015b8 <socket+0x1d0>
   return (int8_t)sn;
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000120 	.word	0x20000120
 80015e0:	20000122 	.word	0x20000122
 80015e4:	20000124 	.word	0x20000124
 80015e8:	2000012c 	.word	0x2000012c

080015ec <close>:

int8_t close(uint8_t sn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d902      	bls.n	8001602 <close+0x16>
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	e04d      	b.n	800169e <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	3304      	adds	r3, #4
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	3301      	adds	r3, #1
 800160a:	2110      	movs	r1, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb53 	bl	8000cb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001612:	bf00      	nop
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3304      	adds	r3, #4
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	3301      	adds	r3, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb79 	bl	8000d14 <WIZCHIP_READ>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f5      	bne.n	8001614 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	3304      	adds	r3, #4
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	3302      	adds	r3, #2
 8001630:	21ff      	movs	r1, #255	; 0xff
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb40 	bl	8000cb8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2201      	movs	r2, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	b21b      	sxth	r3, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	b21a      	sxth	r2, r3
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <close+0xbc>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4013      	ands	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <close+0xbc>)
 8001654:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	b21b      	sxth	r3, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <close+0xc0>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4013      	ands	r3, r2
 800166c:	b21b      	sxth	r3, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <close+0xc0>)
 8001672:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <close+0xc4>)
 8001678:	2100      	movs	r1, #0
 800167a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <close+0xc8>)
 8001682:	2100      	movs	r1, #0
 8001684:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001686:	bf00      	nop
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	3304      	adds	r3, #4
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	3303      	adds	r3, #3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb3f 	bl	8000d14 <WIZCHIP_READ>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f5      	bne.n	8001688 <close+0x9c>
	return SOCK_OK;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000120 	.word	0x20000120
 80016ac:	20000122 	.word	0x20000122
 80016b0:	20000124 	.word	0x20000124
 80016b4:	2000012c 	.word	0x2000012c

080016b8 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d902      	bls.n	80016d4 <connect+0x1c>
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e0b1      	b.n	8001838 <connect+0x180>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	3304      	adds	r3, #4
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fb1a 	bl	8000d14 <WIZCHIP_READ>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d002      	beq.n	80016f0 <connect+0x38>
 80016ea:	f06f 0304 	mvn.w	r3, #4
 80016ee:	e0a3      	b.n	8001838 <connect+0x180>
   CHECK_SOCKINIT();
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3304      	adds	r3, #4
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	3303      	adds	r3, #3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fb0b 	bl	8000d14 <WIZCHIP_READ>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b13      	cmp	r3, #19
 8001702:	d002      	beq.n	800170a <connect+0x52>
 8001704:	f06f 0302 	mvn.w	r3, #2
 8001708:	e096      	b.n	8001838 <connect+0x180>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	3201      	adds	r2, #1
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	3202      	adds	r2, #2
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	3203      	adds	r2, #3
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d002      	beq.n	8001748 <connect+0x90>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <connect+0x96>
 8001748:	f06f 030b 	mvn.w	r3, #11
 800174c:	e074      	b.n	8001838 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <connect+0xa2>
 8001754:	f06f 030a 	mvn.w	r3, #10
 8001758:	e06e      	b.n	8001838 <connect+0x180>
	setSn_DIPR(sn,addr);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	3304      	adds	r3, #4
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	330c      	adds	r3, #12
 8001762:	2204      	movs	r2, #4
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb02 	bl	8000d70 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	3304      	adds	r3, #4
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	3310      	adds	r3, #16
 8001774:	461a      	mov	r2, r3
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff fa99 	bl	8000cb8 <WIZCHIP_WRITE>
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3304      	adds	r3, #4
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	3311      	adds	r3, #17
 800178e:	461a      	mov	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fa8e 	bl	8000cb8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3304      	adds	r3, #4
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	3301      	adds	r3, #1
 80017a4:	2104      	movs	r1, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fa86 	bl	8000cb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80017ac:	bf00      	nop
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	3304      	adds	r3, #4
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	3301      	adds	r3, #1
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff faac 	bl	8000d14 <WIZCHIP_READ>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f5      	bne.n	80017ae <connect+0xf6>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <connect+0x188>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	fa42 f303 	asr.w	r3, r2, r3
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d025      	beq.n	8001822 <connect+0x16a>
 80017d6:	2300      	movs	r3, #0
 80017d8:	e02e      	b.n	8001838 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	3304      	adds	r3, #4
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	3302      	adds	r3, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fa96 	bl	8000d14 <WIZCHIP_READ>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <connect+0x150>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	3304      	adds	r3, #4
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	3302      	adds	r3, #2
 80017fa:	2108      	movs	r1, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa5b 	bl	8000cb8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8001802:	f06f 030c 	mvn.w	r3, #12
 8001806:	e017      	b.n	8001838 <connect+0x180>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	3304      	adds	r3, #4
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	3303      	adds	r3, #3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa7f 	bl	8000d14 <WIZCHIP_READ>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <connect+0x16a>
		{
			return SOCKERR_SOCKCLOSED;
 800181c:	f06f 0303 	mvn.w	r3, #3
 8001820:	e00a      	b.n	8001838 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3304      	adds	r3, #4
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	3303      	adds	r3, #3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fa72 	bl	8000d14 <WIZCHIP_READ>
 8001830:	4603      	mov	r3, r0
 8001832:	2b17      	cmp	r3, #23
 8001834:	d1d1      	bne.n	80017da <connect+0x122>
		}
	}
   
   return SOCK_OK;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000120 	.word	0x20000120

08001844 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d902      	bls.n	800185a <disconnect+0x16>
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e059      	b.n	800190e <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	3304      	adds	r3, #4
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fa57 	bl	8000d14 <WIZCHIP_READ>
 8001866:	4603      	mov	r3, r0
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <disconnect+0x32>
 8001870:	f06f 0304 	mvn.w	r3, #4
 8001874:	e04b      	b.n	800190e <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3304      	adds	r3, #4
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	3301      	adds	r3, #1
 800187e:	2108      	movs	r1, #8
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa19 	bl	8000cb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001886:	bf00      	nop
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	3304      	adds	r3, #4
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	3301      	adds	r3, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fa3f 	bl	8000d14 <WIZCHIP_READ>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f5      	bne.n	8001888 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2201      	movs	r2, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <disconnect+0xd4>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <disconnect+0xd4>)
 80018b8:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <disconnect+0xd8>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	fa42 f303 	asr.w	r3, r2, r3
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d014      	beq.n	80018f8 <disconnect+0xb4>
 80018ce:	2300      	movs	r3, #0
 80018d0:	e01d      	b.n	800190e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	3304      	adds	r3, #4
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	3302      	adds	r3, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fa1a 	bl	8000d14 <WIZCHIP_READ>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <disconnect+0xb4>
	   {
	      close(sn);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fe7d 	bl	80015ec <close>
	      return SOCKERR_TIMEOUT;
 80018f2:	f06f 030c 	mvn.w	r3, #12
 80018f6:	e00a      	b.n	800190e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	3304      	adds	r3, #4
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	3303      	adds	r3, #3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fa07 	bl	8000d14 <WIZCHIP_READ>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e2      	bne.n	80018d2 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000122 	.word	0x20000122
 800191c:	20000120 	.word	0x20000120

08001920 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001934:	2300      	movs	r3, #0
 8001936:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d902      	bls.n	8001944 <send+0x24>
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e0d8      	b.n	8001af6 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	3304      	adds	r3, #4
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f9e2 	bl	8000d14 <WIZCHIP_READ>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	2b01      	cmp	r3, #1
 8001958:	d002      	beq.n	8001960 <send+0x40>
 800195a:	f06f 0304 	mvn.w	r3, #4
 800195e:	e0ca      	b.n	8001af6 <send+0x1d6>
   CHECK_SOCKDATA();
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <send+0x4c>
 8001966:	f06f 030d 	mvn.w	r3, #13
 800196a:	e0c4      	b.n	8001af6 <send+0x1d6>
   tmp = getSn_SR(sn);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	3304      	adds	r3, #4
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	3303      	adds	r3, #3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9cd 	bl	8000d14 <WIZCHIP_READ>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b17      	cmp	r3, #23
 8001982:	d005      	beq.n	8001990 <send+0x70>
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b1c      	cmp	r3, #28
 8001988:	d002      	beq.n	8001990 <send+0x70>
 800198a:	f06f 0306 	mvn.w	r3, #6
 800198e:	e0b2      	b.n	8001af6 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <send+0x1e0>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	fa42 f303 	asr.w	r3, r2, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d033      	beq.n	8001a0c <send+0xec>
   {
      tmp = getSn_IR(sn);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	3304      	adds	r3, #4
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	3302      	adds	r3, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f9b1 	bl	8000d14 <WIZCHIP_READ>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d017      	beq.n	80019f0 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	3304      	adds	r3, #4
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	3302      	adds	r3, #2
 80019c8:	2110      	movs	r1, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f974 	bl	8000cb8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2201      	movs	r2, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	b21b      	sxth	r3, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <send+0x1e0>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <send+0x1e0>)
 80019ec:	801a      	strh	r2, [r3, #0]
 80019ee:	e00d      	b.n	8001a0c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <send+0xe8>
      {
         close(sn);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fdf5 	bl	80015ec <close>
         return SOCKERR_TIMEOUT;
 8001a02:	f06f 030c 	mvn.w	r3, #12
 8001a06:	e076      	b.n	8001af6 <send+0x1d6>
      }
      else return SOCK_BUSY;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e074      	b.n	8001af6 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 8001a0c:	201b      	movs	r0, #27
 8001a0e:	f7ff f981 	bl	8000d14 <WIZCHIP_READ>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	ea01 0203 	and.w	r2, r1, r3
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa42 f303 	asr.w	r3, r2, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	029b      	lsls	r3, r3, #10
 8001a36:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	89bb      	ldrh	r3, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d901      	bls.n	8001a44 <send+0x124>
 8001a40:	89bb      	ldrh	r3, [r7, #12]
 8001a42:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa2e 	bl	8000ea8 <getSn_TX_FSR>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3304      	adds	r3, #4
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	3303      	adds	r3, #3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f95b 	bl	8000d14 <WIZCHIP_READ>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b17      	cmp	r3, #23
 8001a66:	d009      	beq.n	8001a7c <send+0x15c>
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b1c      	cmp	r3, #28
 8001a6c:	d006      	beq.n	8001a7c <send+0x15c>
      {
         close(sn);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fdbb 	bl	80015ec <close>
         return SOCKERR_SOCKSTATUS;
 8001a76:	f06f 0306 	mvn.w	r3, #6
 8001a7a:	e03c      	b.n	8001af6 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <send+0x1e4>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	fa42 f303 	asr.w	r3, r2, r3
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <send+0x17c>
 8001a90:	88ba      	ldrh	r2, [r7, #4]
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d901      	bls.n	8001a9c <send+0x17c>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e02c      	b.n	8001af6 <send+0x1d6>
      if(len <= freesize) break;
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	89bb      	ldrh	r3, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d900      	bls.n	8001aa6 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 8001aa4:	e7ce      	b.n	8001a44 <send+0x124>
      if(len <= freesize) break;
 8001aa6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001aa8:	88ba      	ldrh	r2, [r7, #4]
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faec 	bl	800108c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	3301      	adds	r3, #1
 8001abc:	2120      	movs	r1, #32
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f8fa 	bl	8000cb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001ac4:	bf00      	nop
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	3301      	adds	r3, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f920 	bl	8000d14 <WIZCHIP_READ>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f5      	bne.n	8001ac6 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <send+0x1e0>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <send+0x1e0>)
 8001af2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001af4:	88bb      	ldrh	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000122 	.word	0x20000122
 8001b04:	20000120 	.word	0x20000120

08001b08 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d902      	bls.n	8001b2c <recv+0x24>
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e0a8      	b.n	8001c7e <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8ee 	bl	8000d14 <WIZCHIP_READ>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d002      	beq.n	8001b48 <recv+0x40>
 8001b42:	f06f 0304 	mvn.w	r3, #4
 8001b46:	e09a      	b.n	8001c7e <recv+0x176>
   CHECK_SOCKDATA();
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <recv+0x4c>
 8001b4e:	f06f 030d 	mvn.w	r3, #13
 8001b52:	e094      	b.n	8001c7e <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 8001b54:	201a      	movs	r0, #26
 8001b56:	f7ff f8dd 	bl	8000d14 <WIZCHIP_READ>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	ea01 0203 	and.w	r2, r1, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa42 f303 	asr.w	r3, r2, r3
 8001b74:	2201      	movs	r2, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001b80:	89ba      	ldrh	r2, [r7, #12]
 8001b82:	88bb      	ldrh	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d201      	bcs.n	8001b8c <recv+0x84>
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9cd 	bl	8000f2e <getSn_RX_RSR>
 8001b94:	4603      	mov	r3, r0
 8001b96:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f8b7 	bl	8000d14 <WIZCHIP_READ>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b17      	cmp	r3, #23
 8001bae:	d030      	beq.n	8001c12 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b1c      	cmp	r3, #28
 8001bb4:	d126      	bne.n	8001c04 <recv+0xfc>
            {
               if(recvsize != 0) break;
 8001bb6:	89bb      	ldrh	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d13d      	bne.n	8001c38 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f972 	bl	8000ea8 <getSn_TX_FSR>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	201b      	movs	r0, #27
 8001bca:	f7ff f8a3 	bl	8000d14 <WIZCHIP_READ>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	ea01 0203 	and.w	r2, r1, r3
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa42 f303 	asr.w	r3, r2, r3
 8001be8:	2201      	movs	r2, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	d10d      	bne.n	8001c12 <recv+0x10a>
               {
                  close(sn);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fcf7 	bl	80015ec <close>
                  return SOCKERR_SOCKSTATUS;
 8001bfe:	f06f 0306 	mvn.w	r3, #6
 8001c02:	e03c      	b.n	8001c7e <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fcf0 	bl	80015ec <close>
               return SOCKERR_SOCKSTATUS;
 8001c0c:	f06f 0306 	mvn.w	r3, #6
 8001c10:	e035      	b.n	8001c7e <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <recv+0x180>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	fa42 f303 	asr.w	r3, r2, r3
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d004      	beq.n	8001c30 <recv+0x128>
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <recv+0x128>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e026      	b.n	8001c7e <recv+0x176>
         if(recvsize != 0) break;
 8001c30:	89bb      	ldrh	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8001c36:	e7a9      	b.n	8001b8c <recv+0x84>
               if(recvsize != 0) break;
 8001c38:	bf00      	nop
 8001c3a:	e000      	b.n	8001c3e <recv+0x136>
         if(recvsize != 0) break;
 8001c3c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001c3e:	89ba      	ldrh	r2, [r7, #12]
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d201      	bcs.n	8001c4a <recv+0x142>
 8001c46:	89bb      	ldrh	r3, [r7, #12]
 8001c48:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fad4 	bl	80011fe <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	2140      	movs	r1, #64	; 0x40
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f829 	bl	8000cb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c66:	bf00      	nop
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f84f 	bl	8000d14 <WIZCHIP_READ>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f5      	bne.n	8001c68 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000120 	.word	0x20000120

08001c8c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d902      	bls.n	8001cb2 <sendto+0x26>
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e139      	b.n	8001f26 <sendto+0x29a>
   switch(getSn_MR(sn) & 0x0F)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f82b 	bl	8000d14 <WIZCHIP_READ>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	3b02      	subs	r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d902      	bls.n	8001cd0 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001cca:	f06f 0304 	mvn.w	r3, #4
 8001cce:	e12a      	b.n	8001f26 <sendto+0x29a>
         break;
 8001cd0:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001cd2:	89bb      	ldrh	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <sendto+0x52>
 8001cd8:	f06f 030d 	mvn.w	r3, #13
 8001cdc:	e123      	b.n	8001f26 <sendto+0x29a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	3201      	adds	r2, #1
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	3202      	adds	r2, #2
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	3203      	adds	r2, #3
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <sendto+0xa4>
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3304      	adds	r3, #4
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fffa 	bl	8000d14 <WIZCHIP_READ>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <sendto+0xa4>
 8001d2a:	f06f 030b 	mvn.w	r3, #11
 8001d2e:	e0fa      	b.n	8001f26 <sendto+0x29a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001d30:	8c3b      	ldrh	r3, [r7, #32]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <sendto+0xc6>
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ffe9 	bl	8000d14 <WIZCHIP_READ>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d002      	beq.n	8001d52 <sendto+0xc6>
 8001d4c:	f06f 030a 	mvn.w	r3, #10
 8001d50:	e0e9      	b.n	8001f26 <sendto+0x29a>
   tmp = getSn_SR(sn);
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3304      	adds	r3, #4
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	3303      	adds	r3, #3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffda 	bl	8000d14 <WIZCHIP_READ>
 8001d60:	4603      	mov	r3, r0
 8001d62:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b42      	cmp	r3, #66	; 0x42
 8001d68:	d008      	beq.n	8001d7c <sendto+0xf0>
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b22      	cmp	r3, #34	; 0x22
 8001d6e:	d005      	beq.n	8001d7c <sendto+0xf0>
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b32      	cmp	r3, #50	; 0x32
 8001d74:	d002      	beq.n	8001d7c <sendto+0xf0>
 8001d76:	f06f 0306 	mvn.w	r3, #6
 8001d7a:	e0d4      	b.n	8001f26 <sendto+0x29a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	330c      	adds	r3, #12
 8001d84:	2204      	movs	r2, #4
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fff1 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3304      	adds	r3, #4
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	3310      	adds	r3, #16
 8001d96:	461a      	mov	r2, r3
 8001d98:	8c3b      	ldrh	r3, [r7, #32]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f7fe ff88 	bl	8000cb8 <WIZCHIP_WRITE>
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	3304      	adds	r3, #4
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	3311      	adds	r3, #17
 8001db0:	461a      	mov	r2, r3
 8001db2:	8c3b      	ldrh	r3, [r7, #32]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7fe ff7d 	bl	8000cb8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001dbe:	201b      	movs	r0, #27
 8001dc0:	f7fe ffa8 	bl	8000d14 <WIZCHIP_READ>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	ea01 0203 	and.w	r2, r1, r3
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa42 f303 	asr.w	r3, r2, r3
 8001dde:	2201      	movs	r2, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001dea:	89ba      	ldrh	r2, [r7, #12]
 8001dec:	8abb      	ldrh	r3, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d901      	bls.n	8001df6 <sendto+0x16a>
 8001df2:	8abb      	ldrh	r3, [r7, #20]
 8001df4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f855 	bl	8000ea8 <getSn_TX_FSR>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	3304      	adds	r3, #4
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	3303      	adds	r3, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff82 	bl	8000d14 <WIZCHIP_READ>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <sendto+0x190>
 8001e16:	f06f 0303 	mvn.w	r3, #3
 8001e1a:	e084      	b.n	8001f26 <sendto+0x29a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001e1c:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <sendto+0x2a4>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	fa42 f303 	asr.w	r3, r2, r3
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <sendto+0x1b0>
 8001e30:	89ba      	ldrh	r2, [r7, #12]
 8001e32:	8abb      	ldrh	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d901      	bls.n	8001e3c <sendto+0x1b0>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e074      	b.n	8001f26 <sendto+0x29a>
      if(len <= freesize) break;
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	8abb      	ldrh	r3, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d900      	bls.n	8001e46 <sendto+0x1ba>
      freesize = getSn_TX_FSR(sn);
 8001e44:	e7d7      	b.n	8001df6 <sendto+0x16a>
      if(len <= freesize) break;
 8001e46:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001e48:	89ba      	ldrh	r2, [r7, #12]
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f91c 	bl	800108c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7fe ffd5 	bl	8000e0c <WIZCHIP_READ_BUF>
      if(taddr == 0)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <sendto+0x1f6>
      {
         getSUBR((uint8_t*)&taddr);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2005      	movs	r0, #5
 8001e72:	f7fe ffcb 	bl	8000e0c <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8001e76:	2204      	movs	r2, #4
 8001e78:	492e      	ldr	r1, [pc, #184]	; (8001f34 <sendto+0x2a8>)
 8001e7a:	2005      	movs	r0, #5
 8001e7c:	f7fe ff78 	bl	8000d70 <WIZCHIP_WRITE_BUF>
 8001e80:	e001      	b.n	8001e86 <sendto+0x1fa>
      }
      else taddr = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff11 	bl	8000cb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001e96:	bf00      	nop
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff37 	bl	8000d14 <WIZCHIP_READ>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f5      	bne.n	8001e98 <sendto+0x20c>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff2d 	bl	8000d14 <WIZCHIP_READ>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <sendto+0x256>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	3302      	adds	r3, #2
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fef0 	bl	8000cb8 <WIZCHIP_WRITE>
         break;
 8001ed8:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d021      	beq.n	8001f24 <sendto+0x298>
 8001ee0:	e019      	b.n	8001f16 <sendto+0x28a>
      else if(tmp & Sn_IR_TIMEOUT)
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0df      	beq.n	8001eac <sendto+0x220>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fede 	bl	8000cb8 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <sendto+0x284>
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2204      	movs	r2, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f7fe ff30 	bl	8000d70 <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 8001f10:	f06f 030c 	mvn.w	r3, #12
 8001f14:	e007      	b.n	8001f26 <sendto+0x29a>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f7fe ff26 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001f24:	89bb      	ldrh	r3, [r7, #12]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000120 	.word	0x20000120
 8001f34:	080129e0 	.word	0x080129e0

08001f38 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	4613      	mov	r3, r2
 8001f48:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d902      	bls.n	8001f5a <recvfrom+0x22>
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e1c6      	b.n	80022e8 <recvfrom+0x3b0>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fed7 	bl	8000d14 <WIZCHIP_READ>
 8001f66:	4603      	mov	r3, r0
 8001f68:	777b      	strb	r3, [r7, #29]
 8001f6a:	7f7b      	ldrb	r3, [r7, #29]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	dc02      	bgt.n	8001f7a <recvfrom+0x42>
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	da05      	bge.n	8001f84 <recvfrom+0x4c>
 8001f78:	e001      	b.n	8001f7e <recvfrom+0x46>
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d004      	beq.n	8001f88 <recvfrom+0x50>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001f7e:	f06f 0304 	mvn.w	r3, #4
 8001f82:	e1b1      	b.n	80022e8 <recvfrom+0x3b0>
         break;
 8001f84:	bf00      	nop
 8001f86:	e000      	b.n	8001f8a <recvfrom+0x52>
         break;
 8001f88:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <recvfrom+0x5e>
 8001f90:	f06f 030d 	mvn.w	r3, #13
 8001f94:	e1a8      	b.n	80022e8 <recvfrom+0x3b0>
   if(sock_remained_size[sn] == 0)
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4a82      	ldr	r2, [pc, #520]	; (80021a4 <recvfrom+0x26c>)
 8001f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <recvfrom+0xb8>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ffc2 	bl	8000f2e <getSn_RX_RSR>
 8001faa:	4603      	mov	r3, r0
 8001fac:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe feac 	bl	8000d14 <WIZCHIP_READ>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <recvfrom+0x90>
 8001fc2:	f06f 0303 	mvn.w	r3, #3
 8001fc6:	e18f      	b.n	80022e8 <recvfrom+0x3b0>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001fc8:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <recvfrom+0x270>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	fa42 f303 	asr.w	r3, r2, r3
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <recvfrom+0xae>
 8001fdc:	8bfb      	ldrh	r3, [r7, #30]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <recvfrom+0xae>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e180      	b.n	80022e8 <recvfrom+0x3b0>
         if(pack_len != 0) break;
 8001fe6:	8bfb      	ldrh	r3, [r7, #30]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <recvfrom+0xb6>
         pack_len = getSn_RX_RSR(sn);
 8001fec:	e7d9      	b.n	8001fa2 <recvfrom+0x6a>
         if(pack_len != 0) break;
 8001fee:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8001ff0:	7f7b      	ldrb	r3, [r7, #29]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d075      	beq.n	80020e6 <recvfrom+0x1ae>
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	f300 8135 	bgt.w	800226a <recvfrom+0x332>
 8002000:	2b02      	cmp	r3, #2
 8002002:	d003      	beq.n	800200c <recvfrom+0xd4>
 8002004:	2b03      	cmp	r3, #3
 8002006:	f000 80d3 	beq.w	80021b0 <recvfrom+0x278>
 800200a:	e12e      	b.n	800226a <recvfrom+0x332>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <recvfrom+0x26c>)
 8002010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d14e      	bne.n	80020b6 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8002018:	f107 0114 	add.w	r1, r7, #20
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2208      	movs	r2, #8
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f8ec 	bl	80011fe <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3304      	adds	r3, #4
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	3301      	adds	r3, #1
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe41 	bl	8000cb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002036:	bf00      	nop
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	3304      	adds	r3, #4
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	3301      	adds	r3, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fe67 	bl	8000d14 <WIZCHIP_READ>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f5      	bne.n	8002038 <recvfrom+0x100>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800204c:	7d3a      	ldrb	r2, [r7, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3301      	adds	r3, #1
 8002056:	7d7a      	ldrb	r2, [r7, #21]
 8002058:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3302      	adds	r3, #2
 800205e:	7dba      	ldrb	r2, [r7, #22]
 8002060:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3303      	adds	r3, #3
 8002066:	7dfa      	ldrb	r2, [r7, #23]
 8002068:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800206a:	7e3b      	ldrb	r3, [r7, #24]
 800206c:	b29a      	uxth	r2, r3
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b29a      	uxth	r2, r3
 800207a:	7e7b      	ldrb	r3, [r7, #25]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b29a      	uxth	r2, r3
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002086:	7eba      	ldrb	r2, [r7, #26]
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	b291      	uxth	r1, r2
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <recvfrom+0x26c>)
 800208e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	4a43      	ldr	r2, [pc, #268]	; (80021a4 <recvfrom+0x26c>)
 8002096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b299      	uxth	r1, r3
 800209e:	7efb      	ldrb	r3, [r7, #27]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	440a      	add	r2, r1
 80020a6:	b291      	uxth	r1, r2
 80020a8:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <recvfrom+0x26c>)
 80020aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <recvfrom+0x274>)
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <recvfrom+0x26c>)
 80020ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020be:	89ba      	ldrh	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d202      	bcs.n	80020ca <recvfrom+0x192>
 80020c4:	89bb      	ldrh	r3, [r7, #12]
 80020c6:	83fb      	strh	r3, [r7, #30]
 80020c8:	e004      	b.n	80020d4 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <recvfrom+0x26c>)
 80020ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d2:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80020d8:	8bfa      	ldrh	r2, [r7, #30]
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f88d 	bl	80011fe <wiz_recv_data>
			break;
 80020e4:	e0cd      	b.n	8002282 <recvfrom+0x34a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <recvfrom+0x26c>)
 80020ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d142      	bne.n	8002178 <recvfrom+0x240>
	      {
   			wiz_recv_data(sn, head, 2);
 80020f2:	f107 0114 	add.w	r1, r7, #20
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2202      	movs	r2, #2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f87f 	bl	80011fe <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	3304      	adds	r3, #4
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	3301      	adds	r3, #1
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fdd4 	bl	8000cb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002110:	bf00      	nop
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3304      	adds	r3, #4
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	3301      	adds	r3, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fdfa 	bl	8000d14 <WIZCHIP_READ>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f5      	bne.n	8002112 <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8002126:	7d3a      	ldrb	r2, [r7, #20]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	b291      	uxth	r1, r2
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <recvfrom+0x26c>)
 800212e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <recvfrom+0x26c>)
 8002136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b29a      	uxth	r2, r3
 800213e:	7d7b      	ldrb	r3, [r7, #21]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4413      	add	r3, r2
 8002144:	b29a      	uxth	r2, r3
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3a02      	subs	r2, #2
 800214a:	b291      	uxth	r1, r2
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <recvfrom+0x26c>)
 800214e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <recvfrom+0x26c>)
 8002156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800215e:	4293      	cmp	r3, r2
 8002160:	d906      	bls.n	8002170 <recvfrom+0x238>
   			{
   			   close(sn);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa41 	bl	80015ec <close>
   			   return SOCKFATAL_PACKLEN;
 800216a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800216e:	e0bb      	b.n	80022e8 <recvfrom+0x3b0>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <recvfrom+0x274>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <recvfrom+0x26c>)
 800217c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002180:	89ba      	ldrh	r2, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d202      	bcs.n	800218c <recvfrom+0x254>
 8002186:	89bb      	ldrh	r3, [r7, #12]
 8002188:	83fb      	strh	r3, [r7, #30]
 800218a:	e004      	b.n	8002196 <recvfrom+0x25e>
			else pack_len = sock_remained_size[sn];
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <recvfrom+0x26c>)
 8002190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002194:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002196:	8bfa      	ldrh	r2, [r7, #30]
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f82e 	bl	80011fe <wiz_recv_data>
		   break;
 80021a2:	e06e      	b.n	8002282 <recvfrom+0x34a>
 80021a4:	20000124 	.word	0x20000124
 80021a8:	20000120 	.word	0x20000120
 80021ac:	2000012c 	.word	0x2000012c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <recvfrom+0x3b8>)
 80021b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d140      	bne.n	800223e <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 80021bc:	f107 0114 	add.w	r1, r7, #20
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2206      	movs	r2, #6
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f81a 	bl	80011fe <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3304      	adds	r3, #4
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	3301      	adds	r3, #1
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd6f 	bl	8000cb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80021da:	bf00      	nop
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	3304      	adds	r3, #4
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	3301      	adds	r3, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fd95 	bl	8000d14 <WIZCHIP_READ>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f5      	bne.n	80021dc <recvfrom+0x2a4>
   			addr[0] = head[0];
 80021f0:	7d3a      	ldrb	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	7d7a      	ldrb	r2, [r7, #21]
 80021fc:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3302      	adds	r3, #2
 8002202:	7dba      	ldrb	r2, [r7, #22]
 8002204:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3303      	adds	r3, #3
 800220a:	7dfa      	ldrb	r2, [r7, #23]
 800220c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800220e:	7e3a      	ldrb	r2, [r7, #24]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	b291      	uxth	r1, r2
 8002214:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <recvfrom+0x3b8>)
 8002216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <recvfrom+0x3b8>)
 800221e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b299      	uxth	r1, r3
 8002226:	7e7b      	ldrb	r3, [r7, #25]
 8002228:	b29a      	uxth	r2, r3
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	440a      	add	r2, r1
 800222e:	b291      	uxth	r1, r2
 8002230:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <recvfrom+0x3b8>)
 8002232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <recvfrom+0x3bc>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <recvfrom+0x3b8>)
 8002242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002246:	89ba      	ldrh	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d202      	bcs.n	8002252 <recvfrom+0x31a>
 800224c:	89bb      	ldrh	r3, [r7, #12]
 800224e:	83fb      	strh	r3, [r7, #30]
 8002250:	e004      	b.n	800225c <recvfrom+0x324>
			else pack_len = sock_remained_size[sn];
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <recvfrom+0x3b8>)
 8002256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800225a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800225c:	8bfa      	ldrh	r2, [r7, #30]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ffcb 	bl	80011fe <wiz_recv_data>
			break;
 8002268:	e00b      	b.n	8002282 <recvfrom+0x34a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800226a:	8bfa      	ldrh	r2, [r7, #30]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f87a 	bl	800136a <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	491d      	ldr	r1, [pc, #116]	; (80022f0 <recvfrom+0x3b8>)
 800227a:	8bfa      	ldrh	r2, [r7, #30]
 800227c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002280:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	3304      	adds	r3, #4
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	3301      	adds	r3, #1
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd13 	bl	8000cb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002292:	bf00      	nop
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3304      	adds	r3, #4
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	3301      	adds	r3, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fd39 	bl	8000d14 <WIZCHIP_READ>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f5      	bne.n	8002294 <recvfrom+0x35c>
	sock_remained_size[sn] -= pack_len;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <recvfrom+0x3b8>)
 80022ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	8bfa      	ldrh	r2, [r7, #30]
 80022b4:	1a8a      	subs	r2, r1, r2
 80022b6:	b291      	uxth	r1, r2
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <recvfrom+0x3b8>)
 80022ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <recvfrom+0x3b8>)
 80022c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <recvfrom+0x3a6>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <recvfrom+0x3bc>)
 80022ce:	5cd2      	ldrb	r2, [r2, r3]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	b2d1      	uxtb	r1, r2
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <recvfrom+0x3bc>)
 80022da:	54d1      	strb	r1, [r2, r3]
 80022dc:	e003      	b.n	80022e6 <recvfrom+0x3ae>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <recvfrom+0x3bc>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80022e6:	8bfb      	ldrh	r3, [r7, #30]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000124 	.word	0x20000124
 80022f4:	2000012c 	.word	0x2000012c

080022f8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
 800236c:	2300      	movs	r3, #0
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <reg_wizchip_cris_cbfunc+0x16>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <reg_wizchip_cris_cbfunc+0x44>)
 80023aa:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <reg_wizchip_cris_cbfunc+0x48>)
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	e006      	b.n	80023c2 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6113      	str	r3, [r2, #16]
   }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000004 	.word	0x20000004
 80023d4:	080022f9 	.word	0x080022f9
 80023d8:	08002307 	.word	0x08002307

080023dc <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <reg_wizchip_cs_cbfunc+0x16>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <reg_wizchip_cs_cbfunc+0x44>)
 80023f6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <reg_wizchip_cs_cbfunc+0x48>)
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	e006      	b.n	800240e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6193      	str	r3, [r2, #24]
   }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000004 	.word	0x20000004
 8002420:	08002315 	.word	0x08002315
 8002424:	08002323 	.word	0x08002323

08002428 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002432:	bf00      	nop
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f9      	beq.n	8002434 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <reg_wizchip_spi_cbfunc+0x24>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <reg_wizchip_spi_cbfunc+0x50>)
 8002450:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <reg_wizchip_spi_cbfunc+0x54>)
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	e006      	b.n	8002468 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800245a:	4a06      	ldr	r2, [pc, #24]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6213      	str	r3, [r2, #32]
   }
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	20000004 	.word	0x20000004
 8002478:	08002369 	.word	0x08002369
 800247c:	08002379 	.word	0x08002379

08002480 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d863      	bhi.n	8002562 <ctlwizchip+0xe2>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <ctlwizchip+0x20>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024c5 	.word	0x080024c5
 80024a4:	080024cb 	.word	0x080024cb
 80024a8:	080024f7 	.word	0x080024f7
 80024ac:	080024eb 	.word	0x080024eb
 80024b0:	08002505 	.word	0x08002505
 80024b4:	08002511 	.word	0x08002511
 80024b8:	08002563 	.word	0x08002563
 80024bc:	08002563 	.word	0x08002563
 80024c0:	0800251f 	.word	0x0800251f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80024c4:	f000 f858 	bl	8002578 <wizchip_sw_reset>
         break;
 80024c8:	e04e      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3304      	adds	r3, #4
 80024d8:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f88d 	bl	8002600 <wizchip_init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	e03f      	b.n	800256a <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f968 	bl	80027c4 <wizchip_clrinterrupt>
         break;
 80024f4:	e038      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80024f6:	f000 f988 	bl	800280a <wizchip_getinterrupt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	801a      	strh	r2, [r3, #0]
         break;
 8002502:	e031      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f9a4 	bl	8002856 <wizchip_setinterruptmask>
         break;         
 800250e:	e02b      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002510:	f000 f9c1 	bl	8002896 <wizchip_getinterruptmask>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	801a      	strh	r2, [r3, #0]
         break;
 800251c:	e024      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <ctlwizchip+0xf4>)
 8002520:	789a      	ldrb	r2, [r3, #2]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <ctlwizchip+0xf4>)
 800252c:	78d2      	ldrb	r2, [r2, #3]
 800252e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	3302      	adds	r3, #2
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <ctlwizchip+0xf4>)
 8002536:	7912      	ldrb	r2, [r2, #4]
 8002538:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3303      	adds	r3, #3
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <ctlwizchip+0xf4>)
 8002540:	7952      	ldrb	r2, [r2, #5]
 8002542:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	3304      	adds	r3, #4
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <ctlwizchip+0xf4>)
 800254a:	7992      	ldrb	r2, [r2, #6]
 800254c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3305      	adds	r3, #5
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <ctlwizchip+0xf4>)
 8002554:	79d2      	ldrb	r2, [r2, #7]
 8002556:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3306      	adds	r3, #6
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
         break;
 8002560:	e002      	b.n	8002568 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	e000      	b.n	800256a <ctlwizchip+0xea>
   }
   return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000004 	.word	0x20000004

08002578 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2206      	movs	r2, #6
 8002582:	4619      	mov	r1, r3
 8002584:	2009      	movs	r0, #9
 8002586:	f7fe fc41 	bl	8000e0c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	2204      	movs	r2, #4
 8002590:	4619      	mov	r1, r3
 8002592:	2001      	movs	r0, #1
 8002594:	f7fe fc3a 	bl	8000e0c <WIZCHIP_READ_BUF>
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	2204      	movs	r2, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	2005      	movs	r0, #5
 80025a2:	f7fe fc33 	bl	8000e0c <WIZCHIP_READ_BUF>
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	2204      	movs	r2, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	200f      	movs	r0, #15
 80025b0:	f7fe fc2c 	bl	8000e0c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fb7e 	bl	8000cb8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fba9 	bl	8000d14 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2206      	movs	r2, #6
 80025c6:	4619      	mov	r1, r3
 80025c8:	2009      	movs	r0, #9
 80025ca:	f7fe fbd1 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2204      	movs	r2, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fbca 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	2204      	movs	r2, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	2005      	movs	r0, #5
 80025e6:	f7fe fbc3 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2204      	movs	r2, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	200f      	movs	r0, #15
 80025f4:	f7fe fbbc 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 800260e:	f7ff ffb3 	bl	8002578 <wizchip_sw_reset>
   if(txsize)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d066      	beq.n	80026e6 <wizchip_init+0xe6>
   {
      tmp = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	e015      	b.n	800264e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	7b7b      	ldrb	r3, [r7, #13]
 800262e:	4413      	add	r3, r2
 8002630:	b2db      	uxtb	r3, r3
 8002632:	737b      	strb	r3, [r7, #13]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8002634:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002638:	2b08      	cmp	r3, #8
 800263a:	dd02      	ble.n	8002642 <wizchip_init+0x42>
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	e0bc      	b.n	80027bc <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	2b03      	cmp	r3, #3
 8002654:	dde5      	ble.n	8002622 <wizchip_init+0x22>
		#else
			if(tmp > 16) return -1;
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e040      	b.n	80026de <wizchip_init+0xde>
		{
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8002660:	e005      	b.n	800266e <wizchip_init+0x6e>
 8002662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	73bb      	strb	r3, [r7, #14]
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800267e:	fa42 f303 	asr.w	r3, r2, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d006      	beq.n	8002694 <wizchip_init+0x94>
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e6      	bne.n	8002662 <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8002694:	201b      	movs	r0, #27
 8002696:	f7fe fb3d 	bl	8000d14 <WIZCHIP_READ>
 800269a:	4603      	mov	r3, r0
 800269c:	b25a      	sxtb	r2, r3
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2103      	movs	r1, #3
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80026b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	201b      	movs	r0, #27
 80026ce:	f7fe faf3 	bl	8000cb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	ddba      	ble.n	800265c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d066      	beq.n	80027ba <wizchip_init+0x1ba>
   {
      tmp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e015      	b.n	8002722 <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	7b7b      	ldrb	r3, [r7, #13]
 8002702:	4413      	add	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	737b      	strb	r3, [r7, #13]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8002708:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800270c:	2b08      	cmp	r3, #8
 800270e:	dd02      	ble.n	8002716 <wizchip_init+0x116>
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e052      	b.n	80027bc <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	2b03      	cmp	r3, #3
 8002728:	dde5      	ble.n	80026f6 <wizchip_init+0xf6>
		#else
			if(tmp > 16) return -1;
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e040      	b.n	80027b2 <wizchip_init+0x1b2>
		{
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8002734:	e005      	b.n	8002742 <wizchip_init+0x142>
 8002736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	73bb      	strb	r3, [r7, #14]
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002752:	fa42 f303 	asr.w	r3, r2, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d006      	beq.n	8002768 <wizchip_init+0x168>
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e6      	bne.n	8002736 <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8002768:	201a      	movs	r0, #26
 800276a:	f7fe fad3 	bl	8000d14 <WIZCHIP_READ>
 800276e:	4603      	mov	r3, r0
 8002770:	b25a      	sxtb	r2, r3
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2103      	movs	r1, #3
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	b25b      	sxtb	r3, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	b25b      	sxtb	r3, r3
 8002784:	4013      	ands	r3, r2
 8002786:	b25a      	sxtb	r2, r3
 8002788:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b25b      	sxtb	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	201a      	movs	r0, #26
 80027a2:	f7fe fa89 	bl	8000cb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	ddba      	ble.n	8002730 <wizchip_init+0x130>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	2015      	movs	r0, #21
 80027fe:	f7fe fa5b 	bl	8000cb8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 800281c:	2015      	movs	r0, #21
 800281e:	f7fe fa79 	bl	8000d14 <WIZCHIP_READ>
 8002822:	4603      	mov	r3, r0
 8002824:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8002828:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f023 0310 	bic.w	r3, r3, #16
 8002838:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800283a:	79bb      	ldrb	r3, [r7, #6]
 800283c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b29a      	uxth	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800284c:	88bb      	ldrh	r3, [r7, #4]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b29b      	uxth	r3, r3
 800286a:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	f023 0310 	bic.w	r3, r3, #16
 8002872:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	4313      	orrs	r3, r2
 8002882:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	4619      	mov	r1, r3
 8002888:	2016      	movs	r0, #22
 800288a:	f7fe fa15 	bl	8000cb8 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 80028a8:	2016      	movs	r0, #22
 80028aa:	f7fe fa33 	bl	8000d14 <WIZCHIP_READ>
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f023 0310 	bic.w	r3, r3, #16
 80028c0:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80028c6:	88bb      	ldrh	r3, [r7, #4]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80028d4:	88bb      	ldrh	r3, [r7, #4]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2206      	movs	r2, #6
 80028ec:	4619      	mov	r1, r3
 80028ee:	2009      	movs	r0, #9
 80028f0:	f7fe fa3e 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	330e      	adds	r3, #14
 80028f8:	2204      	movs	r2, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fe fa37 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	330a      	adds	r3, #10
 8002906:	2204      	movs	r2, #4
 8002908:	4619      	mov	r1, r3
 800290a:	2005      	movs	r0, #5
 800290c:	f7fe fa30 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3306      	adds	r3, #6
 8002914:	2204      	movs	r2, #4
 8002916:	4619      	mov	r1, r3
 8002918:	200f      	movs	r0, #15
 800291a:	f7fe fa29 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7c9a      	ldrb	r2, [r3, #18]
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <wizchip_setnetinfo+0x70>)
 8002924:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7cda      	ldrb	r2, [r3, #19]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <wizchip_setnetinfo+0x70>)
 800292c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7d1a      	ldrb	r2, [r3, #20]
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <wizchip_setnetinfo+0x70>)
 8002934:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7d5a      	ldrb	r2, [r3, #21]
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <wizchip_setnetinfo+0x70>)
 800293c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7d9a      	ldrb	r2, [r3, #22]
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <wizchip_setnetinfo+0x74>)
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000130 	.word	0x20000130
 8002954:	20000134 	.word	0x20000134

08002958 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2206      	movs	r2, #6
 8002964:	4619      	mov	r1, r3
 8002966:	2009      	movs	r0, #9
 8002968:	f7fe fa50 	bl	8000e0c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	330e      	adds	r3, #14
 8002970:	2204      	movs	r2, #4
 8002972:	4619      	mov	r1, r3
 8002974:	2001      	movs	r0, #1
 8002976:	f7fe fa49 	bl	8000e0c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	330a      	adds	r3, #10
 800297e:	2204      	movs	r2, #4
 8002980:	4619      	mov	r1, r3
 8002982:	2005      	movs	r0, #5
 8002984:	f7fe fa42 	bl	8000e0c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3306      	adds	r3, #6
 800298c:	2204      	movs	r2, #4
 800298e:	4619      	mov	r1, r3
 8002990:	200f      	movs	r0, #15
 8002992:	f7fe fa3b 	bl	8000e0c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <wizchip_getnetinfo+0x70>)
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <wizchip_getnetinfo+0x70>)
 80029a0:	785a      	ldrb	r2, [r3, #1]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <wizchip_getnetinfo+0x70>)
 80029a8:	789a      	ldrb	r2, [r3, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <wizchip_getnetinfo+0x70>)
 80029b0:	78da      	ldrb	r2, [r3, #3]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <wizchip_getnetinfo+0x74>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	759a      	strb	r2, [r3, #22]
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000130 	.word	0x20000130
 80029cc:	20000134 	.word	0x20000134

080029d0 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80029d4:	2204      	movs	r2, #4
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <default_ip_assign+0x28>)
 80029d8:	200f      	movs	r0, #15
 80029da:	f7fe f9c9 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80029de:	2204      	movs	r2, #4
 80029e0:	4906      	ldr	r1, [pc, #24]	; (80029fc <default_ip_assign+0x2c>)
 80029e2:	2005      	movs	r0, #5
 80029e4:	f7fe f9c4 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80029e8:	2204      	movs	r2, #4
 80029ea:	4905      	ldr	r1, [pc, #20]	; (8002a00 <default_ip_assign+0x30>)
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7fe f9bf 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000144 	.word	0x20000144
 80029fc:	2000014c 	.word	0x2000014c
 8002a00:	20000148 	.word	0x20000148

08002a04 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe f954 	bl	8000cb8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe f97f 	bl	8000d14 <WIZCHIP_READ>
   default_ip_assign();
 8002a16:	f7ff ffdb 	bl	80029d0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002a1a:	2206      	movs	r2, #6
 8002a1c:	4902      	ldr	r1, [pc, #8]	; (8002a28 <default_ip_update+0x24>)
 8002a1e:	2009      	movs	r0, #9
 8002a20:	f7fe f9a6 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000164 	.word	0x20000164

08002a2c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe f940 	bl	8000cb8 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe f96b 	bl	8000d14 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002a3e:	2206      	movs	r2, #6
 8002a40:	4902      	ldr	r1, [pc, #8]	; (8002a4c <default_ip_conflict+0x20>)
 8002a42:	2009      	movs	r0, #9
 8002a44:	f7fe f994 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000164 	.word	0x20000164

08002a50 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002a56:	463b      	mov	r3, r7
 8002a58:	2206      	movs	r2, #6
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	2009      	movs	r0, #9
 8002a5e:	f7fe f9d5 	bl	8000e0c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002a6a:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002a72:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2206      	movs	r2, #6
 8002a78:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3304      	adds	r3, #4
 8002a88:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002a8a:	4b69      	ldr	r3, [pc, #420]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e1b      	lsrs	r3, r3, #24
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002a96:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0c1a      	lsrs	r2, r3, #16
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002aa4:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0a1a      	lsrs	r2, r3, #8
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3302      	adds	r3, #2
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3303      	adds	r3, #3
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002ac6:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330a      	adds	r3, #10
 8002acc:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002ae4:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2200      	movs	r2, #0
 8002b12:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002b14:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002b2c:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b6c:	7852      	ldrb	r2, [r2, #1]
 8002b6e:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b76:	7892      	ldrb	r2, [r2, #2]
 8002b78:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2d      	ldr	r2, [pc, #180]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b80:	78d2      	ldrb	r2, [r2, #3]
 8002b82:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b8a:	7912      	ldrb	r2, [r2, #4]
 8002b8c:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b96:	7952      	ldrb	r2, [r2, #5]
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e008      	b.n	8002bb4 <makeDHCPMSG+0x164>
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	4413      	add	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	771a      	strb	r2, [r3, #28]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d9f3      	bls.n	8002ba2 <makeDHCPMSG+0x152>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e009      	b.n	8002bd4 <makeDHCPMSG+0x184>
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8002bd8:	d9f2      	bls.n	8002bc0 <makeDHCPMSG+0x170>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e009      	b.n	8002bf4 <makeDHCPMSG+0x1a4>
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	4413      	add	r3, r2
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	daf1      	bge.n	8002be0 <makeDHCPMSG+0x190>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2263      	movs	r2, #99	; 0x63
 8002c02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2282      	movs	r2, #130	; 0x82
 8002c0c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2253      	movs	r2, #83	; 0x53
 8002c16:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2263      	movs	r2, #99	; 0x63
 8002c20:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000160 	.word	0x20000160
 8002c30:	2000015c 	.word	0x2000015c
 8002c34:	20000164 	.word	0x20000164

08002c38 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002c42:	f7ff ff05 	bl	8002a50 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002c46:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002c4c:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002c52:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002c58:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002c76:	2304      	movs	r3, #4
 8002c78:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	88bb      	ldrh	r3, [r7, #4]
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	80b9      	strh	r1, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	2235      	movs	r2, #53	; 0x35
 8002c88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002c8c:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	88bb      	ldrh	r3, [r7, #4]
 8002c92:	1c59      	adds	r1, r3, #1
 8002c94:	80b9      	strh	r1, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8002c9e:	4b42      	ldr	r3, [pc, #264]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	88bb      	ldrh	r3, [r7, #4]
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	80b9      	strh	r1, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	80b9      	strh	r1, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	223d      	movs	r2, #61	; 0x3d
 8002cbe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	88bb      	ldrh	r3, [r7, #4]
 8002cc8:	1c59      	adds	r1, r3, #1
 8002cca:	80b9      	strh	r1, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2207      	movs	r2, #7
 8002cd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	88bb      	ldrh	r3, [r7, #4]
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	80b9      	strh	r1, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	1c59      	adds	r1, r3, #1
 8002cee:	80b9      	strh	r1, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002cf4:	7819      	ldrb	r1, [r3, #0]
 8002cf6:	1813      	adds	r3, r2, r0
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	1c59      	adds	r1, r3, #1
 8002d06:	80b9      	strh	r1, [r7, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d0c:	7859      	ldrb	r1, [r3, #1]
 8002d0e:	1813      	adds	r3, r2, r0
 8002d10:	460a      	mov	r2, r1
 8002d12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	88bb      	ldrh	r3, [r7, #4]
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	80b9      	strh	r1, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d24:	7899      	ldrb	r1, [r3, #2]
 8002d26:	1813      	adds	r3, r2, r0
 8002d28:	460a      	mov	r2, r1
 8002d2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	1c59      	adds	r1, r3, #1
 8002d36:	80b9      	strh	r1, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d3c:	78d9      	ldrb	r1, [r3, #3]
 8002d3e:	1813      	adds	r3, r2, r0
 8002d40:	460a      	mov	r2, r1
 8002d42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	1c59      	adds	r1, r3, #1
 8002d4e:	80b9      	strh	r1, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d54:	7919      	ldrb	r1, [r3, #4]
 8002d56:	1813      	adds	r3, r2, r0
 8002d58:	460a      	mov	r2, r1
 8002d5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	1c59      	adds	r1, r3, #1
 8002d66:	80b9      	strh	r1, [r7, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d6c:	7959      	ldrb	r1, [r3, #5]
 8002d6e:	1813      	adds	r3, r2, r0
 8002d70:	460a      	mov	r2, r1
 8002d72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	1c59      	adds	r1, r3, #1
 8002d7e:	80b9      	strh	r1, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	220c      	movs	r2, #12
 8002d84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	88bb      	ldrh	r3, [r7, #4]
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	80b9      	strh	r1, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	e017      	b.n	8002dd0 <send_DHCP_DISCOVER+0x198>
 8002da0:	20000138 	.word	0x20000138
 8002da4:	2000013c 	.word	0x2000013c
 8002da8:	20000160 	.word	0x20000160
 8002dac:	20000164 	.word	0x20000164
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002db0:	88f9      	ldrh	r1, [r7, #6]
 8002db2:	4b80      	ldr	r3, [pc, #512]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	88bb      	ldrh	r3, [r7, #4]
 8002db8:	1c58      	adds	r0, r3, #1
 8002dba:	80b8      	strh	r0, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <send_DHCP_DISCOVER+0x380>)
 8002dc0:	5c59      	ldrb	r1, [r3, r1]
 8002dc2:	1813      	adds	r3, r2, r0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	80fb      	strh	r3, [r7, #6]
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4a79      	ldr	r2, [pc, #484]	; (8002fb8 <send_DHCP_DISCOVER+0x380>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ea      	bne.n	8002db0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002dda:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b74      	ldr	r3, [pc, #464]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	88bb      	ldrh	r3, [r7, #4]
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	80b9      	strh	r1, [r7, #4]
 8002dec:	461d      	mov	r5, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f001 f94c 	bl	800408c <NibbleToHex>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	1963      	adds	r3, r4, r5
 8002dfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e00:	78da      	ldrb	r2, [r3, #3]
 8002e02:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e04:	681c      	ldr	r4, [r3, #0]
 8002e06:	88bb      	ldrh	r3, [r7, #4]
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	80b9      	strh	r1, [r7, #4]
 8002e0c:	461d      	mov	r5, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f001 f93c 	bl	800408c <NibbleToHex>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	1963      	adds	r3, r4, r5
 8002e1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002e1e:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e20:	791b      	ldrb	r3, [r3, #4]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	88bb      	ldrh	r3, [r7, #4]
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	80b9      	strh	r1, [r7, #4]
 8002e30:	461d      	mov	r5, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f001 f92a 	bl	800408c <NibbleToHex>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	1963      	adds	r3, r4, r5
 8002e3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002e42:	4b5e      	ldr	r3, [pc, #376]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e44:	791a      	ldrb	r2, [r3, #4]
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	88bb      	ldrh	r3, [r7, #4]
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	80b9      	strh	r1, [r7, #4]
 8002e50:	461d      	mov	r5, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f001 f91a 	bl	800408c <NibbleToHex>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	1963      	adds	r3, r4, r5
 8002e5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002e62:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e64:	795b      	ldrb	r3, [r3, #5]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b52      	ldr	r3, [pc, #328]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e6c:	681c      	ldr	r4, [r3, #0]
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	1c59      	adds	r1, r3, #1
 8002e72:	80b9      	strh	r1, [r7, #4]
 8002e74:	461d      	mov	r5, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f001 f908 	bl	800408c <NibbleToHex>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	1963      	adds	r3, r4, r5
 8002e82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e88:	795a      	ldrb	r2, [r3, #5]
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	80b9      	strh	r1, [r7, #4]
 8002e94:	461d      	mov	r5, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f001 f8f8 	bl	800408c <NibbleToHex>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	1963      	adds	r3, r4, r5
 8002ea2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	b2d9      	uxtb	r1, r3
 8002eaa:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	88b8      	ldrh	r0, [r7, #4]
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	3307      	adds	r3, #7
 8002eb4:	1ac3      	subs	r3, r0, r3
 8002eb6:	3106      	adds	r1, #6
 8002eb8:	b2c9      	uxtb	r1, r1
 8002eba:	4413      	add	r3, r2
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	1c59      	adds	r1, r3, #1
 8002eca:	80b9      	strh	r1, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	2237      	movs	r2, #55	; 0x37
 8002ed0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	80b9      	strh	r1, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	88bb      	ldrh	r3, [r7, #4]
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	80b9      	strh	r1, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	80b9      	strh	r1, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	2203      	movs	r2, #3
 8002f06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	80b9      	strh	r1, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	2206      	movs	r2, #6
 8002f18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	88bb      	ldrh	r3, [r7, #4]
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	80b9      	strh	r1, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	88bb      	ldrh	r3, [r7, #4]
 8002f34:	1c59      	adds	r1, r3, #1
 8002f36:	80b9      	strh	r1, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	223a      	movs	r2, #58	; 0x3a
 8002f3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	88bb      	ldrh	r3, [r7, #4]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	80b9      	strh	r1, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	223b      	movs	r2, #59	; 0x3b
 8002f4e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	88bb      	ldrh	r3, [r7, #4]
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	80b9      	strh	r1, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	22ff      	movs	r2, #255	; 0xff
 8002f60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002f64:	88bb      	ldrh	r3, [r7, #4]
 8002f66:	80fb      	strh	r3, [r7, #6]
 8002f68:	e009      	b.n	8002f7e <send_DHCP_DISCOVER+0x346>
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	4413      	add	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	80fb      	strh	r3, [r7, #6]
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002f84:	d3f1      	bcc.n	8002f6a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8002f86:	23ff      	movs	r3, #255	; 0xff
 8002f88:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8002f8a:	23ff      	movs	r3, #255	; 0xff
 8002f8c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8002f8e:	23ff      	movs	r3, #255	; 0xff
 8002f90:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8002f92:	23ff      	movs	r3, #255	; 0xff
 8002f94:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <send_DHCP_DISCOVER+0x388>)
 8002f98:	7818      	ldrb	r0, [r3, #0]
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	2243      	movs	r2, #67	; 0x43
 8002fa2:	9200      	str	r2, [sp, #0]
 8002fa4:	f44f 7209 	mov.w	r2, #548	; 0x224
 8002fa8:	f7fe fe70 	bl	8001c8c <sendto>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb4:	20000160 	.word	0x20000160
 8002fb8:	20000038 	.word	0x20000038
 8002fbc:	20000164 	.word	0x20000164
 8002fc0:	20000135 	.word	0x20000135

08002fc4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8002fce:	f7ff fd3f 	bl	8002a50 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <send_DHCP_REQUEST+0x7c>)
 8002fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d004      	beq.n	8002fe6 <send_DHCP_REQUEST+0x22>
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <send_DHCP_REQUEST+0x7c>)
 8002fde:	f993 3000 	ldrsb.w	r3, [r3]
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d134      	bne.n	8003050 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330a      	adds	r3, #10
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330a      	adds	r3, #10
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <send_DHCP_REQUEST+0x84>)
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <send_DHCP_REQUEST+0x84>)
 800300c:	7852      	ldrb	r2, [r2, #1]
 800300e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <send_DHCP_REQUEST+0x84>)
 8003016:	7892      	ldrb	r2, [r2, #2]
 8003018:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <send_DHCP_REQUEST+0x80>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <send_DHCP_REQUEST+0x84>)
 8003020:	78d2      	ldrb	r2, [r2, #3]
 8003022:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <send_DHCP_REQUEST+0x88>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <send_DHCP_REQUEST+0x88>)
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <send_DHCP_REQUEST+0x88>)
 8003032:	789b      	ldrb	r3, [r3, #2]
 8003034:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <send_DHCP_REQUEST+0x88>)
 8003038:	78db      	ldrb	r3, [r3, #3]
 800303a:	71fb      	strb	r3, [r7, #7]
 800303c:	e010      	b.n	8003060 <send_DHCP_REQUEST+0x9c>
 800303e:	bf00      	nop
 8003040:	20000154 	.word	0x20000154
 8003044:	20000160 	.word	0x20000160
 8003048:	20000144 	.word	0x20000144
 800304c:	20000138 	.word	0x20000138
   }
   else
   {
   	ip[0] = 255;
 8003050:	23ff      	movs	r3, #255	; 0xff
 8003052:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8003054:	23ff      	movs	r3, #255	; 0xff
 8003056:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003058:	23ff      	movs	r3, #255	; 0xff
 800305a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800305c:	23ff      	movs	r3, #255	; 0xff
 800305e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003060:	2304      	movs	r3, #4
 8003062:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003064:	4b8d      	ldr	r3, [pc, #564]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	8179      	strh	r1, [r7, #10]
 800306e:	4413      	add	r3, r2
 8003070:	2235      	movs	r2, #53	; 0x35
 8003072:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	1c59      	adds	r1, r3, #1
 800307e:	8179      	strh	r1, [r7, #10]
 8003080:	4413      	add	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	897b      	ldrh	r3, [r7, #10]
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	8179      	strh	r1, [r7, #10]
 8003092:	4413      	add	r3, r2
 8003094:	2203      	movs	r2, #3
 8003096:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800309a:	4b80      	ldr	r3, [pc, #512]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	8179      	strh	r1, [r7, #10]
 80030a4:	4413      	add	r3, r2
 80030a6:	223d      	movs	r2, #61	; 0x3d
 80030a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	897b      	ldrh	r3, [r7, #10]
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	8179      	strh	r1, [r7, #10]
 80030b6:	4413      	add	r3, r2
 80030b8:	2207      	movs	r2, #7
 80030ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80030be:	4b77      	ldr	r3, [pc, #476]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	8179      	strh	r1, [r7, #10]
 80030c8:	4413      	add	r3, r2
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80030d0:	4b72      	ldr	r3, [pc, #456]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	897b      	ldrh	r3, [r7, #10]
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	8179      	strh	r1, [r7, #10]
 80030da:	4618      	mov	r0, r3
 80030dc:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 80030de:	7819      	ldrb	r1, [r3, #0]
 80030e0:	1813      	adds	r3, r2, r0
 80030e2:	460a      	mov	r2, r1
 80030e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	897b      	ldrh	r3, [r7, #10]
 80030ee:	1c59      	adds	r1, r3, #1
 80030f0:	8179      	strh	r1, [r7, #10]
 80030f2:	4618      	mov	r0, r3
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 80030f6:	7859      	ldrb	r1, [r3, #1]
 80030f8:	1813      	adds	r3, r2, r0
 80030fa:	460a      	mov	r2, r1
 80030fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003100:	4b66      	ldr	r3, [pc, #408]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	8179      	strh	r1, [r7, #10]
 800310a:	4618      	mov	r0, r3
 800310c:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 800310e:	7899      	ldrb	r1, [r3, #2]
 8003110:	1813      	adds	r3, r2, r0
 8003112:	460a      	mov	r2, r1
 8003114:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	8179      	strh	r1, [r7, #10]
 8003122:	4618      	mov	r0, r3
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 8003126:	78d9      	ldrb	r1, [r3, #3]
 8003128:	1813      	adds	r3, r2, r0
 800312a:	460a      	mov	r2, r1
 800312c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003130:	4b5a      	ldr	r3, [pc, #360]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	897b      	ldrh	r3, [r7, #10]
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	8179      	strh	r1, [r7, #10]
 800313a:	4618      	mov	r0, r3
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 800313e:	7919      	ldrb	r1, [r3, #4]
 8003140:	1813      	adds	r3, r2, r0
 8003142:	460a      	mov	r2, r1
 8003144:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003148:	4b54      	ldr	r3, [pc, #336]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	8179      	strh	r1, [r7, #10]
 8003152:	4618      	mov	r0, r3
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 8003156:	7959      	ldrb	r1, [r3, #5]
 8003158:	1813      	adds	r3, r2, r0
 800315a:	460a      	mov	r2, r1
 800315c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	f040 8084 	bne.w	8003270 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	897b      	ldrh	r3, [r7, #10]
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	8179      	strh	r1, [r7, #10]
 8003172:	4413      	add	r3, r2
 8003174:	2232      	movs	r2, #50	; 0x32
 8003176:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800317a:	4b48      	ldr	r3, [pc, #288]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	8179      	strh	r1, [r7, #10]
 8003184:	4413      	add	r3, r2
 8003186:	2204      	movs	r2, #4
 8003188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800318c:	4b43      	ldr	r3, [pc, #268]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	8179      	strh	r1, [r7, #10]
 8003196:	4618      	mov	r0, r3
 8003198:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 800319a:	7819      	ldrb	r1, [r3, #0]
 800319c:	1813      	adds	r3, r2, r0
 800319e:	460a      	mov	r2, r1
 80031a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80031a4:	4b3d      	ldr	r3, [pc, #244]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	8179      	strh	r1, [r7, #10]
 80031ae:	4618      	mov	r0, r3
 80031b0:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 80031b2:	7859      	ldrb	r1, [r3, #1]
 80031b4:	1813      	adds	r3, r2, r0
 80031b6:	460a      	mov	r2, r1
 80031b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80031bc:	4b37      	ldr	r3, [pc, #220]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	8179      	strh	r1, [r7, #10]
 80031c6:	4618      	mov	r0, r3
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 80031ca:	7899      	ldrb	r1, [r3, #2]
 80031cc:	1813      	adds	r3, r2, r0
 80031ce:	460a      	mov	r2, r1
 80031d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	8179      	strh	r1, [r7, #10]
 80031de:	4618      	mov	r0, r3
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 80031e2:	78d9      	ldrb	r1, [r3, #3]
 80031e4:	1813      	adds	r3, r2, r0
 80031e6:	460a      	mov	r2, r1
 80031e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	897b      	ldrh	r3, [r7, #10]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	8179      	strh	r1, [r7, #10]
 80031f6:	4413      	add	r3, r2
 80031f8:	2236      	movs	r2, #54	; 0x36
 80031fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	1c59      	adds	r1, r3, #1
 8003206:	8179      	strh	r1, [r7, #10]
 8003208:	4413      	add	r3, r2
 800320a:	2204      	movs	r2, #4
 800320c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	897b      	ldrh	r3, [r7, #10]
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	8179      	strh	r1, [r7, #10]
 800321a:	4618      	mov	r0, r3
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 800321e:	7819      	ldrb	r1, [r3, #0]
 8003220:	1813      	adds	r3, r2, r0
 8003222:	460a      	mov	r2, r1
 8003224:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003228:	4b1c      	ldr	r3, [pc, #112]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	897b      	ldrh	r3, [r7, #10]
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	8179      	strh	r1, [r7, #10]
 8003232:	4618      	mov	r0, r3
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 8003236:	7859      	ldrb	r1, [r3, #1]
 8003238:	1813      	adds	r3, r2, r0
 800323a:	460a      	mov	r2, r1
 800323c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	1c59      	adds	r1, r3, #1
 8003248:	8179      	strh	r1, [r7, #10]
 800324a:	4618      	mov	r0, r3
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 800324e:	7899      	ldrb	r1, [r3, #2]
 8003250:	1813      	adds	r3, r2, r0
 8003252:	460a      	mov	r2, r1
 8003254:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	897b      	ldrh	r3, [r7, #10]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	8179      	strh	r1, [r7, #10]
 8003262:	4618      	mov	r0, r3
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 8003266:	78d9      	ldrb	r1, [r3, #3]
 8003268:	1813      	adds	r3, r2, r0
 800326a:	460a      	mov	r2, r1
 800326c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	897b      	ldrh	r3, [r7, #10]
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	8179      	strh	r1, [r7, #10]
 800327a:	4413      	add	r3, r2
 800327c:	220c      	movs	r2, #12
 800327e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	8179      	strh	r1, [r7, #10]
 800328c:	4413      	add	r3, r2
 800328e:	2200      	movs	r2, #0
 8003290:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e019      	b.n	80032ce <send_DHCP_REQUEST+0x30a>
 800329a:	bf00      	nop
 800329c:	20000160 	.word	0x20000160
 80032a0:	20000164 	.word	0x20000164
 80032a4:	20000144 	.word	0x20000144
 80032a8:	20000138 	.word	0x20000138
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80032ac:	4b86      	ldr	r3, [pc, #536]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	8179      	strh	r1, [r7, #10]
 80032b6:	4618      	mov	r0, r3
 80032b8:	4984      	ldr	r1, [pc, #528]	; (80034cc <send_DHCP_REQUEST+0x508>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	440b      	add	r3, r1
 80032be:	7819      	ldrb	r1, [r3, #0]
 80032c0:	1813      	adds	r3, r2, r0
 80032c2:	460a      	mov	r2, r1
 80032c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4a7f      	ldr	r2, [pc, #508]	; (80034cc <send_DHCP_REQUEST+0x508>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e8      	bne.n	80032ac <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 80032dc:	78db      	ldrb	r3, [r3, #3]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80032e4:	681c      	ldr	r4, [r3, #0]
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	1c59      	adds	r1, r3, #1
 80032ea:	8179      	strh	r1, [r7, #10]
 80032ec:	461d      	mov	r5, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fecc 	bl	800408c <NibbleToHex>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	1963      	adds	r3, r4, r5
 80032fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80032fe:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003300:	78da      	ldrb	r2, [r3, #3]
 8003302:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	1c59      	adds	r1, r3, #1
 800330a:	8179      	strh	r1, [r7, #10]
 800330c:	461d      	mov	r5, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 febc 	bl	800408c <NibbleToHex>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	1963      	adds	r3, r4, r5
 800331a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800331e:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003320:	791b      	ldrb	r3, [r3, #4]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003328:	681c      	ldr	r4, [r3, #0]
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	8179      	strh	r1, [r7, #10]
 8003330:	461d      	mov	r5, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 feaa 	bl	800408c <NibbleToHex>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	1963      	adds	r3, r4, r5
 800333e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003344:	791a      	ldrb	r2, [r3, #4]
 8003346:	4b60      	ldr	r3, [pc, #384]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003348:	681c      	ldr	r4, [r3, #0]
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	1c59      	adds	r1, r3, #1
 800334e:	8179      	strh	r1, [r7, #10]
 8003350:	461d      	mov	r5, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f000 fe9a 	bl	800408c <NibbleToHex>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	1963      	adds	r3, r4, r5
 800335e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003364:	795b      	ldrb	r3, [r3, #5]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	8179      	strh	r1, [r7, #10]
 8003374:	461d      	mov	r5, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 fe88 	bl	800408c <NibbleToHex>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	1963      	adds	r3, r4, r5
 8003382:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003386:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003388:	795a      	ldrb	r2, [r3, #5]
 800338a:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800338c:	681c      	ldr	r4, [r3, #0]
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	1c59      	adds	r1, r3, #1
 8003392:	8179      	strh	r1, [r7, #10]
 8003394:	461d      	mov	r5, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fe78 	bl	800408c <NibbleToHex>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	1963      	adds	r3, r4, r5
 80033a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	b2d9      	uxtb	r1, r3
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	8978      	ldrh	r0, [r7, #10]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3307      	adds	r3, #7
 80033b4:	1ac3      	subs	r3, r0, r3
 80033b6:	3106      	adds	r1, #6
 80033b8:	b2c9      	uxtb	r1, r1
 80033ba:	4413      	add	r3, r2
 80033bc:	460a      	mov	r2, r1
 80033be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	8179      	strh	r1, [r7, #10]
 80033cc:	4413      	add	r3, r2
 80033ce:	2237      	movs	r2, #55	; 0x37
 80033d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80033d4:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	8179      	strh	r1, [r7, #10]
 80033de:	4413      	add	r3, r2
 80033e0:	2208      	movs	r2, #8
 80033e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80033e6:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	8179      	strh	r1, [r7, #10]
 80033f0:	4413      	add	r3, r2
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	8179      	strh	r1, [r7, #10]
 8003402:	4413      	add	r3, r2
 8003404:	2203      	movs	r2, #3
 8003406:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	8179      	strh	r1, [r7, #10]
 8003414:	4413      	add	r3, r2
 8003416:	2206      	movs	r2, #6
 8003418:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	8179      	strh	r1, [r7, #10]
 8003426:	4413      	add	r3, r2
 8003428:	220f      	movs	r2, #15
 800342a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	8179      	strh	r1, [r7, #10]
 8003438:	4413      	add	r3, r2
 800343a:	223a      	movs	r2, #58	; 0x3a
 800343c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	8179      	strh	r1, [r7, #10]
 800344a:	4413      	add	r3, r2
 800344c:	223b      	movs	r2, #59	; 0x3b
 800344e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	1c59      	adds	r1, r3, #1
 800345a:	8179      	strh	r1, [r7, #10]
 800345c:	4413      	add	r3, r2
 800345e:	221f      	movs	r2, #31
 8003460:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003464:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	8179      	strh	r1, [r7, #10]
 800346e:	4413      	add	r3, r2
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	1c59      	adds	r1, r3, #1
 800347e:	8179      	strh	r1, [r7, #10]
 8003480:	4413      	add	r3, r2
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003488:	897b      	ldrh	r3, [r7, #10]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e009      	b.n	80034a2 <send_DHCP_REQUEST+0x4de>
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	33ec      	adds	r3, #236	; 0xec
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80034a8:	dbf1      	blt.n	800348e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <send_DHCP_REQUEST+0x510>)
 80034ac:	7818      	ldrb	r0, [r3, #0]
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	2243      	movs	r2, #67	; 0x43
 80034b6:	9200      	str	r2, [sp, #0]
 80034b8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80034bc:	f7fe fbe6 	bl	8001c8c <sendto>

}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdb0      	pop	{r4, r5, r7, pc}
 80034c8:	20000160 	.word	0x20000160
 80034cc:	20000038 	.word	0x20000038
 80034d0:	20000164 	.word	0x20000164
 80034d4:	20000135 	.word	0x20000135

080034d8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80034e2:	f7ff fab5 	bl	8002a50 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80034e6:	2304      	movs	r3, #4
 80034e8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80034ea:	4b9f      	ldr	r3, [pc, #636]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330a      	adds	r3, #10
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80034f4:	4b9c      	ldr	r3, [pc, #624]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330a      	adds	r3, #10
 80034fa:	3301      	adds	r3, #1
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003500:	4b99      	ldr	r3, [pc, #612]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	897b      	ldrh	r3, [r7, #10]
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	8179      	strh	r1, [r7, #10]
 800350a:	4413      	add	r3, r2
 800350c:	2235      	movs	r2, #53	; 0x35
 800350e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003512:	4b95      	ldr	r3, [pc, #596]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	8179      	strh	r1, [r7, #10]
 800351c:	4413      	add	r3, r2
 800351e:	2201      	movs	r2, #1
 8003520:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003524:	4b90      	ldr	r3, [pc, #576]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	1c59      	adds	r1, r3, #1
 800352c:	8179      	strh	r1, [r7, #10]
 800352e:	4413      	add	r3, r2
 8003530:	2204      	movs	r2, #4
 8003532:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003536:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	1c59      	adds	r1, r3, #1
 800353e:	8179      	strh	r1, [r7, #10]
 8003540:	4413      	add	r3, r2
 8003542:	223d      	movs	r2, #61	; 0x3d
 8003544:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003548:	4b87      	ldr	r3, [pc, #540]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	8179      	strh	r1, [r7, #10]
 8003552:	4413      	add	r3, r2
 8003554:	2207      	movs	r2, #7
 8003556:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800355a:	4b83      	ldr	r3, [pc, #524]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	897b      	ldrh	r3, [r7, #10]
 8003560:	1c59      	adds	r1, r3, #1
 8003562:	8179      	strh	r1, [r7, #10]
 8003564:	4413      	add	r3, r2
 8003566:	2201      	movs	r2, #1
 8003568:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800356c:	4b7e      	ldr	r3, [pc, #504]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	897b      	ldrh	r3, [r7, #10]
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	8179      	strh	r1, [r7, #10]
 8003576:	4618      	mov	r0, r3
 8003578:	4b7c      	ldr	r3, [pc, #496]	; (800376c <send_DHCP_DECLINE+0x294>)
 800357a:	7819      	ldrb	r1, [r3, #0]
 800357c:	1813      	adds	r3, r2, r0
 800357e:	460a      	mov	r2, r1
 8003580:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003584:	4b78      	ldr	r3, [pc, #480]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	897b      	ldrh	r3, [r7, #10]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	8179      	strh	r1, [r7, #10]
 800358e:	4618      	mov	r0, r3
 8003590:	4b76      	ldr	r3, [pc, #472]	; (800376c <send_DHCP_DECLINE+0x294>)
 8003592:	7859      	ldrb	r1, [r3, #1]
 8003594:	1813      	adds	r3, r2, r0
 8003596:	460a      	mov	r2, r1
 8003598:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800359c:	4b72      	ldr	r3, [pc, #456]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	8179      	strh	r1, [r7, #10]
 80035a6:	4618      	mov	r0, r3
 80035a8:	4b70      	ldr	r3, [pc, #448]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035aa:	7899      	ldrb	r1, [r3, #2]
 80035ac:	1813      	adds	r3, r2, r0
 80035ae:	460a      	mov	r2, r1
 80035b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80035b4:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	897b      	ldrh	r3, [r7, #10]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	8179      	strh	r1, [r7, #10]
 80035be:	4618      	mov	r0, r3
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035c2:	78d9      	ldrb	r1, [r3, #3]
 80035c4:	1813      	adds	r3, r2, r0
 80035c6:	460a      	mov	r2, r1
 80035c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	897b      	ldrh	r3, [r7, #10]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	8179      	strh	r1, [r7, #10]
 80035d6:	4618      	mov	r0, r3
 80035d8:	4b64      	ldr	r3, [pc, #400]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035da:	7919      	ldrb	r1, [r3, #4]
 80035dc:	1813      	adds	r3, r2, r0
 80035de:	460a      	mov	r2, r1
 80035e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80035e4:	4b60      	ldr	r3, [pc, #384]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	897b      	ldrh	r3, [r7, #10]
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	8179      	strh	r1, [r7, #10]
 80035ee:	4618      	mov	r0, r3
 80035f0:	4b5e      	ldr	r3, [pc, #376]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035f2:	7959      	ldrb	r1, [r3, #5]
 80035f4:	1813      	adds	r3, r2, r0
 80035f6:	460a      	mov	r2, r1
 80035f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	897b      	ldrh	r3, [r7, #10]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	8179      	strh	r1, [r7, #10]
 8003606:	4413      	add	r3, r2
 8003608:	2232      	movs	r2, #50	; 0x32
 800360a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800360e:	4b56      	ldr	r3, [pc, #344]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	8179      	strh	r1, [r7, #10]
 8003618:	4413      	add	r3, r2
 800361a:	2204      	movs	r2, #4
 800361c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003620:	4b51      	ldr	r3, [pc, #324]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	1c59      	adds	r1, r3, #1
 8003628:	8179      	strh	r1, [r7, #10]
 800362a:	4618      	mov	r0, r3
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <send_DHCP_DECLINE+0x298>)
 800362e:	7819      	ldrb	r1, [r3, #0]
 8003630:	1813      	adds	r3, r2, r0
 8003632:	460a      	mov	r2, r1
 8003634:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	8179      	strh	r1, [r7, #10]
 8003642:	4618      	mov	r0, r3
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <send_DHCP_DECLINE+0x298>)
 8003646:	7859      	ldrb	r1, [r3, #1]
 8003648:	1813      	adds	r3, r2, r0
 800364a:	460a      	mov	r2, r1
 800364c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	897b      	ldrh	r3, [r7, #10]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	8179      	strh	r1, [r7, #10]
 800365a:	4618      	mov	r0, r3
 800365c:	4b44      	ldr	r3, [pc, #272]	; (8003770 <send_DHCP_DECLINE+0x298>)
 800365e:	7899      	ldrb	r1, [r3, #2]
 8003660:	1813      	adds	r3, r2, r0
 8003662:	460a      	mov	r2, r1
 8003664:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	8179      	strh	r1, [r7, #10]
 8003672:	4618      	mov	r0, r3
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <send_DHCP_DECLINE+0x298>)
 8003676:	78d9      	ldrb	r1, [r3, #3]
 8003678:	1813      	adds	r3, r2, r0
 800367a:	460a      	mov	r2, r1
 800367c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	8179      	strh	r1, [r7, #10]
 800368a:	4413      	add	r3, r2
 800368c:	2236      	movs	r2, #54	; 0x36
 800368e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003692:	4b35      	ldr	r3, [pc, #212]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	897b      	ldrh	r3, [r7, #10]
 8003698:	1c59      	adds	r1, r3, #1
 800369a:	8179      	strh	r1, [r7, #10]
 800369c:	4413      	add	r3, r2
 800369e:	2204      	movs	r2, #4
 80036a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	897b      	ldrh	r3, [r7, #10]
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	8179      	strh	r1, [r7, #10]
 80036ae:	4618      	mov	r0, r3
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036b2:	7819      	ldrb	r1, [r3, #0]
 80036b4:	1813      	adds	r3, r2, r0
 80036b6:	460a      	mov	r2, r1
 80036b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	8179      	strh	r1, [r7, #10]
 80036c6:	4618      	mov	r0, r3
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036ca:	7859      	ldrb	r1, [r3, #1]
 80036cc:	1813      	adds	r3, r2, r0
 80036ce:	460a      	mov	r2, r1
 80036d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	8179      	strh	r1, [r7, #10]
 80036de:	4618      	mov	r0, r3
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036e2:	7899      	ldrb	r1, [r3, #2]
 80036e4:	1813      	adds	r3, r2, r0
 80036e6:	460a      	mov	r2, r1
 80036e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	8179      	strh	r1, [r7, #10]
 80036f6:	4618      	mov	r0, r3
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036fa:	78d9      	ldrb	r1, [r3, #3]
 80036fc:	1813      	adds	r3, r2, r0
 80036fe:	460a      	mov	r2, r1
 8003700:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	897b      	ldrh	r3, [r7, #10]
 800370a:	1c59      	adds	r1, r3, #1
 800370c:	8179      	strh	r1, [r7, #10]
 800370e:	4413      	add	r3, r2
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e009      	b.n	8003730 <send_DHCP_DECLINE+0x258>
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	33ec      	adds	r3, #236	; 0xec
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003736:	dbf1      	blt.n	800371c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003738:	23ff      	movs	r3, #255	; 0xff
 800373a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800373c:	23ff      	movs	r3, #255	; 0xff
 800373e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003740:	23ff      	movs	r3, #255	; 0xff
 8003742:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003744:	23ff      	movs	r3, #255	; 0xff
 8003746:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <send_DHCP_DECLINE+0x2a0>)
 800374a:	7818      	ldrb	r0, [r3, #0]
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	2243      	movs	r2, #67	; 0x43
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	f44f 7209 	mov.w	r2, #548	; 0x224
 800375a:	f7fe fa97 	bl	8001c8c <sendto>
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000160 	.word	0x20000160
 800376c:	20000164 	.word	0x20000164
 8003770:	20000144 	.word	0x20000144
 8003774:	20000138 	.word	0x20000138
 8003778:	20000135 	.word	0x20000135

0800377c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003786:	4ba1      	ldr	r3, [pc, #644]	; (8003a0c <parseDHCPMSG+0x290>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fbcf 	bl	8000f2e <getSn_RX_RSR>
 8003790:	4603      	mov	r3, r0
 8003792:	823b      	strh	r3, [r7, #16]
 8003794:	8a3b      	ldrh	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d011      	beq.n	80037be <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800379a:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <parseDHCPMSG+0x290>)
 800379c:	7818      	ldrb	r0, [r3, #0]
 800379e:	4b9c      	ldr	r3, [pc, #624]	; (8003a10 <parseDHCPMSG+0x294>)
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	1d3c      	adds	r4, r7, #4
 80037a4:	8a3a      	ldrh	r2, [r7, #16]
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	4623      	mov	r3, r4
 80037ac:	f7fe fbc4 	bl	8001f38 <recvfrom>
 80037b0:	4603      	mov	r3, r0
 80037b2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	2b43      	cmp	r3, #67	; 0x43
 80037b8:	f040 81ed 	bne.w	8003b96 <parseDHCPMSG+0x41a>
 80037bc:	e001      	b.n	80037c2 <parseDHCPMSG+0x46>
   else return 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	e1eb      	b.n	8003b9a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80037c2:	4b93      	ldr	r3, [pc, #588]	; (8003a10 <parseDHCPMSG+0x294>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	7f1a      	ldrb	r2, [r3, #28]
 80037c8:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <parseDHCPMSG+0x298>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d124      	bne.n	800381a <parseDHCPMSG+0x9e>
 80037d0:	4b8f      	ldr	r3, [pc, #572]	; (8003a10 <parseDHCPMSG+0x294>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	7f5a      	ldrb	r2, [r3, #29]
 80037d6:	4b8f      	ldr	r3, [pc, #572]	; (8003a14 <parseDHCPMSG+0x298>)
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d11d      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80037de:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <parseDHCPMSG+0x294>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	7f9a      	ldrb	r2, [r3, #30]
 80037e4:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <parseDHCPMSG+0x298>)
 80037e6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d116      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <parseDHCPMSG+0x294>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	7fda      	ldrb	r2, [r3, #31]
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <parseDHCPMSG+0x298>)
 80037f4:	78db      	ldrb	r3, [r3, #3]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10f      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <parseDHCPMSG+0x294>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003802:	4b84      	ldr	r3, [pc, #528]	; (8003a14 <parseDHCPMSG+0x298>)
 8003804:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d107      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800380a:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <parseDHCPMSG+0x294>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003812:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <parseDHCPMSG+0x298>)
 8003814:	795b      	ldrb	r3, [r3, #5]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800381a:	2300      	movs	r3, #0
 800381c:	e1bd      	b.n	8003b9a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800381e:	4b7e      	ldr	r3, [pc, #504]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <parseDHCPMSG+0xc2>
 8003826:	4b7c      	ldr	r3, [pc, #496]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <parseDHCPMSG+0xc2>
 800382e:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003830:	789b      	ldrb	r3, [r3, #2]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <parseDHCPMSG+0xc2>
 8003836:	4b78      	ldr	r3, [pc, #480]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d029      	beq.n	8003892 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800383e:	793a      	ldrb	r2, [r7, #4]
 8003840:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d10e      	bne.n	8003866 <parseDHCPMSG+0xea>
 8003848:	797a      	ldrb	r2, [r7, #5]
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <parseDHCPMSG+0x29c>)
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	429a      	cmp	r2, r3
 8003850:	d109      	bne.n	8003866 <parseDHCPMSG+0xea>
 8003852:	79ba      	ldrb	r2, [r7, #6]
 8003854:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	429a      	cmp	r2, r3
 800385a:	d104      	bne.n	8003866 <parseDHCPMSG+0xea>
 800385c:	79fa      	ldrb	r2, [r7, #7]
 800385e:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	429a      	cmp	r2, r3
 8003864:	d015      	beq.n	8003892 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003866:	793a      	ldrb	r2, [r7, #4]
 8003868:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <parseDHCPMSG+0x2a0>)
 800386a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800386c:	429a      	cmp	r2, r3
 800386e:	d10e      	bne.n	800388e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003870:	797a      	ldrb	r2, [r7, #5]
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <parseDHCPMSG+0x2a0>)
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <parseDHCPMSG+0x112>
 800387a:	79ba      	ldrb	r2, [r7, #6]
 800387c:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <parseDHCPMSG+0x2a0>)
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	429a      	cmp	r2, r3
 8003882:	d104      	bne.n	800388e <parseDHCPMSG+0x112>
 8003884:	79fa      	ldrb	r2, [r7, #7]
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <parseDHCPMSG+0x2a0>)
 8003888:	78db      	ldrb	r3, [r3, #3]
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800388e:	2300      	movs	r3, #0
 8003890:	e183      	b.n	8003b9a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <parseDHCPMSG+0x294>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	33f0      	adds	r3, #240	; 0xf0
 800389c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800389e:	8a3b      	ldrh	r3, [r7, #16]
 80038a0:	3bf0      	subs	r3, #240	; 0xf0
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80038a8:	e170      	b.n	8003b8c <parseDHCPMSG+0x410>

			switch ( *p ) {
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b36      	cmp	r3, #54	; 0x36
 80038b0:	dc76      	bgt.n	80039a0 <parseDHCPMSG+0x224>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f2c0 815d 	blt.w	8003b72 <parseDHCPMSG+0x3f6>
 80038b8:	2b36      	cmp	r3, #54	; 0x36
 80038ba:	f200 815a 	bhi.w	8003b72 <parseDHCPMSG+0x3f6>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <parseDHCPMSG+0x148>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080039ad 	.word	0x080039ad
 80038c8:	080039cd 	.word	0x080039cd
 80038cc:	08003b73 	.word	0x08003b73
 80038d0:	08003a25 	.word	0x08003a25
 80038d4:	08003b73 	.word	0x08003b73
 80038d8:	08003b73 	.word	0x08003b73
 80038dc:	08003a71 	.word	0x08003a71
 80038e0:	08003b73 	.word	0x08003b73
 80038e4:	08003b73 	.word	0x08003b73
 80038e8:	08003b73 	.word	0x08003b73
 80038ec:	08003b73 	.word	0x08003b73
 80038f0:	08003b73 	.word	0x08003b73
 80038f4:	08003b73 	.word	0x08003b73
 80038f8:	08003b73 	.word	0x08003b73
 80038fc:	08003b73 	.word	0x08003b73
 8003900:	08003b73 	.word	0x08003b73
 8003904:	08003b73 	.word	0x08003b73
 8003908:	08003b73 	.word	0x08003b73
 800390c:	08003b73 	.word	0x08003b73
 8003910:	08003b73 	.word	0x08003b73
 8003914:	08003b73 	.word	0x08003b73
 8003918:	08003b73 	.word	0x08003b73
 800391c:	08003b73 	.word	0x08003b73
 8003920:	08003b73 	.word	0x08003b73
 8003924:	08003b73 	.word	0x08003b73
 8003928:	08003b73 	.word	0x08003b73
 800392c:	08003b73 	.word	0x08003b73
 8003930:	08003b73 	.word	0x08003b73
 8003934:	08003b73 	.word	0x08003b73
 8003938:	08003b73 	.word	0x08003b73
 800393c:	08003b73 	.word	0x08003b73
 8003940:	08003b73 	.word	0x08003b73
 8003944:	08003b73 	.word	0x08003b73
 8003948:	08003b73 	.word	0x08003b73
 800394c:	08003b73 	.word	0x08003b73
 8003950:	08003b73 	.word	0x08003b73
 8003954:	08003b73 	.word	0x08003b73
 8003958:	08003b73 	.word	0x08003b73
 800395c:	08003b73 	.word	0x08003b73
 8003960:	08003b73 	.word	0x08003b73
 8003964:	08003b73 	.word	0x08003b73
 8003968:	08003b73 	.word	0x08003b73
 800396c:	08003b73 	.word	0x08003b73
 8003970:	08003b73 	.word	0x08003b73
 8003974:	08003b73 	.word	0x08003b73
 8003978:	08003b73 	.word	0x08003b73
 800397c:	08003b73 	.word	0x08003b73
 8003980:	08003b73 	.word	0x08003b73
 8003984:	08003b73 	.word	0x08003b73
 8003988:	08003b73 	.word	0x08003b73
 800398c:	08003b73 	.word	0x08003b73
 8003990:	08003abd 	.word	0x08003abd
 8003994:	08003b73 	.word	0x08003b73
 8003998:	080039b5 	.word	0x080039b5
 800399c:	08003b19 	.word	0x08003b19
 80039a0:	2bff      	cmp	r3, #255	; 0xff
 80039a2:	f040 80e6 	bne.w	8003b72 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	617b      	str	r3, [r7, #20]
   				break;
 80039aa:	e0ef      	b.n	8003b8c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3301      	adds	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
   				break;
 80039b2:	e0eb      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
   				p++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	617a      	str	r2, [r7, #20]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	74fb      	strb	r3, [r7, #19]
   				break;
 80039ca:	e0df      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
   				p++;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	617a      	str	r2, [r7, #20]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <parseDHCPMSG+0x2a4>)
 80039e2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	617a      	str	r2, [r7, #20]
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <parseDHCPMSG+0x2a4>)
 80039ee:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	617a      	str	r2, [r7, #20]
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <parseDHCPMSG+0x2a4>)
 80039fa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	617a      	str	r2, [r7, #20]
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <parseDHCPMSG+0x2a4>)
 8003a06:	70da      	strb	r2, [r3, #3]
   				break;
 8003a08:	e0c0      	b.n	8003b8c <parseDHCPMSG+0x410>
 8003a0a:	bf00      	nop
 8003a0c:	20000135 	.word	0x20000135
 8003a10:	20000160 	.word	0x20000160
 8003a14:	20000164 	.word	0x20000164
 8003a18:	20000138 	.word	0x20000138
 8003a1c:	2000013c 	.word	0x2000013c
 8003a20:	2000014c 	.word	0x2000014c
   			case routersOnSubnet :
   				p++;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	617a      	str	r2, [r7, #20]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	617a      	str	r2, [r7, #20]
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a3e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	617a      	str	r2, [r7, #20]
 8003a46:	781a      	ldrb	r2, [r3, #0]
 8003a48:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a4a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	617a      	str	r2, [r7, #20]
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a56:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	617a      	str	r2, [r7, #20]
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a62:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003a64:	7afb      	ldrb	r3, [r7, #11]
 8003a66:	3b04      	subs	r3, #4
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
   				break;
 8003a6e:	e08d      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	617a      	str	r2, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	617a      	str	r2, [r7, #20]
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003a8a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	617a      	str	r2, [r7, #20]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003a96:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	617a      	str	r2, [r7, #20]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003aa2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	617a      	str	r2, [r7, #20]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003aae:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
   				break;
 8003aba:	e067      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	617a      	str	r2, [r7, #20]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	617a      	str	r2, [r7, #20]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <parseDHCPMSG+0x430>)
 8003ad8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <parseDHCPMSG+0x430>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	021a      	lsls	r2, r3, #8
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6179      	str	r1, [r7, #20]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	4a30      	ldr	r2, [pc, #192]	; (8003bac <parseDHCPMSG+0x430>)
 8003aec:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <parseDHCPMSG+0x430>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	1c59      	adds	r1, r3, #1
 8003af8:	6179      	str	r1, [r7, #20]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <parseDHCPMSG+0x430>)
 8003b00:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003b02:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <parseDHCPMSG+0x430>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6179      	str	r1, [r7, #20]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a26      	ldr	r2, [pc, #152]	; (8003bac <parseDHCPMSG+0x430>)
 8003b14:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003b16:	e039      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	617a      	str	r2, [r7, #20]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b32:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	617a      	str	r2, [r7, #20]
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b3e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	617a      	str	r2, [r7, #20]
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b4a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	617a      	str	r2, [r7, #20]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b56:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003b58:	793a      	ldrb	r2, [r7, #4]
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b5c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003b5e:	797a      	ldrb	r2, [r7, #5]
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b62:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003b64:	79ba      	ldrb	r2, [r7, #6]
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b68:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b6e:	70da      	strb	r2, [r3, #3]
   				break;
 8003b70:	e00c      	b.n	8003b8c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	3301      	adds	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	617a      	str	r2, [r7, #20]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
   				break;
 8003b8a:	bf00      	nop
		while ( p < e ) {
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f4ff ae8a 	bcc.w	80038aa <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003b96:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000148 	.word	0x20000148
 8003ba8:	20000150 	.word	0x20000150
 8003bac:	20000030 	.word	0x20000030
 8003bb0:	20000138 	.word	0x20000138
 8003bb4:	2000013c 	.word	0x2000013c

08003bb8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003bbe:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <DHCP_run+0x200>)
 8003bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d101      	bne.n	8003bcc <DHCP_run+0x14>
 8003bc8:	2305      	movs	r3, #5
 8003bca:	e0f1      	b.n	8003db0 <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003bcc:	4b7b      	ldr	r3, [pc, #492]	; (8003dbc <DHCP_run+0x204>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	3303      	adds	r3, #3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f89c 	bl	8000d14 <WIZCHIP_READ>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b22      	cmp	r3, #34	; 0x22
 8003be0:	d006      	beq.n	8003bf0 <DHCP_run+0x38>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <DHCP_run+0x204>)
 8003be4:	7818      	ldrb	r0, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	2244      	movs	r2, #68	; 0x44
 8003bea:	2102      	movs	r1, #2
 8003bec:	f7fd fbfc 	bl	80013e8 <socket>

	ret = DHCP_RUNNING;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003bf4:	f7ff fdc2 	bl	800377c <parseDHCPMSG>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003bfc:	4b6e      	ldr	r3, [pc, #440]	; (8003db8 <DHCP_run+0x200>)
 8003bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	f200 80d0 	bhi.w	8003da8 <DHCP_run+0x1f0>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <DHCP_run+0x58>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c25 	.word	0x08003c25
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c8d 	.word	0x08003c8d
 8003c1c:	08003cdd 	.word	0x08003cdd
 8003c20:	08003d37 	.word	0x08003d37
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003c24:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <DHCP_run+0x208>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <DHCP_run+0x208>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003c30:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <DHCP_run+0x208>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003c36:	4b62      	ldr	r3, [pc, #392]	; (8003dc0 <DHCP_run+0x208>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003c3c:	f7fe fffc 	bl	8002c38 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003c40:	4b5d      	ldr	r3, [pc, #372]	; (8003db8 <DHCP_run+0x200>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
   		break;
 8003c46:	e0b2      	b.n	8003dae <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003c48:	79bb      	ldrb	r3, [r7, #6]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d119      	bne.n	8003c82 <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <DHCP_run+0x20c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	7c1a      	ldrb	r2, [r3, #16]
 8003c54:	4b5a      	ldr	r3, [pc, #360]	; (8003dc0 <DHCP_run+0x208>)
 8003c56:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8003c58:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <DHCP_run+0x20c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	7c5a      	ldrb	r2, [r3, #17]
 8003c5e:	4b58      	ldr	r3, [pc, #352]	; (8003dc0 <DHCP_run+0x208>)
 8003c60:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003c62:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <DHCP_run+0x20c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	7c9a      	ldrb	r2, [r3, #18]
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <DHCP_run+0x208>)
 8003c6a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003c6c:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <DHCP_run+0x20c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	7cda      	ldrb	r2, [r3, #19]
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <DHCP_run+0x208>)
 8003c74:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8003c76:	f7ff f9a5 	bl	8002fc4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8003c7a:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <DHCP_run+0x200>)
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8003c80:	e095      	b.n	8003dae <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003c82:	f000 f8c1 	bl	8003e08 <check_DHCP_timeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
         break;
 8003c8a:	e090      	b.n	8003dae <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8003c8c:	79bb      	ldrb	r3, [r7, #6]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d116      	bne.n	8003cc0 <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8003c92:	f000 f919 	bl	8003ec8 <check_DHCP_leasedIP>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <DHCP_run+0x210>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4798      	blx	r3
					reset_DHCP_timeout();
 8003ca2:	f000 f9dd 	bl	8004060 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <DHCP_run+0x200>)
 8003ca8:	2203      	movs	r2, #3
 8003caa:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003cac:	e07f      	b.n	8003dae <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 8003cae:	f000 f9d7 	bl	8004060 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8003cb2:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <DHCP_run+0x214>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <DHCP_run+0x200>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
		break;
 8003cbe:	e076      	b.n	8003dae <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d105      	bne.n	8003cd2 <DHCP_run+0x11a>
				reset_DHCP_timeout();
 8003cc6:	f000 f9cb 	bl	8004060 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <DHCP_run+0x200>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
		break;
 8003cd0:	e06d      	b.n	8003dae <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003cd2:	f000 f899 	bl	8003e08 <check_DHCP_timeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
		break;
 8003cda:	e068      	b.n	8003dae <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <DHCP_run+0x218>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d060      	beq.n	8003dac <DHCP_run+0x1f4>
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <DHCP_run+0x218>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	085a      	lsrs	r2, r3, #1
 8003cf0:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <DHCP_run+0x21c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d259      	bcs.n	8003dac <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <DHCP_run+0x208>)
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <DHCP_run+0x220>)
 8003d02:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8003d04:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <DHCP_run+0x208>)
 8003d06:	785a      	ldrb	r2, [r3, #1]
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <DHCP_run+0x220>)
 8003d0a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <DHCP_run+0x208>)
 8003d0e:	789a      	ldrb	r2, [r3, #2]
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <DHCP_run+0x220>)
 8003d12:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8003d14:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <DHCP_run+0x208>)
 8003d16:	78da      	ldrb	r2, [r3, #3]
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <DHCP_run+0x220>)
 8003d1a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <DHCP_run+0x224>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <DHCP_run+0x224>)
 8003d24:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8003d26:	f7ff f94d 	bl	8002fc4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003d2a:	f000 f999 	bl	8004060 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <DHCP_run+0x200>)
 8003d30:	2204      	movs	r2, #4
 8003d32:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003d34:	e03a      	b.n	8003dac <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8003d36:	2304      	movs	r3, #4
 8003d38:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8003d3a:	79bb      	ldrb	r3, [r7, #6]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d125      	bne.n	8003d8c <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <DHCP_run+0x228>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <DHCP_run+0x220>)
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <DHCP_run+0x208>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d111      	bne.n	8003d76 <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <DHCP_run+0x220>)
 8003d54:	785a      	ldrb	r2, [r3, #1]
 8003d56:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <DHCP_run+0x208>)
 8003d58:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10b      	bne.n	8003d76 <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <DHCP_run+0x220>)
 8003d60:	789a      	ldrb	r2, [r3, #2]
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <DHCP_run+0x208>)
 8003d64:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d105      	bne.n	8003d76 <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <DHCP_run+0x220>)
 8003d6c:	78da      	ldrb	r2, [r3, #3]
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <DHCP_run+0x208>)
 8003d70:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d004      	beq.n	8003d80 <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 8003d76:	2303      	movs	r3, #3
 8003d78:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <DHCP_run+0x22c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8003d80:	f000 f96e 	bl	8004060 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <DHCP_run+0x200>)
 8003d86:	2203      	movs	r2, #3
 8003d88:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8003d8a:	e010      	b.n	8003dae <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8003d8c:	79bb      	ldrb	r3, [r7, #6]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d105      	bne.n	8003d9e <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 8003d92:	f000 f965 	bl	8004060 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <DHCP_run+0x200>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
	   	break;
 8003d9c:	e007      	b.n	8003dae <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003d9e:	f000 f833 	bl	8003e08 <check_DHCP_timeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
	   	break;
 8003da6:	e002      	b.n	8003dae <DHCP_run+0x1f6>
		default :
   		break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <DHCP_run+0x1f6>
		break;
 8003dac:	bf00      	nop
	}

	return ret;
 8003dae:	79fb      	ldrb	r3, [r7, #7]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000154 	.word	0x20000154
 8003dbc:	20000135 	.word	0x20000135
 8003dc0:	20000144 	.word	0x20000144
 8003dc4:	20000160 	.word	0x20000160
 8003dc8:	20000040 	.word	0x20000040
 8003dcc:	20000048 	.word	0x20000048
 8003dd0:	20000030 	.word	0x20000030
 8003dd4:	20000158 	.word	0x20000158
 8003dd8:	20000140 	.word	0x20000140
 8003ddc:	2000015c 	.word	0x2000015c
 8003de0:	20000155 	.word	0x20000155
 8003de4:	20000044 	.word	0x20000044

08003de8 <DHCP_stop>:

void    DHCP_stop(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <DHCP_stop+0x18>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd fbfb 	bl	80015ec <close>
   dhcp_state = STATE_DHCP_STOP;
 8003df6:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <DHCP_stop+0x1c>)
 8003df8:	2206      	movs	r2, #6
 8003dfa:	701a      	strb	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000135 	.word	0x20000135
 8003e04:	20000154 	.word	0x20000154

08003e08 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <check_DHCP_timeout+0xb0>)
 8003e14:	f993 3000 	ldrsb.w	r3, [r3]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	dc2d      	bgt.n	8003e78 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <check_DHCP_timeout+0xb4>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <check_DHCP_timeout+0xb8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d242      	bcs.n	8003eae <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d00c      	beq.n	8003e4c <check_DHCP_timeout+0x44>
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	dc0d      	bgt.n	8003e52 <check_DHCP_timeout+0x4a>
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d002      	beq.n	8003e40 <check_DHCP_timeout+0x38>
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d003      	beq.n	8003e46 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8003e3e:	e008      	b.n	8003e52 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8003e40:	f7fe fefa 	bl	8002c38 <send_DHCP_DISCOVER>
				break;
 8003e44:	e006      	b.n	8003e54 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003e46:	f7ff f8bd 	bl	8002fc4 <send_DHCP_REQUEST>
				break;
 8003e4a:	e003      	b.n	8003e54 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003e4c:	f7ff f8ba 	bl	8002fc4 <send_DHCP_REQUEST>
				break;
 8003e50:	e000      	b.n	8003e54 <check_DHCP_timeout+0x4c>
				break;
 8003e52:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <check_DHCP_timeout+0xb8>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <check_DHCP_timeout+0xb8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330a      	adds	r3, #10
 8003e60:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <check_DHCP_timeout+0xb4>)
 8003e62:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8003e64:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <check_DHCP_timeout+0xb0>)
 8003e66:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	b25a      	sxtb	r2, r3
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <check_DHCP_timeout+0xb0>)
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e01a      	b.n	8003eae <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d00c      	beq.n	8003e9c <check_DHCP_timeout+0x94>
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	dc10      	bgt.n	8003ea8 <check_DHCP_timeout+0xa0>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d002      	beq.n	8003e90 <check_DHCP_timeout+0x88>
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d006      	beq.n	8003e9c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8003e8e:	e00b      	b.n	8003ea8 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8003e96:	2300      	movs	r3, #0
 8003e98:	71fb      	strb	r3, [r7, #7]
				break;
 8003e9a:	e006      	b.n	8003eaa <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8003e9c:	f7fe fecc 	bl	8002c38 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
				break;
 8003ea6:	e000      	b.n	8003eaa <check_DHCP_timeout+0xa2>
				break;
 8003ea8:	bf00      	nop
		}
		reset_DHCP_timeout();
 8003eaa:	f000 f8d9 	bl	8004060 <reset_DHCP_timeout>
	}
	return ret;
 8003eae:	79fb      	ldrb	r3, [r7, #7]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000155 	.word	0x20000155
 8003ebc:	20000034 	.word	0x20000034
 8003ec0:	20000158 	.word	0x20000158
 8003ec4:	20000154 	.word	0x20000154

08003ec8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8003ece:	2019      	movs	r0, #25
 8003ed0:	f7fc ff20 	bl	8000d14 <WIZCHIP_READ>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8003ed8:	2103      	movs	r1, #3
 8003eda:	2019      	movs	r0, #25
 8003edc:	f7fc feec 	bl	8000cb8 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <check_DHCP_leasedIP+0x68>)
 8003ee2:	7818      	ldrb	r0, [r3, #0]
 8003ee4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <check_DHCP_leasedIP+0x6c>)
 8003eec:	2211      	movs	r2, #17
 8003eee:	4912      	ldr	r1, [pc, #72]	; (8003f38 <check_DHCP_leasedIP+0x70>)
 8003ef0:	f7fd fecc 	bl	8001c8c <sendto>
 8003ef4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2019      	movs	r0, #25
 8003efc:	f7fc fedc 	bl	8000cb8 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f113 0f0d 	cmn.w	r3, #13
 8003f06:	d101      	bne.n	8003f0c <check_DHCP_leasedIP+0x44>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e00c      	b.n	8003f26 <check_DHCP_leasedIP+0x5e>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8003f0c:	f7ff fae4 	bl	80034d8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <check_DHCP_leasedIP+0x74>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8003f16:	bf00      	nop
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <check_DHCP_leasedIP+0x74>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d9f9      	bls.n	8003f18 <check_DHCP_leasedIP+0x50>

		return 0;
 8003f24:	2300      	movs	r3, #0
	}
}	
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000135 	.word	0x20000135
 8003f34:	20000144 	.word	0x20000144
 8003f38:	080129e8 	.word	0x080129e8
 8003f3c:	20000158 	.word	0x20000158

08003f40 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8003f50:	2206      	movs	r2, #6
 8003f52:	493d      	ldr	r1, [pc, #244]	; (8004048 <DHCP_init+0x108>)
 8003f54:	2009      	movs	r0, #9
 8003f56:	f7fc ff59 	bl	8000e0c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <DHCP_init+0x108>)
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <DHCP_init+0x108>)
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <DHCP_init+0x108>)
 8003f68:	789b      	ldrb	r3, [r3, #2]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <DHCP_init+0x108>)
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <DHCP_init+0x108>)
 8003f78:	791b      	ldrb	r3, [r3, #4]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b32      	ldr	r3, [pc, #200]	; (8004048 <DHCP_init+0x108>)
 8003f80:	795b      	ldrb	r3, [r3, #5]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <DHCP_init+0x78>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <DHCP_init+0x108>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8003f90:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <DHCP_init+0x108>)
 8003f92:	2208      	movs	r2, #8
 8003f94:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <DHCP_init+0x108>)
 8003f98:	22dc      	movs	r2, #220	; 0xdc
 8003f9a:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <DHCP_init+0x108>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <DHCP_init+0x108>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <DHCP_init+0x108>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8003fae:	2206      	movs	r2, #6
 8003fb0:	4925      	ldr	r1, [pc, #148]	; (8004048 <DHCP_init+0x108>)
 8003fb2:	2009      	movs	r0, #9
 8003fb4:	f7fc fedc 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8003fb8:	4a24      	ldr	r2, [pc, #144]	; (800404c <DHCP_init+0x10c>)
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8003fbe:	4a24      	ldr	r2, [pc, #144]	; (8004050 <DHCP_init+0x110>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <DHCP_init+0x114>)
 8003fc6:	4a24      	ldr	r2, [pc, #144]	; (8004058 <DHCP_init+0x118>)
 8003fc8:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <DHCP_init+0x108>)
 8003fcc:	78db      	ldrb	r3, [r3, #3]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <DHCP_init+0x114>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <DHCP_init+0x114>)
 8003fd8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <DHCP_init+0x108>)
 8003fdc:	791b      	ldrb	r3, [r3, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <DHCP_init+0x114>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <DHCP_init+0x114>)
 8003fe8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <DHCP_init+0x108>)
 8003fec:	795b      	ldrb	r3, [r3, #5]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <DHCP_init+0x114>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <DHCP_init+0x114>)
 8003ff8:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <DHCP_init+0x108>)
 8003ffc:	78da      	ldrb	r2, [r3, #3]
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <DHCP_init+0x108>)
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	4053      	eors	r3, r2
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <DHCP_init+0x108>)
 8004008:	795b      	ldrb	r3, [r3, #5]
 800400a:	4053      	eors	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <DHCP_init+0x114>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4413      	add	r3, r2
 8004016:	4a0f      	ldr	r2, [pc, #60]	; (8004054 <DHCP_init+0x114>)
 8004018:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	2204      	movs	r2, #4
 8004020:	4619      	mov	r1, r3
 8004022:	200f      	movs	r0, #15
 8004024:	f7fc fea4 	bl	8000d70 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	2204      	movs	r2, #4
 800402e:	4619      	mov	r1, r3
 8004030:	2001      	movs	r0, #1
 8004032:	f7fc fe9d 	bl	8000d70 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8004036:	f000 f813 	bl	8004060 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <DHCP_init+0x11c>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000164 	.word	0x20000164
 800404c:	20000135 	.word	0x20000135
 8004050:	20000160 	.word	0x20000160
 8004054:	2000015c 	.word	0x2000015c
 8004058:	12345678 	.word	0x12345678
 800405c:	20000154 	.word	0x20000154

08004060 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <reset_DHCP_timeout+0x20>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <reset_DHCP_timeout+0x24>)
 800406c:	220a      	movs	r2, #10
 800406e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <reset_DHCP_timeout+0x28>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000158 	.word	0x20000158
 8004084:	20000034 	.word	0x20000034
 8004088:	20000155 	.word	0x20000155

0800408c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d803      	bhi.n	80040ac <NibbleToHex+0x20>
    return nibble + '0';
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	3330      	adds	r3, #48	; 0x30
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e002      	b.n	80040b2 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	3337      	adds	r3, #55	; 0x37
 80040b0:	b2db      	uxtb	r3, r3
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	89fb      	ldrh	r3, [r7, #14]
 80040dc:	4413      	add	r3, r2
 80040de:	81fb      	strh	r3, [r7, #14]
	return i;
 80040e0:	89fb      	ldrh	r3, [r7, #14]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	b299      	uxth	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	b2ca      	uxtb	r2, r1
 8004108:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
	return s;
 8004116:	687b      	ldr	r3, [r7, #4]
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8004124:	b480      	push	{r7}
 8004126:	b08b      	sub	sp, #44	; 0x2c
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	623a      	str	r2, [r7, #32]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <parse_name+0x34>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8004158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800415a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800415e:	2bc0      	cmp	r3, #192	; 0xc0
 8004160:	d117      	bne.n	8004192 <parse_name+0x6e>
		{
			if (!indirect)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <parse_name+0x4a>
				clen++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	4413      	add	r3, r2
 8004180:	461a      	mov	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	623a      	str	r2, [r7, #32]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02b      	beq.n	80041f0 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 80041a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da02      	bge.n	80041b4 <parse_name+0x90>
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	e038      	b.n	8004226 <parse_name+0x102>

		if (!indirect) clen += slen;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <parse_name+0xb0>
 80041ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 80041c2:	e007      	b.n	80041d4 <parse_name+0xb0>
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	1c53      	adds	r3, r2, #1
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1c59      	adds	r1, r3, #1
 80041ce:	6079      	str	r1, [r7, #4]
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	84fa      	strh	r2, [r7, #38]	; 0x26
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f2      	bne.n	80041c4 <parse_name+0xa0>
		*buf++ = '.';
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	222e      	movs	r2, #46	; 0x2e
 80041e6:	701a      	strb	r2, [r3, #0]
		nseg++;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80041ee:	e7a8      	b.n	8004142 <parse_name+0x1e>
			break;
 80041f0:	bf00      	nop
	}

	if (nseg == 0)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	222e      	movs	r2, #46	; 0x2e
 8004200:	701a      	strb	r2, [r3, #0]
		len--;
 8004202:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
	len--;
 8004218:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8004224:	69fb      	ldr	r3, [r7, #28]
}
 8004226:	4618      	mov	r0, r3
 8004228:	372c      	adds	r7, #44	; 0x2c
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b0b4      	sub	sp, #208	; 0xd0
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800423c:	f107 020c 	add.w	r2, r7, #12
 8004240:	23c0      	movs	r3, #192	; 0xc0
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff6d 	bl	8004124 <parse_name>
 800424a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800424e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d101      	bne.n	800425c <dns_question+0x2a>
 8004258:	2300      	movs	r3, #0
 800425a:	e00b      	b.n	8004274 <dns_question+0x42>

	cp += len;
 800425c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3302      	adds	r3, #2
 800426a:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3302      	adds	r3, #2
 8004270:	603b      	str	r3, [r7, #0]

	return cp;
 8004272:	683b      	ldr	r3, [r7, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	37d0      	adds	r7, #208	; 0xd0
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b0b6      	sub	sp, #216	; 0xd8
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004288:	f107 0210 	add.w	r2, r7, #16
 800428c:	23c0      	movs	r3, #192	; 0xc0
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff ff47 	bl	8004124 <parse_name>
 8004296:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d101      	bne.n	80042a8 <dns_answer+0x2c>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e0f9      	b.n	800449c <dns_answer+0x220>

	cp += len;
 80042a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4413      	add	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	f7ff ff03 	bl	80040be <get16>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3302      	adds	r3, #2
 80042c2:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3302      	adds	r3, #2
 80042c8:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3304      	adds	r3, #4
 80042ce:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3302      	adds	r3, #2
 80042d4:	60bb      	str	r3, [r7, #8]


	switch (type)
 80042d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042da:	2b10      	cmp	r3, #16
 80042dc:	f000 80da 	beq.w	8004494 <dns_answer+0x218>
 80042e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	f300 80d7 	bgt.w	8004498 <dns_answer+0x21c>
 80042ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d07d      	beq.n	80043ee <dns_answer+0x172>
 80042f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	f300 80ce 	bgt.w	8004498 <dns_answer+0x21c>
 80042fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004300:	2b0c      	cmp	r3, #12
 8004302:	dc26      	bgt.n	8004352 <dns_answer+0xd6>
 8004304:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004308:	2b00      	cmp	r3, #0
 800430a:	f340 80c5 	ble.w	8004498 <dns_answer+0x21c>
 800430e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	f241 32a4 	movw	r2, #5028	; 0x13a4
 800431c:	401a      	ands	r2, r3
 800431e:	2a00      	cmp	r2, #0
 8004320:	bf14      	ite	ne
 8004322:	2201      	movne	r2, #1
 8004324:	2200      	moveq	r2, #0
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	2a00      	cmp	r2, #0
 800432a:	d133      	bne.n	8004394 <dns_answer+0x118>
 800432c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8004330:	2a00      	cmp	r2, #0
 8004332:	bf14      	ite	ne
 8004334:	2201      	movne	r2, #1
 8004336:	2200      	moveq	r2, #0
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	2a00      	cmp	r2, #0
 800433c:	d170      	bne.n	8004420 <dns_answer+0x1a4>
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8004350:	e0a2      	b.n	8004498 <dns_answer+0x21c>
	switch (type)
 8004352:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004356:	2b0d      	cmp	r3, #13
 8004358:	d032      	beq.n	80043c0 <dns_answer+0x144>
		break;
 800435a:	e09d      	b.n	8004498 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	60ba      	str	r2, [r7, #8]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	60ba      	str	r2, [r7, #8]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	3201      	adds	r2, #1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	60ba      	str	r2, [r7, #8]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	3202      	adds	r2, #2
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	60ba      	str	r2, [r7, #8]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	3203      	adds	r2, #3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	7013      	strb	r3, [r2, #0]
		break;
 8004392:	e082      	b.n	800449a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004394:	f107 0210 	add.w	r2, r7, #16
 8004398:	23c0      	movs	r3, #192	; 0xc0
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fec1 	bl	8004124 <parse_name>
 80043a2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80043a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d101      	bne.n	80043b4 <dns_answer+0x138>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e073      	b.n	800449c <dns_answer+0x220>
		cp += len;
 80043b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4413      	add	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]
		break;
 80043be:	e06c      	b.n	800449a <dns_answer+0x21e>
		len = *cp++;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	60ba      	str	r2, [r7, #8]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80043cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	4413      	add	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	60ba      	str	r2, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
		break;
 80043ec:	e055      	b.n	800449a <dns_answer+0x21e>
		cp += 2;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3302      	adds	r3, #2
 80043f2:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80043f4:	f107 0210 	add.w	r2, r7, #16
 80043f8:	23c0      	movs	r3, #192	; 0xc0
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff fe91 	bl	8004124 <parse_name>
 8004402:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d101      	bne.n	8004414 <dns_answer+0x198>
 8004410:	2300      	movs	r3, #0
 8004412:	e043      	b.n	800449c <dns_answer+0x220>
		cp += len;
 8004414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4413      	add	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
		break;
 800441e:	e03c      	b.n	800449a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004420:	f107 0210 	add.w	r2, r7, #16
 8004424:	23c0      	movs	r3, #192	; 0xc0
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fe7b 	bl	8004124 <parse_name>
 800442e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d101      	bne.n	8004440 <dns_answer+0x1c4>
 800443c:	2300      	movs	r3, #0
 800443e:	e02d      	b.n	800449c <dns_answer+0x220>
		cp += len;
 8004440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4413      	add	r3, r2
 8004448:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800444a:	f107 0210 	add.w	r2, r7, #16
 800444e:	23c0      	movs	r3, #192	; 0xc0
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff fe66 	bl	8004124 <parse_name>
 8004458:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800445c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d101      	bne.n	800446a <dns_answer+0x1ee>
 8004466:	2300      	movs	r3, #0
 8004468:	e018      	b.n	800449c <dns_answer+0x220>
		cp += len;
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3304      	adds	r3, #4
 8004478:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3304      	adds	r3, #4
 800447e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3304      	adds	r3, #4
 8004484:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3304      	adds	r3, #4
 800448a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3304      	adds	r3, #4
 8004490:	60bb      	str	r3, [r7, #8]
		break;
 8004492:	e002      	b.n	800449a <dns_answer+0x21e>
		break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <dns_answer+0x21e>
		break;
 8004498:	bf00      	nop
	}

	return cp;
 800449a:	68bb      	ldr	r3, [r7, #8]
}
 800449c:	4618      	mov	r0, r3
 800449e:	37d8      	adds	r7, #216	; 0xd8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80044b4:	2212      	movs	r2, #18
 80044b6:	2100      	movs	r1, #0
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f00d fb8b 	bl	8011bd4 <memset>

	pdhdr->id = get16(&msg[0]);
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f7ff fdfd 	bl	80040be <get16>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	3302      	adds	r3, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdf4 	bl	80040be <get16>
 80044d6:	4603      	mov	r3, r0
 80044d8:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80044da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da02      	bge.n	80044e8 <parseDNSMSG+0x44>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 80044e8:	8a7b      	ldrh	r3, [r7, #18]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80044fa:	8a7b      	ldrh	r3, [r7, #18]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <parseDNSMSG+0x66>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800450a:	8a7b      	ldrh	r3, [r7, #18]
 800450c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <parseDNSMSG+0x76>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800451a:	8a7b      	ldrh	r3, [r7, #18]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <parseDNSMSG+0x86>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800452a:	8a7b      	ldrh	r3, [r7, #18]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <parseDNSMSG+0x96>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800453a:	8a7b      	ldrh	r3, [r7, #18]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3304      	adds	r3, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fdb6 	bl	80040be <get16>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3306      	adds	r3, #6
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fdad 	bl	80040be <get16>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3308      	adds	r3, #8
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fda4 	bl	80040be <get16>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	330a      	adds	r3, #10
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fd9b 	bl	80040be <get16>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	330c      	adds	r3, #12
 8004594:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	83fb      	strh	r3, [r7, #30]
 800459a:	e00d      	b.n	80045b8 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7ff fe47 	bl	8004232 <dns_question>
 80045a4:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <parseDNSMSG+0x10e>
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	e03b      	b.n	800462a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80045b2:	8bfb      	ldrh	r3, [r7, #30]
 80045b4:	3301      	adds	r3, #1
 80045b6:	83fb      	strh	r3, [r7, #30]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	895b      	ldrh	r3, [r3, #10]
 80045bc:	8bfa      	ldrh	r2, [r7, #30]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d3ec      	bcc.n	800459c <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	83fb      	strh	r3, [r7, #30]
 80045c6:	e00e      	b.n	80045e6 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	6978      	ldr	r0, [r7, #20]
 80045ce:	f7ff fe55 	bl	800427c <dns_answer>
 80045d2:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <parseDNSMSG+0x13c>
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e024      	b.n	800462a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80045e0:	8bfb      	ldrh	r3, [r7, #30]
 80045e2:	3301      	adds	r3, #1
 80045e4:	83fb      	strh	r3, [r7, #30]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	899b      	ldrh	r3, [r3, #12]
 80045ea:	8bfa      	ldrh	r2, [r7, #30]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3eb      	bcc.n	80045c8 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	83fb      	strh	r3, [r7, #30]
 80045f4:	e002      	b.n	80045fc <parseDNSMSG+0x158>
 80045f6:	8bfb      	ldrh	r3, [r7, #30]
 80045f8:	3301      	adds	r3, #1
 80045fa:	83fb      	strh	r3, [r7, #30]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	89db      	ldrh	r3, [r3, #14]
 8004600:	8bfa      	ldrh	r2, [r7, #30]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3f7      	bcc.n	80045f6 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	83fb      	strh	r3, [r7, #30]
 800460a:	e002      	b.n	8004612 <parseDNSMSG+0x16e>
 800460c:	8bfb      	ldrh	r3, [r7, #30]
 800460e:	3301      	adds	r3, #1
 8004610:	83fb      	strh	r3, [r7, #30]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8a1b      	ldrh	r3, [r3, #16]
 8004616:	8bfa      	ldrh	r2, [r7, #30]
 8004618:	429a      	cmp	r2, r3
 800461a:	d3f7      	bcc.n	800460c <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	7a1b      	ldrb	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <parseDNSMSG+0x184>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <parseDNSMSG+0x186>
	else return 0;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0b8      	sub	sp, #224	; 0xe0
 8004638:	af00      	add	r7, sp, #0
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	461a      	mov	r2, r3
 8004640:	4603      	mov	r3, r0
 8004642:	81fb      	strh	r3, [r7, #14]
 8004644:	4613      	mov	r3, r2
 8004646:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 800464e:	4b57      	ldr	r3, [pc, #348]	; (80047ac <dns_makequery+0x178>)
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	4b55      	ldr	r3, [pc, #340]	; (80047ac <dns_makequery+0x178>)
 8004658:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800465a:	4b54      	ldr	r3, [pc, #336]	; (80047ac <dns_makequery+0x178>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004664:	f7ff fd43 	bl	80040ee <put16>
 8004668:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	02db      	lsls	r3, r3, #11
 8004670:	b21b      	sxth	r3, r3
 8004672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004676:	b21b      	sxth	r3, r3
 8004678:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 800467c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004680:	4619      	mov	r1, r3
 8004682:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004686:	f7ff fd32 	bl	80040ee <put16>
 800468a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 800468e:	2101      	movs	r1, #1
 8004690:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004694:	f7ff fd2b 	bl	80040ee <put16>
 8004698:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800469c:	2100      	movs	r1, #0
 800469e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80046a2:	f7ff fd24 	bl	80040ee <put16>
 80046a6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80046aa:	2100      	movs	r1, #0
 80046ac:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80046b0:	f7ff fd1d 	bl	80040ee <put16>
 80046b4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80046b8:	2100      	movs	r1, #0
 80046ba:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80046be:	f7ff fd16 	bl	80040ee <put16>
 80046c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 80046c6:	f107 0310 	add.w	r3, r7, #16
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f00d fb81 	bl	8011dd4 <strcpy>
	dname = sname;
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 80046da:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80046de:	f7fb fdd7 	bl	8000290 <strlen>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 80046e8:	212e      	movs	r1, #46	; 0x2e
 80046ea:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80046ee:	f00d fa79 	bl	8011be4 <strchr>
 80046f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80046f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <dns_makequery+0xd8>
 80046fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	81bb      	strh	r3, [r7, #12]
 800470a:	e002      	b.n	8004712 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 800470c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8004710:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800471c:	89ba      	ldrh	r2, [r7, #12]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d029      	beq.n	800477c <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8004728:	89bb      	ldrh	r3, [r7, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004730:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004734:	f00d fa75 	bl	8011c22 <strncpy>
		cp += len;
 8004738:	89bb      	ldrh	r3, [r7, #12]
 800473a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800473e:	4413      	add	r3, r2
 8004740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8004744:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 800474c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
			break;
 800475a:	e010      	b.n	800477e <dns_makequery+0x14a>
		}
		dname += len+1;
 800475c:	89bb      	ldrh	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004764:	4413      	add	r3, r2
 8004766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800476a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800476e:	89bb      	ldrh	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800477a:	e7b5      	b.n	80046e8 <dns_makequery+0xb4>
		if (len == 0) break;
 800477c:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800477e:	2101      	movs	r1, #1
 8004780:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004784:	f7ff fcb3 	bl	80040ee <put16>
 8004788:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800478c:	2101      	movs	r1, #1
 800478e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004792:	f7ff fcac 	bl	80040ee <put16>
 8004796:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800479a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b21b      	sxth	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	37e0      	adds	r7, #224	; 0xe0
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000172 	.word	0x20000172

080047b0 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <check_DNS_timeout+0x44>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d914      	bls.n	80047e6 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <check_DNS_timeout+0x44>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <check_DNS_timeout+0x48>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d905      	bls.n	80047d6 <check_DNS_timeout+0x26>
			retry_count = 0;
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <check_DNS_timeout+0x48>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	e008      	b.n	80047e8 <check_DNS_timeout+0x38>
		}
		retry_count++;
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <check_DNS_timeout+0x48>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <check_DNS_timeout+0x48>)
 80047e0:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000174 	.word	0x20000174
 80047f8:	20000178 	.word	0x20000178

080047fc <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <DNS_init+0x2c>)
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <DNS_init+0x30>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <DNS_init+0x34>)
 8004816:	f241 1222 	movw	r2, #4386	; 0x1122
 800481a:	801a      	strh	r2, [r3, #0]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000170 	.word	0x20000170
 800482c:	2000016c 	.word	0x2000016c
 8004830:	20000172 	.word	0x20000172

08004834 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b08f      	sub	sp, #60	; 0x3c
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8004840:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <DNS_run+0xfc>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <DNS_run+0x100>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 800484c:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <DNS_run+0x104>)
 800484e:	7818      	ldrb	r0, [r3, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	2200      	movs	r2, #0
 8004854:	2102      	movs	r1, #2
 8004856:	f7fc fdc7 	bl	80013e8 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <DNS_run+0x108>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	2000      	movs	r0, #0
 8004866:	f7ff fee5 	bl	8004634 <dns_makequery>
 800486a:	4603      	mov	r3, r0
 800486c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800486e:	4b32      	ldr	r3, [pc, #200]	; (8004938 <DNS_run+0x104>)
 8004870:	7818      	ldrb	r0, [r3, #0]
 8004872:	4b32      	ldr	r3, [pc, #200]	; (800493c <DNS_run+0x108>)
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004878:	2335      	movs	r3, #53	; 0x35
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f7fd fa05 	bl	8001c8c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8004882:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <DNS_run+0x104>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc fb51 	bl	8000f2e <getSn_RX_RSR>
 800488c:	4603      	mov	r3, r0
 800488e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004892:	2b00      	cmp	r3, #0
 8004894:	d029      	beq.n	80048ea <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8004896:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d902      	bls.n	80048a4 <DNS_run+0x70>
 800489e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 80048a4:	4b24      	ldr	r3, [pc, #144]	; (8004938 <DNS_run+0x104>)
 80048a6:	7818      	ldrb	r0, [r3, #0]
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <DNS_run+0x108>)
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	f107 0414 	add.w	r4, r7, #20
 80048b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048b2:	f107 0312 	add.w	r3, r7, #18
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4623      	mov	r3, r4
 80048ba:	f7fd fb3d 	bl	8001f38 <recvfrom>
 80048be:	4603      	mov	r3, r0
 80048c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 80048c2:	4b1e      	ldr	r3, [pc, #120]	; (800493c <DNS_run+0x108>)
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	f107 0318 	add.w	r3, r7, #24
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fde9 	bl	80044a4 <parseDNSMSG>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 80048d8:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 80048da:	4b17      	ldr	r3, [pc, #92]	; (8004938 <DNS_run+0x104>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fe84 	bl	80015ec <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 80048e4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80048e8:	e01e      	b.n	8004928 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 80048ea:	f7ff ff61 	bl	80047b0 <check_DNS_timeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 80048f4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da06      	bge.n	800490a <DNS_run+0xd6>
			close(DNS_SOCKET);
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <DNS_run+0x104>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc fe73 	bl	80015ec <close>
			return 0; // timeout occurred
 8004906:	2300      	movs	r3, #0
 8004908:	e00e      	b.n	8004928 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 800490a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1b7      	bne.n	8004882 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <DNS_run+0x104>)
 8004914:	7818      	ldrb	r0, [r3, #0]
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <DNS_run+0x108>)
 8004918:	6819      	ldr	r1, [r3, #0]
 800491a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800491c:	2335      	movs	r3, #53	; 0x35
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f7fd f9b3 	bl	8001c8c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8004926:	e7ac      	b.n	8004882 <DNS_run+0x4e>
}
 8004928:	4618      	mov	r0, r3
 800492a:	3734      	adds	r7, #52	; 0x34
 800492c:	46bd      	mov	sp, r7
 800492e:	bd90      	pop	{r4, r7, pc}
 8004930:	20000178 	.word	0x20000178
 8004934:	20000174 	.word	0x20000174
 8004938:	20000170 	.word	0x20000170
 800493c:	2000016c 	.word	0x2000016c

08004940 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <getNextPacketId+0x1c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	e000      	b.n	8004982 <getNextPacketId+0x1e>
 8004980:	2301      	movs	r3, #1
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8004996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	617b      	str	r3, [r7, #20]
        sent = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80049ac:	e018      	b.n	80049e0 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	689c      	ldr	r4, [r3, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	18d6      	adds	r6, r2, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fd99 	bl	80054f8 <TimerLeftMS>
 80049c6:	4603      	mov	r3, r0
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47a0      	blx	r4
 80049d0:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db0e      	blt.n	80049f6 <sendPacket+0x60>
            break;
        sent += rc;
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4413      	add	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	da07      	bge.n	80049f8 <sendPacket+0x62>
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fd43 	bl	8005474 <TimerIsExpired>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0dc      	beq.n	80049ae <sendPacket+0x18>
 80049f4:	e000      	b.n	80049f8 <sendPacket+0x62>
            break;
 80049f6:	bf00      	nop
    }
    if (sent == length)
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d10b      	bne.n	8004a18 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fd5b 	bl	80054c8 <TimerCountdown>
        rc = SUCCESSS;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e002      	b.n	8004a1e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	617b      	str	r3, [r7, #20]
    return rc;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a28 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e009      	b.n	8004a56 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3304      	adds	r3, #4
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3301      	adds	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	ddf2      	ble.n	8004a42 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a78:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3354      	adds	r3, #84	; 0x54
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fcde 	bl	8005458 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8004ab8:	2304      	movs	r3, #4
 8004aba:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	3301      	adds	r3, #1
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	6a3a      	ldr	r2, [r7, #32]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	dd03      	ble.n	8004ade <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ada:	61bb      	str	r3, [r7, #24]
            goto exit;
 8004adc:	e021      	b.n	8004b22 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae2:	685c      	ldr	r4, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004ae8:	f107 0117 	add.w	r1, r7, #23
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	47a0      	blx	r4
 8004af2:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d112      	bne.n	8004b20 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dbd1      	blt.n	8004ac2 <decodePacket+0x1e>
exit:
 8004b1e:	e000      	b.n	8004b22 <decodePacket+0x7e>
            goto exit;
 8004b20:	bf00      	nop
    return len;
 8004b22:	6a3b      	ldr	r3, [r7, #32]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	372c      	adds	r7, #44	; 0x2c
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8004b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
    int len = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	685c      	ldr	r4, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	695e      	ldr	r6, [r3, #20]
 8004b56:	68b8      	ldr	r0, [r7, #8]
 8004b58:	f000 fcce 	bl	80054f8 <TimerLeftMS>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4631      	mov	r1, r6
 8004b62:	4628      	mov	r0, r5
 8004b64:	47a0      	blx	r4
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d13b      	bne.n	8004be4 <readPacket+0xb8>
        goto exit;

    len = 1;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f000 fcc1 	bl	80054f8 <TimerLeftMS>
 8004b76:	4602      	mov	r2, r0
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff90 	bl	8004aa4 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f813 	bl	8005bba <MQTTPacket_encode>
 8004b94:	4602      	mov	r2, r0
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dd16      	ble.n	8004bd0 <readPacket+0xa4>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	685c      	ldr	r4, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	18d6      	adds	r6, r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f000 fc9d 	bl	80054f8 <TimerLeftMS>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47a0      	blx	r4
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d10b      	bne.n	8004be8 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8004bd8:	7d3b      	ldrb	r3, [r7, #20]
 8004bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e002      	b.n	8004bea <readPacket+0xbe>
        goto exit;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <readPacket+0xbe>
        goto exit;
 8004be8:	bf00      	nop
exit:
    return rc;
 8004bea:	69fb      	ldr	r3, [r7, #28]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3724      	adds	r7, #36	; 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8004c14:	e039      	b.n	8004c8a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c1c:	d103      	bne.n	8004c26 <isTopicMatched+0x32>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b2f      	cmp	r3, #47	; 0x2f
 8004c24:	d13a      	bne.n	8004c9c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8004c2c:	d009      	beq.n	8004c42 <isTopicMatched+0x4e>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b23      	cmp	r3, #35	; 0x23
 8004c34:	d005      	beq.n	8004c42 <isTopicMatched+0x4e>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d12e      	bne.n	8004ca0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b2b      	cmp	r3, #43	; 0x2b
 8004c48:	d112      	bne.n	8004c70 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8004c50:	e005      	b.n	8004c5e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	3301      	adds	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d20b      	bcs.n	8004c7e <isTopicMatched+0x8a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c6c:	d1f1      	bne.n	8004c52 <isTopicMatched+0x5e>
 8004c6e:	e006      	b.n	8004c7e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b23      	cmp	r3, #35	; 0x23
 8004c76:	d102      	bne.n	8004c7e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
        curf++;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
        curn++;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3301      	adds	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <isTopicMatched+0xae>
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3bd      	bcc.n	8004c16 <isTopicMatched+0x22>
 8004c9a:	e002      	b.n	8004ca2 <isTopicMatched+0xae>
            break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <isTopicMatched+0xae>
            break;
 8004ca0:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d105      	bne.n	8004cb6 <isTopicMatched+0xc2>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <isTopicMatched+0xc2>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <isTopicMatched+0xc4>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08a      	sub	sp, #40	; 0x28
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
 8004cdc:	e03f      	b.n	8004d5e <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d034      	beq.n	8004d58 <deliverMessage+0x92>
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f001 f92b 	bl	8005f58 <MQTTPacket_equals>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff6c 	bl	8004bf4 <isTopicMatched>
 8004d1c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01a      	beq.n	8004d58 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	3304      	adds	r3, #4
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d012      	beq.n	8004d58 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8004d32:	f107 0318 	add.w	r3, r7, #24
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fe00 	bl	8004940 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3304      	adds	r3, #4
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f107 0218 	add.w	r2, r7, #24
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
                rc = SUCCESSS;
 8004d54:	2300      	movs	r3, #0
 8004d56:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	ddbc      	ble.n	8004cde <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d112      	bne.n	8004d92 <deliverMessage+0xcc>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fddf 	bl	8004940 <NewMessageData>
        c->defaultMessageHandler(&md);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	f107 0210 	add.w	r2, r7, #16
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4798      	blx	r3
        rc = SUCCESSS;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <keepalive>:


int keepalive(MQTTClient* c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
        goto exit;
 8004db6:	e033      	b.n	8004e20 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3354      	adds	r3, #84	; 0x54
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fb59 	bl	8005474 <TimerIsExpired>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02a      	beq.n	8004e1e <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7f1b      	ldrb	r3, [r3, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d126      	bne.n	8004e1e <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fb3f 	bl	8005458 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fb5c 	bl	80054a0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fe15 	bl	8005a22 <MQTTSerialize_pingreq>
 8004df8:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dd0f      	ble.n	8004e20 <keepalive+0x84>
 8004e00:	f107 0308 	add.w	r3, r7, #8
 8004e04:	461a      	mov	r2, r3
 8004e06:	6939      	ldr	r1, [r7, #16]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fdc4 	bl	8004996 <sendPacket>
 8004e0e:	6178      	str	r0, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <keepalive+0x84>
                c->ping_outstanding = 1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]
 8004e1c:	e000      	b.n	8004e20 <keepalive+0x84>
        }
    }

exit:
 8004e1e:	bf00      	nop
    return rc;
 8004e20:	697b      	ldr	r3, [r7, #20]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	b095      	sub	sp, #84	; 0x54
 8004e30:	af06      	add	r7, sp, #24
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fe77 	bl	8004b2c <readPacket>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8004e46:	2300      	movs	r3, #0
 8004e48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8004e4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e4c:	3b02      	subs	r3, #2
 8004e4e:	2b0b      	cmp	r3, #11
 8004e50:	f200 80c0 	bhi.w	8004fd4 <cycle+0x1a8>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <cycle+0x30>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004fd5 	.word	0x08004fd5
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004fd5 	.word	0x08004fd5
 8004e68:	08004f55 	.word	0x08004f55
 8004e6c:	08004fd5 	.word	0x08004fd5
 8004e70:	08004fd5 	.word	0x08004fd5
 8004e74:	08004fd5 	.word	0x08004fd5
 8004e78:	08004fd5 	.word	0x08004fd5
 8004e7c:	08004fd5 	.word	0x08004fd5
 8004e80:	08004fd5 	.word	0x08004fd5
 8004e84:	08004fd5 	.word	0x08004fd5
 8004e88:	08004fc7 	.word	0x08004fc7
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004e94:	4616      	mov	r6, r2
 8004e96:	f107 0210 	add.w	r2, r7, #16
 8004e9a:	1d15      	adds	r5, r2, #4
 8004e9c:	f107 0210 	add.w	r2, r7, #16
 8004ea0:	1c54      	adds	r4, r2, #1
 8004ea2:	f107 010c 	add.w	r1, r7, #12
 8004ea6:	f107 0210 	add.w	r2, r7, #16
 8004eaa:	1c90      	adds	r0, r2, #2
 8004eac:	9604      	str	r6, [sp, #16]
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	f107 0320 	add.w	r3, r7, #32
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	4622      	mov	r2, r4
 8004eca:	f000 fdb9 	bl	8005a40 <MQTTDeserialize_publish>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 8083 	bne.w	8004fdc <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8004edc:	f107 0210 	add.w	r2, r7, #16
 8004ee0:	f107 0320 	add.w	r3, r7, #32
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff feed 	bl	8004cc6 <deliverMessage>
            if (msg.qos != QOS0)
 8004eec:	7c3b      	ldrb	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d06d      	beq.n	8004fce <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8004ef2:	7c3b      	ldrb	r3, [r7, #16]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d10c      	bne.n	8004f12 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6918      	ldr	r0, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4619      	mov	r1, r3
 8004f02:	8abb      	ldrh	r3, [r7, #20]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	2204      	movs	r2, #4
 8004f0a:	f001 f8f2 	bl	80060f2 <MQTTSerialize_ack>
 8004f0e:	6378      	str	r0, [r7, #52]	; 0x34
 8004f10:	e00e      	b.n	8004f30 <cycle+0x104>
                else if (msg.qos == QOS2)
 8004f12:	7c3b      	ldrb	r3, [r7, #16]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d10b      	bne.n	8004f30 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6918      	ldr	r0, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4619      	mov	r1, r3
 8004f22:	8abb      	ldrh	r3, [r7, #20]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	2300      	movs	r3, #0
 8004f28:	2205      	movs	r2, #5
 8004f2a:	f001 f8e2 	bl	80060f2 <MQTTSerialize_ack>
 8004f2e:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dc03      	bgt.n	8004f3e <cycle+0x112>
                    rc = FAILURE;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3c:	e005      	b.n	8004f4a <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff fd27 	bl	8004996 <sendPacket>
 8004f48:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d13d      	bne.n	8004fce <cycle+0x1a2>
                    goto exit; // there was a problem
 8004f52:	e044      	b.n	8004fde <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695c      	ldr	r4, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f107 020a 	add.w	r2, r7, #10
 8004f60:	f107 0109 	add.w	r1, r7, #9
 8004f64:	f107 0008 	add.w	r0, r7, #8
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	f000 fdda 	bl	8005b24 <MQTTDeserialize_ack>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d003      	beq.n	8004f7e <cycle+0x152>
                rc = FAILURE;
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7c:	e01e      	b.n	8004fbc <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6918      	ldr	r0, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4619      	mov	r1, r3
 8004f88:	897b      	ldrh	r3, [r7, #10]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2206      	movs	r2, #6
 8004f90:	f001 f8af 	bl	80060f2 <MQTTSerialize_ack>
 8004f94:	6378      	str	r0, [r7, #52]	; 0x34
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	dc03      	bgt.n	8004fa4 <cycle+0x178>
                rc = FAILURE;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa2:	e00b      	b.n	8004fbc <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fcf4 	bl	8004996 <sendPacket>
 8004fae:	6338      	str	r0, [r7, #48]	; 0x30
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <cycle+0x190>
                rc = FAILURE; // there was a problem
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d106      	bne.n	8004fd2 <cycle+0x1a6>
                goto exit; // there was a problem
 8004fc4:	e00b      	b.n	8004fde <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
            break;
 8004fcc:	e002      	b.n	8004fd4 <cycle+0x1a8>
            break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <cycle+0x1a8>
            break;
 8004fd2:	bf00      	nop
    }
    keepalive(c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fee1 	bl	8004d9c <keepalive>
 8004fda:	e000      	b.n	8004fde <cycle+0x1b2>
                goto exit;
 8004fdc:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <cycle+0x1bc>
        rc = packet_type;
 8004fe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	373c      	adds	r7, #60	; 0x3c
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fa26 	bl	8005458 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f107 030c 	add.w	r3, r7, #12
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa43 	bl	80054a0 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff03 	bl	8004e2c <cycle>
 8005026:	4603      	mov	r3, r0
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d102      	bne.n	8005034 <MQTTYield+0x40>
    {
        rc = FAILURE;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8005034:	697b      	ldr	r3, [r7, #20]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa0f 	bl	8005474 <TimerIsExpired>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fee4 	bl	8004e2c <cycle>
 8005064:	6178      	str	r0, [r7, #20]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d1f0      	bne.n	8005050 <waitfor+0x12>
 800506e:	e000      	b.n	8005072 <waitfor+0x34>
            break; // we timed out
 8005070:	bf00      	nop

    return rc;
 8005072:	697b      	ldr	r3, [r7, #20]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b09e      	sub	sp, #120	; 0x78
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800508c:	4a3d      	ldr	r2, [pc, #244]	; (8005184 <MQTTConnect+0x108>)
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	4611      	mov	r1, r2
 8005094:	2258      	movs	r2, #88	; 0x58
 8005096:	4618      	mov	r0, r3
 8005098:	f00c fea4 	bl	8011de4 <memcpy>
    int len = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d15d      	bne.n	8005164 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 80050a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f9d3 	bl	8005458 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f9ef 	bl	80054a0 <TimerCountdownMS>

    if (options == 0)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d102      	bne.n	80050ce <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	8b1b      	ldrh	r3, [r3, #24]
 80050d2:	461a      	mov	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 f9ef 	bl	80054c8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6918      	ldr	r0, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f000 fb1b 	bl	8005730 <MQTTSerialize_connect>
 80050fa:	6738      	str	r0, [r7, #112]	; 0x70
 80050fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050fe:	2b00      	cmp	r3, #0
 8005100:	dd32      	ble.n	8005168 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8005102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005106:	461a      	mov	r2, r3
 8005108:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fc43 	bl	8004996 <sendPacket>
 8005110:	6778      	str	r0, [r7, #116]	; 0x74
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	2b00      	cmp	r3, #0
 8005116:	d129      	bne.n	800516c <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8005118:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800511c:	461a      	mov	r2, r3
 800511e:	2102      	movs	r1, #2
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff8c 	bl	800503e <waitfor>
 8005126:	4603      	mov	r3, r0
 8005128:	2b02      	cmp	r3, #2
 800512a:	d117      	bne.n	800515c <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800512c:	23ff      	movs	r3, #255	; 0xff
 800512e:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f107 010f 	add.w	r1, r7, #15
 8005140:	f107 000e 	add.w	r0, r7, #14
 8005144:	f000 fbe0 	bl	8005908 <MQTTDeserialize_connack>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <MQTTConnect+0xd8>
            rc = connack_rc;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	677b      	str	r3, [r7, #116]	; 0x74
 8005152:	e00c      	b.n	800516e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	677b      	str	r3, [r7, #116]	; 0x74
 800515a:	e008      	b.n	800516e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	677b      	str	r3, [r7, #116]	; 0x74
 8005162:	e004      	b.n	800516e <MQTTConnect+0xf2>
		goto exit;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <MQTTConnect+0xf2>
        goto exit;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800516c:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <MQTTConnect+0xfe>
        c->isconnected = 1;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800517a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800517c:	4618      	mov	r0, r3
 800517e:	3778      	adds	r7, #120	; 0x78
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	080129fc 	.word	0x080129fc

08005188 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b094      	sub	sp, #80	; 0x50
 800518c:	af04      	add	r7, sp, #16
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8005198:	f04f 33ff 	mov.w	r3, #4294967295
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 80051a2:	2300      	movs	r3, #0
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
 80051aa:	2300      	movs	r3, #0
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8083 	beq.w	80052c6 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 80051c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f947 	bl	8005458 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f963 	bl	80054a0 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691c      	ldr	r4, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	461d      	mov	r5, r3
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fbbd 	bl	8004964 <getNextPacketId>
 80051ea:	4603      	mov	r3, r0
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	f107 031f 	add.w	r3, r7, #31
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	f107 0320 	add.w	r3, r7, #32
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2301      	movs	r3, #1
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	2200      	movs	r2, #0
 8005202:	4629      	mov	r1, r5
 8005204:	4620      	mov	r0, r4
 8005206:	f000 fff0 	bl	80061ea <MQTTSerialize_subscribe>
 800520a:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	dd5b      	ble.n	80052ca <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8005212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005216:	461a      	mov	r2, r3
 8005218:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fbbb 	bl	8004996 <sendPacket>
 8005220:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d152      	bne.n	80052ce <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8005228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800522c:	461a      	mov	r2, r3
 800522e:	2109      	movs	r1, #9
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff ff04 	bl	800503e <waitfor>
 8005236:	4603      	mov	r3, r0
 8005238:	2b09      	cmp	r3, #9
 800523a:	d140      	bne.n	80052be <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	4614      	mov	r4, r2
 8005250:	f107 0114 	add.w	r1, r7, #20
 8005254:	f107 0218 	add.w	r2, r7, #24
 8005258:	f107 0012 	add.w	r0, r7, #18
 800525c:	9401      	str	r4, [sp, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	460b      	mov	r3, r1
 8005262:	2101      	movs	r1, #1
 8005264:	f001 f83b 	bl	80062de <MQTTDeserialize_suback>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8005272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d02b      	beq.n	80052d0 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005278:	2300      	movs	r3, #0
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
 800527c:	e01b      	b.n	80052b6 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	3304      	adds	r3, #4
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d110      	bne.n	80052b0 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	3304      	adds	r3, #4
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	3304      	adds	r3, #4
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	609a      	str	r2, [r3, #8]
                    rc = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80052ae:	e00f      	b.n	80052d0 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	3301      	adds	r3, #1
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	dde0      	ble.n	800527e <MQTTSubscribe+0xf6>
 80052bc:	e008      	b.n	80052d0 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	e004      	b.n	80052d0 <MQTTSubscribe+0x148>
		goto exit;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <MQTTSubscribe+0x148>
        goto exit;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 80052ce:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80052d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3740      	adds	r7, #64	; 0x40
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdb0      	pop	{r4, r5, r7, pc}

080052da <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80052da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052dc:	b097      	sub	sp, #92	; 0x5c
 80052de:	af08      	add	r7, sp, #32
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	2300      	movs	r3, #0
 80052f2:	623b      	str	r3, [r7, #32]
 80052f4:	2300      	movs	r3, #0
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 809b 	beq.w	8005440 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800530a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f8a2 	bl	8005458 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f8be 	bl	80054a0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d003      	beq.n	8005334 <MQTTPublish+0x5a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d106      	bne.n	8005342 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fb15 	bl	8004964 <getNextPacketId>
 800533a:	4603      	mov	r3, r0
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	469c      	mov	ip, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	469e      	mov	lr, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	785d      	ldrb	r5, [r3, #1]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8005364:	9206      	str	r2, [sp, #24]
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	ac02      	add	r4, sp, #8
 800536a:	f107 031c 	add.w	r3, r7, #28
 800536e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005376:	9601      	str	r6, [sp, #4]
 8005378:	9500      	str	r5, [sp, #0]
 800537a:	4673      	mov	r3, lr
 800537c:	2200      	movs	r2, #0
 800537e:	4661      	mov	r1, ip
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f000 fe40 	bl	8006006 <MQTTSerialize_publish>
 8005386:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd5a      	ble.n	8005444 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800538e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005392:	461a      	mov	r2, r3
 8005394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff fafd 	bl	8004996 <sendPacket>
 800539c:	6378      	str	r0, [r7, #52]	; 0x34
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d151      	bne.n	8005448 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d122      	bne.n	80053f2 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80053ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b0:	461a      	mov	r2, r3
 80053b2:	2104      	movs	r1, #4
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fe42 	bl	800503e <waitfor>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d114      	bne.n	80053ea <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	695c      	ldr	r4, [r3, #20]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f107 021a 	add.w	r2, r7, #26
 80053cc:	f107 0119 	add.w	r1, r7, #25
 80053d0:	f107 0018 	add.w	r0, r7, #24
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4623      	mov	r3, r4
 80053d8:	f000 fba4 	bl	8005b24 <MQTTDeserialize_ack>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d035      	beq.n	800544e <MQTTPublish+0x174>
                rc = FAILURE;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	e031      	b.n	800544e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
 80053f0:	e02d      	b.n	800544e <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d128      	bne.n	800544c <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80053fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053fe:	461a      	mov	r2, r3
 8005400:	2107      	movs	r1, #7
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fe1b 	bl	800503e <waitfor>
 8005408:	4603      	mov	r3, r0
 800540a:	2b07      	cmp	r3, #7
 800540c:	d114      	bne.n	8005438 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	695c      	ldr	r4, [r3, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f107 0216 	add.w	r2, r7, #22
 800541a:	f107 0115 	add.w	r1, r7, #21
 800541e:	f107 0014 	add.w	r0, r7, #20
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4623      	mov	r3, r4
 8005426:	f000 fb7d 	bl	8005b24 <MQTTDeserialize_ack>
 800542a:	4603      	mov	r3, r0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d00e      	beq.n	800544e <MQTTPublish+0x174>
                rc = FAILURE;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	e00a      	b.n	800544e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	e006      	b.n	800544e <MQTTPublish+0x174>
		goto exit;
 8005440:	bf00      	nop
 8005442:	e004      	b.n	800544e <MQTTPublish+0x174>
        goto exit;
 8005444:	bf00      	nop
 8005446:	e002      	b.n	800544e <MQTTPublish+0x174>
        goto exit; // there was a problem
 8005448:	bf00      	nop
 800544a:	e000      	b.n	800544e <MQTTPublish+0x174>
    }

exit:
 800544c:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005450:	4618      	mov	r0, r3
 8005452:	373c      	adds	r7, #60	; 0x3c
 8005454:	46bd      	mov	sp, r7
 8005456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005458 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	605a      	str	r2, [r3, #4]
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <TimerIsExpired+0x28>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	0fdb      	lsrs	r3, r3, #31
 800548c:	b2db      	uxtb	r3, r3
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	2000017c 	.word	0x2000017c

080054a0 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <TimerCountdownMS+0x24>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	441a      	add	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000017c 	.word	0x2000017c

080054c8 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054d8:	fb03 f202 	mul.w	r2, r3, r2
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <TimerCountdown+0x2c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	441a      	add	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	605a      	str	r2, [r3, #4]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000017c 	.word	0x2000017c

080054f8 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <TimerLeftMS+0x28>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	2000017c 	.word	0x2000017c

08005524 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <NewNetwork+0x30>)
 8005538:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a06      	ldr	r2, [pc, #24]	; (8005558 <NewNetwork+0x34>)
 800553e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a06      	ldr	r2, [pc, #24]	; (800555c <NewNetwork+0x38>)
 8005544:	60da      	str	r2, [r3, #12]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	08005561 	.word	0x08005561
 8005558:	080055b7 	.word	0x080055b7
 800555c:	080055fb 	.word	0x080055fb

08005560 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3304      	adds	r3, #4
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	3303      	adds	r3, #3
 8005578:	4618      	mov	r0, r3
 800557a:	f7fb fbcb 	bl	8000d14 <WIZCHIP_READ>
 800557e:	4603      	mov	r3, r0
 8005580:	2b17      	cmp	r3, #23
 8005582:	d113      	bne.n	80055ac <w5x00_read+0x4c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	4618      	mov	r0, r3
 800558c:	f7fb fccf 	bl	8000f2e <getSn_RX_RSR>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <w5x00_read+0x4c>
		return recv(n->my_socket, buffer, len);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	b292      	uxth	r2, r2
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fab0 	bl	8001b08 <recv>
 80055a8:	4603      	mov	r3, r0
 80055aa:	e000      	b.n	80055ae <w5x00_read+0x4e>

	return SOCK_ERROR;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	3303      	adds	r3, #3
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fb fba0 	bl	8000d14 <WIZCHIP_READ>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b17      	cmp	r3, #23
 80055d8:	d10a      	bne.n	80055f0 <w5x00_write+0x3a>
		return send(n->my_socket, buffer, len);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	b292      	uxth	r2, r2
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fc f99a 	bl	8001920 <send>
 80055ec:	4603      	mov	r3, r0
 80055ee:	e000      	b.n	80055f2 <w5x00_write+0x3c>

	return SOCK_ERROR;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	4618      	mov	r0, r3
 800560a:	f7fc f91b 	bl	8001844 <disconnect>
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	4613      	mov	r3, r2
 8005622:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8005624:	f243 0339 	movw	r3, #12345	; 0x3039
 8005628:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	b2d8      	uxtb	r0, r3
 8005630:	8afa      	ldrh	r2, [r7, #22]
 8005632:	2300      	movs	r3, #0
 8005634:	2101      	movs	r1, #1
 8005636:	f7fb fed7 	bl	80013e8 <socket>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d001      	beq.n	800564a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8005646:	2300      	movs	r3, #0
 8005648:	e00d      	b.n	8005666 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc f82f 	bl	80016b8 <connect>
 800565a:	4603      	mov	r3, r0
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <ConnectNetwork+0x50>

	return SOCK_OK;
 8005664:	2301      	movs	r3, #1
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800566e:	b590      	push	{r4, r7, lr}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
	int len = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	7a1b      	ldrb	r3, [r3, #8]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d102      	bne.n	8005688 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8005682:	230c      	movs	r3, #12
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e005      	b.n	8005694 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7a1b      	ldrb	r3, [r3, #8]
 800568c:	2b04      	cmp	r3, #4
 800568e:	d101      	bne.n	8005694 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8005690:	230a      	movs	r3, #10
 8005692:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	330c      	adds	r3, #12
 8005698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800569c:	f000 fc43 	bl	8005f26 <MQTTstrlen>
 80056a0:	4603      	mov	r3, r0
 80056a2:	3302      	adds	r3, #2
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7edb      	ldrb	r3, [r3, #27]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d013      	beq.n	80056da <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3324      	adds	r3, #36	; 0x24
 80056b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056ba:	f000 fc34 	bl	8005f26 <MQTTstrlen>
 80056be:	4603      	mov	r3, r0
 80056c0:	1c9c      	adds	r4, r3, #2
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3330      	adds	r3, #48	; 0x30
 80056c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056ca:	f000 fc2c 	bl	8005f26 <MQTTstrlen>
 80056ce:	4603      	mov	r3, r0
 80056d0:	4423      	add	r3, r4
 80056d2:	3302      	adds	r3, #2
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <MQTTSerialize_connectLength+0x7c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3340      	adds	r3, #64	; 0x40
 80056ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056f2:	f000 fc18 	bl	8005f26 <MQTTstrlen>
 80056f6:	4603      	mov	r3, r0
 80056f8:	3302      	adds	r3, #2
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d103      	bne.n	8005710 <MQTTSerialize_connectLength+0xa2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	334c      	adds	r3, #76	; 0x4c
 8005714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005718:	f000 fc05 	bl	8005f26 <MQTTstrlen>
 800571c:	4603      	mov	r3, r0
 800571e:	3302      	adds	r3, #2
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	bd90      	pop	{r4, r7, pc}

08005730 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	; 0x28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8005740:	2300      	movs	r3, #0
 8005742:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff8b 	bl	800566e <MQTTSerialize_connectLength>
 8005758:	6238      	str	r0, [r7, #32]
 800575a:	6a38      	ldr	r0, [r7, #32]
 800575c:	f000 fa98 	bl	8005c90 <MQTTPacket_len>
 8005760:	4602      	mov	r2, r0
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4293      	cmp	r3, r2
 8005766:	da03      	bge.n	8005770 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005768:	f06f 0301 	mvn.w	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800576e:	e0c2      	b.n	80058f6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8005774:	7e3b      	ldrb	r3, [r7, #24]
 8005776:	2201      	movs	r2, #1
 8005778:	f362 1307 	bfi	r3, r2, #4, #4
 800577c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800577e:	7e3a      	ldrb	r2, [r7, #24]
 8005780:	f107 031c 	add.w	r3, r7, #28
 8005784:	4611      	mov	r1, r2
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fb11 	bl	8005dae <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	6a39      	ldr	r1, [r7, #32]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fa12 	bl	8005bba <MQTTPacket_encode>
 8005796:	4602      	mov	r2, r0
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	4413      	add	r3, r2
 800579c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	7a1b      	ldrb	r3, [r3, #8]
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d10c      	bne.n	80057c0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80057a6:	f107 031c 	add.w	r3, r7, #28
 80057aa:	4955      	ldr	r1, [pc, #340]	; (8005900 <MQTTSerialize_connect+0x1d0>)
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fb3c 	bl	8005e2a <writeCString>
		writeChar(&ptr, (char) 4);
 80057b2:	f107 031c 	add.w	r3, r7, #28
 80057b6:	2104      	movs	r1, #4
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 faf8 	bl	8005dae <writeChar>
 80057be:	e00b      	b.n	80057d8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80057c0:	f107 031c 	add.w	r3, r7, #28
 80057c4:	494f      	ldr	r1, [pc, #316]	; (8005904 <MQTTSerialize_connect+0x1d4>)
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fb2f 	bl	8005e2a <writeCString>
		writeChar(&ptr, (char) 3);
 80057cc:	f107 031c 	add.w	r3, r7, #28
 80057d0:	2103      	movs	r1, #3
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 faeb 	bl	8005dae <writeChar>
	}

	flags.all = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	7e9b      	ldrb	r3, [r3, #26]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	7d3b      	ldrb	r3, [r7, #20]
 80057e8:	f362 0341 	bfi	r3, r2, #1, #1
 80057ec:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7edb      	ldrb	r3, [r3, #27]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	7d3b      	ldrb	r3, [r7, #20]
 80057fe:	f362 0382 	bfi	r3, r2, #2, #1
 8005802:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8005804:	7d3b      	ldrb	r3, [r7, #20]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	b2da      	uxtb	r2, r3
 800581c:	7d3b      	ldrb	r3, [r7, #20]
 800581e:	f362 03c4 	bfi	r3, r2, #3, #2
 8005822:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	b2da      	uxtb	r2, r3
 8005830:	7d3b      	ldrb	r3, [r7, #20]
 8005832:	f362 1345 	bfi	r3, r2, #5, #1
 8005836:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <MQTTSerialize_connect+0x118>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8005848:	7d3b      	ldrb	r3, [r7, #20]
 800584a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <MQTTSerialize_connect+0x130>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8005860:	7d3b      	ldrb	r3, [r7, #20]
 8005862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005866:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8005868:	7d3a      	ldrb	r2, [r7, #20]
 800586a:	f107 031c 	add.w	r3, r7, #28
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fa9c 	bl	8005dae <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8b1b      	ldrh	r3, [r3, #24]
 800587a:	461a      	mov	r2, r3
 800587c:	f107 031c 	add.w	r3, r7, #28
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f000 faa8 	bl	8005dd8 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f107 001c 	add.w	r0, r7, #28
 800588e:	330c      	adds	r3, #12
 8005890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005892:	f000 fae9 	bl	8005e68 <writeMQTTString>
	if (options->willFlag)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	7edb      	ldrb	r3, [r3, #27]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f107 001c 	add.w	r0, r7, #28
 80058a4:	3324      	adds	r3, #36	; 0x24
 80058a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058a8:	f000 fade 	bl	8005e68 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f107 001c 	add.w	r0, r7, #28
 80058b2:	3330      	adds	r3, #48	; 0x30
 80058b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b6:	f000 fad7 	bl	8005e68 <writeMQTTString>
	}
	if (flags.bits.username)
 80058ba:	7d3b      	ldrb	r3, [r7, #20]
 80058bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f107 001c 	add.w	r0, r7, #28
 80058cc:	3340      	adds	r3, #64	; 0x40
 80058ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058d0:	f000 faca 	bl	8005e68 <writeMQTTString>
	if (flags.bits.password)
 80058d4:	7d3b      	ldrb	r3, [r7, #20]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f107 001c 	add.w	r0, r7, #28
 80058e6:	334c      	adds	r3, #76	; 0x4c
 80058e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ea:	f000 fabd 	bl	8005e68 <writeMQTTString>

	rc = ptr - buf;
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	08012a54 	.word	0x08012a54
 8005904:	08012a5c 	.word	0x08012a5c

08005908 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800592a:	f107 0318 	add.w	r3, r7, #24
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fa29 	bl	8005d86 <readChar>
 8005934:	4603      	mov	r3, r0
 8005936:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8005938:	7f3b      	ldrb	r3, [r7, #28]
 800593a:	f023 030f 	bic.w	r3, r3, #15
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b20      	cmp	r3, #32
 8005942:	d12e      	bne.n	80059a2 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f107 0214 	add.w	r2, r7, #20
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f000 f9e9 	bl	8005d24 <MQTTPacket_decodeBuf>
 8005952:	6278      	str	r0, [r7, #36]	; 0x24
 8005954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	dd1b      	ble.n	80059a6 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800596e:	f107 0318 	add.w	r3, r7, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa07 	bl	8005d86 <readChar>
 8005978:	4603      	mov	r3, r0
 800597a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800597c:	7c3b      	ldrb	r3, [r7, #16]
 800597e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f000 f9f9 	bl	8005d86 <readChar>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800599c:	2301      	movs	r3, #1
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
 80059a0:	e002      	b.n	80059a8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80059a6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3728      	adds	r7, #40	; 0x28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b088      	sub	sp, #32
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80059c0:	2300      	movs	r3, #0
 80059c2:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
 80059c8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	dc03      	bgt.n	80059dc <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80059d4:	f06f 0301 	mvn.w	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80059da:	e01d      	b.n	8005a18 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	7e3b      	ldrb	r3, [r7, #24]
 80059ea:	f362 1307 	bfi	r3, r2, #4, #4
 80059ee:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80059f0:	7e3a      	ldrb	r2, [r7, #24]
 80059f2:	f107 0314 	add.w	r3, r7, #20
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 f9d8 	bl	8005dae <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f8d9 	bl	8005bba <MQTTPacket_encode>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005a18:	69fb      	ldr	r3, [r7, #28]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8005a2c:	220c      	movs	r2, #12
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ffbe 	bl	80059b2 <MQTTSerialize_zero>
 8005a36:	4603      	mov	r3, r0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a54:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005a62:	f107 0318 	add.w	r3, r7, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f98d 	bl	8005d86 <readChar>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8005a70:	7f3b      	ldrb	r3, [r7, #28]
 8005a72:	f023 030f 	bic.w	r3, r3, #15
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d14b      	bne.n	8005b14 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8005a7c:	7f3b      	ldrb	r3, [r7, #28]
 8005a7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8005a8a:	7f3b      	ldrb	r3, [r7, #28]
 8005a8c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8005a98:	7f3b      	ldrb	r3, [r7, #28]
 8005a9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f107 0214 	add.w	r2, r7, #20
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f938 	bl	8005d24 <MQTTPacket_decodeBuf>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	4413      	add	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	4619      	mov	r1, r3
 8005ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ad0:	f000 f9f8 	bl	8005ec4 <readMQTTLenString>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01e      	beq.n	8005b18 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db19      	blt.n	8005b18 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dd08      	ble.n	8005afe <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8005aec:	f107 0318 	add.w	r3, r7, #24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f92d 	bl	8005d50 <readInt>
 8005af6:	4603      	mov	r3, r0
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	6a3a      	ldr	r2, [r7, #32]
 8005b02:	1ad2      	subs	r2, r2, r3
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	601a      	str	r2, [r3, #0]
	rc = 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e002      	b.n	8005b1a <MQTTDeserialize_publish+0xda>
		goto exit;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <MQTTDeserialize_publish+0xda>
		goto exit;
 8005b18:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3728      	adds	r7, #40	; 0x28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005b42:	f107 0318 	add.w	r3, r7, #24
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f91d 	bl	8005d86 <readChar>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8005b50:	7f3b      	ldrb	r3, [r7, #28]
 8005b52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8005b5e:	7f3b      	ldrb	r3, [r7, #28]
 8005b60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f107 0214 	add.w	r2, r7, #20
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f8d5 	bl	8005d24 <MQTTPacket_decodeBuf>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	4413      	add	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	dd0b      	ble.n	8005bae <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8005b96:	f107 0318 	add.w	r3, r7, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f8d8 	bl	8005d50 <readInt>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bac:	e000      	b.n	8005bb0 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8005bae:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	425a      	negs	r2, r3
 8005bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bd4:	bf58      	it	pl
 8005bd6:	4253      	negpl	r3, r2
 8005bd8:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da00      	bge.n	8005be2 <MQTTPacket_encode+0x28>
 8005be0:	337f      	adds	r3, #127	; 0x7f
 8005be2:	11db      	asrs	r3, r3, #7
 8005be4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dd03      	ble.n	8005bf4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8005bec:	7afb      	ldrb	r3, [r7, #11]
 8005bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bf2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	60fa      	str	r2, [r7, #12]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	7afa      	ldrb	r2, [r7, #11]
 8005c02:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dcde      	bgt.n	8005bc8 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8005c22:	2301      	movs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
 8005c34:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	dd03      	ble.n	8005c4a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	60fb      	str	r3, [r7, #12]
			goto exit;
 8005c48:	e01d      	b.n	8005c86 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8005c4a:	f107 020b 	add.w	r2, r7, #11
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2101      	movs	r1, #1
 8005c52:	4610      	mov	r0, r2
 8005c54:	4798      	blx	r3
 8005c56:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d112      	bne.n	8005c84 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	7afb      	ldrb	r3, [r7, #11]
 8005c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c68:	6979      	ldr	r1, [r7, #20]
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	441a      	add	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	01db      	lsls	r3, r3, #7
 8005c78:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	b25b      	sxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dbd6      	blt.n	8005c30 <MQTTPacket_decode+0x18>
exit:
 8005c82:	e000      	b.n	8005c86 <MQTTPacket_decode+0x6e>
			goto exit;
 8005c84:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8005c86:	693b      	ldr	r3, [r7, #16]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca2:	dc03      	bgt.n	8005cac <MQTTPacket_len+0x1c>
		rem_len += 1;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	607b      	str	r3, [r7, #4]
 8005caa:	e012      	b.n	8005cd2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb2:	da03      	bge.n	8005cbc <MQTTPacket_len+0x2c>
		rem_len += 2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	e00a      	b.n	8005cd2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <MQTTPacket_len+0x50>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	dc03      	bgt.n	8005ccc <MQTTPacket_len+0x3c>
		rem_len += 3;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3303      	adds	r3, #3
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	e002      	b.n	8005cd2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	607b      	str	r3, [r7, #4]
	return rem_len;
 8005cd2:	687b      	ldr	r3, [r7, #4]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	001ffffe 	.word	0x001ffffe

08005ce4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	e00a      	b.n	8005d0a <bufchar+0x26>
		*c = *bufptr++;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <bufchar+0x3c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	4909      	ldr	r1, [pc, #36]	; (8005d20 <bufchar+0x3c>)
 8005cfc:	600a      	str	r2, [r1, #0]
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	dbf0      	blt.n	8005cf4 <bufchar+0x10>
	return count;
 8005d12:	683b      	ldr	r3, [r7, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20000180 	.word	0x20000180

08005d24 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8005d2e:	4a06      	ldr	r2, [pc, #24]	; (8005d48 <MQTTPacket_decodeBuf+0x24>)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	4805      	ldr	r0, [pc, #20]	; (8005d4c <MQTTPacket_decodeBuf+0x28>)
 8005d38:	f7ff ff6e 	bl	8005c18 <MQTTPacket_decode>
 8005d3c:	4603      	mov	r3, r0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000180 	.word	0x20000180
 8005d4c:	08005ce5 	.word	0x08005ce5

08005d50 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	3201      	adds	r2, #1
 8005d68:	7812      	ldrb	r2, [r2, #0]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	1c9a      	adds	r2, r3, #2
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
	return len;
 8005d78:	68bb      	ldr	r3, [r7, #8]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
	return c;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da00      	bge.n	8005dea <writeInt+0x12>
 8005de8:	33ff      	adds	r3, #255	; 0xff
 8005dea:	121b      	asrs	r3, r3, #8
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	425a      	negs	r2, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	bf58      	it	pl
 8005e0a:	4253      	negpl	r3, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8005e34:	6838      	ldr	r0, [r7, #0]
 8005e36:	f7fa fa2b 	bl	8000290 <strlen>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ffc9 	bl	8005dd8 <writeInt>
	memcpy(*pptr, string, len);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f00b ffc8 	bl	8011de4 <memcpy>
	*pptr += len;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	441a      	add	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4638      	mov	r0, r7
 8005e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dd12      	ble.n	8005ea2 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff ffa9 	bl	8005dd8 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f00b ffa8 	bl	8011de4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	441a      	add	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8005ea0:	e00c      	b.n	8005ebc <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff ffbc 	bl	8005e2a <writeCString>
}
 8005eb2:	e003      	b.n	8005ebc <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff ff8e 	bl	8005dd8 <writeInt>
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	dd1a      	ble.n	8005f16 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8005ee0:	68b8      	ldr	r0, [r7, #8]
 8005ee2:	f7ff ff35 	bl	8005d50 <readInt>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	6852      	ldr	r2, [r2, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d30c      	bcc.n	8005f16 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	6852      	ldr	r2, [r2, #4]
 8005f0c:	441a      	add	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	601a      	str	r2, [r3, #0]
			rc = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8005f1c:	697b      	ldr	r3, [r7, #20]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b086      	sub	sp, #24
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d006      	beq.n	8005f4a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa f9a6 	bl	8000290 <strlen>
 8005f44:	4603      	mov	r3, r0
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e001      	b.n	8005f4e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	617b      	str	r3, [r7, #20]
	return rc;
 8005f4e:	697b      	ldr	r3, [r7, #20]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
		blen = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fa f987 	bl	8000290 <strlen>
 8005f82:	4603      	mov	r3, r0
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e005      	b.n	8005f94 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8005f94:	6838      	ldr	r0, [r7, #0]
 8005f96:	f7fa f97b 	bl	8000290 <strlen>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d10a      	bne.n	8005fbc <MQTTPacket_equals+0x64>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6938      	ldr	r0, [r7, #16]
 8005fae:	f00b fe26 	bl	8011bfe <strncmp>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <MQTTPacket_equals+0x64>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <MQTTPacket_equals+0x66>
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	4638      	mov	r0, r7
 8005fd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8005fd8:	463b      	mov	r3, r7
 8005fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fde:	f7ff ffa2 	bl	8005f26 <MQTTstrlen>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	1c9a      	adds	r2, r3, #2
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	4413      	add	r3, r2
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dd02      	ble.n	8005ffc <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	617b      	str	r3, [r7, #20]
	return len;
 8005ffc:	697b      	ldr	r3, [r7, #20]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b08a      	sub	sp, #40	; 0x28
 800600a:	af02      	add	r7, sp, #8
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8006026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800602e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006030:	6838      	ldr	r0, [r7, #0]
 8006032:	f7ff ffc8 	bl	8005fc6 <MQTTSerialize_publishLength>
 8006036:	61b8      	str	r0, [r7, #24]
 8006038:	69b8      	ldr	r0, [r7, #24]
 800603a:	f7ff fe29 	bl	8005c90 <MQTTPacket_len>
 800603e:	4602      	mov	r2, r0
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4293      	cmp	r3, r2
 8006044:	da03      	bge.n	800604e <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006046:	f06f 0301 	mvn.w	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800604c:	e04c      	b.n	80060e8 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800604e:	7c3b      	ldrb	r3, [r7, #16]
 8006050:	2203      	movs	r2, #3
 8006052:	f362 1307 	bfi	r3, r2, #4, #4
 8006056:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	b2da      	uxtb	r2, r3
 8006060:	7c3b      	ldrb	r3, [r7, #16]
 8006062:	f362 03c3 	bfi	r3, r2, #3, #1
 8006066:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	b2da      	uxtb	r2, r3
 8006070:	7c3b      	ldrb	r3, [r7, #16]
 8006072:	f362 0342 	bfi	r3, r2, #1, #2
 8006076:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8006078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	b2da      	uxtb	r2, r3
 8006082:	7c3b      	ldrb	r3, [r7, #16]
 8006084:	f362 0300 	bfi	r3, r2, #0, #1
 8006088:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800608a:	7c3a      	ldrb	r2, [r7, #16]
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fe8b 	bl	8005dae <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fd8c 	bl	8005bba <MQTTPacket_encode>
 80060a2:	4602      	mov	r2, r0
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 80060aa:	f107 0014 	add.w	r0, r7, #20
 80060ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060b4:	f7ff fed8 	bl	8005e68 <writeMQTTString>

	if (qos > 0)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dd06      	ble.n	80060cc <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80060be:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fe86 	bl	8005dd8 <writeInt>

	memcpy(ptr, payload, payloadlen);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060d2:	4618      	mov	r0, r3
 80060d4:	f00b fe86 	bl	8011de4 <memcpy>
	ptr += payloadlen;
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	4413      	add	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80060e8:	69fb      	ldr	r3, [r7, #28]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	4611      	mov	r1, r2
 80060fe:	461a      	mov	r2, r3
 8006100:	460b      	mov	r3, r1
 8006102:	71fb      	strb	r3, [r7, #7]
 8006104:	4613      	mov	r3, r2
 8006106:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b03      	cmp	r3, #3
 8006118:	dc03      	bgt.n	8006122 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800611a:	f06f 0301 	mvn.w	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8006120:	e037      	b.n	8006192 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	b2da      	uxtb	r2, r3
 800612a:	7e3b      	ldrb	r3, [r7, #24]
 800612c:	f362 1307 	bfi	r3, r2, #4, #4
 8006130:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8006132:	79bb      	ldrb	r3, [r7, #6]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	7e3b      	ldrb	r3, [r7, #24]
 800613c:	f362 03c3 	bfi	r3, r2, #3, #1
 8006140:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	2b06      	cmp	r3, #6
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	b2da      	uxtb	r2, r3
 8006154:	7e3b      	ldrb	r3, [r7, #24]
 8006156:	f362 0342 	bfi	r3, r2, #1, #2
 800615a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800615c:	7e3a      	ldrb	r2, [r7, #24]
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	4611      	mov	r1, r2
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fe22 	bl	8005dae <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2102      	movs	r1, #2
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fd23 	bl	8005bba <MQTTPacket_encode>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800617c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fe27 	bl	8005dd8 <writeInt>
	rc = ptr - buf;
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006192:	69fb      	ldr	r3, [r7, #28]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80061a6:	2302      	movs	r3, #2
 80061a8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e013      	b.n	80061d8 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4613      	mov	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	461a      	mov	r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061c4:	f7ff feaf 	bl	8005f26 <MQTTstrlen>
 80061c8:	4603      	mov	r3, r0
 80061ca:	3303      	adds	r3, #3
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	4413      	add	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	dbe7      	blt.n	80061b0 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80061e0:	68bb      	ldr	r3, [r7, #8]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	; 0x28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4611      	mov	r1, r2
 80061f6:	461a      	mov	r2, r3
 80061f8:	460b      	mov	r3, r1
 80061fa:	71fb      	strb	r3, [r7, #7]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8006214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006218:	f7ff ffc0 	bl	800619c <MQTTSerialize_subscribeLength>
 800621c:	61f8      	str	r0, [r7, #28]
 800621e:	69f8      	ldr	r0, [r7, #28]
 8006220:	f7ff fd36 	bl	8005c90 <MQTTPacket_len>
 8006224:	4602      	mov	r2, r0
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4293      	cmp	r3, r2
 800622a:	da03      	bge.n	8006234 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800622c:	f06f 0301 	mvn.w	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8006232:	e04f      	b.n	80062d4 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8006238:	7d3b      	ldrb	r3, [r7, #20]
 800623a:	2208      	movs	r2, #8
 800623c:	f362 1307 	bfi	r3, r2, #4, #4
 8006240:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	7d3b      	ldrb	r3, [r7, #20]
 800624c:	f362 03c3 	bfi	r3, r2, #3, #1
 8006250:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8006252:	7d3b      	ldrb	r3, [r7, #20]
 8006254:	2201      	movs	r2, #1
 8006256:	f362 0342 	bfi	r3, r2, #1, #2
 800625a:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800625c:	7d3a      	ldrb	r2, [r7, #20]
 800625e:	f107 0318 	add.w	r3, r7, #24
 8006262:	4611      	mov	r1, r2
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fda2 	bl	8005dae <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fca3 	bl	8005bba <MQTTPacket_encode>
 8006274:	4602      	mov	r2, r0
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4413      	add	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800627c:	88ba      	ldrh	r2, [r7, #4]
 800627e:	f107 0318 	add.w	r3, r7, #24
 8006282:	4611      	mov	r1, r2
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fda7 	bl	8005dd8 <writeInt>

	for (i = 0; i < count; ++i)
 800628a:	2300      	movs	r3, #0
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	e019      	b.n	80062c4 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8006290:	6a3a      	ldr	r2, [r7, #32]
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	461a      	mov	r2, r3
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	4413      	add	r3, r2
 80062a0:	f107 0018 	add.w	r0, r7, #24
 80062a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a6:	f7ff fddf 	bl	8005e68 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ae:	4413      	add	r3, r2
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	f107 0318 	add.w	r3, r7, #24
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fd78 	bl	8005dae <writeChar>
	for (i = 0; i < count; ++i)
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	3301      	adds	r3, #1
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	429a      	cmp	r2, r3
 80062ca:	dbe1      	blt.n	8006290 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b08a      	sub	sp, #40	; 0x28
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80062fc:	f107 0318 	add.w	r3, r7, #24
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fd40 	bl	8005d86 <readChar>
 8006306:	4603      	mov	r3, r0
 8006308:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800630a:	7f3b      	ldrb	r3, [r7, #28]
 800630c:	f023 030f 	bic.w	r3, r3, #15
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b90      	cmp	r3, #144	; 0x90
 8006314:	d142      	bne.n	800639c <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f107 0214 	add.w	r2, r7, #20
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fd00 	bl	8005d24 <MQTTPacket_decodeBuf>
 8006324:	6278      	str	r0, [r7, #36]	; 0x24
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	4413      	add	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	dd2f      	ble.n	80063a0 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8006340:	f107 0318 	add.w	r3, r7, #24
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fd03 	bl	8005d50 <readInt>
 800634a:	4603      	mov	r3, r0
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8006358:	e019      	b.n	800638e <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	429a      	cmp	r2, r3
 8006362:	da03      	bge.n	800636c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800636a:	e01a      	b.n	80063a2 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800636c:	f107 0318 	add.w	r3, r7, #24
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fd08 	bl	8005d86 <readChar>
 8006376:	4603      	mov	r3, r0
 8006378:	4618      	mov	r0, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6011      	str	r1, [r2, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	4413      	add	r3, r2
 800638a:	4602      	mov	r2, r0
 800638c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	429a      	cmp	r2, r3
 8006394:	d8e1      	bhi.n	800635a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8006396:	2301      	movs	r3, #1
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
 800639a:	e002      	b.n	80063a2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800639c:	bf00      	nop
 800639e:	e000      	b.n	80063a2 <MQTTDeserialize_suback+0xc4>
		goto exit;
 80063a0:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	; 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <a_mpu6050_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6050_iic_read(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	461a      	mov	r2, r3
 80063b8:	460b      	mov	r3, r1
 80063ba:	72fb      	strb	r3, [r7, #11]
 80063bc:	4613      	mov	r3, r2
 80063be:	813b      	strh	r3, [r7, #8]
    if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68dc      	ldr	r4, [r3, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	7818      	ldrb	r0, [r3, #0]
 80063c8:	893b      	ldrh	r3, [r7, #8]
 80063ca:	7af9      	ldrb	r1, [r7, #11]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	47a0      	blx	r4
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <a_mpu6050_iic_read+0x2e>
    {
        return 1;                                                                 /* return error */
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <a_mpu6050_iic_read+0x30>
    }
    else
    {
        return 0;                                                                 /* success return 0 */
 80063da:	2300      	movs	r3, #0
    }
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd90      	pop	{r4, r7, pc}

080063e4 <a_mpu6050_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6050_iic_write(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	461a      	mov	r2, r3
 80063f0:	460b      	mov	r3, r1
 80063f2:	72fb      	strb	r3, [r7, #11]
 80063f4:	4613      	mov	r3, r2
 80063f6:	813b      	strh	r3, [r7, #8]
    if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	691c      	ldr	r4, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	7818      	ldrb	r0, [r3, #0]
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	7af9      	ldrb	r1, [r7, #11]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	47a0      	blx	r4
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <a_mpu6050_iic_write+0x2e>
    {
        return 1;                                                                  /* return error */
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <a_mpu6050_iic_write+0x30>
    }
    else
    {
        return 0;                                                                  /* success return 0 */
 8006412:	2300      	movs	r3, #0
    }
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <mpu6050_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6050_set_addr_pin(mpu6050_handle_t *handle, mpu6050_address_t addr_pin)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <mpu6050_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800642e:	2302      	movs	r3, #2
 8006430:	e003      	b.n	800643a <mpu6050_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	78fa      	ldrb	r2, [r7, #3]
 8006436:	701a      	strb	r2, [r3, #0]

    return 0;                                    /* success return 0 */
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <mpu6050_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6050_init(mpu6050_handle_t *handle)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;

    if (handle == NULL)                                                             /* check handle */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <mpu6050_init+0x12>
    {
        return 2;                                                                   /* return error */
 8006456:	2302      	movs	r3, #2
 8006458:	e0bc      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <mpu6050_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8006462:	2303      	movs	r3, #3
 8006464:	e0b6      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <mpu6050_init+0x32>
    {
        handle->debug_print("mpu6050: iic_init is null.\n");                        /* iic_init is null */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	485a      	ldr	r0, [pc, #360]	; (80065dc <mpu6050_init+0x194>)
 8006474:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8006476:	2303      	movs	r3, #3
 8006478:	e0ac      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <mpu6050_init+0x46>
    {
        handle->debug_print("mpu6050: iic_deinit is null.\n");                      /* iic_deinit is null */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	4856      	ldr	r0, [pc, #344]	; (80065e0 <mpu6050_init+0x198>)
 8006488:	4798      	blx	r3

        return 3;                                                                   /* return error */
 800648a:	2303      	movs	r3, #3
 800648c:	e0a2      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d105      	bne.n	80064a2 <mpu6050_init+0x5a>
    {
        handle->debug_print("mpu6050: iic_read is null.\n");                        /* iic_read is null */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	4852      	ldr	r0, [pc, #328]	; (80065e4 <mpu6050_init+0x19c>)
 800649c:	4798      	blx	r3

        return 3;                                                                   /* return error */
 800649e:	2303      	movs	r3, #3
 80064a0:	e098      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d105      	bne.n	80064b6 <mpu6050_init+0x6e>
    {
        handle->debug_print("mpu6050: iic_write is null.\n");                       /* iic_write is null */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	484e      	ldr	r0, [pc, #312]	; (80065e8 <mpu6050_init+0x1a0>)
 80064b0:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064b2:	2303      	movs	r3, #3
 80064b4:	e08e      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <mpu6050_init+0x82>
    {
        handle->debug_print("mpu6050: delay_ms is null.\n");                        /* delay_ms is null */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	484a      	ldr	r0, [pc, #296]	; (80065ec <mpu6050_init+0x1a4>)
 80064c4:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064c6:	2303      	movs	r3, #3
 80064c8:	e084      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <mpu6050_init+0x96>
    {
        handle->debug_print("mpu6050: receive_callback is null.\n");                /* receive_callback is null */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	4846      	ldr	r0, [pc, #280]	; (80065f0 <mpu6050_init+0x1a8>)
 80064d8:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064da:	2303      	movs	r3, #3
 80064dc:	e07a      	b.n	80065d4 <mpu6050_init+0x18c>
    }

    res = handle->iic_init();                                                       /* iic init */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4798      	blx	r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 80064e8:	7afb      	ldrb	r3, [r7, #11]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <mpu6050_init+0xb2>
    {
        handle->debug_print("mpu6050: iic init failed.\n");                         /* iic init failed */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	4840      	ldr	r0, [pc, #256]	; (80065f4 <mpu6050_init+0x1ac>)
 80064f4:	4798      	blx	r3

        return 1;                                                                   /* return error */
 80064f6:	2301      	movs	r3, #1
 80064f8:	e06c      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_WHO_AM_I, &prev, 1);               /* read who am I */
 80064fa:	f107 020a 	add.w	r2, r7, #10
 80064fe:	2301      	movs	r3, #1
 8006500:	2175      	movs	r1, #117	; 0x75
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff ff52 	bl	80063ac <a_mpu6050_iic_read>
 8006508:	4603      	mov	r3, r0
 800650a:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <mpu6050_init+0xdc>
    {
        handle->debug_print("mpu6050: read who am i failed.\n");                    /* read who am I failed */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	4838      	ldr	r0, [pc, #224]	; (80065f8 <mpu6050_init+0x1b0>)
 8006518:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8006520:	2305      	movs	r3, #5
 8006522:	e057      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    if (prev != 0x68)                                                               /* check the id */
 8006524:	7abb      	ldrb	r3, [r7, #10]
 8006526:	2b68      	cmp	r3, #104	; 0x68
 8006528:	d008      	beq.n	800653c <mpu6050_init+0xf4>
    {
        handle->debug_print("mpu6050: id is invalid.\n");                           /* id is invalid */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	4833      	ldr	r0, [pc, #204]	; (80065fc <mpu6050_init+0x1b4>)
 8006530:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8006538:	2305      	movs	r3, #5
 800653a:	e04b      	b.n	80065d4 <mpu6050_init+0x18c>
    }

    prev = 1 << 7;                                                                  /* reset the device */
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8006540:	f107 020a 	add.w	r2, r7, #10
 8006544:	2301      	movs	r3, #1
 8006546:	216b      	movs	r1, #107	; 0x6b
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff4b 	bl	80063e4 <a_mpu6050_iic_write>
 800654e:	4603      	mov	r3, r0
 8006550:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <mpu6050_init+0x122>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	4828      	ldr	r0, [pc, #160]	; (8006600 <mpu6050_init+0x1b8>)
 800655e:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8006566:	2304      	movs	r3, #4
 8006568:	e034      	b.n	80065d4 <mpu6050_init+0x18c>
    }
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 800656a:	2364      	movs	r3, #100	; 0x64
 800656c:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 800656e:	e029      	b.n	80065c4 <mpu6050_init+0x17c>
    {
        res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);         /* read pwr mgmt 1 */
 8006570:	f107 020a 	add.w	r2, r7, #10
 8006574:	2301      	movs	r3, #1
 8006576:	216b      	movs	r1, #107	; 0x6b
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ff17 	bl	80063ac <a_mpu6050_iic_read>
 800657e:	4603      	mov	r3, r0
 8006580:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <mpu6050_init+0x152>
        {
            handle->debug_print("mpu6050: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	481d      	ldr	r0, [pc, #116]	; (8006604 <mpu6050_init+0x1bc>)
 800658e:	4798      	blx	r3
            (void)handle->iic_deinit();                                             /* iic deinit */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4798      	blx	r3

            return 4;                                                               /* return error */
 8006596:	2304      	movs	r3, #4
 8006598:	e01c      	b.n	80065d4 <mpu6050_init+0x18c>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 800659a:	7abb      	ldrb	r3, [r7, #10]
 800659c:	b25b      	sxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	db09      	blt.n	80065b6 <mpu6050_init+0x16e>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            handle->dmp_inited = 0;                                                 /* flag closed */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            return 0;                                                               /* success return 0 */
 80065b2:	2300      	movs	r3, #0
 80065b4:	e00e      	b.n	80065d4 <mpu6050_init+0x18c>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	200a      	movs	r0, #10
 80065bc:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1d2      	bne.n	8006570 <mpu6050_init+0x128>
    }

    handle->debug_print("mpu6050: reset failed.\n");                                /* reset failed */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	480e      	ldr	r0, [pc, #56]	; (8006608 <mpu6050_init+0x1c0>)
 80065d0:	4798      	blx	r3

    return 4;                                                                       /* return error */
 80065d2:	2304      	movs	r3, #4
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	08012e80 	.word	0x08012e80
 80065e0:	08012e9c 	.word	0x08012e9c
 80065e4:	08012ebc 	.word	0x08012ebc
 80065e8:	08012ed8 	.word	0x08012ed8
 80065ec:	08012ef8 	.word	0x08012ef8
 80065f0:	08012f14 	.word	0x08012f14
 80065f4:	08012f38 	.word	0x08012f38
 80065f8:	08012f54 	.word	0x08012f54
 80065fc:	08012f74 	.word	0x08012f74
 8006600:	08012f90 	.word	0x08012f90
 8006604:	08012fb4 	.word	0x08012fb4
 8006608:	08012fd8 	.word	0x08012fd8

0800660c <mpu6050_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6050_deinit(mpu6050_handle_t *handle)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                             /* check handle */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <mpu6050_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 800661a:	2302      	movs	r3, #2
 800661c:	e031      	b.n	8006682 <mpu6050_deinit+0x76>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006624:	2b01      	cmp	r3, #1
 8006626:	d001      	beq.n	800662c <mpu6050_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 8006628:	2303      	movs	r3, #3
 800662a:	e02a      	b.n	8006682 <mpu6050_deinit+0x76>
    }

    prev = (1 << 6) | (1 << 3) | (7 << 0);                                          /* enter sleep mode */
 800662c:	234f      	movs	r3, #79	; 0x4f
 800662e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8006630:	f107 020e 	add.w	r2, r7, #14
 8006634:	2301      	movs	r3, #1
 8006636:	216b      	movs	r1, #107	; 0x6b
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fed3 	bl	80063e4 <a_mpu6050_iic_write>
 800663e:	4603      	mov	r3, r0
 8006640:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <mpu6050_deinit+0x48>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	480f      	ldr	r0, [pc, #60]	; (800668c <mpu6050_deinit+0x80>)
 800664e:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8006650:	2304      	movs	r3, #4
 8006652:	e016      	b.n	8006682 <mpu6050_deinit+0x76>
    }
    res = handle->iic_deinit();                                                     /* iic deinit */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	4798      	blx	r3
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <mpu6050_deinit+0x64>
    {
        handle->debug_print("mpu6050: iic deinit failed.\n");                       /* iic deinit failed */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	4809      	ldr	r0, [pc, #36]	; (8006690 <mpu6050_deinit+0x84>)
 800666a:	4798      	blx	r3

        return 1;                                                                   /* return error */
 800666c:	2301      	movs	r3, #1
 800666e:	e008      	b.n	8006682 <mpu6050_deinit+0x76>
    }
    handle->inited = 0;                                                             /* flag closed */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    handle->dmp_inited = 0;                                                         /* flag closed */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    return 0;                                                                       /* success return 0 */
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	08012f90 	.word	0x08012f90
 8006690:	08012ff0 	.word	0x08012ff0

08006694 <mpu6050_read>:
 *                - 6 fifo conf is error
 * @note          none
 */
uint8_t mpu6050_read(mpu6050_handle_t *handle, int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3], uint16_t *len)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;

    if (handle == NULL)                                                                            /* check handle */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <mpu6050_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 80066a8:	2302      	movs	r3, #2
 80066aa:	f000 be7c 	b.w	80073a6 <mpu6050_read+0xd12>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d002      	beq.n	80066be <mpu6050_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 80066b8:	2303      	movs	r3, #3
 80066ba:	f000 be74 	b.w	80073a6 <mpu6050_read+0xd12>
    }
    if ((*len) == 0)                                                                               /* check length */
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <mpu6050_read+0x40>
    {
        handle->debug_print("mpu6050: length is zero.\n");                                         /* length is zero */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	486a      	ldr	r0, [pc, #424]	; (8006874 <mpu6050_read+0x1e0>)
 80066cc:	4798      	blx	r3

        return 4;                                                                                  /* return error */
 80066ce:	2304      	movs	r3, #4
 80066d0:	f000 be69 	b.w	80073a6 <mpu6050_read+0xd12>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d006      	beq.n	80066ec <mpu6050_read+0x58>
    {
        handle->debug_print("mpu6050: dmp is running.\n");                                         /* dmp is running */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	4865      	ldr	r0, [pc, #404]	; (8006878 <mpu6050_read+0x1e4>)
 80066e4:	4798      	blx	r3

        return 5;                                                                                  /* return error */
 80066e6:	2305      	movs	r3, #5
 80066e8:	f000 be5d 	b.w	80073a6 <mpu6050_read+0xd12>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);                  /* read config */
 80066ec:	f107 0219 	add.w	r2, r7, #25
 80066f0:	2301      	movs	r3, #1
 80066f2:	216a      	movs	r1, #106	; 0x6a
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff fe59 	bl	80063ac <a_mpu6050_iic_read>
 80066fa:	4603      	mov	r3, r0
 80066fc:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80066fe:	7f7b      	ldrb	r3, [r7, #29]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d006      	beq.n	8006712 <mpu6050_read+0x7e>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	485c      	ldr	r0, [pc, #368]	; (800687c <mpu6050_read+0x1e8>)
 800670a:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 800670c:	2301      	movs	r3, #1
 800670e:	f000 be4a 	b.w	80073a6 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);         /* read accel config */
 8006712:	f107 0218 	add.w	r2, r7, #24
 8006716:	2301      	movs	r3, #1
 8006718:	211c      	movs	r1, #28
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f7ff fe46 	bl	80063ac <a_mpu6050_iic_read>
 8006720:	4603      	mov	r3, r0
 8006722:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006724:	7f7b      	ldrb	r3, [r7, #29]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d006      	beq.n	8006738 <mpu6050_read+0xa4>
    {
        handle->debug_print("mpu6050: read accel config failed.\n");                               /* read accel config failed */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	4854      	ldr	r0, [pc, #336]	; (8006880 <mpu6050_read+0x1ec>)
 8006730:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8006732:	2301      	movs	r3, #1
 8006734:	f000 be37 	b.w	80073a6 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);           /* read gyro config */
 8006738:	f107 0217 	add.w	r2, r7, #23
 800673c:	2301      	movs	r3, #1
 800673e:	211b      	movs	r1, #27
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff fe33 	bl	80063ac <a_mpu6050_iic_read>
 8006746:	4603      	mov	r3, r0
 8006748:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800674a:	7f7b      	ldrb	r3, [r7, #29]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <mpu6050_read+0xca>
    {
        handle->debug_print("mpu6050: read gyro config failed.\n");                                /* read gyro config failed */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	484b      	ldr	r0, [pc, #300]	; (8006884 <mpu6050_read+0x1f0>)
 8006756:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8006758:	2301      	movs	r3, #1
 800675a:	f000 be24 	b.w	80073a6 <mpu6050_read+0xd12>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 800675e:	7e3b      	ldrb	r3, [r7, #24]
 8006760:	08db      	lsrs	r3, r3, #3
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	b2db      	uxtb	r3, r3
 800676a:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	08db      	lsrs	r3, r3, #3
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	b2db      	uxtb	r3, r3
 8006778:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 800677a:	7e7b      	ldrb	r3, [r7, #25]
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8430 	beq.w	8006fe6 <mpu6050_read+0x952>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&conf, 1);                /* read fifo enable */
 8006786:	f107 0216 	add.w	r2, r7, #22
 800678a:	2301      	movs	r3, #1
 800678c:	2123      	movs	r1, #35	; 0x23
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fe0c 	bl	80063ac <a_mpu6050_iic_read>
 8006794:	4603      	mov	r3, r0
 8006796:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006798:	7f7b      	ldrb	r3, [r7, #29]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d006      	beq.n	80067ac <mpu6050_read+0x118>
        {
            handle->debug_print("mpu6050: read fifo enable failed.\n");                            /* read fifo enable failed */
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	4839      	ldr	r0, [pc, #228]	; (8006888 <mpu6050_read+0x1f4>)
 80067a4:	4798      	blx	r3

            return 1;                                                                              /* return error */
 80067a6:	2301      	movs	r3, #1
 80067a8:	f000 bdfd 	b.w	80073a6 <mpu6050_read+0xd12>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 80067ac:	7dbb      	ldrb	r3, [r7, #22]
 80067ae:	2b78      	cmp	r3, #120	; 0x78
 80067b0:	d006      	beq.n	80067c0 <mpu6050_read+0x12c>
        {
            handle->debug_print("mpu6050: fifo conf is error.\n");                                 /* fifo conf is error */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	4835      	ldr	r0, [pc, #212]	; (800688c <mpu6050_read+0x1f8>)
 80067b8:	4798      	blx	r3

            return 6;                                                                              /* return error */
 80067ba:	2306      	movs	r3, #6
 80067bc:	f000 bdf3 	b.w	80073a6 <mpu6050_read+0xd12>
        }

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_COUNTH, (uint8_t *)buf, 2);              /* read fifo count */
 80067c0:	f107 0214 	add.w	r2, r7, #20
 80067c4:	2302      	movs	r3, #2
 80067c6:	2172      	movs	r1, #114	; 0x72
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff fdef 	bl	80063ac <a_mpu6050_iic_read>
 80067ce:	4603      	mov	r3, r0
 80067d0:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80067d2:	7f7b      	ldrb	r3, [r7, #29]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d006      	beq.n	80067e6 <mpu6050_read+0x152>
        {
            handle->debug_print("mpu6050: read fifo count failed.\n");                             /* read fifo count failed */
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	482c      	ldr	r0, [pc, #176]	; (8006890 <mpu6050_read+0x1fc>)
 80067de:	4798      	blx	r3

            return 1;                                                                              /* return error */
 80067e0:	2301      	movs	r3, #1
 80067e2:	f000 bde0 	b.w	80073a6 <mpu6050_read+0xd12>
        }
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 80067e6:	7d3b      	ldrb	r3, [r7, #20]
 80067e8:	021b      	lsls	r3, r3, #8
 80067ea:	b21a      	sxth	r2, r3
 80067ec:	7d7b      	ldrb	r3, [r7, #21]
 80067ee:	b21b      	sxth	r3, r3
 80067f0:	4313      	orrs	r3, r2
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 80067f6:	8b7b      	ldrh	r3, [r7, #26]
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fc:	bf28      	it	cs
 80067fe:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8006802:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	4613      	mov	r3, r2
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	461a      	mov	r2, r3
 8006814:	8b7b      	ldrh	r3, [r7, #26]
 8006816:	4293      	cmp	r3, r2
 8006818:	bfa8      	it	ge
 800681a:	4613      	movge	r3, r2
 800681c:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 800681e:	8b7b      	ldrh	r3, [r7, #26]
 8006820:	4a1c      	ldr	r2, [pc, #112]	; (8006894 <mpu6050_read+0x200>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	08db      	lsrs	r3, r3, #3
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	0052      	lsls	r2, r2, #1
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8006834:	8b7b      	ldrh	r3, [r7, #26]
 8006836:	4a17      	ldr	r2, [pc, #92]	; (8006894 <mpu6050_read+0x200>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	08db      	lsrs	r3, r3, #3
 800683e:	b29a      	uxth	r2, r3
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_R_W, handle->buf, count);                     /* read data */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800684a:	8b7b      	ldrh	r3, [r7, #26]
 800684c:	2174      	movs	r1, #116	; 0x74
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f7ff fdac 	bl	80063ac <a_mpu6050_iic_read>
 8006854:	4603      	mov	r3, r0
 8006856:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006858:	7f7b      	ldrb	r3, [r7, #29]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <mpu6050_read+0x1d8>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	480d      	ldr	r0, [pc, #52]	; (8006898 <mpu6050_read+0x204>)
 8006864:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8006866:	2301      	movs	r3, #1
 8006868:	f000 bd9d 	b.w	80073a6 <mpu6050_read+0xd12>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 800686c:	2300      	movs	r3, #0
 800686e:	83fb      	strh	r3, [r7, #30]
 8006870:	e3b1      	b.n	8006fd6 <mpu6050_read+0x942>
 8006872:	bf00      	nop
 8006874:	08013010 	.word	0x08013010
 8006878:	08012b70 	.word	0x08012b70
 800687c:	08012e38 	.word	0x08012e38
 8006880:	08012df0 	.word	0x08012df0
 8006884:	08012e14 	.word	0x08012e14
 8006888:	0801302c 	.word	0x0801302c
 800688c:	08013050 	.word	0x08013050
 8006890:	08012d74 	.word	0x08012d74
 8006894:	aaaaaaab 	.word	0xaaaaaaab
 8006898:	08012d98 	.word	0x08012d98
 800689c:	46800000 	.word	0x46800000
 80068a0:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80068a4:	8bfa      	ldrh	r2, [r7, #30]
 80068a6:	4613      	mov	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 80068bc:	8bfa      	ldrh	r2, [r7, #30]
 80068be:	4613      	mov	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	3301      	adds	r3, #1
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068d0:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80068d2:	8bfa      	ldrh	r2, [r7, #30]
 80068d4:	4613      	mov	r3, r2
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	4413      	add	r3, r2
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	461a      	mov	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	ea40 0201 	orr.w	r2, r0, r1
 80068e6:	b212      	sxth	r2, r2
 80068e8:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 80068ea:	8bfa      	ldrh	r2, [r7, #30]
 80068ec:	4613      	mov	r3, r2
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	3302      	adds	r3, #2
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8006902:	8bfa      	ldrh	r2, [r7, #30]
 8006904:	4613      	mov	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	3303      	adds	r3, #3
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006916:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 8006918:	8bfa      	ldrh	r2, [r7, #30]
 800691a:	4613      	mov	r3, r2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	4413      	add	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	461a      	mov	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	ea40 0201 	orr.w	r2, r0, r1
 800692c:	b212      	sxth	r2, r2
 800692e:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 8006930:	8bfa      	ldrh	r2, [r7, #30]
 8006932:	4613      	mov	r3, r2
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	3304      	adds	r3, #4
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8006948:	8bfa      	ldrh	r2, [r7, #30]
 800694a:	4613      	mov	r3, r2
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	3305      	adds	r3, #5
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800695c:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 800695e:	8bfa      	ldrh	r2, [r7, #30]
 8006960:	4613      	mov	r3, r2
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	4413      	add	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	461a      	mov	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	ea40 0201 	orr.w	r2, r0, r1
 8006972:	b212      	sxth	r2, r2
 8006974:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 8006976:	8bfa      	ldrh	r2, [r7, #30]
 8006978:	4613      	mov	r3, r2
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	3306      	adds	r3, #6
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 800698e:	8bfa      	ldrh	r2, [r7, #30]
 8006990:	4613      	mov	r3, r2
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	3307      	adds	r3, #7
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069a2:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 80069a4:	8bfa      	ldrh	r2, [r7, #30]
 80069a6:	4613      	mov	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	461a      	mov	r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4413      	add	r3, r2
 80069b4:	ea40 0201 	orr.w	r2, r0, r1
 80069b8:	b212      	sxth	r2, r2
 80069ba:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 80069bc:	8bfa      	ldrh	r2, [r7, #30]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	3308      	adds	r3, #8
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 80069d4:	8bfa      	ldrh	r2, [r7, #30]
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	3309      	adds	r3, #9
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069e8:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 80069ea:	8bfa      	ldrh	r2, [r7, #30]
 80069ec:	4613      	mov	r3, r2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	461a      	mov	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4413      	add	r3, r2
 80069fa:	ea40 0201 	orr.w	r2, r0, r1
 80069fe:	b212      	sxth	r2, r2
 8006a00:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8006a02:	8bfa      	ldrh	r2, [r7, #30]
 8006a04:	4613      	mov	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	330a      	adds	r3, #10
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8006a1a:	8bfa      	ldrh	r2, [r7, #30]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	330b      	adds	r3, #11
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a2e:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8006a30:	8bfa      	ldrh	r2, [r7, #30]
 8006a32:	4613      	mov	r3, r2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4413      	add	r3, r2
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	ea40 0201 	orr.w	r2, r0, r1
 8006a44:	b212      	sxth	r2, r2
 8006a46:	809a      	strh	r2, [r3, #4]

            if (accel_conf == 0)                                                                   /* ±2g */
 8006a48:	7e3b      	ldrb	r3, [r7, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d154      	bne.n	8006af8 <mpu6050_read+0x464>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8006a4e:	8bfa      	ldrh	r2, [r7, #30]
 8006a50:	4613      	mov	r3, r2
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a6a:	8bfa      	ldrh	r2, [r7, #30]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	ed5f 6a78 	vldr	s13, [pc, #-480]	; 800689c <mpu6050_read+0x208>
 8006a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a82:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8006a86:	8bfa      	ldrh	r2, [r7, #30]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4413      	add	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa2:	8bfa      	ldrh	r2, [r7, #30]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	ed5f 6a86 	vldr	s13, [pc, #-536]	; 800689c <mpu6050_read+0x208>
 8006ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aba:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8006abe:	8bfa      	ldrh	r2, [r7, #30]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4413      	add	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ada:	8bfa      	ldrh	r2, [r7, #30]
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4413      	add	r3, r2
 8006aea:	ed5f 6a94 	vldr	s13, [pc, #-592]	; 800689c <mpu6050_read+0x208>
 8006aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006af2:	edc3 7a02 	vstr	s15, [r3, #8]
 8006af6:	e103      	b.n	8006d00 <mpu6050_read+0x66c>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8006af8:	7e3b      	ldrb	r3, [r7, #24]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d154      	bne.n	8006ba8 <mpu6050_read+0x514>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8006afe:	8bfa      	ldrh	r2, [r7, #30]
 8006b00:	4613      	mov	r3, r2
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	4413      	add	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b1a:	8bfa      	ldrh	r2, [r7, #30]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 80068a0 <mpu6050_read+0x20c>
 8006b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b32:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8006b36:	8bfa      	ldrh	r2, [r7, #30]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	461a      	mov	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	4413      	add	r3, r2
 8006b46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b52:	8bfa      	ldrh	r2, [r7, #30]
 8006b54:	4613      	mov	r3, r2
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	ed5f 6ab1 	vldr	s13, [pc, #-708]	; 80068a0 <mpu6050_read+0x20c>
 8006b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b6a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8006b6e:	8bfa      	ldrh	r2, [r7, #30]
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b8a:	8bfa      	ldrh	r2, [r7, #30]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	4413      	add	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	ed5f 6abf 	vldr	s13, [pc, #-764]	; 80068a0 <mpu6050_read+0x20c>
 8006b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ba2:	edc3 7a02 	vstr	s15, [r3, #8]
 8006ba6:	e0ab      	b.n	8006d00 <mpu6050_read+0x66c>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8006ba8:	7e3b      	ldrb	r3, [r7, #24]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d154      	bne.n	8006c58 <mpu6050_read+0x5c4>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8006bae:	8bfa      	ldrh	r2, [r7, #30]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bca:	8bfa      	ldrh	r2, [r7, #30]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	eddf 6acd 	vldr	s13, [pc, #820]	; 8006f10 <mpu6050_read+0x87c>
 8006bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006be2:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8006be6:	8bfa      	ldrh	r2, [r7, #30]
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c02:	8bfa      	ldrh	r2, [r7, #30]
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	eddf 6abf 	vldr	s13, [pc, #764]	; 8006f10 <mpu6050_read+0x87c>
 8006c16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c1a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8006c1e:	8bfa      	ldrh	r2, [r7, #30]
 8006c20:	4613      	mov	r3, r2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c3a:	8bfa      	ldrh	r2, [r7, #30]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8006f10 <mpu6050_read+0x87c>
 8006c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c52:	edc3 7a02 	vstr	s15, [r3, #8]
 8006c56:	e053      	b.n	8006d00 <mpu6050_read+0x66c>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8006c58:	8bfa      	ldrh	r2, [r7, #30]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4413      	add	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	461a      	mov	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4413      	add	r3, r2
 8006c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c6c:	ee07 3a90 	vmov	s15, r3
 8006c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c74:	8bfa      	ldrh	r2, [r7, #30]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8006f14 <mpu6050_read+0x880>
 8006c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c8c:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8006c90:	8bfa      	ldrh	r2, [r7, #30]
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cac:	8bfa      	ldrh	r2, [r7, #30]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	eddf 6a95 	vldr	s13, [pc, #596]	; 8006f14 <mpu6050_read+0x880>
 8006cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cc4:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8006cc8:	8bfa      	ldrh	r2, [r7, #30]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4413      	add	r3, r2
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ce4:	8bfa      	ldrh	r2, [r7, #30]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	eddf 6a87 	vldr	s13, [pc, #540]	; 8006f14 <mpu6050_read+0x880>
 8006cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cfc:	edc3 7a02 	vstr	s15, [r3, #8]
            }

            if (gyro_conf == 0)                                                                    /* ±250dps */
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d154      	bne.n	8006db0 <mpu6050_read+0x71c>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8006d06:	8bfa      	ldrh	r2, [r7, #30]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	4413      	add	r3, r2
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	461a      	mov	r2, r3
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d22:	8bfa      	ldrh	r2, [r7, #30]
 8006d24:	4613      	mov	r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	4413      	add	r3, r2
 8006d32:	eddf 6a79 	vldr	s13, [pc, #484]	; 8006f18 <mpu6050_read+0x884>
 8006d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d3a:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8006d3e:	8bfa      	ldrh	r2, [r7, #30]
 8006d40:	4613      	mov	r3, r2
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	4413      	add	r3, r2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	461a      	mov	r2, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d5a:	8bfa      	ldrh	r2, [r7, #30]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	461a      	mov	r2, r3
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	4413      	add	r3, r2
 8006d6a:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006f18 <mpu6050_read+0x884>
 8006d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d72:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8006d76:	8bfa      	ldrh	r2, [r7, #30]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	461a      	mov	r2, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	4413      	add	r3, r2
 8006d86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d92:	8bfa      	ldrh	r2, [r7, #30]
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	4413      	add	r3, r2
 8006da2:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8006f18 <mpu6050_read+0x884>
 8006da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006daa:	edc3 7a02 	vstr	s15, [r3, #8]
 8006dae:	e10f      	b.n	8006fd0 <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d154      	bne.n	8006e60 <mpu6050_read+0x7cc>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8006db6:	8bfa      	ldrh	r2, [r7, #30]
 8006db8:	4613      	mov	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dd2:	8bfa      	ldrh	r2, [r7, #30]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	4413      	add	r3, r2
 8006de2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f1c <mpu6050_read+0x888>
 8006de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dea:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8006dee:	8bfa      	ldrh	r2, [r7, #30]
 8006df0:	4613      	mov	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	461a      	mov	r2, r3
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e0a:	8bfa      	ldrh	r2, [r7, #30]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	461a      	mov	r2, r3
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	4413      	add	r3, r2
 8006e1a:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006f1c <mpu6050_read+0x888>
 8006e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e22:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8006e26:	8bfa      	ldrh	r2, [r7, #30]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	461a      	mov	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e42:	8bfa      	ldrh	r2, [r7, #30]
 8006e44:	4613      	mov	r3, r2
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	4413      	add	r3, r2
 8006e52:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006f1c <mpu6050_read+0x888>
 8006e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e5a:	edc3 7a02 	vstr	s15, [r3, #8]
 8006e5e:	e0b7      	b.n	8006fd0 <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d160      	bne.n	8006f28 <mpu6050_read+0x894>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8006e66:	8bfa      	ldrh	r2, [r7, #30]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	4413      	add	r3, r2
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	461a      	mov	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e82:	8bfa      	ldrh	r2, [r7, #30]
 8006e84:	4613      	mov	r3, r2
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	4413      	add	r3, r2
 8006e92:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006f20 <mpu6050_read+0x88c>
 8006e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e9a:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8006e9e:	8bfa      	ldrh	r2, [r7, #30]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	4413      	add	r3, r2
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	4413      	add	r3, r2
 8006eae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eba:	8bfa      	ldrh	r2, [r7, #30]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	4413      	add	r3, r2
 8006eca:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006f20 <mpu6050_read+0x88c>
 8006ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ed2:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8006ed6:	8bfa      	ldrh	r2, [r7, #30]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	4413      	add	r3, r2
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ef2:	8bfa      	ldrh	r2, [r7, #30]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	461a      	mov	r2, r3
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	4413      	add	r3, r2
 8006f02:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006f20 <mpu6050_read+0x88c>
 8006f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f0a:	edc3 7a02 	vstr	s15, [r3, #8]
 8006f0e:	e05f      	b.n	8006fd0 <mpu6050_read+0x93c>
 8006f10:	45800000 	.word	0x45800000
 8006f14:	45000000 	.word	0x45000000
 8006f18:	43030000 	.word	0x43030000
 8006f1c:	42830000 	.word	0x42830000
 8006f20:	42033333 	.word	0x42033333
 8006f24:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8006f28:	8bfa      	ldrh	r2, [r7, #30]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	4413      	add	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	461a      	mov	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4413      	add	r3, r2
 8006f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f44:	8bfa      	ldrh	r2, [r7, #30]
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	4413      	add	r3, r2
 8006f54:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8006f24 <mpu6050_read+0x890>
 8006f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f5c:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8006f60:	8bfa      	ldrh	r2, [r7, #30]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f7c:	8bfa      	ldrh	r2, [r7, #30]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	461a      	mov	r2, r3
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	4413      	add	r3, r2
 8006f8c:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 8006f24 <mpu6050_read+0x890>
 8006f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f94:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 8006f98:	8bfa      	ldrh	r2, [r7, #30]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fb4:	8bfa      	ldrh	r2, [r7, #30]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	4413      	add	r3, r2
 8006fc4:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8006f24 <mpu6050_read+0x890>
 8006fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fcc:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006fd0:	8bfb      	ldrh	r3, [r7, #30]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	83fb      	strh	r3, [r7, #30]
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	8bfa      	ldrh	r2, [r7, #30]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	f4ff ac61 	bcc.w	80068a4 <mpu6050_read+0x210>
            }
        }

        return 0;                                                                                  /* success return 0 */
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e1df      	b.n	80073a6 <mpu6050_read+0xd12>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2201      	movs	r2, #1
 8006fea:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_XOUT_H, handle->buf, 14);               /* read data */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8006ff2:	230e      	movs	r3, #14
 8006ff4:	213b      	movs	r1, #59	; 0x3b
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff f9d8 	bl	80063ac <a_mpu6050_iic_read>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8007000:	7f7b      	ldrb	r3, [r7, #29]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <mpu6050_read+0x97e>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	48b1      	ldr	r0, [pc, #708]	; (80072d0 <mpu6050_read+0xc3c>)
 800700c:	4798      	blx	r3

            return 1;                                                                              /* return error */
 800700e:	2301      	movs	r3, #1
 8007010:	e1c9      	b.n	80073a6 <mpu6050_read+0xd12>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	b21a      	sxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007022:	b21b      	sxth	r3, r3
 8007024:	4313      	orrs	r3, r2
 8007026:	b21a      	sxth	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	b21a      	sxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800703c:	b21b      	sxth	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b21a      	sxth	r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	b21a      	sxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007056:	b21b      	sxth	r3, r3
 8007058:	4313      	orrs	r3, r2
 800705a:	b21a      	sxth	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	b21a      	sxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8007070:	b21b      	sxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b21a      	sxth	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	b21a      	sxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800708a:	b21b      	sxth	r3, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	b21a      	sxth	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	b21a      	sxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80070a4:	b21b      	sxth	r3, r3
 80070a6:	4313      	orrs	r3, r2
 80070a8:	b21a      	sxth	r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	809a      	strh	r2, [r3, #4]

        if (accel_conf == 0)                                                                       /* ±2g */
 80070ae:	7e3b      	ldrb	r3, [r7, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d12a      	bne.n	800710a <mpu6050_read+0xa76>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070c2:	eddf 6a84 	vldr	s13, [pc, #528]	; 80072d4 <mpu6050_read+0xc40>
 80070c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070de:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80072d4 <mpu6050_read+0xc40>
 80070e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070fa:	eddf 6a76 	vldr	s13, [pc, #472]	; 80072d4 <mpu6050_read+0xc40>
 80070fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	edc3 7a02 	vstr	s15, [r3, #8]
 8007108:	e085      	b.n	8007216 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 800710a:	7e3b      	ldrb	r3, [r7, #24]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d12a      	bne.n	8007166 <mpu6050_read+0xad2>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800711e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80072d8 <mpu6050_read+0xc44>
 8007122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800713a:	eddf 6a67 	vldr	s13, [pc, #412]	; 80072d8 <mpu6050_read+0xc44>
 800713e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007156:	eddf 6a60 	vldr	s13, [pc, #384]	; 80072d8 <mpu6050_read+0xc44>
 800715a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	edc3 7a02 	vstr	s15, [r3, #8]
 8007164:	e057      	b.n	8007216 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8007166:	7e3b      	ldrb	r3, [r7, #24]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d12a      	bne.n	80071c2 <mpu6050_read+0xb2e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800717a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072dc <mpu6050_read+0xc48>
 800717e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007196:	eddf 6a51 	vldr	s13, [pc, #324]	; 80072dc <mpu6050_read+0xc48>
 800719a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071b2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80072dc <mpu6050_read+0xc48>
 80071b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80071c0:	e029      	b.n	8007216 <mpu6050_read+0xb82>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071d0:	eddf 6a43 	vldr	s13, [pc, #268]	; 80072e0 <mpu6050_read+0xc4c>
 80071d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071ec:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80072e0 <mpu6050_read+0xc4c>
 80071f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007208:	eddf 6a35 	vldr	s13, [pc, #212]	; 80072e0 <mpu6050_read+0xc4c>
 800720c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        if (gyro_conf == 0)                                                                        /* ±250dps */
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d12a      	bne.n	8007272 <mpu6050_read+0xbde>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800722a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80072e4 <mpu6050_read+0xc50>
 800722e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007246:	eddf 6a27 	vldr	s13, [pc, #156]	; 80072e4 <mpu6050_read+0xc50>
 800724a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007262:	eddf 6a20 	vldr	s13, [pc, #128]	; 80072e4 <mpu6050_read+0xc50>
 8007266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	edc3 7a02 	vstr	s15, [r3, #8]
 8007270:	e098      	b.n	80073a4 <mpu6050_read+0xd10>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d13d      	bne.n	80072f4 <mpu6050_read+0xc60>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007286:	eddf 6a18 	vldr	s13, [pc, #96]	; 80072e8 <mpu6050_read+0xc54>
 800728a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072a2:	eddf 6a11 	vldr	s13, [pc, #68]	; 80072e8 <mpu6050_read+0xc54>
 80072a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072be:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80072e8 <mpu6050_read+0xc54>
 80072c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	edc3 7a02 	vstr	s15, [r3, #8]
 80072cc:	e06a      	b.n	80073a4 <mpu6050_read+0xd10>
 80072ce:	bf00      	nop
 80072d0:	08012d98 	.word	0x08012d98
 80072d4:	46800000 	.word	0x46800000
 80072d8:	46000000 	.word	0x46000000
 80072dc:	45800000 	.word	0x45800000
 80072e0:	45000000 	.word	0x45000000
 80072e4:	43030000 	.word	0x43030000
 80072e8:	42830000 	.word	0x42830000
 80072ec:	42033333 	.word	0x42033333
 80072f0:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d12a      	bne.n	8007350 <mpu6050_read+0xcbc>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007300:	ee07 3a90 	vmov	s15, r3
 8007304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007308:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 80072ec <mpu6050_read+0xc58>
 800730c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007324:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 80072ec <mpu6050_read+0xc58>
 8007328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007340:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 80072ec <mpu6050_read+0xc58>
 8007344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	edc3 7a02 	vstr	s15, [r3, #8]
 800734e:	e029      	b.n	80073a4 <mpu6050_read+0xd10>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800735e:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 80072f0 <mpu6050_read+0xc5c>
 8007362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800737a:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 80072f0 <mpu6050_read+0xc5c>
 800737e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007396:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 80072f0 <mpu6050_read+0xc5c>
 800739a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        return 0;                                                                                  /* success return 0 */
 80073a4:	2300      	movs	r3, #0
    }
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3720      	adds	r7, #32
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop

080073b0 <mpu6050_read_temperature>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6050_read_temperature(mpu6050_handle_t *handle, int16_t (*raw), float *degrees)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t buf[2];

    if (handle == NULL)                                                      /* check handle */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <mpu6050_read_temperature+0x16>
    {
        return 2;                                                            /* return error */
 80073c2:	2302      	movs	r3, #2
 80073c4:	e034      	b.n	8007430 <mpu6050_read_temperature+0x80>
    }
    if (handle->inited != 1)                                                 /* check handle initialization */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d001      	beq.n	80073d4 <mpu6050_read_temperature+0x24>
    {
        return 3;                                                            /* return error */
 80073d0:	2303      	movs	r3, #3
 80073d2:	e02d      	b.n	8007430 <mpu6050_read_temperature+0x80>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_TEMP_OUT_H, buf, 2);        /* read data */
 80073d4:	f107 0214 	add.w	r2, r7, #20
 80073d8:	2302      	movs	r3, #2
 80073da:	2141      	movs	r1, #65	; 0x41
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7fe ffe5 	bl	80063ac <a_mpu6050_iic_read>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                            /* check result */
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <mpu6050_read_temperature+0x48>
    {
        handle->debug_print("mpu6050: read failed.\n");                      /* read failed */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	4811      	ldr	r0, [pc, #68]	; (8007438 <mpu6050_read_temperature+0x88>)
 80073f2:	4798      	blx	r3

        return 1;                                                            /* return error */
 80073f4:	2301      	movs	r3, #1
 80073f6:	e01b      	b.n	8007430 <mpu6050_read_temperature+0x80>
    }
    *raw = (int16_t)((uint16_t)buf[0] << 8) | buf[1];                        /* get the raw */
 80073f8:	7d3b      	ldrb	r3, [r7, #20]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	b21a      	sxth	r2, r3
 80073fe:	7d7b      	ldrb	r3, [r7, #21]
 8007400:	b21b      	sxth	r3, r3
 8007402:	4313      	orrs	r3, r2
 8007404:	b21a      	sxth	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	801a      	strh	r2, [r3, #0]
    *degrees = (float)(*raw) / 340.0f + 36.53f;                              /* convert the degrees */
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007410:	ee07 3a90 	vmov	s15, r3
 8007414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007418:	eddf 6a08 	vldr	s13, [pc, #32]	; 800743c <mpu6050_read_temperature+0x8c>
 800741c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007420:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007440 <mpu6050_read_temperature+0x90>
 8007424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	edc3 7a00 	vstr	s15, [r3]

    return 0;                                                                /* success return 0 */
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	08012d98 	.word	0x08012d98
 800743c:	43aa0000 	.word	0x43aa0000
 8007440:	42121eb8 	.word	0x42121eb8

08007444 <mpu6050_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                   /* check handle */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <mpu6050_set_fifo+0x16>
    {
        return 2;                                                                         /* return error */
 8007456:	2302      	movs	r3, #2
 8007458:	e039      	b.n	80074ce <mpu6050_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007460:	2b01      	cmp	r3, #1
 8007462:	d001      	beq.n	8007468 <mpu6050_set_fifo+0x24>
    {
        return 3;                                                                         /* return error */
 8007464:	2303      	movs	r3, #3
 8007466:	e032      	b.n	80074ce <mpu6050_set_fifo+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007468:	f107 020e 	add.w	r2, r7, #14
 800746c:	2301      	movs	r3, #1
 800746e:	216a      	movs	r1, #106	; 0x6a
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fe ff9b 	bl	80063ac <a_mpu6050_iic_read>
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <mpu6050_set_fifo+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                         /* read user ctrl failed */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	4814      	ldr	r0, [pc, #80]	; (80074d8 <mpu6050_set_fifo+0x94>)
 8007486:	4798      	blx	r3

        return 1;                                                                         /* return error */
 8007488:	2301      	movs	r3, #1
 800748a:	e020      	b.n	80074ce <mpu6050_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007492:	b2db      	uxtb	r3, r3
 8007494:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                  /* set config */
 8007496:	78fb      	ldrb	r3, [r7, #3]
 8007498:	019b      	lsls	r3, r3, #6
 800749a:	b25a      	sxtb	r2, r3
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	b25b      	sxtb	r3, r3
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b25b      	sxtb	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80074a8:	f107 020e 	add.w	r2, r7, #14
 80074ac:	2301      	movs	r3, #1
 80074ae:	216a      	movs	r1, #106	; 0x6a
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fe ff97 	bl	80063e4 <a_mpu6050_iic_write>
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <mpu6050_set_fifo+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                        /* write user ctrl failed */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	4805      	ldr	r0, [pc, #20]	; (80074dc <mpu6050_set_fifo+0x98>)
 80074c6:	4798      	blx	r3

        return 1;                                                                         /* return error */
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <mpu6050_set_fifo+0x8a>
    }

    return 0;                                                                             /* success return 0 */
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	08012e38 	.word	0x08012e38
 80074dc:	08012e5c 	.word	0x08012e5c

080074e0 <mpu6050_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_master(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <mpu6050_set_iic_master+0x16>
    {
        return 2;                                                                        /* return error */
 80074f2:	2302      	movs	r3, #2
 80074f4:	e039      	b.n	800756a <mpu6050_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d001      	beq.n	8007504 <mpu6050_set_iic_master+0x24>
    {
        return 3;                                                                        /* return error */
 8007500:	2303      	movs	r3, #3
 8007502:	e032      	b.n	800756a <mpu6050_set_iic_master+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8007504:	f107 020e 	add.w	r2, r7, #14
 8007508:	2301      	movs	r3, #1
 800750a:	216a      	movs	r1, #106	; 0x6a
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fe ff4d 	bl	80063ac <a_mpu6050_iic_read>
 8007512:	4603      	mov	r3, r0
 8007514:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <mpu6050_set_iic_master+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                        /* read user ctrl failed */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	4814      	ldr	r0, [pc, #80]	; (8007574 <mpu6050_set_iic_master+0x94>)
 8007522:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007524:	2301      	movs	r3, #1
 8007526:	e020      	b.n	800756a <mpu6050_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	f023 0320 	bic.w	r3, r3, #32
 800752e:	b2db      	uxtb	r3, r3
 8007530:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	015b      	lsls	r3, r3, #5
 8007536:	b25a      	sxtb	r2, r3
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	b25b      	sxtb	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b25b      	sxtb	r3, r3
 8007540:	b2db      	uxtb	r3, r3
 8007542:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8007544:	f107 020e 	add.w	r2, r7, #14
 8007548:	2301      	movs	r3, #1
 800754a:	216a      	movs	r1, #106	; 0x6a
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fe ff49 	bl	80063e4 <a_mpu6050_iic_write>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <mpu6050_set_iic_master+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                       /* write user ctrl failed */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	4805      	ldr	r0, [pc, #20]	; (8007578 <mpu6050_set_iic_master+0x98>)
 8007562:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <mpu6050_set_iic_master+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	08012e38 	.word	0x08012e38
 8007578:	08012e5c 	.word	0x08012e5c

0800757c <mpu6050_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_clock_source(mpu6050_handle_t *handle, mpu6050_clock_source_t clock_source)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <mpu6050_set_clock_source+0x16>
    {
        return 2;                                                                        /* return error */
 800758e:	2302      	movs	r3, #2
 8007590:	e035      	b.n	80075fe <mpu6050_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007598:	2b01      	cmp	r3, #1
 800759a:	d001      	beq.n	80075a0 <mpu6050_set_clock_source+0x24>
    {
        return 3;                                                                        /* return error */
 800759c:	2303      	movs	r3, #3
 800759e:	e02e      	b.n	80075fe <mpu6050_set_clock_source+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80075a0:	f107 020e 	add.w	r2, r7, #14
 80075a4:	2301      	movs	r3, #1
 80075a6:	216b      	movs	r1, #107	; 0x6b
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fe feff 	bl	80063ac <a_mpu6050_iic_read>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <mpu6050_set_clock_source+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	4812      	ldr	r0, [pc, #72]	; (8007608 <mpu6050_set_clock_source+0x8c>)
 80075be:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80075c0:	2301      	movs	r3, #1
 80075c2:	e01c      	b.n	80075fe <mpu6050_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                                 /* clear config */
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                           /* set config */
 80075ce:	7bba      	ldrb	r2, [r7, #14]
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80075d8:	f107 020e 	add.w	r2, r7, #14
 80075dc:	2301      	movs	r3, #1
 80075de:	216b      	movs	r1, #107	; 0x6b
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7fe feff 	bl	80063e4 <a_mpu6050_iic_write>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <mpu6050_set_clock_source+0x80>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	4805      	ldr	r0, [pc, #20]	; (800760c <mpu6050_set_clock_source+0x90>)
 80075f6:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <mpu6050_set_clock_source+0x82>
    }

    return 0;                                                                            /* success return 0 */
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	08013094 	.word	0x08013094
 800760c:	080130c0 	.word	0x080130c0

08007610 <mpu6050_set_temperature_sensor>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_temperature_sensor(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <mpu6050_set_temperature_sensor+0x16>
    {
        return 2;                                                                        /* return error */
 8007622:	2302      	movs	r3, #2
 8007624:	e03c      	b.n	80076a0 <mpu6050_set_temperature_sensor+0x90>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800762c:	2b01      	cmp	r3, #1
 800762e:	d001      	beq.n	8007634 <mpu6050_set_temperature_sensor+0x24>
    {
        return 3;                                                                        /* return error */
 8007630:	2303      	movs	r3, #3
 8007632:	e035      	b.n	80076a0 <mpu6050_set_temperature_sensor+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007634:	f107 020e 	add.w	r2, r7, #14
 8007638:	2301      	movs	r3, #1
 800763a:	216b      	movs	r1, #107	; 0x6b
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe feb5 	bl	80063ac <a_mpu6050_iic_read>
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <mpu6050_set_temperature_sensor+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	4815      	ldr	r0, [pc, #84]	; (80076a8 <mpu6050_set_temperature_sensor+0x98>)
 8007652:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007654:	2301      	movs	r3, #1
 8007656:	e023      	b.n	80076a0 <mpu6050_set_temperature_sensor+0x90>
    }
    prev &= ~(1 << 3);                                                                   /* clear config */
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	f023 0308 	bic.w	r3, r3, #8
 800765e:	b2db      	uxtb	r3, r3
 8007660:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                              /* set config */
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <mpu6050_set_temperature_sensor+0x5c>
 8007668:	2208      	movs	r2, #8
 800766a:	e000      	b.n	800766e <mpu6050_set_temperature_sensor+0x5e>
 800766c:	2200      	movs	r2, #0
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	b25b      	sxtb	r3, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	b25b      	sxtb	r3, r3
 8007676:	b2db      	uxtb	r3, r3
 8007678:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800767a:	f107 020e 	add.w	r2, r7, #14
 800767e:	2301      	movs	r3, #1
 8007680:	216b      	movs	r1, #107	; 0x6b
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fe feae 	bl	80063e4 <a_mpu6050_iic_write>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <mpu6050_set_temperature_sensor+0x8e>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	4805      	ldr	r0, [pc, #20]	; (80076ac <mpu6050_set_temperature_sensor+0x9c>)
 8007698:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <mpu6050_set_temperature_sensor+0x90>
    }

    return 0;                                                                            /* success return 0 */
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	08013094 	.word	0x08013094
 80076ac:	080130c0 	.word	0x080130c0

080076b0 <mpu6050_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_cycle_wake_up(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <mpu6050_set_cycle_wake_up+0x16>
    {
        return 2;                                                                        /* return error */
 80076c2:	2302      	movs	r3, #2
 80076c4:	e039      	b.n	800773a <mpu6050_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d001      	beq.n	80076d4 <mpu6050_set_cycle_wake_up+0x24>
    {
        return 3;                                                                        /* return error */
 80076d0:	2303      	movs	r3, #3
 80076d2:	e032      	b.n	800773a <mpu6050_set_cycle_wake_up+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80076d4:	f107 020e 	add.w	r2, r7, #14
 80076d8:	2301      	movs	r3, #1
 80076da:	216b      	movs	r1, #107	; 0x6b
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7fe fe65 	bl	80063ac <a_mpu6050_iic_read>
 80076e2:	4603      	mov	r3, r0
 80076e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <mpu6050_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	4814      	ldr	r0, [pc, #80]	; (8007744 <mpu6050_set_cycle_wake_up+0x94>)
 80076f2:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80076f4:	2301      	movs	r3, #1
 80076f6:	e020      	b.n	800773a <mpu6050_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	f023 0320 	bic.w	r3, r3, #32
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	015b      	lsls	r3, r3, #5
 8007706:	b25a      	sxtb	r2, r3
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	b25b      	sxtb	r3, r3
 800770c:	4313      	orrs	r3, r2
 800770e:	b25b      	sxtb	r3, r3
 8007710:	b2db      	uxtb	r3, r3
 8007712:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007714:	f107 020e 	add.w	r2, r7, #14
 8007718:	2301      	movs	r3, #1
 800771a:	216b      	movs	r1, #107	; 0x6b
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7fe fe61 	bl	80063e4 <a_mpu6050_iic_write>
 8007722:	4603      	mov	r3, r0
 8007724:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <mpu6050_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	4805      	ldr	r0, [pc, #20]	; (8007748 <mpu6050_set_cycle_wake_up+0x98>)
 8007732:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <mpu6050_set_cycle_wake_up+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	08013094 	.word	0x08013094
 8007748:	080130c0 	.word	0x080130c0

0800774c <mpu6050_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sleep(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <mpu6050_set_sleep+0x16>
    {
        return 2;                                                                        /* return error */
 800775e:	2302      	movs	r3, #2
 8007760:	e039      	b.n	80077d6 <mpu6050_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007768:	2b01      	cmp	r3, #1
 800776a:	d001      	beq.n	8007770 <mpu6050_set_sleep+0x24>
    {
        return 3;                                                                        /* return error */
 800776c:	2303      	movs	r3, #3
 800776e:	e032      	b.n	80077d6 <mpu6050_set_sleep+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007770:	f107 020e 	add.w	r2, r7, #14
 8007774:	2301      	movs	r3, #1
 8007776:	216b      	movs	r1, #107	; 0x6b
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fe fe17 	bl	80063ac <a_mpu6050_iic_read>
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <mpu6050_set_sleep+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	4814      	ldr	r0, [pc, #80]	; (80077e0 <mpu6050_set_sleep+0x94>)
 800778e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007790:	2301      	movs	r3, #1
 8007792:	e020      	b.n	80077d6 <mpu6050_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                                   /* clear config */
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800779a:	b2db      	uxtb	r3, r3
 800779c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                 /* set config */
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	019b      	lsls	r3, r3, #6
 80077a2:	b25a      	sxtb	r2, r3
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	4313      	orrs	r3, r2
 80077aa:	b25b      	sxtb	r3, r3
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80077b0:	f107 020e 	add.w	r2, r7, #14
 80077b4:	2301      	movs	r3, #1
 80077b6:	216b      	movs	r1, #107	; 0x6b
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fe fe13 	bl	80063e4 <a_mpu6050_iic_write>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <mpu6050_set_sleep+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	4805      	ldr	r0, [pc, #20]	; (80077e4 <mpu6050_set_sleep+0x98>)
 80077ce:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <mpu6050_set_sleep+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	08013094 	.word	0x08013094
 80077e4:	080130c0 	.word	0x080130c0

080077e8 <mpu6050_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_standby_mode(mpu6050_handle_t *handle, mpu6050_source_t source, mpu6050_bool_t enable)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
 80077f4:	4613      	mov	r3, r2
 80077f6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <mpu6050_set_standby_mode+0x1a>
    {
        return 2;                                                                        /* return error */
 80077fe:	2302      	movs	r3, #2
 8007800:	e043      	b.n	800788a <mpu6050_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007808:	2b01      	cmp	r3, #1
 800780a:	d001      	beq.n	8007810 <mpu6050_set_standby_mode+0x28>
    {
        return 3;                                                                        /* return error */
 800780c:	2303      	movs	r3, #3
 800780e:	e03c      	b.n	800788a <mpu6050_set_standby_mode+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8007810:	f107 020e 	add.w	r2, r7, #14
 8007814:	2301      	movs	r3, #1
 8007816:	216c      	movs	r1, #108	; 0x6c
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7fe fdc7 	bl	80063ac <a_mpu6050_iic_read>
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <mpu6050_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	4819      	ldr	r0, [pc, #100]	; (8007894 <mpu6050_set_standby_mode+0xac>)
 800782e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007830:	2301      	movs	r3, #1
 8007832:	e02a      	b.n	800788a <mpu6050_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                              /* clear config */
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	2201      	movs	r2, #1
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	b25b      	sxtb	r3, r3
 800783e:	43db      	mvns	r3, r3
 8007840:	b25a      	sxtb	r2, r3
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	b25b      	sxtb	r3, r3
 8007846:	4013      	ands	r3, r2
 8007848:	b25b      	sxtb	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                            /* set config */
 800784e:	78ba      	ldrb	r2, [r7, #2]
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	b25a      	sxtb	r2, r3
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	b25b      	sxtb	r3, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	b25b      	sxtb	r3, r3
 8007860:	b2db      	uxtb	r3, r3
 8007862:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8007864:	f107 020e 	add.w	r2, r7, #14
 8007868:	2301      	movs	r3, #1
 800786a:	216c      	movs	r1, #108	; 0x6c
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fe fdb9 	bl	80063e4 <a_mpu6050_iic_write>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <mpu6050_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	4805      	ldr	r0, [pc, #20]	; (8007898 <mpu6050_set_standby_mode+0xb0>)
 8007882:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <mpu6050_set_standby_mode+0xa2>
    }

    return 0;                                                                            /* success return 0 */
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	080130ec 	.word	0x080130ec
 8007898:	08013118 	.word	0x08013118

0800789c <mpu6050_set_wake_up_frequency>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_wake_up_frequency(mpu6050_handle_t *handle, mpu6050_wake_up_frequency_t frequency)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <mpu6050_set_wake_up_frequency+0x16>
    {
        return 2;                                                                        /* return error */
 80078ae:	2302      	movs	r3, #2
 80078b0:	e039      	b.n	8007926 <mpu6050_set_wake_up_frequency+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d001      	beq.n	80078c0 <mpu6050_set_wake_up_frequency+0x24>
    {
        return 3;                                                                        /* return error */
 80078bc:	2303      	movs	r3, #3
 80078be:	e032      	b.n	8007926 <mpu6050_set_wake_up_frequency+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 80078c0:	f107 020e 	add.w	r2, r7, #14
 80078c4:	2301      	movs	r3, #1
 80078c6:	216c      	movs	r1, #108	; 0x6c
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fe fd6f 	bl	80063ac <a_mpu6050_iic_read>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <mpu6050_set_wake_up_frequency+0x48>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4814      	ldr	r0, [pc, #80]	; (8007930 <mpu6050_set_wake_up_frequency+0x94>)
 80078de:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80078e0:	2301      	movs	r3, #1
 80078e2:	e020      	b.n	8007926 <mpu6050_set_wake_up_frequency+0x8a>
    }
    prev &= ~(0x3 << 6);                                                                 /* clear config */
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	73bb      	strb	r3, [r7, #14]
    prev |= frequency << 6;                                                              /* set config */
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	b25a      	sxtb	r2, r3
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	b25b      	sxtb	r3, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8007900:	f107 020e 	add.w	r2, r7, #14
 8007904:	2301      	movs	r3, #1
 8007906:	216c      	movs	r1, #108	; 0x6c
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fe fd6b 	bl	80063e4 <a_mpu6050_iic_write>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <mpu6050_set_wake_up_frequency+0x88>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	4805      	ldr	r0, [pc, #20]	; (8007934 <mpu6050_set_wake_up_frequency+0x98>)
 800791e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <mpu6050_set_wake_up_frequency+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	080130ec 	.word	0x080130ec
 8007934:	08013118 	.word	0x08013118

08007938 <mpu6050_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sample_rate_divider(mpu6050_handle_t *handle, uint8_t d)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                  /* check handle */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <mpu6050_set_sample_rate_divider+0x16>
    {
        return 2;                                                                        /* return error */
 800794a:	2302      	movs	r3, #2
 800794c:	e018      	b.n	8007980 <mpu6050_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007954:	2b01      	cmp	r3, #1
 8007956:	d001      	beq.n	800795c <mpu6050_set_sample_rate_divider+0x24>
    {
        return 3;                                                                        /* return error */
 8007958:	2303      	movs	r3, #3
 800795a:	e011      	b.n	8007980 <mpu6050_set_sample_rate_divider+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 800795c:	1cfa      	adds	r2, r7, #3
 800795e:	2301      	movs	r3, #1
 8007960:	2119      	movs	r1, #25
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fe fd3e 	bl	80063e4 <a_mpu6050_iic_write>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <mpu6050_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6050: write smprt div failed.\n");                       /* write smprt div failed */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	4804      	ldr	r0, [pc, #16]	; (8007988 <mpu6050_set_sample_rate_divider+0x50>)
 8007978:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <mpu6050_set_sample_rate_divider+0x48>
    }

    return 0;                                                                            /* success return 0 */
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	080131d8 	.word	0x080131d8

0800798c <mpu6050_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_extern_sync(mpu6050_handle_t *handle, mpu6050_extern_sync_t sync)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <mpu6050_set_extern_sync+0x16>
    {
        return 2;                                                                      /* return error */
 800799e:	2302      	movs	r3, #2
 80079a0:	e039      	b.n	8007a16 <mpu6050_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d001      	beq.n	80079b0 <mpu6050_set_extern_sync+0x24>
    {
        return 3;                                                                      /* return error */
 80079ac:	2303      	movs	r3, #3
 80079ae:	e032      	b.n	8007a16 <mpu6050_set_extern_sync+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80079b0:	f107 020e 	add.w	r2, r7, #14
 80079b4:	2301      	movs	r3, #1
 80079b6:	211a      	movs	r1, #26
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fe fcf7 	bl	80063ac <a_mpu6050_iic_read>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <mpu6050_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	4814      	ldr	r0, [pc, #80]	; (8007a20 <mpu6050_set_extern_sync+0x94>)
 80079ce:	4798      	blx	r3

        return 1;                                                                      /* return error */
 80079d0:	2301      	movs	r3, #1
 80079d2:	e020      	b.n	8007a16 <mpu6050_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                               /* clear config */
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                                 /* set config */
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	b25a      	sxtb	r2, r3
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	4313      	orrs	r3, r2
 80079ea:	b25b      	sxtb	r3, r3
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 80079f0:	f107 020e 	add.w	r2, r7, #14
 80079f4:	2301      	movs	r3, #1
 80079f6:	211a      	movs	r1, #26
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fe fcf3 	bl	80063e4 <a_mpu6050_iic_write>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <mpu6050_set_extern_sync+0x88>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	4805      	ldr	r0, [pc, #20]	; (8007a24 <mpu6050_set_extern_sync+0x98>)
 8007a0e:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <mpu6050_set_extern_sync+0x8a>
    }

    return 0;                                                                          /* success return 0 */
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	08013220 	.word	0x08013220
 8007a24:	08013240 	.word	0x08013240

08007a28 <mpu6050_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_low_pass_filter(mpu6050_handle_t *handle, mpu6050_low_pass_filter_t filter)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <mpu6050_set_low_pass_filter+0x16>
    {
        return 2;                                                                      /* return error */
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e035      	b.n	8007aaa <mpu6050_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d001      	beq.n	8007a4c <mpu6050_set_low_pass_filter+0x24>
    {
        return 3;                                                                      /* return error */
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e02e      	b.n	8007aaa <mpu6050_set_low_pass_filter+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007a4c:	f107 020e 	add.w	r2, r7, #14
 8007a50:	2301      	movs	r3, #1
 8007a52:	211a      	movs	r1, #26
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fe fca9 	bl	80063ac <a_mpu6050_iic_read>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <mpu6050_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	4812      	ldr	r0, [pc, #72]	; (8007ab4 <mpu6050_set_low_pass_filter+0x8c>)
 8007a6a:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e01c      	b.n	8007aaa <mpu6050_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                               /* clear config */
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	f023 0307 	bic.w	r3, r3, #7
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                               /* set config */
 8007a7a:	7bba      	ldrb	r2, [r7, #14]
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007a84:	f107 020e 	add.w	r2, r7, #14
 8007a88:	2301      	movs	r3, #1
 8007a8a:	211a      	movs	r1, #26
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fe fca9 	bl	80063e4 <a_mpu6050_iic_write>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <mpu6050_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	4805      	ldr	r0, [pc, #20]	; (8007ab8 <mpu6050_set_low_pass_filter+0x90>)
 8007aa2:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e000      	b.n	8007aaa <mpu6050_set_low_pass_filter+0x82>
    }

    return 0;                                                                          /* success return 0 */
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	08013220 	.word	0x08013220
 8007ab8:	08013240 	.word	0x08013240

08007abc <mpu6050_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <mpu6050_set_gyroscope_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	e043      	b.n	8007b5e <mpu6050_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d001      	beq.n	8007ae4 <mpu6050_set_gyroscope_test+0x28>
    {
        return 3;                                                                           /* return error */
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e03c      	b.n	8007b5e <mpu6050_set_gyroscope_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007ae4:	f107 020e 	add.w	r2, r7, #14
 8007ae8:	2301      	movs	r3, #1
 8007aea:	211b      	movs	r1, #27
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7fe fc5d 	bl	80063ac <a_mpu6050_iic_read>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <mpu6050_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	4819      	ldr	r0, [pc, #100]	; (8007b68 <mpu6050_set_gyroscope_test+0xac>)
 8007b02:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007b04:	2301      	movs	r3, #1
 8007b06:	e02a      	b.n	8007b5e <mpu6050_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	b25a      	sxtb	r2, r3
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	b25b      	sxtb	r3, r3
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	b25b      	sxtb	r3, r3
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8007b22:	78ba      	ldrb	r2, [r7, #2]
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2a:	b25a      	sxtb	r2, r3
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	b25b      	sxtb	r3, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b25b      	sxtb	r3, r3
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007b38:	f107 020e 	add.w	r2, r7, #14
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	211b      	movs	r1, #27
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fe fc4f 	bl	80063e4 <a_mpu6050_iic_write>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <mpu6050_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	4805      	ldr	r0, [pc, #20]	; (8007b6c <mpu6050_set_gyroscope_test+0xb0>)
 8007b56:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <mpu6050_set_gyroscope_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	08013260 	.word	0x08013260
 8007b6c:	08013288 	.word	0x08013288

08007b70 <mpu6050_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_range(mpu6050_handle_t *handle, mpu6050_gyroscope_range_t range)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <mpu6050_set_gyroscope_range+0x16>
    {
        return 2;                                                                           /* return error */
 8007b82:	2302      	movs	r3, #2
 8007b84:	e039      	b.n	8007bfa <mpu6050_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d001      	beq.n	8007b94 <mpu6050_set_gyroscope_range+0x24>
    {
        return 3;                                                                           /* return error */
 8007b90:	2303      	movs	r3, #3
 8007b92:	e032      	b.n	8007bfa <mpu6050_set_gyroscope_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007b94:	f107 020e 	add.w	r2, r7, #14
 8007b98:	2301      	movs	r3, #1
 8007b9a:	211b      	movs	r1, #27
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fe fc05 	bl	80063ac <a_mpu6050_iic_read>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <mpu6050_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	4814      	ldr	r0, [pc, #80]	; (8007c04 <mpu6050_set_gyroscope_range+0x94>)
 8007bb2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e020      	b.n	8007bfa <mpu6050_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	f023 0318 	bic.w	r3, r3, #24
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	b25a      	sxtb	r2, r3
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007bd4:	f107 020e 	add.w	r2, r7, #14
 8007bd8:	2301      	movs	r3, #1
 8007bda:	211b      	movs	r1, #27
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe fc01 	bl	80063e4 <a_mpu6050_iic_write>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <mpu6050_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	4805      	ldr	r0, [pc, #20]	; (8007c08 <mpu6050_set_gyroscope_range+0x98>)
 8007bf2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <mpu6050_set_gyroscope_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	08013260 	.word	0x08013260
 8007c08:	08013288 	.word	0x08013288

08007c0c <mpu6050_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <mpu6050_set_accelerometer_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8007c22:	2302      	movs	r3, #2
 8007c24:	e043      	b.n	8007cae <mpu6050_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d001      	beq.n	8007c34 <mpu6050_set_accelerometer_test+0x28>
    {
        return 3;                                                                           /* return error */
 8007c30:	2303      	movs	r3, #3
 8007c32:	e03c      	b.n	8007cae <mpu6050_set_accelerometer_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8007c34:	f107 020e 	add.w	r2, r7, #14
 8007c38:	2301      	movs	r3, #1
 8007c3a:	211c      	movs	r1, #28
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7fe fbb5 	bl	80063ac <a_mpu6050_iic_read>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <mpu6050_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <mpu6050_set_accelerometer_test+0xac>)
 8007c52:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007c54:	2301      	movs	r3, #1
 8007c56:	e02a      	b.n	8007cae <mpu6050_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c60:	b25b      	sxtb	r3, r3
 8007c62:	43db      	mvns	r3, r3
 8007c64:	b25a      	sxtb	r2, r3
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	b25b      	sxtb	r3, r3
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8007c72:	78ba      	ldrb	r2, [r7, #2]
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	b25a      	sxtb	r2, r3
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	b25b      	sxtb	r3, r3
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8007c88:	f107 020e 	add.w	r2, r7, #14
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	211c      	movs	r1, #28
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7fe fba7 	bl	80063e4 <a_mpu6050_iic_write>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d005      	beq.n	8007cac <mpu6050_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	4805      	ldr	r0, [pc, #20]	; (8007cbc <mpu6050_set_accelerometer_test+0xb0>)
 8007ca6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e000      	b.n	8007cae <mpu6050_set_accelerometer_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08012ca0 	.word	0x08012ca0
 8007cbc:	080132b4 	.word	0x080132b4

08007cc0 <mpu6050_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_range(mpu6050_handle_t *handle, mpu6050_accelerometer_range_t range)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <mpu6050_set_accelerometer_range+0x16>
    {
        return 2;                                                                           /* return error */
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e039      	b.n	8007d4a <mpu6050_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d001      	beq.n	8007ce4 <mpu6050_set_accelerometer_range+0x24>
    {
        return 3;                                                                           /* return error */
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e032      	b.n	8007d4a <mpu6050_set_accelerometer_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8007ce4:	f107 020e 	add.w	r2, r7, #14
 8007ce8:	2301      	movs	r3, #1
 8007cea:	211c      	movs	r1, #28
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7fe fb5d 	bl	80063ac <a_mpu6050_iic_read>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <mpu6050_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	4814      	ldr	r0, [pc, #80]	; (8007d54 <mpu6050_set_accelerometer_range+0x94>)
 8007d02:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007d04:	2301      	movs	r3, #1
 8007d06:	e020      	b.n	8007d4a <mpu6050_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	f023 0318 	bic.w	r3, r3, #24
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	b25a      	sxtb	r2, r3
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	b25b      	sxtb	r3, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8007d24:	f107 020e 	add.w	r2, r7, #14
 8007d28:	2301      	movs	r3, #1
 8007d2a:	211c      	movs	r1, #28
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fe fb59 	bl	80063e4 <a_mpu6050_iic_write>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <mpu6050_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	4805      	ldr	r0, [pc, #20]	; (8007d58 <mpu6050_set_accelerometer_range+0x98>)
 8007d42:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <mpu6050_set_accelerometer_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	08012ca0 	.word	0x08012ca0
 8007d58:	080132b4 	.word	0x080132b4

08007d5c <mpu6050_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo_enable(mpu6050_handle_t *handle, mpu6050_fifo_t fifo, mpu6050_bool_t enable)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                 /* check handle */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <mpu6050_set_fifo_enable+0x1a>
    {
        return 2;                                                                       /* return error */
 8007d72:	2302      	movs	r3, #2
 8007d74:	e043      	b.n	8007dfe <mpu6050_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d001      	beq.n	8007d84 <mpu6050_set_fifo_enable+0x28>
    {
        return 3;                                                                       /* return error */
 8007d80:	2303      	movs	r3, #3
 8007d82:	e03c      	b.n	8007dfe <mpu6050_set_fifo_enable+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8007d84:	f107 020e 	add.w	r2, r7, #14
 8007d88:	2301      	movs	r3, #1
 8007d8a:	2123      	movs	r1, #35	; 0x23
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fe fb0d 	bl	80063ac <a_mpu6050_iic_read>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <mpu6050_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6050: read fifo enable config failed.\n");              /* read fifo enable config failed */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	4819      	ldr	r0, [pc, #100]	; (8007e08 <mpu6050_set_fifo_enable+0xac>)
 8007da2:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8007da4:	2301      	movs	r3, #1
 8007da6:	e02a      	b.n	8007dfe <mpu6050_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                               /* clear config */
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	2201      	movs	r2, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	43db      	mvns	r3, r3
 8007db4:	b25a      	sxtb	r2, r3
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	b25b      	sxtb	r3, r3
 8007dba:	4013      	ands	r3, r2
 8007dbc:	b25b      	sxtb	r3, r3
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                             /* set config */
 8007dc2:	78ba      	ldrb	r2, [r7, #2]
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	b25a      	sxtb	r2, r3
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	b25b      	sxtb	r3, r3
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8007dd8:	f107 020e 	add.w	r2, r7, #14
 8007ddc:	2301      	movs	r3, #1
 8007dde:	2123      	movs	r1, #35	; 0x23
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7fe faff 	bl	80063e4 <a_mpu6050_iic_write>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <mpu6050_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6050: write fifo enable config failed.\n");             /* write fifo enable config failed */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <mpu6050_set_fifo_enable+0xb0>)
 8007df6:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <mpu6050_set_fifo_enable+0xa2>
    }

    return 0;                                                                           /* success return 0 */
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	080132e4 	.word	0x080132e4
 8007e0c:	08013310 	.word	0x08013310

08007e10 <mpu6050_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <mpu6050_set_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8007e22:	2302      	movs	r3, #2
 8007e24:	e039      	b.n	8007e9a <mpu6050_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d001      	beq.n	8007e34 <mpu6050_set_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 8007e30:	2303      	movs	r3, #3
 8007e32:	e032      	b.n	8007e9a <mpu6050_set_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007e34:	f107 020e 	add.w	r2, r7, #14
 8007e38:	2301      	movs	r3, #1
 8007e3a:	2137      	movs	r1, #55	; 0x37
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe fab5 	bl	80063ac <a_mpu6050_iic_read>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <mpu6050_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	4814      	ldr	r0, [pc, #80]	; (8007ea4 <mpu6050_set_interrupt_level+0x94>)
 8007e52:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007e54:	2301      	movs	r3, #1
 8007e56:	e020      	b.n	8007e9a <mpu6050_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                     /* set config */
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	01db      	lsls	r3, r3, #7
 8007e66:	b25a      	sxtb	r2, r3
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	b25b      	sxtb	r3, r3
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	b25b      	sxtb	r3, r3
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007e74:	f107 020e 	add.w	r2, r7, #14
 8007e78:	2301      	movs	r3, #1
 8007e7a:	2137      	movs	r1, #55	; 0x37
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fe fab1 	bl	80063e4 <a_mpu6050_iic_write>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <mpu6050_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <mpu6050_set_interrupt_level+0x98>)
 8007e92:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <mpu6050_set_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0801333c 	.word	0x0801333c
 8007ea8:	08013364 	.word	0x08013364

08007eac <mpu6050_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_pin_type(mpu6050_handle_t *handle, mpu6050_pin_type_t type)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <mpu6050_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                           /* return error */
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e039      	b.n	8007f36 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d001      	beq.n	8007ed0 <mpu6050_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                           /* return error */
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e032      	b.n	8007f36 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007ed0:	f107 020e 	add.w	r2, r7, #14
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	2137      	movs	r1, #55	; 0x37
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fe fa67 	bl	80063ac <a_mpu6050_iic_read>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <mpu6050_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	4814      	ldr	r0, [pc, #80]	; (8007f40 <mpu6050_set_interrupt_pin_type+0x94>)
 8007eee:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e020      	b.n	8007f36 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                      /* set config */
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	019b      	lsls	r3, r3, #6
 8007f02:	b25a      	sxtb	r2, r3
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	b25b      	sxtb	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007f10:	f107 020e 	add.w	r2, r7, #14
 8007f14:	2301      	movs	r3, #1
 8007f16:	2137      	movs	r1, #55	; 0x37
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fe fa63 	bl	80063e4 <a_mpu6050_iic_write>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <mpu6050_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	4805      	ldr	r0, [pc, #20]	; (8007f44 <mpu6050_set_interrupt_pin_type+0x98>)
 8007f2e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	0801333c 	.word	0x0801333c
 8007f44:	08013364 	.word	0x08013364

08007f48 <mpu6050_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_latch(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <mpu6050_set_interrupt_latch+0x16>
    {
        return 2;                                                                           /* return error */
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e03c      	b.n	8007fd8 <mpu6050_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d001      	beq.n	8007f6c <mpu6050_set_interrupt_latch+0x24>
    {
        return 3;                                                                           /* return error */
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e035      	b.n	8007fd8 <mpu6050_set_interrupt_latch+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007f6c:	f107 020e 	add.w	r2, r7, #14
 8007f70:	2301      	movs	r3, #1
 8007f72:	2137      	movs	r1, #55	; 0x37
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7fe fa19 	bl	80063ac <a_mpu6050_iic_read>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <mpu6050_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	4815      	ldr	r0, [pc, #84]	; (8007fe0 <mpu6050_set_interrupt_latch+0x98>)
 8007f8a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e023      	b.n	8007fd8 <mpu6050_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                      /* clear config */
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	f023 0320 	bic.w	r3, r3, #32
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                                 /* set config */
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <mpu6050_set_interrupt_latch+0x5c>
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	e000      	b.n	8007fa6 <mpu6050_set_interrupt_latch+0x5e>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007fb2:	f107 020e 	add.w	r2, r7, #14
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	2137      	movs	r1, #55	; 0x37
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fe fa12 	bl	80063e4 <a_mpu6050_iic_write>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <mpu6050_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <mpu6050_set_interrupt_latch+0x9c>)
 8007fd0:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <mpu6050_set_interrupt_latch+0x90>
    }

    return 0;                                                                               /* success return 0 */
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	0801333c 	.word	0x0801333c
 8007fe4:	08013364 	.word	0x08013364

08007fe8 <mpu6050_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_read_clear(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <mpu6050_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                           /* return error */
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e039      	b.n	8008072 <mpu6050_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008004:	2b01      	cmp	r3, #1
 8008006:	d001      	beq.n	800800c <mpu6050_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                           /* return error */
 8008008:	2303      	movs	r3, #3
 800800a:	e032      	b.n	8008072 <mpu6050_set_interrupt_read_clear+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800800c:	f107 020e 	add.w	r2, r7, #14
 8008010:	2301      	movs	r3, #1
 8008012:	2137      	movs	r1, #55	; 0x37
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fe f9c9 	bl	80063ac <a_mpu6050_iic_read>
 800801a:	4603      	mov	r3, r0
 800801c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <mpu6050_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	4814      	ldr	r0, [pc, #80]	; (800807c <mpu6050_set_interrupt_read_clear+0x94>)
 800802a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800802c:	2301      	movs	r3, #1
 800802e:	e020      	b.n	8008072 <mpu6050_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                      /* clear config */
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	b2db      	uxtb	r3, r3
 8008038:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                    /* set config */
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	b25a      	sxtb	r2, r3
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	b25b      	sxtb	r3, r3
 8008044:	4313      	orrs	r3, r2
 8008046:	b25b      	sxtb	r3, r3
 8008048:	b2db      	uxtb	r3, r3
 800804a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800804c:	f107 020e 	add.w	r2, r7, #14
 8008050:	2301      	movs	r3, #1
 8008052:	2137      	movs	r1, #55	; 0x37
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe f9c5 	bl	80063e4 <a_mpu6050_iic_write>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <mpu6050_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	4805      	ldr	r0, [pc, #20]	; (8008080 <mpu6050_set_interrupt_read_clear+0x98>)
 800806a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <mpu6050_set_interrupt_read_clear+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	0801333c 	.word	0x0801333c
 8008080:	08013364 	.word	0x08013364

08008084 <mpu6050_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <mpu6050_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8008096:	2302      	movs	r3, #2
 8008098:	e039      	b.n	800810e <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <mpu6050_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 80080a4:	2303      	movs	r3, #3
 80080a6:	e032      	b.n	800810e <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80080a8:	f107 020e 	add.w	r2, r7, #14
 80080ac:	2301      	movs	r3, #1
 80080ae:	2137      	movs	r1, #55	; 0x37
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fe f97b 	bl	80063ac <a_mpu6050_iic_read>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <mpu6050_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	4814      	ldr	r0, [pc, #80]	; (8008118 <mpu6050_set_fsync_interrupt_level+0x94>)
 80080c6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80080c8:	2301      	movs	r3, #1
 80080ca:	e020      	b.n	800810e <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                      /* clear config */
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	f023 0308 	bic.w	r3, r3, #8
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                     /* set config */
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	b25a      	sxtb	r2, r3
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	4313      	orrs	r3, r2
 80080e2:	b25b      	sxtb	r3, r3
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80080e8:	f107 020e 	add.w	r2, r7, #14
 80080ec:	2301      	movs	r3, #1
 80080ee:	2137      	movs	r1, #55	; 0x37
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fe f977 	bl	80063e4 <a_mpu6050_iic_write>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <mpu6050_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	4805      	ldr	r0, [pc, #20]	; (800811c <mpu6050_set_fsync_interrupt_level+0x98>)
 8008106:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	0801333c 	.word	0x0801333c
 800811c:	08013364 	.word	0x08013364

08008120 <mpu6050_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <mpu6050_set_fsync_interrupt+0x16>
    {
        return 2;                                                                           /* return error */
 8008132:	2302      	movs	r3, #2
 8008134:	e039      	b.n	80081aa <mpu6050_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800813c:	2b01      	cmp	r3, #1
 800813e:	d001      	beq.n	8008144 <mpu6050_set_fsync_interrupt+0x24>
    {
        return 3;                                                                           /* return error */
 8008140:	2303      	movs	r3, #3
 8008142:	e032      	b.n	80081aa <mpu6050_set_fsync_interrupt+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008144:	f107 020e 	add.w	r2, r7, #14
 8008148:	2301      	movs	r3, #1
 800814a:	2137      	movs	r1, #55	; 0x37
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fe f92d 	bl	80063ac <a_mpu6050_iic_read>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <mpu6050_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	4814      	ldr	r0, [pc, #80]	; (80081b4 <mpu6050_set_fsync_interrupt+0x94>)
 8008162:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008164:	2301      	movs	r3, #1
 8008166:	e020      	b.n	80081aa <mpu6050_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                      /* clear config */
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	f023 0304 	bic.w	r3, r3, #4
 800816e:	b2db      	uxtb	r3, r3
 8008170:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                    /* set config */
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	b25a      	sxtb	r2, r3
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	b25b      	sxtb	r3, r3
 800817c:	4313      	orrs	r3, r2
 800817e:	b25b      	sxtb	r3, r3
 8008180:	b2db      	uxtb	r3, r3
 8008182:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008184:	f107 020e 	add.w	r2, r7, #14
 8008188:	2301      	movs	r3, #1
 800818a:	2137      	movs	r1, #55	; 0x37
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fe f929 	bl	80063e4 <a_mpu6050_iic_write>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <mpu6050_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	4805      	ldr	r0, [pc, #20]	; (80081b8 <mpu6050_set_fsync_interrupt+0x98>)
 80081a2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80081a4:	2301      	movs	r3, #1
 80081a6:	e000      	b.n	80081aa <mpu6050_set_fsync_interrupt+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	0801333c 	.word	0x0801333c
 80081b8:	08013364 	.word	0x08013364

080081bc <mpu6050_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_bypass(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <mpu6050_set_iic_bypass+0x16>
    {
        return 2;                                                                           /* return error */
 80081ce:	2302      	movs	r3, #2
 80081d0:	e039      	b.n	8008246 <mpu6050_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d001      	beq.n	80081e0 <mpu6050_set_iic_bypass+0x24>
    {
        return 3;                                                                           /* return error */
 80081dc:	2303      	movs	r3, #3
 80081de:	e032      	b.n	8008246 <mpu6050_set_iic_bypass+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 80081e0:	f107 020e 	add.w	r2, r7, #14
 80081e4:	2301      	movs	r3, #1
 80081e6:	2137      	movs	r1, #55	; 0x37
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fe f8df 	bl	80063ac <a_mpu6050_iic_read>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <mpu6050_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	4814      	ldr	r0, [pc, #80]	; (8008250 <mpu6050_set_iic_bypass+0x94>)
 80081fe:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008200:	2301      	movs	r3, #1
 8008202:	e020      	b.n	8008246 <mpu6050_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                      /* clear config */
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	f023 0302 	bic.w	r3, r3, #2
 800820a:	b2db      	uxtb	r3, r3
 800820c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                    /* set config */
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	b25a      	sxtb	r2, r3
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	b25b      	sxtb	r3, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	b25b      	sxtb	r3, r3
 800821c:	b2db      	uxtb	r3, r3
 800821e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008220:	f107 020e 	add.w	r2, r7, #14
 8008224:	2301      	movs	r3, #1
 8008226:	2137      	movs	r1, #55	; 0x37
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7fe f8db 	bl	80063e4 <a_mpu6050_iic_write>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <mpu6050_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	4805      	ldr	r0, [pc, #20]	; (8008254 <mpu6050_set_iic_bypass+0x98>)
 800823e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <mpu6050_set_iic_bypass+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	0801333c 	.word	0x0801333c
 8008254:	08013364 	.word	0x08013364

08008258 <mpu6050_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt(mpu6050_handle_t *handle, mpu6050_interrupt_t type, mpu6050_bool_t enable)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
 8008264:	4613      	mov	r3, r2
 8008266:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <mpu6050_set_interrupt+0x1a>
    {
        return 2;                                                                           /* return error */
 800826e:	2302      	movs	r3, #2
 8008270:	e043      	b.n	80082fa <mpu6050_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008278:	2b01      	cmp	r3, #1
 800827a:	d001      	beq.n	8008280 <mpu6050_set_interrupt+0x28>
    {
        return 3;                                                                           /* return error */
 800827c:	2303      	movs	r3, #3
 800827e:	e03c      	b.n	80082fa <mpu6050_set_interrupt+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8008280:	f107 020e 	add.w	r2, r7, #14
 8008284:	2301      	movs	r3, #1
 8008286:	2138      	movs	r1, #56	; 0x38
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7fe f88f 	bl	80063ac <a_mpu6050_iic_read>
 800828e:	4603      	mov	r3, r0
 8008290:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <mpu6050_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6050: read interrupt enable failed.\n");                    /* read interrupt enable failed */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	4819      	ldr	r0, [pc, #100]	; (8008304 <mpu6050_set_interrupt+0xac>)
 800829e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80082a0:	2301      	movs	r3, #1
 80082a2:	e02a      	b.n	80082fa <mpu6050_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                                   /* clear config */
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	2201      	movs	r2, #1
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	43db      	mvns	r3, r3
 80082b0:	b25a      	sxtb	r2, r3
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	b25b      	sxtb	r3, r3
 80082b6:	4013      	ands	r3, r2
 80082b8:	b25b      	sxtb	r3, r3
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                                 /* set config */
 80082be:	78ba      	ldrb	r2, [r7, #2]
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	b25a      	sxtb	r2, r3
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	b25b      	sxtb	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 80082d4:	f107 020e 	add.w	r2, r7, #14
 80082d8:	2301      	movs	r3, #1
 80082da:	2138      	movs	r1, #56	; 0x38
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7fe f881 	bl	80063e4 <a_mpu6050_iic_write>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <mpu6050_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6050: write interrupt enable failed.\n");                   /* write interrupt enable failed */
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	4805      	ldr	r0, [pc, #20]	; (8008308 <mpu6050_set_interrupt+0xb0>)
 80082f2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80082f4:	2301      	movs	r3, #1
 80082f6:	e000      	b.n	80082fa <mpu6050_set_interrupt+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	0801338c 	.word	0x0801338c
 8008308:	080133b4 	.word	0x080133b4

0800830c <mpu6050_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_init(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
	I2C1_Init();
 8008310:	f002 ffbe 	bl	800b290 <I2C1_Init>
    return 0;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	bd80      	pop	{r7, pc}

0800831a <mpu6050_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_deinit(void)
{
 800831a:	b480      	push	{r7}
 800831c:	af00      	add	r7, sp, #0
    return 0;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <mpu6050_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af02      	add	r7, sp, #8
 8008332:	603a      	str	r2, [r7, #0]
 8008334:	461a      	mov	r2, r3
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
 800833a:	460b      	mov	r3, r1
 800833c:	71bb      	strb	r3, [r7, #6]
 800833e:	4613      	mov	r3, r2
 8008340:	80bb      	strh	r3, [r7, #4]
    return i2c_reg_read(MPU_I2C, addr, reg, buf, len, MPU_TIMOUT);
 8008342:	79ba      	ldrb	r2, [r7, #6]
 8008344:	79f9      	ldrb	r1, [r7, #7]
 8008346:	2364      	movs	r3, #100	; 0x64
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	88bb      	ldrh	r3, [r7, #4]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	4803      	ldr	r0, [pc, #12]	; (8008360 <mpu6050_interface_iic_read+0x34>)
 8008352:	f003 f90d 	bl	800b570 <i2c_reg_read>
 8008356:	4603      	mov	r3, r0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40005400 	.word	0x40005400

08008364 <mpu6050_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6050_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af02      	add	r7, sp, #8
 800836a:	603a      	str	r2, [r7, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
 8008372:	460b      	mov	r3, r1
 8008374:	71bb      	strb	r3, [r7, #6]
 8008376:	4613      	mov	r3, r2
 8008378:	80bb      	strh	r3, [r7, #4]
    return i2c_reg_write(MPU_I2C, addr, reg, buf, len, MPU_TIMOUT);
 800837a:	79ba      	ldrb	r2, [r7, #6]
 800837c:	79f9      	ldrb	r1, [r7, #7]
 800837e:	2364      	movs	r3, #100	; 0x64
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	88bb      	ldrh	r3, [r7, #4]
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	4803      	ldr	r0, [pc, #12]	; (8008398 <mpu6050_interface_iic_write+0x34>)
 800838a:	f003 f81f 	bl	800b3cc <i2c_reg_write>
 800838e:	4603      	mov	r3, r0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40005400 	.word	0x40005400

0800839c <mpu6050_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu6050_interface_delay_ms(uint32_t ms)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
	delay_ms(ms);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f002 fba5 	bl	800aaf4 <delay_ms>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <mpu6050_interface_debug_print>:
 * @param[in] fmt is the format data
 * @note      none
 */

void mpu6050_interface_debug_print(const char *const fmt, ...)
{
 80083b2:	b40f      	push	{r0, r1, r2, r3}
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b0a2      	sub	sp, #136	; 0x88
 80083b8:	af00      	add	r7, sp, #0
	char str[MPU_DBG_BUFF_SIZE];
	va_list args;
	va_start(args, fmt);
 80083ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083be:	607b      	str	r3, [r7, #4]
	vsprintf(str, fmt,args);
 80083c0:	f107 0308 	add.w	r3, r7, #8
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083ca:	4618      	mov	r0, r3
 80083cc:	f009 fb48 	bl	8011a60 <vsiprintf>
	printf(str);
 80083d0:	f107 0308 	add.w	r3, r7, #8
 80083d4:	4618      	mov	r0, r3
 80083d6:	f009 fa7b 	bl	80118d0 <iprintf>
}
 80083da:	bf00      	nop
 80083dc:	3788      	adds	r7, #136	; 0x88
 80083de:	46bd      	mov	sp, r7
 80083e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083e4:	b004      	add	sp, #16
 80083e6:	4770      	bx	lr

080083e8 <mpu6050_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu6050_interface_receive_callback(uint8_t type)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	71fb      	strb	r3, [r7, #7]
    switch (type)
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d825      	bhi.n	8008444 <mpu6050_interface_receive_callback+0x5c>
 80083f8:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <mpu6050_interface_receive_callback+0x18>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	0800843d 	.word	0x0800843d
 8008404:	08008435 	.word	0x08008435
 8008408:	08008445 	.word	0x08008445
 800840c:	0800842d 	.word	0x0800842d
 8008410:	08008425 	.word	0x08008425
 8008414:	08008445 	.word	0x08008445
 8008418:	0800841d 	.word	0x0800841d
    {
        case MPU6050_INTERRUPT_MOTION :
        {
            mpu6050_interface_debug_print("mpu6050: irq motion.\n");
 800841c:	480d      	ldr	r0, [pc, #52]	; (8008454 <mpu6050_interface_receive_callback+0x6c>)
 800841e:	f7ff ffc8 	bl	80083b2 <mpu6050_interface_debug_print>

            break;
 8008422:	e013      	b.n	800844c <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6050_interface_debug_print("mpu6050: irq fifo overflow.\n");
 8008424:	480c      	ldr	r0, [pc, #48]	; (8008458 <mpu6050_interface_receive_callback+0x70>)
 8008426:	f7ff ffc4 	bl	80083b2 <mpu6050_interface_debug_print>

            break;
 800842a:	e00f      	b.n	800844c <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_I2C_MAST :
        {
            mpu6050_interface_debug_print("mpu6050: irq i2c master.\n");
 800842c:	480b      	ldr	r0, [pc, #44]	; (800845c <mpu6050_interface_receive_callback+0x74>)
 800842e:	f7ff ffc0 	bl	80083b2 <mpu6050_interface_debug_print>

            break;
 8008432:	e00b      	b.n	800844c <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DMP :
        {
            mpu6050_interface_debug_print("mpu6050: irq dmp\n");
 8008434:	480a      	ldr	r0, [pc, #40]	; (8008460 <mpu6050_interface_receive_callback+0x78>)
 8008436:	f7ff ffbc 	bl	80083b2 <mpu6050_interface_debug_print>

            break;
 800843a:	e007      	b.n	800844c <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DATA_READY :
        {
            mpu6050_interface_debug_print("mpu6050: irq data ready\n");
 800843c:	4809      	ldr	r0, [pc, #36]	; (8008464 <mpu6050_interface_receive_callback+0x7c>)
 800843e:	f7ff ffb8 	bl	80083b2 <mpu6050_interface_debug_print>

            break;
 8008442:	e003      	b.n	800844c <mpu6050_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: irq unknown code.\n");
 8008444:	4808      	ldr	r0, [pc, #32]	; (8008468 <mpu6050_interface_receive_callback+0x80>)
 8008446:	f7ff ffb4 	bl	80083b2 <mpu6050_interface_debug_print>

            break;
 800844a:	bf00      	nop
        }
    }
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	08013e54 	.word	0x08013e54
 8008458:	08013e6c 	.word	0x08013e6c
 800845c:	08013e8c 	.word	0x08013e8c
 8008460:	08013ea8 	.word	0x08013ea8
 8008464:	08013ebc 	.word	0x08013ebc
 8008468:	08013ed8 	.word	0x08013ed8

0800846c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f103 0208 	add.w	r2, r3, #8
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f103 0208 	add.w	r2, r3, #8
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f103 0208 	add.w	r2, r3, #8
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	601a      	str	r2, [r3, #0]
}
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d103      	bne.n	800852e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	e00c      	b.n	8008548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3308      	adds	r3, #8
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	e002      	b.n	800853c <vListInsert+0x2e>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	429a      	cmp	r2, r3
 8008546:	d2f6      	bcs.n	8008536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	1c5a      	adds	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6892      	ldr	r2, [r2, #8]
 8008596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6852      	ldr	r2, [r2, #4]
 80085a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d103      	bne.n	80085b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	1e5a      	subs	r2, r3, #1
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085fa:	bf00      	nop
 80085fc:	e7fe      	b.n	80085fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085fe:	f001 ff31 	bl	800a464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	441a      	add	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862e:	3b01      	subs	r3, #1
 8008630:	68f9      	ldr	r1, [r7, #12]
 8008632:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	441a      	add	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	22ff      	movs	r2, #255	; 0xff
 8008642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	22ff      	movs	r2, #255	; 0xff
 800864a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d114      	bne.n	800867e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01a      	beq.n	8008692 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3310      	adds	r3, #16
 8008660:	4618      	mov	r0, r3
 8008662:	f001 f80b 	bl	800967c <xTaskRemoveFromEventList>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d012      	beq.n	8008692 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800866c:	4b0c      	ldr	r3, [pc, #48]	; (80086a0 <xQueueGenericReset+0xcc>)
 800866e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	e009      	b.n	8008692 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3310      	adds	r3, #16
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fef2 	bl	800846c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3324      	adds	r3, #36	; 0x24
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff feed 	bl	800846c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008692:	f001 ff17 	bl	800a4c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008696:	2301      	movs	r3, #1
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	613b      	str	r3, [r7, #16]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3350      	adds	r3, #80	; 0x50
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 ffe3 	bl	800a6a8 <pvPortMalloc>
 80086e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3350      	adds	r3, #80	; 0x50
 80086f2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086f4:	79fa      	ldrb	r2, [r7, #7]
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	4613      	mov	r3, r2
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f805 	bl	8008710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008706:	69bb      	ldr	r3, [r7, #24]
	}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e002      	b.n	8008732 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800873e:	2101      	movs	r1, #1
 8008740:	69b8      	ldr	r0, [r7, #24]
 8008742:	f7ff ff47 	bl	80085d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08e      	sub	sp, #56	; 0x38
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008766:	2300      	movs	r3, #0
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <xQueueGenericSend+0x32>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d103      	bne.n	8008798 <xQueueGenericSend+0x40>
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <xQueueGenericSend+0x44>
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <xQueueGenericSend+0x46>
 800879c:	2300      	movs	r3, #0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <xQueueGenericSend+0x60>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d103      	bne.n	80087c6 <xQueueGenericSend+0x6e>
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <xQueueGenericSend+0x72>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <xQueueGenericSend+0x74>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	623b      	str	r3, [r7, #32]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e6:	f001 f8e5 	bl	80099b4 <xTaskGetSchedulerState>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d102      	bne.n	80087f6 <xQueueGenericSend+0x9e>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <xQueueGenericSend+0xa2>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <xQueueGenericSend+0xa4>
 80087fa:	2300      	movs	r3, #0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <xQueueGenericSend+0xbe>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	61fb      	str	r3, [r7, #28]
}
 8008812:	bf00      	nop
 8008814:	e7fe      	b.n	8008814 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008816:	f001 fe25 	bl	800a464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <xQueueGenericSend+0xd4>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d129      	bne.n	8008880 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008832:	f000 fa0b 	bl	8008c4c <prvCopyDataToQueue>
 8008836:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d010      	beq.n	8008862 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	3324      	adds	r3, #36	; 0x24
 8008844:	4618      	mov	r0, r3
 8008846:	f000 ff19 	bl	800967c <xTaskRemoveFromEventList>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d013      	beq.n	8008878 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008850:	4b3f      	ldr	r3, [pc, #252]	; (8008950 <xQueueGenericSend+0x1f8>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	e00a      	b.n	8008878 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008868:	4b39      	ldr	r3, [pc, #228]	; (8008950 <xQueueGenericSend+0x1f8>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008878:	f001 fe24 	bl	800a4c4 <vPortExitCritical>
				return pdPASS;
 800887c:	2301      	movs	r3, #1
 800887e:	e063      	b.n	8008948 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008886:	f001 fe1d 	bl	800a4c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800888a:	2300      	movs	r3, #0
 800888c:	e05c      	b.n	8008948 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	4618      	mov	r0, r3
 800889a:	f000 ff51 	bl	8009740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800889e:	2301      	movs	r3, #1
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a2:	f001 fe0f 	bl	800a4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088a6:	f000 fccb 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088aa:	f001 fddb 	bl	800a464 <vPortEnterCritical>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d103      	bne.n	80088c4 <xQueueGenericSend+0x16c>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ca:	b25b      	sxtb	r3, r3
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d103      	bne.n	80088da <xQueueGenericSend+0x182>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088da:	f001 fdf3 	bl	800a4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088de:	1d3a      	adds	r2, r7, #4
 80088e0:	f107 0314 	add.w	r3, r7, #20
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 ff40 	bl	800976c <xTaskCheckForTimeOut>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d124      	bne.n	800893c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f4:	f000 faa2 	bl	8008e3c <prvIsQueueFull>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d018      	beq.n	8008930 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	3310      	adds	r3, #16
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fe68 	bl	80095dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f000 fa2d 	bl	8008d6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008912:	f000 fca3 	bl	800925c <xTaskResumeAll>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	f47f af7c 	bne.w	8008816 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800891e:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <xQueueGenericSend+0x1f8>)
 8008920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	e772      	b.n	8008816 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008932:	f000 fa1b 	bl	8008d6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008936:	f000 fc91 	bl	800925c <xTaskResumeAll>
 800893a:	e76c      	b.n	8008816 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800893c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800893e:	f000 fa15 	bl	8008d6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008942:	f000 fc8b 	bl	800925c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008946:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008948:	4618      	mov	r0, r3
 800894a:	3738      	adds	r7, #56	; 0x38
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b090      	sub	sp, #64	; 0x40
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d103      	bne.n	8008990 <xQueueGenericSendFromISR+0x3c>
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <xQueueGenericSendFromISR+0x40>
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <xQueueGenericSendFromISR+0x42>
 8008994:	2300      	movs	r3, #0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d103      	bne.n	80089be <xQueueGenericSendFromISR+0x6a>
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d101      	bne.n	80089c2 <xQueueGenericSendFromISR+0x6e>
 80089be:	2301      	movs	r3, #1
 80089c0:	e000      	b.n	80089c4 <xQueueGenericSendFromISR+0x70>
 80089c2:	2300      	movs	r3, #0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	623b      	str	r3, [r7, #32]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089de:	f001 fe23 	bl	800a628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089e2:	f3ef 8211 	mrs	r2, BASEPRI
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	61fa      	str	r2, [r7, #28]
 80089f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d302      	bcc.n	8008a10 <xQueueGenericSendFromISR+0xbc>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d12f      	bne.n	8008a70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a26:	f000 f911 	bl	8008c4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d112      	bne.n	8008a5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d016      	beq.n	8008a6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	3324      	adds	r3, #36	; 0x24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fe1b 	bl	800967c <xTaskRemoveFromEventList>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00e      	beq.n	8008a6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00b      	beq.n	8008a6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	e007      	b.n	8008a6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	b25a      	sxtb	r2, r3
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008a6e:	e001      	b.n	8008a74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3740      	adds	r7, #64	; 0x40
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08c      	sub	sp, #48	; 0x30
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <xQueueReceive+0x30>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	623b      	str	r3, [r7, #32]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d103      	bne.n	8008aca <xQueueReceive+0x3e>
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <xQueueReceive+0x42>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <xQueueReceive+0x44>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <xQueueReceive+0x5e>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	61fb      	str	r3, [r7, #28]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008aea:	f000 ff63 	bl	80099b4 <xTaskGetSchedulerState>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <xQueueReceive+0x6e>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <xQueueReceive+0x72>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <xQueueReceive+0x74>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <xQueueReceive+0x8e>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61bb      	str	r3, [r7, #24]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b1a:	f001 fca3 	bl	800a464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01f      	beq.n	8008b6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2e:	f000 f8f7 	bl	8008d20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	1e5a      	subs	r2, r3, #1
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00f      	beq.n	8008b62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	3310      	adds	r3, #16
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fd98 	bl	800967c <xTaskRemoveFromEventList>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b52:	4b3d      	ldr	r3, [pc, #244]	; (8008c48 <xQueueReceive+0x1bc>)
 8008b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b62:	f001 fcaf 	bl	800a4c4 <vPortExitCritical>
				return pdPASS;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e069      	b.n	8008c3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b70:	f001 fca8 	bl	800a4c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e062      	b.n	8008c3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b7e:	f107 0310 	add.w	r3, r7, #16
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fddc 	bl	8009740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b8c:	f001 fc9a 	bl	800a4c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b90:	f000 fb56 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b94:	f001 fc66 	bl	800a464 <vPortEnterCritical>
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d103      	bne.n	8008bae <xQueueReceive+0x122>
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d103      	bne.n	8008bc4 <xQueueReceive+0x138>
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc4:	f001 fc7e 	bl	800a4c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc8:	1d3a      	adds	r2, r7, #4
 8008bca:	f107 0310 	add.w	r3, r7, #16
 8008bce:	4611      	mov	r1, r2
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 fdcb 	bl	800976c <xTaskCheckForTimeOut>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d123      	bne.n	8008c24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bde:	f000 f917 	bl	8008e10 <prvIsQueueEmpty>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d017      	beq.n	8008c18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fcf3 	bl	80095dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf8:	f000 f8b8 	bl	8008d6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bfc:	f000 fb2e 	bl	800925c <xTaskResumeAll>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d189      	bne.n	8008b1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c06:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <xQueueReceive+0x1bc>)
 8008c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	e780      	b.n	8008b1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c1a:	f000 f8a7 	bl	8008d6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c1e:	f000 fb1d 	bl	800925c <xTaskResumeAll>
 8008c22:	e77a      	b.n	8008b1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c26:	f000 f8a1 	bl	8008d6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c2a:	f000 fb17 	bl	800925c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c30:	f000 f8ee 	bl	8008e10 <prvIsQueueEmpty>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f43f af6f 	beq.w	8008b1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3730      	adds	r7, #48	; 0x30
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10d      	bne.n	8008c86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d14d      	bne.n	8008d0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 feba 	bl	80099f0 <xTaskPriorityDisinherit>
 8008c7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	609a      	str	r2, [r3, #8]
 8008c84:	e043      	b.n	8008d0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d119      	bne.n	8008cc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6858      	ldr	r0, [r3, #4]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	461a      	mov	r2, r3
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	f009 f8a4 	bl	8011de4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d32b      	bcc.n	8008d0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	605a      	str	r2, [r3, #4]
 8008cbe:	e026      	b.n	8008d0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68d8      	ldr	r0, [r3, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	f009 f88a 	bl	8011de4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	425b      	negs	r3, r3
 8008cda:	441a      	add	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d207      	bcs.n	8008cfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	425b      	negs	r3, r3
 8008cf6:	441a      	add	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d105      	bne.n	8008d0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d16:	697b      	ldr	r3, [r7, #20]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	441a      	add	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68da      	ldr	r2, [r3, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d303      	bcc.n	8008d54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68d9      	ldr	r1, [r3, #12]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6838      	ldr	r0, [r7, #0]
 8008d60:	f009 f840 	bl	8011de4 <memcpy>
	}
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d74:	f001 fb76 	bl	800a464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d80:	e011      	b.n	8008da6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d012      	beq.n	8008db0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3324      	adds	r3, #36	; 0x24
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fc74 	bl	800967c <xTaskRemoveFromEventList>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d9a:	f000 fd49 	bl	8009830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dce9      	bgt.n	8008d82 <prvUnlockQueue+0x16>
 8008dae:	e000      	b.n	8008db2 <prvUnlockQueue+0x46>
					break;
 8008db0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	22ff      	movs	r2, #255	; 0xff
 8008db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dba:	f001 fb83 	bl	800a4c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dbe:	f001 fb51 	bl	800a464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dca:	e011      	b.n	8008df0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d012      	beq.n	8008dfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3310      	adds	r3, #16
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fc4f 	bl	800967c <xTaskRemoveFromEventList>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008de4:	f000 fd24 	bl	8009830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dce9      	bgt.n	8008dcc <prvUnlockQueue+0x60>
 8008df8:	e000      	b.n	8008dfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008dfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	22ff      	movs	r2, #255	; 0xff
 8008e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e04:	f001 fb5e 	bl	800a4c4 <vPortExitCritical>
}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e18:	f001 fb24 	bl	800a464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	e001      	b.n	8008e2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e2e:	f001 fb49 	bl	800a4c4 <vPortExitCritical>

	return xReturn;
 8008e32:	68fb      	ldr	r3, [r7, #12]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e44:	f001 fb0e 	bl	800a464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d102      	bne.n	8008e5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e54:	2301      	movs	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e001      	b.n	8008e5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e5e:	f001 fb31 	bl	800a4c4 <vPortExitCritical>

	return xReturn;
 8008e62:	68fb      	ldr	r3, [r7, #12]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	e014      	b.n	8008ea6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e7c:	4a0f      	ldr	r2, [pc, #60]	; (8008ebc <vQueueAddToRegistry+0x50>)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10b      	bne.n	8008ea0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e88:	490c      	ldr	r1, [pc, #48]	; (8008ebc <vQueueAddToRegistry+0x50>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e92:	4a0a      	ldr	r2, [pc, #40]	; (8008ebc <vQueueAddToRegistry+0x50>)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	4413      	add	r3, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e9e:	e006      	b.n	8008eae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b07      	cmp	r3, #7
 8008eaa:	d9e7      	bls.n	8008e7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008eac:	bf00      	nop
 8008eae:	bf00      	nop
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000184 	.word	0x20000184

08008ec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ed0:	f001 fac8 	bl	800a464 <vPortEnterCritical>
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eda:	b25b      	sxtb	r3, r3
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee0:	d103      	bne.n	8008eea <vQueueWaitForMessageRestricted+0x2a>
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d103      	bne.n	8008f00 <vQueueWaitForMessageRestricted+0x40>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f00:	f001 fae0 	bl	800a4c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	3324      	adds	r3, #36	; 0x24
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fb85 	bl	8009624 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f1a:	6978      	ldr	r0, [r7, #20]
 8008f1c:	f7ff ff26 	bl	8008d6c <prvUnlockQueue>
	}
 8008f20:	bf00      	nop
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08c      	sub	sp, #48	; 0x30
 8008f2c:	af04      	add	r7, sp, #16
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fbb3 	bl	800a6a8 <pvPortMalloc>
 8008f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00e      	beq.n	8008f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f4a:	2058      	movs	r0, #88	; 0x58
 8008f4c:	f001 fbac 	bl	800a6a8 <pvPortMalloc>
 8008f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8008f5e:	e005      	b.n	8008f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f60:	6978      	ldr	r0, [r7, #20]
 8008f62:	f001 fc6d 	bl	800a840 <vPortFree>
 8008f66:	e001      	b.n	8008f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d013      	beq.n	8008f9a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	2300      	movs	r3, #0
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	9302      	str	r3, [sp, #8]
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f80e 	bl	8008faa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f8e:	69f8      	ldr	r0, [r7, #28]
 8008f90:	f000 f89a 	bl	80090c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f94:	2301      	movs	r3, #1
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e002      	b.n	8008fa0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b088      	sub	sp, #32
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
 8008fb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	21a5      	movs	r1, #165	; 0xa5
 8008fc4:	f008 fe06 	bl	8011bd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f023 0307 	bic.w	r3, r3, #7
 8008fe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	f003 0307 	and.w	r3, r3, #7
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	617b      	str	r3, [r7, #20]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01f      	beq.n	8009048 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009008:	2300      	movs	r3, #0
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e012      	b.n	8009034 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	7819      	ldrb	r1, [r3, #0]
 8009016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	4413      	add	r3, r2
 800901c:	3334      	adds	r3, #52	; 0x34
 800901e:	460a      	mov	r2, r1
 8009020:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	4413      	add	r3, r2
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	3301      	adds	r3, #1
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	2b09      	cmp	r3, #9
 8009038:	d9e9      	bls.n	800900e <prvInitialiseNewTask+0x64>
 800903a:	e000      	b.n	800903e <prvInitialiseNewTask+0x94>
			{
				break;
 800903c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009046:	e003      	b.n	8009050 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	2b04      	cmp	r3, #4
 8009054:	d901      	bls.n	800905a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009056:	2304      	movs	r3, #4
 8009058:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800905e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009064:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2200      	movs	r2, #0
 800906a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	3304      	adds	r3, #4
 8009070:	4618      	mov	r0, r3
 8009072:	f7ff fa1b 	bl	80084ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	3318      	adds	r3, #24
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fa16 	bl	80084ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009084:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	f1c3 0205 	rsb	r2, r3, #5
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009094:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2200      	movs	r2, #0
 800909a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	69b8      	ldr	r0, [r7, #24]
 80090aa:	f001 f89f 	bl	800a1ec <pxPortInitialiseStack>
 80090ae:	4602      	mov	r2, r0
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090c0:	bf00      	nop
 80090c2:	3720      	adds	r7, #32
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090d0:	f001 f9c8 	bl	800a464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090d4:	4b2c      	ldr	r3, [pc, #176]	; (8009188 <prvAddNewTaskToReadyList+0xc0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	4a2b      	ldr	r2, [pc, #172]	; (8009188 <prvAddNewTaskToReadyList+0xc0>)
 80090dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090de:	4b2b      	ldr	r3, [pc, #172]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090e6:	4a29      	ldr	r2, [pc, #164]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090ec:	4b26      	ldr	r3, [pc, #152]	; (8009188 <prvAddNewTaskToReadyList+0xc0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d110      	bne.n	8009116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090f4:	f000 fbc0 	bl	8009878 <prvInitialiseTaskLists>
 80090f8:	e00d      	b.n	8009116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090fa:	4b25      	ldr	r3, [pc, #148]	; (8009190 <prvAddNewTaskToReadyList+0xc8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d109      	bne.n	8009116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009102:	4b22      	ldr	r3, [pc, #136]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	429a      	cmp	r2, r3
 800910e:	d802      	bhi.n	8009116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009110:	4a1e      	ldr	r2, [pc, #120]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009116:	4b1f      	ldr	r3, [pc, #124]	; (8009194 <prvAddNewTaskToReadyList+0xcc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <prvAddNewTaskToReadyList+0xcc>)
 800911e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009120:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <prvAddNewTaskToReadyList+0xcc>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	2201      	movs	r2, #1
 800912e:	409a      	lsls	r2, r3
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <prvAddNewTaskToReadyList+0xd0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4313      	orrs	r3, r2
 8009136:	4a18      	ldr	r2, [pc, #96]	; (8009198 <prvAddNewTaskToReadyList+0xd0>)
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913e:	4613      	mov	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4a15      	ldr	r2, [pc, #84]	; (800919c <prvAddNewTaskToReadyList+0xd4>)
 8009148:	441a      	add	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7ff f9b8 	bl	80084c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009156:	f001 f9b5 	bl	800a4c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <prvAddNewTaskToReadyList+0xc8>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00e      	beq.n	8009180 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009162:	4b0a      	ldr	r3, [pc, #40]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	429a      	cmp	r2, r3
 800916e:	d207      	bcs.n	8009180 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvAddNewTaskToReadyList+0xd8>)
 8009172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	2000029c 	.word	0x2000029c
 800918c:	200001c4 	.word	0x200001c4
 8009190:	200002a8 	.word	0x200002a8
 8009194:	200002b8 	.word	0x200002b8
 8009198:	200002a4 	.word	0x200002a4
 800919c:	200001c8 	.word	0x200001c8
 80091a0:	e000ed04 	.word	0xe000ed04

080091a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80091aa:	4b1f      	ldr	r3, [pc, #124]	; (8009228 <vTaskStartScheduler+0x84>)
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	2300      	movs	r3, #0
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	2300      	movs	r3, #0
 80091b4:	2282      	movs	r2, #130	; 0x82
 80091b6:	491d      	ldr	r1, [pc, #116]	; (800922c <vTaskStartScheduler+0x88>)
 80091b8:	481d      	ldr	r0, [pc, #116]	; (8009230 <vTaskStartScheduler+0x8c>)
 80091ba:	f7ff feb5 	bl	8008f28 <xTaskCreate>
 80091be:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d102      	bne.n	80091cc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80091c6:	f000 fcff 	bl	8009bc8 <xTimerCreateTimerTask>
 80091ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d116      	bne.n	8009200 <vTaskStartScheduler+0x5c>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	60bb      	str	r3, [r7, #8]
}
 80091e4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <vTaskStartScheduler+0x90>)
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <vTaskStartScheduler+0x94>)
 80091f0:	2201      	movs	r2, #1
 80091f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091f4:	4b11      	ldr	r3, [pc, #68]	; (800923c <vTaskStartScheduler+0x98>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091fa:	f001 f881 	bl	800a300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091fe:	e00e      	b.n	800921e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009206:	d10a      	bne.n	800921e <vTaskStartScheduler+0x7a>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	607b      	str	r3, [r7, #4]
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <vTaskStartScheduler+0x78>
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200002c0 	.word	0x200002c0
 800922c:	08014094 	.word	0x08014094
 8009230:	08009849 	.word	0x08009849
 8009234:	200002bc 	.word	0x200002bc
 8009238:	200002a8 	.word	0x200002a8
 800923c:	200002a0 	.word	0x200002a0

08009240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009244:	4b04      	ldr	r3, [pc, #16]	; (8009258 <vTaskSuspendAll+0x18>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3301      	adds	r3, #1
 800924a:	4a03      	ldr	r2, [pc, #12]	; (8009258 <vTaskSuspendAll+0x18>)
 800924c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800924e:	bf00      	nop
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	200002c4 	.word	0x200002c4

0800925c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800926a:	4b41      	ldr	r3, [pc, #260]	; (8009370 <xTaskResumeAll+0x114>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <xTaskResumeAll+0x2c>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	603b      	str	r3, [r7, #0]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009288:	f001 f8ec 	bl	800a464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800928c:	4b38      	ldr	r3, [pc, #224]	; (8009370 <xTaskResumeAll+0x114>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3b01      	subs	r3, #1
 8009292:	4a37      	ldr	r2, [pc, #220]	; (8009370 <xTaskResumeAll+0x114>)
 8009294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009296:	4b36      	ldr	r3, [pc, #216]	; (8009370 <xTaskResumeAll+0x114>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d161      	bne.n	8009362 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800929e:	4b35      	ldr	r3, [pc, #212]	; (8009374 <xTaskResumeAll+0x118>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d05d      	beq.n	8009362 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092a6:	e02e      	b.n	8009306 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a8:	4b33      	ldr	r3, [pc, #204]	; (8009378 <xTaskResumeAll+0x11c>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3318      	adds	r3, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff f963 	bl	8008580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff f95e 	bl	8008580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	2201      	movs	r2, #1
 80092ca:	409a      	lsls	r2, r3
 80092cc:	4b2b      	ldr	r3, [pc, #172]	; (800937c <xTaskResumeAll+0x120>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	4a2a      	ldr	r2, [pc, #168]	; (800937c <xTaskResumeAll+0x120>)
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a27      	ldr	r2, [pc, #156]	; (8009380 <xTaskResumeAll+0x124>)
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3304      	adds	r3, #4
 80092ea:	4619      	mov	r1, r3
 80092ec:	4610      	mov	r0, r2
 80092ee:	f7ff f8ea 	bl	80084c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4b23      	ldr	r3, [pc, #140]	; (8009384 <xTaskResumeAll+0x128>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d302      	bcc.n	8009306 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009300:	4b21      	ldr	r3, [pc, #132]	; (8009388 <xTaskResumeAll+0x12c>)
 8009302:	2201      	movs	r2, #1
 8009304:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009306:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <xTaskResumeAll+0x11c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1cc      	bne.n	80092a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009314:	f000 fb2e 	bl	8009974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009318:	4b1c      	ldr	r3, [pc, #112]	; (800938c <xTaskResumeAll+0x130>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d010      	beq.n	8009346 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009324:	f000 f846 	bl	80093b4 <xTaskIncrementTick>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800932e:	4b16      	ldr	r3, [pc, #88]	; (8009388 <xTaskResumeAll+0x12c>)
 8009330:	2201      	movs	r2, #1
 8009332:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3b01      	subs	r3, #1
 8009338:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f1      	bne.n	8009324 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009340:	4b12      	ldr	r3, [pc, #72]	; (800938c <xTaskResumeAll+0x130>)
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009346:	4b10      	ldr	r3, [pc, #64]	; (8009388 <xTaskResumeAll+0x12c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d009      	beq.n	8009362 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800934e:	2301      	movs	r3, #1
 8009350:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009352:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <xTaskResumeAll+0x134>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009362:	f001 f8af 	bl	800a4c4 <vPortExitCritical>

	return xAlreadyYielded;
 8009366:	68bb      	ldr	r3, [r7, #8]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	200002c4 	.word	0x200002c4
 8009374:	2000029c 	.word	0x2000029c
 8009378:	2000025c 	.word	0x2000025c
 800937c:	200002a4 	.word	0x200002a4
 8009380:	200001c8 	.word	0x200001c8
 8009384:	200001c4 	.word	0x200001c4
 8009388:	200002b0 	.word	0x200002b0
 800938c:	200002ac 	.word	0x200002ac
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <xTaskGetTickCount+0x1c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093a0:	687b      	ldr	r3, [r7, #4]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200002a0 	.word	0x200002a0

080093b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093be:	4b4e      	ldr	r3, [pc, #312]	; (80094f8 <xTaskIncrementTick+0x144>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f040 808e 	bne.w	80094e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093c8:	4b4c      	ldr	r3, [pc, #304]	; (80094fc <xTaskIncrementTick+0x148>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3301      	adds	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093d0:	4a4a      	ldr	r2, [pc, #296]	; (80094fc <xTaskIncrementTick+0x148>)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d120      	bne.n	800941e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093dc:	4b48      	ldr	r3, [pc, #288]	; (8009500 <xTaskIncrementTick+0x14c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <xTaskIncrementTick+0x48>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	603b      	str	r3, [r7, #0]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <xTaskIncrementTick+0x46>
 80093fc:	4b40      	ldr	r3, [pc, #256]	; (8009500 <xTaskIncrementTick+0x14c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	4b40      	ldr	r3, [pc, #256]	; (8009504 <xTaskIncrementTick+0x150>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a3e      	ldr	r2, [pc, #248]	; (8009500 <xTaskIncrementTick+0x14c>)
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	4a3e      	ldr	r2, [pc, #248]	; (8009504 <xTaskIncrementTick+0x150>)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	4b3d      	ldr	r3, [pc, #244]	; (8009508 <xTaskIncrementTick+0x154>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3301      	adds	r3, #1
 8009416:	4a3c      	ldr	r2, [pc, #240]	; (8009508 <xTaskIncrementTick+0x154>)
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	f000 faab 	bl	8009974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800941e:	4b3b      	ldr	r3, [pc, #236]	; (800950c <xTaskIncrementTick+0x158>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	429a      	cmp	r2, r3
 8009426:	d348      	bcc.n	80094ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009428:	4b35      	ldr	r3, [pc, #212]	; (8009500 <xTaskIncrementTick+0x14c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d104      	bne.n	800943c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009432:	4b36      	ldr	r3, [pc, #216]	; (800950c <xTaskIncrementTick+0x158>)
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	601a      	str	r2, [r3, #0]
					break;
 800943a:	e03e      	b.n	80094ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943c:	4b30      	ldr	r3, [pc, #192]	; (8009500 <xTaskIncrementTick+0x14c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d203      	bcs.n	800945c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009454:	4a2d      	ldr	r2, [pc, #180]	; (800950c <xTaskIncrementTick+0x158>)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800945a:	e02e      	b.n	80094ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	3304      	adds	r3, #4
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff f88d 	bl	8008580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	3318      	adds	r3, #24
 8009472:	4618      	mov	r0, r3
 8009474:	f7ff f884 	bl	8008580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	2201      	movs	r2, #1
 800947e:	409a      	lsls	r2, r3
 8009480:	4b23      	ldr	r3, [pc, #140]	; (8009510 <xTaskIncrementTick+0x15c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4313      	orrs	r3, r2
 8009486:	4a22      	ldr	r2, [pc, #136]	; (8009510 <xTaskIncrementTick+0x15c>)
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4a1f      	ldr	r2, [pc, #124]	; (8009514 <xTaskIncrementTick+0x160>)
 8009498:	441a      	add	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3304      	adds	r3, #4
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7ff f810 	bl	80084c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094aa:	4b1b      	ldr	r3, [pc, #108]	; (8009518 <xTaskIncrementTick+0x164>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d3b9      	bcc.n	8009428 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094b8:	e7b6      	b.n	8009428 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094ba:	4b17      	ldr	r3, [pc, #92]	; (8009518 <xTaskIncrementTick+0x164>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	4914      	ldr	r1, [pc, #80]	; (8009514 <xTaskIncrementTick+0x160>)
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d901      	bls.n	80094d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80094d2:	2301      	movs	r3, #1
 80094d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <xTaskIncrementTick+0x168>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e004      	b.n	80094ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094e4:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <xTaskIncrementTick+0x16c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3301      	adds	r3, #1
 80094ea:	4a0d      	ldr	r2, [pc, #52]	; (8009520 <xTaskIncrementTick+0x16c>)
 80094ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094ee:	697b      	ldr	r3, [r7, #20]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	200002c4 	.word	0x200002c4
 80094fc:	200002a0 	.word	0x200002a0
 8009500:	20000254 	.word	0x20000254
 8009504:	20000258 	.word	0x20000258
 8009508:	200002b4 	.word	0x200002b4
 800950c:	200002bc 	.word	0x200002bc
 8009510:	200002a4 	.word	0x200002a4
 8009514:	200001c8 	.word	0x200001c8
 8009518:	200001c4 	.word	0x200001c4
 800951c:	200002b0 	.word	0x200002b0
 8009520:	200002ac 	.word	0x200002ac

08009524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800952a:	4b27      	ldr	r3, [pc, #156]	; (80095c8 <vTaskSwitchContext+0xa4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009532:	4b26      	ldr	r3, [pc, #152]	; (80095cc <vTaskSwitchContext+0xa8>)
 8009534:	2201      	movs	r2, #1
 8009536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009538:	e03f      	b.n	80095ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800953a:	4b24      	ldr	r3, [pc, #144]	; (80095cc <vTaskSwitchContext+0xa8>)
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009540:	4b23      	ldr	r3, [pc, #140]	; (80095d0 <vTaskSwitchContext+0xac>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	fab3 f383 	clz	r3, r3
 800954c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	f1c3 031f 	rsb	r3, r3, #31
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	491f      	ldr	r1, [pc, #124]	; (80095d4 <vTaskSwitchContext+0xb0>)
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <vTaskSwitchContext+0x5c>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	607b      	str	r3, [r7, #4]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <vTaskSwitchContext+0x5a>
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4a12      	ldr	r2, [pc, #72]	; (80095d4 <vTaskSwitchContext+0xb0>)
 800958c:	4413      	add	r3, r2
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	605a      	str	r2, [r3, #4]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3308      	adds	r3, #8
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d104      	bne.n	80095b0 <vTaskSwitchContext+0x8c>
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	605a      	str	r2, [r3, #4]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <vTaskSwitchContext+0xb4>)
 80095b8:	6013      	str	r3, [r2, #0]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	200002c4 	.word	0x200002c4
 80095cc:	200002b0 	.word	0x200002b0
 80095d0:	200002a4 	.word	0x200002a4
 80095d4:	200001c8 	.word	0x200001c8
 80095d8:	200001c4 	.word	0x200001c4

080095dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	60fb      	str	r3, [r7, #12]
}
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <vTaskPlaceOnEventList+0x44>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3318      	adds	r3, #24
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fe ff7f 	bl	800850e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009610:	2101      	movs	r1, #1
 8009612:	6838      	ldr	r0, [r7, #0]
 8009614:	f000 fa72 	bl	8009afc <prvAddCurrentTaskToDelayedList>
}
 8009618:	bf00      	nop
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	200001c4 	.word	0x200001c4

08009624 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	617b      	str	r3, [r7, #20]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <vTaskPlaceOnEventListRestricted+0x54>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3318      	adds	r3, #24
 8009652:	4619      	mov	r1, r3
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7fe ff36 	bl	80084c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009660:	f04f 33ff 	mov.w	r3, #4294967295
 8009664:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	68b8      	ldr	r0, [r7, #8]
 800966a:	f000 fa47 	bl	8009afc <prvAddCurrentTaskToDelayedList>
	}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	200001c4 	.word	0x200001c4

0800967c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10a      	bne.n	80096a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	60fb      	str	r3, [r7, #12]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	3318      	adds	r3, #24
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe ff67 	bl	8008580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096b2:	4b1d      	ldr	r3, [pc, #116]	; (8009728 <xTaskRemoveFromEventList+0xac>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d11c      	bne.n	80096f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3304      	adds	r3, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe ff5e 	bl	8008580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	2201      	movs	r2, #1
 80096ca:	409a      	lsls	r2, r3
 80096cc:	4b17      	ldr	r3, [pc, #92]	; (800972c <xTaskRemoveFromEventList+0xb0>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	4a16      	ldr	r2, [pc, #88]	; (800972c <xTaskRemoveFromEventList+0xb0>)
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4a13      	ldr	r2, [pc, #76]	; (8009730 <xTaskRemoveFromEventList+0xb4>)
 80096e4:	441a      	add	r2, r3
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7fe feea 	bl	80084c6 <vListInsertEnd>
 80096f2:	e005      	b.n	8009700 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	3318      	adds	r3, #24
 80096f8:	4619      	mov	r1, r3
 80096fa:	480e      	ldr	r0, [pc, #56]	; (8009734 <xTaskRemoveFromEventList+0xb8>)
 80096fc:	f7fe fee3 	bl	80084c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009704:	4b0c      	ldr	r3, [pc, #48]	; (8009738 <xTaskRemoveFromEventList+0xbc>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	429a      	cmp	r2, r3
 800970c:	d905      	bls.n	800971a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800970e:	2301      	movs	r3, #1
 8009710:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009712:	4b0a      	ldr	r3, [pc, #40]	; (800973c <xTaskRemoveFromEventList+0xc0>)
 8009714:	2201      	movs	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	e001      	b.n	800971e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800971a:	2300      	movs	r3, #0
 800971c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800971e:	697b      	ldr	r3, [r7, #20]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	200002c4 	.word	0x200002c4
 800972c:	200002a4 	.word	0x200002a4
 8009730:	200001c8 	.word	0x200001c8
 8009734:	2000025c 	.word	0x2000025c
 8009738:	200001c4 	.word	0x200001c4
 800973c:	200002b0 	.word	0x200002b0

08009740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009748:	4b06      	ldr	r3, [pc, #24]	; (8009764 <vTaskInternalSetTimeOutState+0x24>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009750:	4b05      	ldr	r3, [pc, #20]	; (8009768 <vTaskInternalSetTimeOutState+0x28>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	605a      	str	r2, [r3, #4]
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	200002b4 	.word	0x200002b4
 8009768:	200002a0 	.word	0x200002a0

0800976c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	613b      	str	r3, [r7, #16]
}
 800978e:	bf00      	nop
 8009790:	e7fe      	b.n	8009790 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	60fb      	str	r3, [r7, #12]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097ae:	f000 fe59 	bl	800a464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097b2:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <xTaskCheckForTimeOut+0xbc>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	69ba      	ldr	r2, [r7, #24]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ca:	d102      	bne.n	80097d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
 80097d0:	e023      	b.n	800981a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4b15      	ldr	r3, [pc, #84]	; (800982c <xTaskCheckForTimeOut+0xc0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d007      	beq.n	80097ee <xTaskCheckForTimeOut+0x82>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d302      	bcc.n	80097ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80097e8:	2301      	movs	r3, #1
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	e015      	b.n	800981a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d20b      	bcs.n	8009810 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff ff9b 	bl	8009740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800980a:	2300      	movs	r3, #0
 800980c:	61fb      	str	r3, [r7, #28]
 800980e:	e004      	b.n	800981a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009816:	2301      	movs	r3, #1
 8009818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800981a:	f000 fe53 	bl	800a4c4 <vPortExitCritical>

	return xReturn;
 800981e:	69fb      	ldr	r3, [r7, #28]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	200002a0 	.word	0x200002a0
 800982c:	200002b4 	.word	0x200002b4

08009830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009834:	4b03      	ldr	r3, [pc, #12]	; (8009844 <vTaskMissedYield+0x14>)
 8009836:	2201      	movs	r2, #1
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	bf00      	nop
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	200002b0 	.word	0x200002b0

08009848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009850:	f000 f852 	bl	80098f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009854:	4b06      	ldr	r3, [pc, #24]	; (8009870 <prvIdleTask+0x28>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d9f9      	bls.n	8009850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800985c:	4b05      	ldr	r3, [pc, #20]	; (8009874 <prvIdleTask+0x2c>)
 800985e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800986c:	e7f0      	b.n	8009850 <prvIdleTask+0x8>
 800986e:	bf00      	nop
 8009870:	200001c8 	.word	0x200001c8
 8009874:	e000ed04 	.word	0xe000ed04

08009878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800987e:	2300      	movs	r3, #0
 8009880:	607b      	str	r3, [r7, #4]
 8009882:	e00c      	b.n	800989e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4a12      	ldr	r2, [pc, #72]	; (80098d8 <prvInitialiseTaskLists+0x60>)
 8009890:	4413      	add	r3, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fdea 	bl	800846c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3301      	adds	r3, #1
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d9ef      	bls.n	8009884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098a4:	480d      	ldr	r0, [pc, #52]	; (80098dc <prvInitialiseTaskLists+0x64>)
 80098a6:	f7fe fde1 	bl	800846c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098aa:	480d      	ldr	r0, [pc, #52]	; (80098e0 <prvInitialiseTaskLists+0x68>)
 80098ac:	f7fe fdde 	bl	800846c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098b0:	480c      	ldr	r0, [pc, #48]	; (80098e4 <prvInitialiseTaskLists+0x6c>)
 80098b2:	f7fe fddb 	bl	800846c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098b6:	480c      	ldr	r0, [pc, #48]	; (80098e8 <prvInitialiseTaskLists+0x70>)
 80098b8:	f7fe fdd8 	bl	800846c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098bc:	480b      	ldr	r0, [pc, #44]	; (80098ec <prvInitialiseTaskLists+0x74>)
 80098be:	f7fe fdd5 	bl	800846c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098c2:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <prvInitialiseTaskLists+0x78>)
 80098c4:	4a05      	ldr	r2, [pc, #20]	; (80098dc <prvInitialiseTaskLists+0x64>)
 80098c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <prvInitialiseTaskLists+0x7c>)
 80098ca:	4a05      	ldr	r2, [pc, #20]	; (80098e0 <prvInitialiseTaskLists+0x68>)
 80098cc:	601a      	str	r2, [r3, #0]
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	200001c8 	.word	0x200001c8
 80098dc:	2000022c 	.word	0x2000022c
 80098e0:	20000240 	.word	0x20000240
 80098e4:	2000025c 	.word	0x2000025c
 80098e8:	20000270 	.word	0x20000270
 80098ec:	20000288 	.word	0x20000288
 80098f0:	20000254 	.word	0x20000254
 80098f4:	20000258 	.word	0x20000258

080098f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098fe:	e019      	b.n	8009934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009900:	f000 fdb0 	bl	800a464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009904:	4b10      	ldr	r3, [pc, #64]	; (8009948 <prvCheckTasksWaitingTermination+0x50>)
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3304      	adds	r3, #4
 8009910:	4618      	mov	r0, r3
 8009912:	f7fe fe35 	bl	8008580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <prvCheckTasksWaitingTermination+0x54>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3b01      	subs	r3, #1
 800991c:	4a0b      	ldr	r2, [pc, #44]	; (800994c <prvCheckTasksWaitingTermination+0x54>)
 800991e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009920:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <prvCheckTasksWaitingTermination+0x58>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3b01      	subs	r3, #1
 8009926:	4a0a      	ldr	r2, [pc, #40]	; (8009950 <prvCheckTasksWaitingTermination+0x58>)
 8009928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800992a:	f000 fdcb 	bl	800a4c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f810 	bl	8009954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009934:	4b06      	ldr	r3, [pc, #24]	; (8009950 <prvCheckTasksWaitingTermination+0x58>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e1      	bne.n	8009900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000270 	.word	0x20000270
 800994c:	2000029c 	.word	0x2000029c
 8009950:	20000284 	.word	0x20000284

08009954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009960:	4618      	mov	r0, r3
 8009962:	f000 ff6d 	bl	800a840 <vPortFree>
			vPortFree( pxTCB );
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 ff6a 	bl	800a840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <prvResetNextTaskUnblockTime+0x38>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d104      	bne.n	800998e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009984:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009986:	f04f 32ff 	mov.w	r2, #4294967295
 800998a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800998c:	e008      	b.n	80099a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998e:	4b07      	ldr	r3, [pc, #28]	; (80099ac <prvResetNextTaskUnblockTime+0x38>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	4a04      	ldr	r2, [pc, #16]	; (80099b0 <prvResetNextTaskUnblockTime+0x3c>)
 800999e:	6013      	str	r3, [r2, #0]
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	20000254 	.word	0x20000254
 80099b0:	200002bc 	.word	0x200002bc

080099b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80099ba:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <xTaskGetSchedulerState+0x34>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099c2:	2301      	movs	r3, #1
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	e008      	b.n	80099da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099c8:	4b08      	ldr	r3, [pc, #32]	; (80099ec <xTaskGetSchedulerState+0x38>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d102      	bne.n	80099d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80099d0:	2302      	movs	r3, #2
 80099d2:	607b      	str	r3, [r7, #4]
 80099d4:	e001      	b.n	80099da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80099d6:	2300      	movs	r3, #0
 80099d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80099da:	687b      	ldr	r3, [r7, #4]
	}
 80099dc:	4618      	mov	r0, r3
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	200002a8 	.word	0x200002a8
 80099ec:	200002c4 	.word	0x200002c4

080099f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d06e      	beq.n	8009ae4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a06:	4b3a      	ldr	r3, [pc, #232]	; (8009af0 <xTaskPriorityDisinherit+0x100>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d00a      	beq.n	8009a26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	60fb      	str	r3, [r7, #12]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60bb      	str	r3, [r7, #8]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a48:	1e5a      	subs	r2, r3, #1
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d044      	beq.n	8009ae4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d140      	bne.n	8009ae4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	3304      	adds	r3, #4
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fe fd8a 	bl	8008580 <uxListRemove>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d115      	bne.n	8009a9e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a76:	491f      	ldr	r1, [pc, #124]	; (8009af4 <xTaskPriorityDisinherit+0x104>)
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	440b      	add	r3, r1
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xTaskPriorityDisinherit+0xae>
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a92:	43da      	mvns	r2, r3
 8009a94:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <xTaskPriorityDisinherit+0x108>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <xTaskPriorityDisinherit+0x108>)
 8009a9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	f1c3 0205 	rsb	r2, r3, #5
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	409a      	lsls	r2, r3
 8009aba:	4b0f      	ldr	r3, [pc, #60]	; (8009af8 <xTaskPriorityDisinherit+0x108>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	4a0d      	ldr	r2, [pc, #52]	; (8009af8 <xTaskPriorityDisinherit+0x108>)
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <xTaskPriorityDisinherit+0x104>)
 8009ad2:	441a      	add	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe fcf3 	bl	80084c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ae4:	697b      	ldr	r3, [r7, #20]
	}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200001c4 	.word	0x200001c4
 8009af4:	200001c8 	.word	0x200001c8
 8009af8:	200002a4 	.word	0x200002a4

08009afc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b06:	4b29      	ldr	r3, [pc, #164]	; (8009bac <prvAddCurrentTaskToDelayedList+0xb0>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b0c:	4b28      	ldr	r3, [pc, #160]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fd34 	bl	8008580 <uxListRemove>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009b1e:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	2201      	movs	r2, #1
 8009b26:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2a:	43da      	mvns	r2, r3
 8009b2c:	4b21      	ldr	r3, [pc, #132]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4013      	ands	r3, r2
 8009b32:	4a20      	ldr	r2, [pc, #128]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009b34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3c:	d10a      	bne.n	8009b54 <prvAddCurrentTaskToDelayedList+0x58>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d007      	beq.n	8009b54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b44:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	481a      	ldr	r0, [pc, #104]	; (8009bb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009b4e:	f7fe fcba 	bl	80084c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b52:	e026      	b.n	8009ba2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b5c:	4b14      	ldr	r3, [pc, #80]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d209      	bcs.n	8009b80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b6c:	4b13      	ldr	r3, [pc, #76]	; (8009bbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3304      	adds	r3, #4
 8009b76:	4619      	mov	r1, r3
 8009b78:	4610      	mov	r0, r2
 8009b7a:	f7fe fcc8 	bl	800850e <vListInsert>
}
 8009b7e:	e010      	b.n	8009ba2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b80:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	f7fe fcbe 	bl	800850e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d202      	bcs.n	8009ba2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b9c:	4a09      	ldr	r2, [pc, #36]	; (8009bc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	6013      	str	r3, [r2, #0]
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200002a0 	.word	0x200002a0
 8009bb0:	200001c4 	.word	0x200001c4
 8009bb4:	200002a4 	.word	0x200002a4
 8009bb8:	20000288 	.word	0x20000288
 8009bbc:	20000258 	.word	0x20000258
 8009bc0:	20000254 	.word	0x20000254
 8009bc4:	200002bc 	.word	0x200002bc

08009bc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bd2:	f000 fad5 	bl	800a180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bd6:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <xTimerCreateTimerTask+0x54>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8009bde:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <xTimerCreateTimerTask+0x58>)
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2302      	movs	r3, #2
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2300      	movs	r3, #0
 8009be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009bec:	490d      	ldr	r1, [pc, #52]	; (8009c24 <xTimerCreateTimerTask+0x5c>)
 8009bee:	480e      	ldr	r0, [pc, #56]	; (8009c28 <xTimerCreateTimerTask+0x60>)
 8009bf0:	f7ff f99a 	bl	8008f28 <xTaskCreate>
 8009bf4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	603b      	str	r3, [r7, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8009c12:	687b      	ldr	r3, [r7, #4]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	200002f8 	.word	0x200002f8
 8009c20:	200002fc 	.word	0x200002fc
 8009c24:	0801409c 	.word	0x0801409c
 8009c28:	08009d61 	.word	0x08009d61

08009c2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	623b      	str	r3, [r7, #32]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c5a:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d02a      	beq.n	8009cb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b05      	cmp	r3, #5
 8009c72:	dc18      	bgt.n	8009ca6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c74:	f7ff fe9e 	bl	80099b4 <xTaskGetSchedulerState>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d109      	bne.n	8009c92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c7e:	4b11      	ldr	r3, [pc, #68]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	f107 0114 	add.w	r1, r7, #20
 8009c86:	2300      	movs	r3, #0
 8009c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8a:	f7fe fd65 	bl	8008758 <xQueueGenericSend>
 8009c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c90:	e012      	b.n	8009cb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f107 0114 	add.w	r1, r7, #20
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f7fe fd5b 	bl	8008758 <xQueueGenericSend>
 8009ca2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ca4:	e008      	b.n	8009cb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ca6:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <xTimerGenericCommand+0x98>)
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f107 0114 	add.w	r1, r7, #20
 8009cae:	2300      	movs	r3, #0
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	f7fe fe4f 	bl	8008954 <xQueueGenericSendFromISR>
 8009cb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	; 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200002f8 	.word	0x200002f8

08009cc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd2:	4b22      	ldr	r3, [pc, #136]	; (8009d5c <prvProcessExpiredTimer+0x94>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fc4d 	bl	8008580 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d022      	beq.n	8009d3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	699a      	ldr	r2, [r3, #24]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	18d1      	adds	r1, r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	6978      	ldr	r0, [r7, #20]
 8009d02:	f000 f8d1 	bl	8009ea8 <prvInsertTimerInActiveList>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01f      	beq.n	8009d4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	2300      	movs	r3, #0
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	2100      	movs	r1, #0
 8009d16:	6978      	ldr	r0, [r7, #20]
 8009d18:	f7ff ff88 	bl	8009c2c <xTimerGenericCommand>
 8009d1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d113      	bne.n	8009d4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	60fb      	str	r3, [r7, #12]
}
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d40:	f023 0301 	bic.w	r3, r3, #1
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	6978      	ldr	r0, [r7, #20]
 8009d52:	4798      	blx	r3
}
 8009d54:	bf00      	nop
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	200002f0 	.word	0x200002f0

08009d60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d68:	f107 0308 	add.w	r3, r7, #8
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f857 	bl	8009e20 <prvGetNextExpireTime>
 8009d72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	4619      	mov	r1, r3
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f803 	bl	8009d84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d7e:	f000 f8d5 	bl	8009f2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d82:	e7f1      	b.n	8009d68 <prvTimerTask+0x8>

08009d84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d8e:	f7ff fa57 	bl	8009240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f866 	bl	8009e68 <prvSampleTimeNow>
 8009d9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d130      	bne.n	8009e06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <prvProcessTimerOrBlockTask+0x3c>
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d806      	bhi.n	8009dc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009db2:	f7ff fa53 	bl	800925c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff85 	bl	8009cc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dbe:	e024      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d008      	beq.n	8009dd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dc6:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <prvProcessTimerOrBlockTask+0x90>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <prvProcessTimerOrBlockTask+0x50>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <prvProcessTimerOrBlockTask+0x52>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dd8:	4b0f      	ldr	r3, [pc, #60]	; (8009e18 <prvProcessTimerOrBlockTask+0x94>)
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	f7ff f86b 	bl	8008ec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009dea:	f7ff fa37 	bl	800925c <xTaskResumeAll>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <prvProcessTimerOrBlockTask+0x98>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
}
 8009e04:	e001      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e06:	f7ff fa29 	bl	800925c <xTaskResumeAll>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200002f4 	.word	0x200002f4
 8009e18:	200002f8 	.word	0x200002f8
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e28:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <prvGetNextExpireTime+0x44>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <prvGetNextExpireTime+0x16>
 8009e32:	2201      	movs	r2, #1
 8009e34:	e000      	b.n	8009e38 <prvGetNextExpireTime+0x18>
 8009e36:	2200      	movs	r2, #0
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e44:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <prvGetNextExpireTime+0x44>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	e001      	b.n	8009e54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e54:	68fb      	ldr	r3, [r7, #12]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	200002f0 	.word	0x200002f0

08009e68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e70:	f7ff fa90 	bl	8009394 <xTaskGetTickCount>
 8009e74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e76:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <prvSampleTimeNow+0x3c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d205      	bcs.n	8009e8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e80:	f000 f91a 	bl	800a0b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e002      	b.n	8009e92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e92:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <prvSampleTimeNow+0x3c>)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e98:	68fb      	ldr	r3, [r7, #12]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000300 	.word	0x20000300

08009ea8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d812      	bhi.n	8009ef4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	1ad2      	subs	r2, r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d302      	bcc.n	8009ee2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e01b      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ee2:	4b10      	ldr	r3, [pc, #64]	; (8009f24 <prvInsertTimerInActiveList+0x7c>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7fe fb0e 	bl	800850e <vListInsert>
 8009ef2:	e012      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d206      	bcs.n	8009f0a <prvInsertTimerInActiveList+0x62>
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d302      	bcc.n	8009f0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f04:	2301      	movs	r3, #1
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e007      	b.n	8009f1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f0a:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <prvInsertTimerInActiveList+0x80>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f7fe fafa 	bl	800850e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f1a:	697b      	ldr	r3, [r7, #20]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	200002f4 	.word	0x200002f4
 8009f28:	200002f0 	.word	0x200002f0

08009f2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b08c      	sub	sp, #48	; 0x30
 8009f30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f32:	e0ae      	b.n	800a092 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f2c0 80ab 	blt.w	800a092 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fb17 	bl	8008580 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f52:	1d3b      	adds	r3, r7, #4
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff ff87 	bl	8009e68 <prvSampleTimeNow>
 8009f5a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b09      	cmp	r3, #9
 8009f60:	f200 8096 	bhi.w	800a090 <prvProcessReceivedCommands+0x164>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <prvProcessReceivedCommands+0x40>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f95 	.word	0x08009f95
 8009f70:	08009f95 	.word	0x08009f95
 8009f74:	08009f95 	.word	0x08009f95
 8009f78:	0800a009 	.word	0x0800a009
 8009f7c:	0800a01d 	.word	0x0800a01d
 8009f80:	0800a067 	.word	0x0800a067
 8009f84:	08009f95 	.word	0x08009f95
 8009f88:	08009f95 	.word	0x08009f95
 8009f8c:	0800a009 	.word	0x0800a009
 8009f90:	0800a01d 	.word	0x0800a01d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f9a:	f043 0301 	orr.w	r3, r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	18d1      	adds	r1, r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fb4:	f7ff ff78 	bl	8009ea8 <prvInsertTimerInActiveList>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d069      	beq.n	800a092 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d05e      	beq.n	800a092 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	441a      	add	r2, r3
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fe6:	f7ff fe21 	bl	8009c2c <xTimerGenericCommand>
 8009fea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d14f      	bne.n	800a092 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	61bb      	str	r3, [r7, #24]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	b2da      	uxtb	r2, r3
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a01a:	e03a      	b.n	800a092 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a022:	f043 0301 	orr.w	r3, r3, #1
 800a026:	b2da      	uxtb	r2, r3
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	617b      	str	r3, [r7, #20]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	18d1      	adds	r1, r2, r3
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a060:	f7ff ff22 	bl	8009ea8 <prvInsertTimerInActiveList>
					break;
 800a064:	e015      	b.n	800a092 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d103      	bne.n	800a07c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a076:	f000 fbe3 	bl	800a840 <vPortFree>
 800a07a:	e00a      	b.n	800a092 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a08e:	e000      	b.n	800a092 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800a090:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a092:	4b08      	ldr	r3, [pc, #32]	; (800a0b4 <prvProcessReceivedCommands+0x188>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f107 0108 	add.w	r1, r7, #8
 800a09a:	2200      	movs	r2, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe fcf5 	bl	8008a8c <xQueueReceive>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f47f af45 	bne.w	8009f34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0aa:	bf00      	nop
 800a0ac:	bf00      	nop
 800a0ae:	3728      	adds	r7, #40	; 0x28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	200002f8 	.word	0x200002f8

0800a0b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0be:	e048      	b.n	800a152 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0c0:	4b2d      	ldr	r3, [pc, #180]	; (800a178 <prvSwitchTimerLists+0xc0>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ca:	4b2b      	ldr	r3, [pc, #172]	; (800a178 <prvSwitchTimerLists+0xc0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fa51 	bl	8008580 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d02e      	beq.n	800a152 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	429a      	cmp	r2, r3
 800a104:	d90e      	bls.n	800a124 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a112:	4b19      	ldr	r3, [pc, #100]	; (800a178 <prvSwitchTimerLists+0xc0>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3304      	adds	r3, #4
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7fe f9f6 	bl	800850e <vListInsert>
 800a122:	e016      	b.n	800a152 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a124:	2300      	movs	r3, #0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	2100      	movs	r1, #0
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff fd7c 	bl	8009c2c <xTimerGenericCommand>
 800a134:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	603b      	str	r3, [r7, #0]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <prvSwitchTimerLists+0xc0>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1b1      	bne.n	800a0c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <prvSwitchTimerLists+0xc0>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <prvSwitchTimerLists+0xc4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a04      	ldr	r2, [pc, #16]	; (800a178 <prvSwitchTimerLists+0xc0>)
 800a168:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a16a:	4a04      	ldr	r2, [pc, #16]	; (800a17c <prvSwitchTimerLists+0xc4>)
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	6013      	str	r3, [r2, #0]
}
 800a170:	bf00      	nop
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	200002f0 	.word	0x200002f0
 800a17c:	200002f4 	.word	0x200002f4

0800a180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a184:	f000 f96e 	bl	800a464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a188:	4b12      	ldr	r3, [pc, #72]	; (800a1d4 <prvCheckForValidListAndQueue+0x54>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11d      	bne.n	800a1cc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800a190:	4811      	ldr	r0, [pc, #68]	; (800a1d8 <prvCheckForValidListAndQueue+0x58>)
 800a192:	f7fe f96b 	bl	800846c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a196:	4811      	ldr	r0, [pc, #68]	; (800a1dc <prvCheckForValidListAndQueue+0x5c>)
 800a198:	f7fe f968 	bl	800846c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <prvCheckForValidListAndQueue+0x60>)
 800a19e:	4a0e      	ldr	r2, [pc, #56]	; (800a1d8 <prvCheckForValidListAndQueue+0x58>)
 800a1a0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <prvCheckForValidListAndQueue+0x64>)
 800a1a4:	4a0d      	ldr	r2, [pc, #52]	; (800a1dc <prvCheckForValidListAndQueue+0x5c>)
 800a1a6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	210c      	movs	r1, #12
 800a1ac:	200a      	movs	r0, #10
 800a1ae:	f7fe fa79 	bl	80086a4 <xQueueGenericCreate>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	4a07      	ldr	r2, [pc, #28]	; (800a1d4 <prvCheckForValidListAndQueue+0x54>)
 800a1b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1b8:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <prvCheckForValidListAndQueue+0x54>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <prvCheckForValidListAndQueue+0x54>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4908      	ldr	r1, [pc, #32]	; (800a1e8 <prvCheckForValidListAndQueue+0x68>)
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fe fe50 	bl	8008e6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1cc:	f000 f97a 	bl	800a4c4 <vPortExitCritical>
}
 800a1d0:	bf00      	nop
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	200002f8 	.word	0x200002f8
 800a1d8:	200002c8 	.word	0x200002c8
 800a1dc:	200002dc 	.word	0x200002dc
 800a1e0:	200002f0 	.word	0x200002f0
 800a1e4:	200002f4 	.word	0x200002f4
 800a1e8:	080140a4 	.word	0x080140a4

0800a1ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3b04      	subs	r3, #4
 800a20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f023 0201 	bic.w	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b04      	subs	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a21c:	4a0c      	ldr	r2, [pc, #48]	; (800a250 <pxPortInitialiseStack+0x64>)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3b14      	subs	r3, #20
 800a226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3b04      	subs	r3, #4
 800a232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f06f 0202 	mvn.w	r2, #2
 800a23a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3b20      	subs	r3, #32
 800a240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a242:	68fb      	ldr	r3, [r7, #12]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	0800a255 	.word	0x0800a255

0800a254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a25e:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <prvTaskExitError+0x54>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a266:	d00a      	beq.n	800a27e <prvTaskExitError+0x2a>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	60fb      	str	r3, [r7, #12]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <prvTaskExitError+0x28>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60bb      	str	r3, [r7, #8]
}
 800a290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a292:	bf00      	nop
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0fc      	beq.n	800a294 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	2000004c 	.word	0x2000004c
 800a2ac:	00000000 	.word	0x00000000

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	; (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	4770      	bx	lr
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	200001c4 	.word	0x200001c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2d8:	4808      	ldr	r0, [pc, #32]	; (800a2fc <prvPortStartFirstTask+0x24>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8814 	msr	CONTROL, r0
 800a2ea:	b662      	cpsie	i
 800a2ec:	b661      	cpsie	f
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	df00      	svc	0
 800a2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2fa:	bf00      	nop
 800a2fc:	e000ed08 	.word	0xe000ed08

0800a300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a306:	4b4e      	ldr	r3, [pc, #312]	; (800a440 <xPortStartScheduler+0x140>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a4e      	ldr	r2, [pc, #312]	; (800a444 <xPortStartScheduler+0x144>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10a      	bne.n	800a326 <xPortStartScheduler+0x26>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	61bb      	str	r3, [r7, #24]
}
 800a322:	bf00      	nop
 800a324:	e7fe      	b.n	800a324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a326:	4b46      	ldr	r3, [pc, #280]	; (800a440 <xPortStartScheduler+0x140>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a47      	ldr	r2, [pc, #284]	; (800a448 <xPortStartScheduler+0x148>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d10a      	bne.n	800a346 <xPortStartScheduler+0x46>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	617b      	str	r3, [r7, #20]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a346:	4b41      	ldr	r3, [pc, #260]	; (800a44c <xPortStartScheduler+0x14c>)
 800a348:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	22ff      	movs	r2, #255	; 0xff
 800a356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	4b39      	ldr	r3, [pc, #228]	; (800a450 <xPortStartScheduler+0x150>)
 800a36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a36e:	4b39      	ldr	r3, [pc, #228]	; (800a454 <xPortStartScheduler+0x154>)
 800a370:	2207      	movs	r2, #7
 800a372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a374:	e009      	b.n	800a38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a376:	4b37      	ldr	r3, [pc, #220]	; (800a454 <xPortStartScheduler+0x154>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	4a35      	ldr	r2, [pc, #212]	; (800a454 <xPortStartScheduler+0x154>)
 800a37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	b2db      	uxtb	r3, r3
 800a388:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a392:	2b80      	cmp	r3, #128	; 0x80
 800a394:	d0ef      	beq.n	800a376 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800a396:	4b2f      	ldr	r3, [pc, #188]	; (800a454 <xPortStartScheduler+0x154>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f1c3 0307 	rsb	r3, r3, #7
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d00a      	beq.n	800a3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	613b      	str	r3, [r7, #16]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3b8:	4b26      	ldr	r3, [pc, #152]	; (800a454 <xPortStartScheduler+0x154>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f1c3 0307 	rsb	r3, r3, #7
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	d00a      	beq.n	800a3da <xPortStartScheduler+0xda>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	60fb      	str	r3, [r7, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3da:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <xPortStartScheduler+0x154>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	021b      	lsls	r3, r3, #8
 800a3e0:	4a1c      	ldr	r2, [pc, #112]	; (800a454 <xPortStartScheduler+0x154>)
 800a3e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3e4:	4b1b      	ldr	r3, [pc, #108]	; (800a454 <xPortStartScheduler+0x154>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3ec:	4a19      	ldr	r2, [pc, #100]	; (800a454 <xPortStartScheduler+0x154>)
 800a3ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3f8:	4b17      	ldr	r3, [pc, #92]	; (800a458 <xPortStartScheduler+0x158>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a16      	ldr	r2, [pc, #88]	; (800a458 <xPortStartScheduler+0x158>)
 800a3fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a402:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a404:	4b14      	ldr	r3, [pc, #80]	; (800a458 <xPortStartScheduler+0x158>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a13      	ldr	r2, [pc, #76]	; (800a458 <xPortStartScheduler+0x158>)
 800a40a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a40e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a410:	f000 f8dc 	bl	800a5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a414:	4b11      	ldr	r3, [pc, #68]	; (800a45c <xPortStartScheduler+0x15c>)
 800a416:	2200      	movs	r2, #0
 800a418:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a41a:	f000 f8fb 	bl	800a614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a41e:	4b10      	ldr	r3, [pc, #64]	; (800a460 <xPortStartScheduler+0x160>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a0f      	ldr	r2, [pc, #60]	; (800a460 <xPortStartScheduler+0x160>)
 800a424:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a428:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a42a:	f7ff ff55 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a42e:	f7ff f879 	bl	8009524 <vTaskSwitchContext>
	prvTaskExitError();
 800a432:	f7ff ff0f 	bl	800a254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	e000ed00 	.word	0xe000ed00
 800a444:	410fc271 	.word	0x410fc271
 800a448:	410fc270 	.word	0x410fc270
 800a44c:	e000e400 	.word	0xe000e400
 800a450:	20000304 	.word	0x20000304
 800a454:	20000308 	.word	0x20000308
 800a458:	e000ed20 	.word	0xe000ed20
 800a45c:	2000004c 	.word	0x2000004c
 800a460:	e000ef34 	.word	0xe000ef34

0800a464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	607b      	str	r3, [r7, #4]
}
 800a47c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a47e:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <vPortEnterCritical+0x58>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	4a0d      	ldr	r2, [pc, #52]	; (800a4bc <vPortEnterCritical+0x58>)
 800a486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a488:	4b0c      	ldr	r3, [pc, #48]	; (800a4bc <vPortEnterCritical+0x58>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d10f      	bne.n	800a4b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a490:	4b0b      	ldr	r3, [pc, #44]	; (800a4c0 <vPortEnterCritical+0x5c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	603b      	str	r3, [r7, #0]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <vPortEnterCritical+0x4a>
	}
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	2000004c 	.word	0x2000004c
 800a4c0:	e000ed04 	.word	0xe000ed04

0800a4c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4ca:	4b12      	ldr	r3, [pc, #72]	; (800a514 <vPortExitCritical+0x50>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <vPortExitCritical+0x24>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	607b      	str	r3, [r7, #4]
}
 800a4e4:	bf00      	nop
 800a4e6:	e7fe      	b.n	800a4e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	; (800a514 <vPortExitCritical+0x50>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	4a09      	ldr	r2, [pc, #36]	; (800a514 <vPortExitCritical+0x50>)
 800a4f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <vPortExitCritical+0x50>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <vPortExitCritical+0x42>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	f383 8811 	msr	BASEPRI, r3
}
 800a504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	2000004c 	.word	0x2000004c
	...

0800a520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a520:	f3ef 8009 	mrs	r0, PSP
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4b15      	ldr	r3, [pc, #84]	; (800a580 <pxCurrentTCBConst>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	f01e 0f10 	tst.w	lr, #16
 800a530:	bf08      	it	eq
 800a532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	6010      	str	r0, [r2, #0]
 800a53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a544:	f380 8811 	msr	BASEPRI, r0
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f7fe ffe8 	bl	8009524 <vTaskSwitchContext>
 800a554:	f04f 0000 	mov.w	r0, #0
 800a558:	f380 8811 	msr	BASEPRI, r0
 800a55c:	bc09      	pop	{r0, r3}
 800a55e:	6819      	ldr	r1, [r3, #0]
 800a560:	6808      	ldr	r0, [r1, #0]
 800a562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a566:	f01e 0f10 	tst.w	lr, #16
 800a56a:	bf08      	it	eq
 800a56c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a570:	f380 8809 	msr	PSP, r0
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	f3af 8000 	nop.w

0800a580 <pxCurrentTCBConst>:
 800a580:	200001c4 	.word	0x200001c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop

0800a588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	607b      	str	r3, [r7, #4]
}
 800a5a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5a2:	f7fe ff07 	bl	80093b4 <xTaskIncrementTick>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d003      	beq.n	800a5b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5ac:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <SysTick_Handler+0x40>)
 800a5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	f383 8811 	msr	BASEPRI, r3
}
 800a5be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <vPortSetupTimerInterrupt+0x34>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <vPortSetupTimerInterrupt+0x38>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <vPortSetupTimerInterrupt+0x3c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <vPortSetupTimerInterrupt+0x40>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	099b      	lsrs	r3, r3, #6
 800a5e8:	4a09      	ldr	r2, [pc, #36]	; (800a610 <vPortSetupTimerInterrupt+0x44>)
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ee:	4b04      	ldr	r3, [pc, #16]	; (800a600 <vPortSetupTimerInterrupt+0x34>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
}
 800a5f4:	bf00      	nop
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	e000e010 	.word	0xe000e010
 800a604:	e000e018 	.word	0xe000e018
 800a608:	200000a4 	.word	0x200000a4
 800a60c:	10624dd3 	.word	0x10624dd3
 800a610:	e000e014 	.word	0xe000e014

0800a614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a624 <vPortEnableVFP+0x10>
 800a618:	6801      	ldr	r1, [r0, #0]
 800a61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a61e:	6001      	str	r1, [r0, #0]
 800a620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a622:	bf00      	nop
 800a624:	e000ed88 	.word	0xe000ed88

0800a628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a62e:	f3ef 8305 	mrs	r3, IPSR
 800a632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b0f      	cmp	r3, #15
 800a638:	d914      	bls.n	800a664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a63a:	4a17      	ldr	r2, [pc, #92]	; (800a698 <vPortValidateInterruptPriority+0x70>)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a644:	4b15      	ldr	r3, [pc, #84]	; (800a69c <vPortValidateInterruptPriority+0x74>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d20a      	bcs.n	800a664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	607b      	str	r3, [r7, #4]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a664:	4b0e      	ldr	r3, [pc, #56]	; (800a6a0 <vPortValidateInterruptPriority+0x78>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a66c:	4b0d      	ldr	r3, [pc, #52]	; (800a6a4 <vPortValidateInterruptPriority+0x7c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d90a      	bls.n	800a68a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	603b      	str	r3, [r7, #0]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <vPortValidateInterruptPriority+0x60>
	}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	e000e3f0 	.word	0xe000e3f0
 800a69c:	20000304 	.word	0x20000304
 800a6a0:	e000ed0c 	.word	0xe000ed0c
 800a6a4:	20000308 	.word	0x20000308

0800a6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08a      	sub	sp, #40	; 0x28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6b4:	f7fe fdc4 	bl	8009240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6b8:	4b5b      	ldr	r3, [pc, #364]	; (800a828 <pvPortMalloc+0x180>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6c0:	f000 f920 	bl	800a904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6c4:	4b59      	ldr	r3, [pc, #356]	; (800a82c <pvPortMalloc+0x184>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f040 8093 	bne.w	800a7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d01d      	beq.n	800a714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6d8:	2208      	movs	r2, #8
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4413      	add	r3, r2
 800a6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f003 0307 	and.w	r3, r3, #7
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d014      	beq.n	800a714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f023 0307 	bic.w	r3, r3, #7
 800a6f0:	3308      	adds	r3, #8
 800a6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <pvPortMalloc+0x6c>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	617b      	str	r3, [r7, #20]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d06e      	beq.n	800a7f8 <pvPortMalloc+0x150>
 800a71a:	4b45      	ldr	r3, [pc, #276]	; (800a830 <pvPortMalloc+0x188>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d869      	bhi.n	800a7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a724:	4b43      	ldr	r3, [pc, #268]	; (800a834 <pvPortMalloc+0x18c>)
 800a726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a728:	4b42      	ldr	r3, [pc, #264]	; (800a834 <pvPortMalloc+0x18c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a72e:	e004      	b.n	800a73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d903      	bls.n	800a74c <pvPortMalloc+0xa4>
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1f1      	bne.n	800a730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a74c:	4b36      	ldr	r3, [pc, #216]	; (800a828 <pvPortMalloc+0x180>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a752:	429a      	cmp	r2, r3
 800a754:	d050      	beq.n	800a7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2208      	movs	r2, #8
 800a75c:	4413      	add	r3, r2
 800a75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	2308      	movs	r3, #8
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	429a      	cmp	r2, r3
 800a776:	d91f      	bls.n	800a7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4413      	add	r3, r2
 800a77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	613b      	str	r3, [r7, #16]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	1ad2      	subs	r2, r2, r3
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7b2:	69b8      	ldr	r0, [r7, #24]
 800a7b4:	f000 f908 	bl	800a9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <pvPortMalloc+0x188>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	4a1b      	ldr	r2, [pc, #108]	; (800a830 <pvPortMalloc+0x188>)
 800a7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <pvPortMalloc+0x188>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	4b1b      	ldr	r3, [pc, #108]	; (800a838 <pvPortMalloc+0x190>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d203      	bcs.n	800a7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7d2:	4b17      	ldr	r3, [pc, #92]	; (800a830 <pvPortMalloc+0x188>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a18      	ldr	r2, [pc, #96]	; (800a838 <pvPortMalloc+0x190>)
 800a7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	4b13      	ldr	r3, [pc, #76]	; (800a82c <pvPortMalloc+0x184>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7ee:	4b13      	ldr	r3, [pc, #76]	; (800a83c <pvPortMalloc+0x194>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	4a11      	ldr	r2, [pc, #68]	; (800a83c <pvPortMalloc+0x194>)
 800a7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7f8:	f7fe fd30 	bl	800925c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00a      	beq.n	800a81c <pvPortMalloc+0x174>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	60fb      	str	r3, [r7, #12]
}
 800a818:	bf00      	nop
 800a81a:	e7fe      	b.n	800a81a <pvPortMalloc+0x172>
	return pvReturn;
 800a81c:	69fb      	ldr	r3, [r7, #28]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3728      	adds	r7, #40	; 0x28
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20006714 	.word	0x20006714
 800a82c:	20006728 	.word	0x20006728
 800a830:	20006718 	.word	0x20006718
 800a834:	2000670c 	.word	0x2000670c
 800a838:	2000671c 	.word	0x2000671c
 800a83c:	20006720 	.word	0x20006720

0800a840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d04d      	beq.n	800a8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a852:	2308      	movs	r3, #8
 800a854:	425b      	negs	r3, r3
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	4413      	add	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	4b24      	ldr	r3, [pc, #144]	; (800a8f8 <vPortFree+0xb8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4013      	ands	r3, r2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10a      	bne.n	800a884 <vPortFree+0x44>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	60fb      	str	r3, [r7, #12]
}
 800a880:	bf00      	nop
 800a882:	e7fe      	b.n	800a882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00a      	beq.n	800a8a2 <vPortFree+0x62>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	60bb      	str	r3, [r7, #8]
}
 800a89e:	bf00      	nop
 800a8a0:	e7fe      	b.n	800a8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <vPortFree+0xb8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01e      	beq.n	800a8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d11a      	bne.n	800a8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <vPortFree+0xb8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	43db      	mvns	r3, r3
 800a8c2:	401a      	ands	r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8c8:	f7fe fcba 	bl	8009240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <vPortFree+0xbc>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4a09      	ldr	r2, [pc, #36]	; (800a8fc <vPortFree+0xbc>)
 800a8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f000 f874 	bl	800a9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8e0:	4b07      	ldr	r3, [pc, #28]	; (800a900 <vPortFree+0xc0>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	4a06      	ldr	r2, [pc, #24]	; (800a900 <vPortFree+0xc0>)
 800a8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8ea:	f7fe fcb7 	bl	800925c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8ee:	bf00      	nop
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20006728 	.word	0x20006728
 800a8fc:	20006718 	.word	0x20006718
 800a900:	20006724 	.word	0x20006724

0800a904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a90a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800a90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a910:	4b27      	ldr	r3, [pc, #156]	; (800a9b0 <prvHeapInit+0xac>)
 800a912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3307      	adds	r3, #7
 800a922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f023 0307 	bic.w	r3, r3, #7
 800a92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	4a1f      	ldr	r2, [pc, #124]	; (800a9b0 <prvHeapInit+0xac>)
 800a934:	4413      	add	r3, r2
 800a936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <prvHeapInit+0xb0>)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a942:	4b1c      	ldr	r3, [pc, #112]	; (800a9b4 <prvHeapInit+0xb0>)
 800a944:	2200      	movs	r2, #0
 800a946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4413      	add	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a950:	2208      	movs	r2, #8
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a15      	ldr	r2, [pc, #84]	; (800a9b8 <prvHeapInit+0xb4>)
 800a964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a966:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <prvHeapInit+0xb4>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2200      	movs	r2, #0
 800a96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a96e:	4b12      	ldr	r3, [pc, #72]	; (800a9b8 <prvHeapInit+0xb4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	1ad2      	subs	r2, r2, r3
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a984:	4b0c      	ldr	r3, [pc, #48]	; (800a9b8 <prvHeapInit+0xb4>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	4a0a      	ldr	r2, [pc, #40]	; (800a9bc <prvHeapInit+0xb8>)
 800a992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	4a09      	ldr	r2, [pc, #36]	; (800a9c0 <prvHeapInit+0xbc>)
 800a99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <prvHeapInit+0xc0>)
 800a99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9a2:	601a      	str	r2, [r3, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	2000030c 	.word	0x2000030c
 800a9b4:	2000670c 	.word	0x2000670c
 800a9b8:	20006714 	.word	0x20006714
 800a9bc:	2000671c 	.word	0x2000671c
 800a9c0:	20006718 	.word	0x20006718
 800a9c4:	20006728 	.word	0x20006728

0800a9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9d0:	4b28      	ldr	r3, [pc, #160]	; (800aa74 <prvInsertBlockIntoFreeList+0xac>)
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	e002      	b.n	800a9dc <prvInsertBlockIntoFreeList+0x14>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d8f7      	bhi.n	800a9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d108      	bne.n	800aa0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	441a      	add	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d118      	bne.n	800aa50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4b15      	ldr	r3, [pc, #84]	; (800aa78 <prvInsertBlockIntoFreeList+0xb0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d00d      	beq.n	800aa46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	441a      	add	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	e008      	b.n	800aa58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa46:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <prvInsertBlockIntoFreeList+0xb0>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	e003      	b.n	800aa58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d002      	beq.n	800aa66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa66:	bf00      	nop
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	2000670c 	.word	0x2000670c
 800aa78:	20006714 	.word	0x20006714

0800aa7c <GetTick>:
/**
 * @brief Retorna el valor de la variabla ticks
 * @param none
 * @return ticks
 */
static uint32_t GetTick(void){
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0

	return uwTick;
 800aa80:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <GetTick+0x14>)
 800aa82:	681b      	ldr	r3, [r3, #0]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	2000672c 	.word	0x2000672c

0800aa94 <delay_init_it>:

/*Function defines ------------------------------------*/
void delay_init_it(void){
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
	uint32_t temp;
	/*deshabilitar la systick*/
	SysTick->CTRL = 0;
 800aa9a:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <delay_init_it+0x54>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate();
 800aaa0:	f006 fbb2 	bl	8011208 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000UL;
 800aaa4:	4b11      	ldr	r3, [pc, #68]	; (800aaec <delay_init_it+0x58>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a11      	ldr	r2, [pc, #68]	; (800aaf0 <delay_init_it+0x5c>)
 800aaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aaae:	099b      	lsrs	r3, r3, #6
 800aab0:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp - 1;
 800aab2:	4a0d      	ldr	r2, [pc, #52]	; (800aae8 <delay_init_it+0x54>)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	//SYSCLK
 800aaba:	4b0b      	ldr	r3, [pc, #44]	; (800aae8 <delay_init_it+0x54>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a0a      	ldr	r2, [pc, #40]	; (800aae8 <delay_init_it+0x54>)
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	6013      	str	r3, [r2, #0]

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		//habilitando la IT del systick
 800aac6:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <delay_init_it+0x54>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a07      	ldr	r2, [pc, #28]	; (800aae8 <delay_init_it+0x54>)
 800aacc:	f043 0302 	orr.w	r3, r3, #2
 800aad0:	6013      	str	r3, [r2, #0]

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <delay_init_it+0x54>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a04      	ldr	r2, [pc, #16]	; (800aae8 <delay_init_it+0x54>)
 800aad8:	f043 0301 	orr.w	r3, r3, #1
 800aadc:	6013      	str	r3, [r2, #0]
	return;
 800aade:	bf00      	nop
}
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	e000e010 	.word	0xe000e010
 800aaec:	200000a4 	.word	0x200000a4
 800aaf0:	10624dd3 	.word	0x10624dd3

0800aaf4 <delay_ms>:

/**
 * @brief funcion encargada de generar retardos en ms
 * @param [delay]: tiempo de retado en ms deseado
 */
void delay_ms(uint32_t delay){
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTick();
 800aafc:	f7ff ffbe 	bl	800aa7c <GetTick>
 800ab00:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTick() - tickstart)<wait);
 800ab06:	bf00      	nop
 800ab08:	f7ff ffb8 	bl	800aa7c <GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d8f7      	bhi.n	800ab08 <delay_ms+0x14>

	return;
 800ab18:	bf00      	nop
}
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <millis>:

/**
 * @brief funcion similar a la funcion de arduino
 */
uint32_t millis(void){
 800ab20:	b580      	push	{r7, lr}
 800ab22:	af00      	add	r7, sp, #0
	return GetTick();
 800ab24:	f7ff ffaa 	bl	800aa7c <GetTick>
 800ab28:	4603      	mov	r3, r0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <mpu6050_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t mpu6050_basic_init(mpu6050_address_t addr_pin)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	71fb      	strb	r3, [r7, #7]
    uint8_t res;

    /* link interface function */
    DRIVER_MPU6050_LINK_INIT(&gs_handle, mpu6050_handle_t);
 800ab3a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab3e:	2100      	movs	r1, #0
 800ab40:	48b0      	ldr	r0, [pc, #704]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab42:	f007 f847 	bl	8011bd4 <memset>
    DRIVER_MPU6050_LINK_IIC_INIT(&gs_handle, mpu6050_interface_iic_init);
 800ab46:	4baf      	ldr	r3, [pc, #700]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab48:	4aaf      	ldr	r2, [pc, #700]	; (800ae08 <mpu6050_basic_init+0x2d8>)
 800ab4a:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6050_LINK_IIC_DEINIT(&gs_handle, mpu6050_interface_iic_deinit);
 800ab4c:	4bad      	ldr	r3, [pc, #692]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab4e:	4aaf      	ldr	r2, [pc, #700]	; (800ae0c <mpu6050_basic_init+0x2dc>)
 800ab50:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6050_LINK_IIC_READ(&gs_handle, mpu6050_interface_iic_read);
 800ab52:	4bac      	ldr	r3, [pc, #688]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab54:	4aae      	ldr	r2, [pc, #696]	; (800ae10 <mpu6050_basic_init+0x2e0>)
 800ab56:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6050_LINK_IIC_WRITE(&gs_handle, mpu6050_interface_iic_write);
 800ab58:	4baa      	ldr	r3, [pc, #680]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab5a:	4aae      	ldr	r2, [pc, #696]	; (800ae14 <mpu6050_basic_init+0x2e4>)
 800ab5c:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6050_LINK_DELAY_MS(&gs_handle, mpu6050_interface_delay_ms);
 800ab5e:	4ba9      	ldr	r3, [pc, #676]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab60:	4aad      	ldr	r2, [pc, #692]	; (800ae18 <mpu6050_basic_init+0x2e8>)
 800ab62:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6050_LINK_DEBUG_PRINT(&gs_handle, mpu6050_interface_debug_print);
 800ab64:	4ba7      	ldr	r3, [pc, #668]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab66:	4aad      	ldr	r2, [pc, #692]	; (800ae1c <mpu6050_basic_init+0x2ec>)
 800ab68:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6050_LINK_RECEIVE_CALLBACK(&gs_handle, mpu6050_interface_receive_callback);
 800ab6a:	4ba6      	ldr	r3, [pc, #664]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab6c:	4aac      	ldr	r2, [pc, #688]	; (800ae20 <mpu6050_basic_init+0x2f0>)
 800ab6e:	61da      	str	r2, [r3, #28]

    /* set the addr pin */
    res = mpu6050_set_addr_pin(&gs_handle, addr_pin);
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	4619      	mov	r1, r3
 800ab74:	48a3      	ldr	r0, [pc, #652]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab76:	f7fb fc51 	bl	800641c <mpu6050_set_addr_pin>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <mpu6050_basic_init+0x5e>
    {
        mpu6050_interface_debug_print("mpu6050: set addr pin failed.\n");
 800ab84:	48a7      	ldr	r0, [pc, #668]	; (800ae24 <mpu6050_basic_init+0x2f4>)
 800ab86:	f7fd fc14 	bl	80083b2 <mpu6050_interface_debug_print>

        return 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e31f      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* init */
    res = mpu6050_init(&gs_handle);
 800ab8e:	489d      	ldr	r0, [pc, #628]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ab90:	f7fb fc5a 	bl	8006448 <mpu6050_init>
 800ab94:	4603      	mov	r3, r0
 800ab96:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <mpu6050_basic_init+0x78>
    {
        mpu6050_interface_debug_print("mpu6050: init failed.\n");
 800ab9e:	48a2      	ldr	r0, [pc, #648]	; (800ae28 <mpu6050_basic_init+0x2f8>)
 800aba0:	f7fd fc07 	bl	80083b2 <mpu6050_interface_debug_print>

        return 1;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e312      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* delay 100 ms */
    mpu6050_interface_delay_ms(100);
 800aba8:	2064      	movs	r0, #100	; 0x64
 800abaa:	f7fd fbf7 	bl	800839c <mpu6050_interface_delay_ms>

    /* disable sleep */
    res = mpu6050_set_sleep(&gs_handle, MPU6050_BOOL_FALSE);
 800abae:	2100      	movs	r1, #0
 800abb0:	4894      	ldr	r0, [pc, #592]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800abb2:	f7fc fdcb 	bl	800774c <mpu6050_set_sleep>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d007      	beq.n	800abd0 <mpu6050_basic_init+0xa0>
    {
        mpu6050_interface_debug_print("mpu6050: set sleep failed.\n");
 800abc0:	489a      	ldr	r0, [pc, #616]	; (800ae2c <mpu6050_basic_init+0x2fc>)
 800abc2:	f7fd fbf6 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800abc6:	488f      	ldr	r0, [pc, #572]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800abc8:	f7fb fd20 	bl	800660c <mpu6050_deinit>

        return 1;
 800abcc:	2301      	movs	r3, #1
 800abce:	e2fe      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default clock source */
    res = mpu6050_set_clock_source(&gs_handle, MPU6050_BASIC_DEFAULT_CLOCK_SOURCE);
 800abd0:	2101      	movs	r1, #1
 800abd2:	488c      	ldr	r0, [pc, #560]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800abd4:	f7fc fcd2 	bl	800757c <mpu6050_set_clock_source>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d007      	beq.n	800abf2 <mpu6050_basic_init+0xc2>
    {
        mpu6050_interface_debug_print("mpu6050: set clock source failed.\n");
 800abe2:	4893      	ldr	r0, [pc, #588]	; (800ae30 <mpu6050_basic_init+0x300>)
 800abe4:	f7fd fbe5 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800abe8:	4886      	ldr	r0, [pc, #536]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800abea:	f7fb fd0f 	bl	800660c <mpu6050_deinit>

        return 1;
 800abee:	2301      	movs	r3, #1
 800abf0:	e2ed      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default rate */
    res = mpu6050_set_sample_rate_divider(&gs_handle, 1000 / (MPU6050_BASIC_DEFAULT_RATE - 1));
 800abf2:	2114      	movs	r1, #20
 800abf4:	4883      	ldr	r0, [pc, #524]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800abf6:	f7fc fe9f 	bl	8007938 <mpu6050_set_sample_rate_divider>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d007      	beq.n	800ac14 <mpu6050_basic_init+0xe4>
    {
        mpu6050_interface_debug_print("mpu6050: set sample rate divider failed.\n");
 800ac04:	488b      	ldr	r0, [pc, #556]	; (800ae34 <mpu6050_basic_init+0x304>)
 800ac06:	f7fd fbd4 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ac0a:	487e      	ldr	r0, [pc, #504]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac0c:	f7fb fcfe 	bl	800660c <mpu6050_deinit>

        return 1;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e2dc      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default low pass filter */
    res = mpu6050_set_low_pass_filter(&gs_handle, MPU6050_BASIC_DEFAULT_LOW_PASS_FILTER);
 800ac14:	2103      	movs	r1, #3
 800ac16:	487b      	ldr	r0, [pc, #492]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac18:	f7fc ff06 	bl	8007a28 <mpu6050_set_low_pass_filter>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d007      	beq.n	800ac36 <mpu6050_basic_init+0x106>
    {
        mpu6050_interface_debug_print("mpu6050: set low pass filter failed.\n");
 800ac26:	4884      	ldr	r0, [pc, #528]	; (800ae38 <mpu6050_basic_init+0x308>)
 800ac28:	f7fd fbc3 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ac2c:	4875      	ldr	r0, [pc, #468]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac2e:	f7fb fced 	bl	800660c <mpu6050_deinit>

        return 1;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e2cb      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable temperature sensor */
    res = mpu6050_set_temperature_sensor(&gs_handle, MPU6050_BOOL_TRUE);
 800ac36:	2101      	movs	r1, #1
 800ac38:	4872      	ldr	r0, [pc, #456]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac3a:	f7fc fce9 	bl	8007610 <mpu6050_set_temperature_sensor>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d007      	beq.n	800ac58 <mpu6050_basic_init+0x128>
    {
        mpu6050_interface_debug_print("mpu6050: set temperature sensor failed.\n");
 800ac48:	487c      	ldr	r0, [pc, #496]	; (800ae3c <mpu6050_basic_init+0x30c>)
 800ac4a:	f7fd fbb2 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ac4e:	486d      	ldr	r0, [pc, #436]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac50:	f7fb fcdc 	bl	800660c <mpu6050_deinit>

        return 1;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e2ba      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default cycle wake up */
    res = mpu6050_set_cycle_wake_up(&gs_handle, MPU6050_BASIC_DEFAULT_CYCLE_WAKE_UP);
 800ac58:	2100      	movs	r1, #0
 800ac5a:	486a      	ldr	r0, [pc, #424]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac5c:	f7fc fd28 	bl	80076b0 <mpu6050_set_cycle_wake_up>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d007      	beq.n	800ac7a <mpu6050_basic_init+0x14a>
    {
        mpu6050_interface_debug_print("mpu6050: set cycle wake up failed.\n");
 800ac6a:	4875      	ldr	r0, [pc, #468]	; (800ae40 <mpu6050_basic_init+0x310>)
 800ac6c:	f7fd fba1 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ac70:	4864      	ldr	r0, [pc, #400]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac72:	f7fb fccb 	bl	800660c <mpu6050_deinit>

        return 1;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e2a9      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default wake up frequency */
    res = mpu6050_set_wake_up_frequency(&gs_handle, MPU6050_BASIC_DEFAULT_WAKE_UP_FREQUENCY);
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	4861      	ldr	r0, [pc, #388]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac7e:	f7fc fe0d 	bl	800789c <mpu6050_set_wake_up_frequency>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d007      	beq.n	800ac9c <mpu6050_basic_init+0x16c>
    {
        mpu6050_interface_debug_print("mpu6050: set wake up frequency failed.\n");
 800ac8c:	486d      	ldr	r0, [pc, #436]	; (800ae44 <mpu6050_basic_init+0x314>)
 800ac8e:	f7fd fb90 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ac92:	485c      	ldr	r0, [pc, #368]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ac94:	f7fb fcba 	bl	800660c <mpu6050_deinit>

        return 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e298      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable acc x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_X, MPU6050_BOOL_FALSE);
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2105      	movs	r1, #5
 800aca0:	4858      	ldr	r0, [pc, #352]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800aca2:	f7fc fda1 	bl	80077e8 <mpu6050_set_standby_mode>
 800aca6:	4603      	mov	r3, r0
 800aca8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d007      	beq.n	800acc0 <mpu6050_basic_init+0x190>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800acb0:	4865      	ldr	r0, [pc, #404]	; (800ae48 <mpu6050_basic_init+0x318>)
 800acb2:	f7fd fb7e 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800acb6:	4853      	ldr	r0, [pc, #332]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800acb8:	f7fb fca8 	bl	800660c <mpu6050_deinit>

        return 1;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e286      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable acc y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Y, MPU6050_BOOL_FALSE);
 800acc0:	2200      	movs	r2, #0
 800acc2:	2104      	movs	r1, #4
 800acc4:	484f      	ldr	r0, [pc, #316]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800acc6:	f7fc fd8f 	bl	80077e8 <mpu6050_set_standby_mode>
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800acce:	7bfb      	ldrb	r3, [r7, #15]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d007      	beq.n	800ace4 <mpu6050_basic_init+0x1b4>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800acd4:	485c      	ldr	r0, [pc, #368]	; (800ae48 <mpu6050_basic_init+0x318>)
 800acd6:	f7fd fb6c 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800acda:	484a      	ldr	r0, [pc, #296]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800acdc:	f7fb fc96 	bl	800660c <mpu6050_deinit>

        return 1;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e274      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable acc z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Z, MPU6050_BOOL_FALSE);
 800ace4:	2200      	movs	r2, #0
 800ace6:	2103      	movs	r1, #3
 800ace8:	4846      	ldr	r0, [pc, #280]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800acea:	f7fc fd7d 	bl	80077e8 <mpu6050_set_standby_mode>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d007      	beq.n	800ad08 <mpu6050_basic_init+0x1d8>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800acf8:	4853      	ldr	r0, [pc, #332]	; (800ae48 <mpu6050_basic_init+0x318>)
 800acfa:	f7fd fb5a 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800acfe:	4841      	ldr	r0, [pc, #260]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad00:	f7fb fc84 	bl	800660c <mpu6050_deinit>

        return 1;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e262      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable gyro x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_X, MPU6050_BOOL_FALSE);
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	483d      	ldr	r0, [pc, #244]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad0e:	f7fc fd6b 	bl	80077e8 <mpu6050_set_standby_mode>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ad16:	7bfb      	ldrb	r3, [r7, #15]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d007      	beq.n	800ad2c <mpu6050_basic_init+0x1fc>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800ad1c:	484a      	ldr	r0, [pc, #296]	; (800ae48 <mpu6050_basic_init+0x318>)
 800ad1e:	f7fd fb48 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ad22:	4838      	ldr	r0, [pc, #224]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad24:	f7fb fc72 	bl	800660c <mpu6050_deinit>

        return 1;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e250      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable gyro y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Y, MPU6050_BOOL_FALSE);
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2101      	movs	r1, #1
 800ad30:	4834      	ldr	r0, [pc, #208]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad32:	f7fc fd59 	bl	80077e8 <mpu6050_set_standby_mode>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d007      	beq.n	800ad50 <mpu6050_basic_init+0x220>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800ad40:	4841      	ldr	r0, [pc, #260]	; (800ae48 <mpu6050_basic_init+0x318>)
 800ad42:	f7fd fb36 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ad46:	482f      	ldr	r0, [pc, #188]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad48:	f7fb fc60 	bl	800660c <mpu6050_deinit>

        return 1;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e23e      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* enable gyro z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Z, MPU6050_BOOL_FALSE);
 800ad50:	2200      	movs	r2, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	482b      	ldr	r0, [pc, #172]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad56:	f7fc fd47 	bl	80077e8 <mpu6050_set_standby_mode>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ad5e:	7bfb      	ldrb	r3, [r7, #15]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d007      	beq.n	800ad74 <mpu6050_basic_init+0x244>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800ad64:	4838      	ldr	r0, [pc, #224]	; (800ae48 <mpu6050_basic_init+0x318>)
 800ad66:	f7fd fb24 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ad6a:	4826      	ldr	r0, [pc, #152]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad6c:	f7fb fc4e 	bl	800660c <mpu6050_deinit>

        return 1;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e22c      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable gyroscope x test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 800ad74:	2200      	movs	r2, #0
 800ad76:	2107      	movs	r1, #7
 800ad78:	4822      	ldr	r0, [pc, #136]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad7a:	f7fc fe9f 	bl	8007abc <mpu6050_set_gyroscope_test>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d007      	beq.n	800ad98 <mpu6050_basic_init+0x268>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 800ad88:	4830      	ldr	r0, [pc, #192]	; (800ae4c <mpu6050_basic_init+0x31c>)
 800ad8a:	f7fd fb12 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ad8e:	481d      	ldr	r0, [pc, #116]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad90:	f7fb fc3c 	bl	800660c <mpu6050_deinit>

        return 1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e21a      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable gyroscope y test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2106      	movs	r1, #6
 800ad9c:	4819      	ldr	r0, [pc, #100]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ad9e:	f7fc fe8d 	bl	8007abc <mpu6050_set_gyroscope_test>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d007      	beq.n	800adbc <mpu6050_basic_init+0x28c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 800adac:	4827      	ldr	r0, [pc, #156]	; (800ae4c <mpu6050_basic_init+0x31c>)
 800adae:	f7fd fb00 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800adb2:	4814      	ldr	r0, [pc, #80]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800adb4:	f7fb fc2a 	bl	800660c <mpu6050_deinit>

        return 1;
 800adb8:	2301      	movs	r3, #1
 800adba:	e208      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable gyroscope z test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 800adbc:	2200      	movs	r2, #0
 800adbe:	2105      	movs	r1, #5
 800adc0:	4810      	ldr	r0, [pc, #64]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800adc2:	f7fc fe7b 	bl	8007abc <mpu6050_set_gyroscope_test>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d007      	beq.n	800ade0 <mpu6050_basic_init+0x2b0>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 800add0:	481e      	ldr	r0, [pc, #120]	; (800ae4c <mpu6050_basic_init+0x31c>)
 800add2:	f7fd faee 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800add6:	480b      	ldr	r0, [pc, #44]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800add8:	f7fb fc18 	bl	800660c <mpu6050_deinit>

        return 1;
 800addc:	2301      	movs	r3, #1
 800adde:	e1f6      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable accelerometer x test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 800ade0:	2200      	movs	r2, #0
 800ade2:	2107      	movs	r1, #7
 800ade4:	4807      	ldr	r0, [pc, #28]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800ade6:	f7fc ff11 	bl	8007c0c <mpu6050_set_accelerometer_test>
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d02f      	beq.n	800ae54 <mpu6050_basic_init+0x324>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 800adf4:	4816      	ldr	r0, [pc, #88]	; (800ae50 <mpu6050_basic_init+0x320>)
 800adf6:	f7fd fadc 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800adfa:	4802      	ldr	r0, [pc, #8]	; (800ae04 <mpu6050_basic_init+0x2d4>)
 800adfc:	f7fb fc06 	bl	800660c <mpu6050_deinit>

        return 1;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e1e4      	b.n	800b1ce <mpu6050_basic_init+0x69e>
 800ae04:	20006730 	.word	0x20006730
 800ae08:	0800830d 	.word	0x0800830d
 800ae0c:	0800831b 	.word	0x0800831b
 800ae10:	0800832d 	.word	0x0800832d
 800ae14:	08008365 	.word	0x08008365
 800ae18:	0800839d 	.word	0x0800839d
 800ae1c:	080083b3 	.word	0x080083b3
 800ae20:	080083e9 	.word	0x080083e9
 800ae24:	080140ac 	.word	0x080140ac
 800ae28:	080140cc 	.word	0x080140cc
 800ae2c:	080140e4 	.word	0x080140e4
 800ae30:	08014100 	.word	0x08014100
 800ae34:	08014124 	.word	0x08014124
 800ae38:	08014150 	.word	0x08014150
 800ae3c:	08014178 	.word	0x08014178
 800ae40:	080141a4 	.word	0x080141a4
 800ae44:	080141c8 	.word	0x080141c8
 800ae48:	080141f0 	.word	0x080141f0
 800ae4c:	08014214 	.word	0x08014214
 800ae50:	0801423c 	.word	0x0801423c
    }

    /* disable accelerometer y test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 800ae54:	2200      	movs	r2, #0
 800ae56:	2106      	movs	r1, #6
 800ae58:	48ae      	ldr	r0, [pc, #696]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800ae5a:	f7fc fed7 	bl	8007c0c <mpu6050_set_accelerometer_test>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d007      	beq.n	800ae78 <mpu6050_basic_init+0x348>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 800ae68:	48ab      	ldr	r0, [pc, #684]	; (800b118 <mpu6050_basic_init+0x5e8>)
 800ae6a:	f7fd faa2 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ae6e:	48a9      	ldr	r0, [pc, #676]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800ae70:	f7fb fbcc 	bl	800660c <mpu6050_deinit>

        return 1;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e1aa      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable accelerometer z test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2105      	movs	r1, #5
 800ae7c:	48a5      	ldr	r0, [pc, #660]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800ae7e:	f7fc fec5 	bl	8007c0c <mpu6050_set_accelerometer_test>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d007      	beq.n	800ae9c <mpu6050_basic_init+0x36c>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 800ae8c:	48a2      	ldr	r0, [pc, #648]	; (800b118 <mpu6050_basic_init+0x5e8>)
 800ae8e:	f7fd fa90 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800ae92:	48a0      	ldr	r0, [pc, #640]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800ae94:	f7fb fbba 	bl	800660c <mpu6050_deinit>

        return 1;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e198      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable fifo */
    res = mpu6050_set_fifo(&gs_handle, MPU6050_BOOL_FALSE);
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	489d      	ldr	r0, [pc, #628]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aea0:	f7fc fad0 	bl	8007444 <mpu6050_set_fifo>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <mpu6050_basic_init+0x38e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo failed.\n");
 800aeae:	489b      	ldr	r0, [pc, #620]	; (800b11c <mpu6050_basic_init+0x5ec>)
 800aeb0:	f7fd fa7f 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800aeb4:	4897      	ldr	r0, [pc, #604]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aeb6:	f7fb fba9 	bl	800660c <mpu6050_deinit>

        return 1;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e187      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable temp fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_TEMP, MPU6050_BOOL_FALSE);
 800aebe:	2200      	movs	r2, #0
 800aec0:	2107      	movs	r1, #7
 800aec2:	4894      	ldr	r0, [pc, #592]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aec4:	f7fc ff4a 	bl	8007d5c <mpu6050_set_fifo_enable>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d007      	beq.n	800aee2 <mpu6050_basic_init+0x3b2>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800aed2:	4893      	ldr	r0, [pc, #588]	; (800b120 <mpu6050_basic_init+0x5f0>)
 800aed4:	f7fd fa6d 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800aed8:	488e      	ldr	r0, [pc, #568]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aeda:	f7fb fb97 	bl	800660c <mpu6050_deinit>

        return 1;
 800aede:	2301      	movs	r3, #1
 800aee0:	e175      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable xg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_XG, MPU6050_BOOL_FALSE);
 800aee2:	2200      	movs	r2, #0
 800aee4:	2106      	movs	r1, #6
 800aee6:	488b      	ldr	r0, [pc, #556]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aee8:	f7fc ff38 	bl	8007d5c <mpu6050_set_fifo_enable>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d007      	beq.n	800af06 <mpu6050_basic_init+0x3d6>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800aef6:	488a      	ldr	r0, [pc, #552]	; (800b120 <mpu6050_basic_init+0x5f0>)
 800aef8:	f7fd fa5b 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800aefc:	4885      	ldr	r0, [pc, #532]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aefe:	f7fb fb85 	bl	800660c <mpu6050_deinit>

        return 1;
 800af02:	2301      	movs	r3, #1
 800af04:	e163      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable yg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_YG, MPU6050_BOOL_FALSE);
 800af06:	2200      	movs	r2, #0
 800af08:	2105      	movs	r1, #5
 800af0a:	4882      	ldr	r0, [pc, #520]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af0c:	f7fc ff26 	bl	8007d5c <mpu6050_set_fifo_enable>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d007      	beq.n	800af2a <mpu6050_basic_init+0x3fa>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800af1a:	4881      	ldr	r0, [pc, #516]	; (800b120 <mpu6050_basic_init+0x5f0>)
 800af1c:	f7fd fa49 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800af20:	487c      	ldr	r0, [pc, #496]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af22:	f7fb fb73 	bl	800660c <mpu6050_deinit>

        return 1;
 800af26:	2301      	movs	r3, #1
 800af28:	e151      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable zg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ZG, MPU6050_BOOL_FALSE);
 800af2a:	2200      	movs	r2, #0
 800af2c:	2104      	movs	r1, #4
 800af2e:	4879      	ldr	r0, [pc, #484]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af30:	f7fc ff14 	bl	8007d5c <mpu6050_set_fifo_enable>
 800af34:	4603      	mov	r3, r0
 800af36:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d007      	beq.n	800af4e <mpu6050_basic_init+0x41e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800af3e:	4878      	ldr	r0, [pc, #480]	; (800b120 <mpu6050_basic_init+0x5f0>)
 800af40:	f7fd fa37 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800af44:	4873      	ldr	r0, [pc, #460]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af46:	f7fb fb61 	bl	800660c <mpu6050_deinit>

        return 1;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e13f      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* disable accel fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ACCEL, MPU6050_BOOL_FALSE);
 800af4e:	2200      	movs	r2, #0
 800af50:	2103      	movs	r1, #3
 800af52:	4870      	ldr	r0, [pc, #448]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af54:	f7fc ff02 	bl	8007d5c <mpu6050_set_fifo_enable>
 800af58:	4603      	mov	r3, r0
 800af5a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d007      	beq.n	800af72 <mpu6050_basic_init+0x442>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800af62:	486f      	ldr	r0, [pc, #444]	; (800b120 <mpu6050_basic_init+0x5f0>)
 800af64:	f7fd fa25 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800af68:	486a      	ldr	r0, [pc, #424]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af6a:	f7fb fb4f 	bl	800660c <mpu6050_deinit>

        return 1;
 800af6e:	2301      	movs	r3, #1
 800af70:	e12d      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default interrupt level */
    res = mpu6050_set_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 800af72:	2101      	movs	r1, #1
 800af74:	4867      	ldr	r0, [pc, #412]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af76:	f7fc ff4b 	bl	8007e10 <mpu6050_set_interrupt_level>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <mpu6050_basic_init+0x464>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt level failed.\n");
 800af84:	4867      	ldr	r0, [pc, #412]	; (800b124 <mpu6050_basic_init+0x5f4>)
 800af86:	f7fd fa14 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800af8a:	4862      	ldr	r0, [pc, #392]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af8c:	f7fb fb3e 	bl	800660c <mpu6050_deinit>

        return 1;
 800af90:	2301      	movs	r3, #1
 800af92:	e11c      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default pin type */
    res = mpu6050_set_interrupt_pin_type(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 800af94:	2100      	movs	r1, #0
 800af96:	485f      	ldr	r0, [pc, #380]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800af98:	f7fc ff88 	bl	8007eac <mpu6050_set_interrupt_pin_type>
 800af9c:	4603      	mov	r3, r0
 800af9e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d007      	beq.n	800afb6 <mpu6050_basic_init+0x486>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt pin type failed.\n");
 800afa6:	4860      	ldr	r0, [pc, #384]	; (800b128 <mpu6050_basic_init+0x5f8>)
 800afa8:	f7fd fa03 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800afac:	4859      	ldr	r0, [pc, #356]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800afae:	f7fb fb2d 	bl	800660c <mpu6050_deinit>

        return 1;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e10b      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default motion interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_MOTION, MPU6050_BASIC_DEFAULT_INTERRUPT_MOTION);
 800afb6:	2200      	movs	r2, #0
 800afb8:	2106      	movs	r1, #6
 800afba:	4856      	ldr	r0, [pc, #344]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800afbc:	f7fd f94c 	bl	8008258 <mpu6050_set_interrupt>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <mpu6050_basic_init+0x4aa>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800afca:	4858      	ldr	r0, [pc, #352]	; (800b12c <mpu6050_basic_init+0x5fc>)
 800afcc:	f7fd f9f1 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800afd0:	4850      	ldr	r0, [pc, #320]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800afd2:	f7fb fb1b 	bl	800660c <mpu6050_deinit>

        return 1;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e0f9      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default fifo overflow interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_FIFO_OVERFLOW, MPU6050_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 800afda:	2200      	movs	r2, #0
 800afdc:	2104      	movs	r1, #4
 800afde:	484d      	ldr	r0, [pc, #308]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800afe0:	f7fd f93a 	bl	8008258 <mpu6050_set_interrupt>
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d007      	beq.n	800affe <mpu6050_basic_init+0x4ce>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800afee:	484f      	ldr	r0, [pc, #316]	; (800b12c <mpu6050_basic_init+0x5fc>)
 800aff0:	f7fd f9df 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800aff4:	4847      	ldr	r0, [pc, #284]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800aff6:	f7fb fb09 	bl	800660c <mpu6050_deinit>

        return 1;
 800affa:	2301      	movs	r3, #1
 800affc:	e0e7      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default dmp interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DMP, MPU6050_BASIC_DEFAULT_INTERRUPT_DMP);
 800affe:	2200      	movs	r2, #0
 800b000:	2101      	movs	r1, #1
 800b002:	4844      	ldr	r0, [pc, #272]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b004:	f7fd f928 	bl	8008258 <mpu6050_set_interrupt>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d007      	beq.n	800b022 <mpu6050_basic_init+0x4f2>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800b012:	4846      	ldr	r0, [pc, #280]	; (800b12c <mpu6050_basic_init+0x5fc>)
 800b014:	f7fd f9cd 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b018:	483e      	ldr	r0, [pc, #248]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b01a:	f7fb faf7 	bl	800660c <mpu6050_deinit>

        return 1;
 800b01e:	2301      	movs	r3, #1
 800b020:	e0d5      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default i2c master interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_I2C_MAST, MPU6050_BASIC_DEFAULT_INTERRUPT_I2C_MAST);
 800b022:	2200      	movs	r2, #0
 800b024:	2103      	movs	r1, #3
 800b026:	483b      	ldr	r0, [pc, #236]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b028:	f7fd f916 	bl	8008258 <mpu6050_set_interrupt>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d007      	beq.n	800b046 <mpu6050_basic_init+0x516>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800b036:	483d      	ldr	r0, [pc, #244]	; (800b12c <mpu6050_basic_init+0x5fc>)
 800b038:	f7fd f9bb 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b03c:	4835      	ldr	r0, [pc, #212]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b03e:	f7fb fae5 	bl	800660c <mpu6050_deinit>

        return 1;
 800b042:	2301      	movs	r3, #1
 800b044:	e0c3      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default data ready interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DATA_READY, MPU6050_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 800b046:	2200      	movs	r2, #0
 800b048:	2100      	movs	r1, #0
 800b04a:	4832      	ldr	r0, [pc, #200]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b04c:	f7fd f904 	bl	8008258 <mpu6050_set_interrupt>
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d007      	beq.n	800b06a <mpu6050_basic_init+0x53a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800b05a:	4834      	ldr	r0, [pc, #208]	; (800b12c <mpu6050_basic_init+0x5fc>)
 800b05c:	f7fd f9a9 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b060:	482c      	ldr	r0, [pc, #176]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b062:	f7fb fad3 	bl	800660c <mpu6050_deinit>

        return 1;
 800b066:	2301      	movs	r3, #1
 800b068:	e0b1      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default interrupt latch */
    res = mpu6050_set_interrupt_latch(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_LATCH);
 800b06a:	2101      	movs	r1, #1
 800b06c:	4829      	ldr	r0, [pc, #164]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b06e:	f7fc ff6b 	bl	8007f48 <mpu6050_set_interrupt_latch>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d007      	beq.n	800b08c <mpu6050_basic_init+0x55c>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt latch failed.\n");
 800b07c:	482c      	ldr	r0, [pc, #176]	; (800b130 <mpu6050_basic_init+0x600>)
 800b07e:	f7fd f998 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b082:	4824      	ldr	r0, [pc, #144]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b084:	f7fb fac2 	bl	800660c <mpu6050_deinit>

        return 1;
 800b088:	2301      	movs	r3, #1
 800b08a:	e0a0      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default interrupt read clear */
    res = mpu6050_set_interrupt_read_clear(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 800b08c:	2101      	movs	r1, #1
 800b08e:	4821      	ldr	r0, [pc, #132]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b090:	f7fc ffaa 	bl	8007fe8 <mpu6050_set_interrupt_read_clear>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d007      	beq.n	800b0ae <mpu6050_basic_init+0x57e>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt read clear failed.\n");
 800b09e:	4825      	ldr	r0, [pc, #148]	; (800b134 <mpu6050_basic_init+0x604>)
 800b0a0:	f7fd f987 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b0a4:	481b      	ldr	r0, [pc, #108]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b0a6:	f7fb fab1 	bl	800660c <mpu6050_deinit>

        return 1;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e08f      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the extern sync */
    res = mpu6050_set_extern_sync(&gs_handle, MPU6050_BASIC_DEFAULT_EXTERN_SYNC);
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4818      	ldr	r0, [pc, #96]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b0b2:	f7fc fc6b 	bl	800798c <mpu6050_set_extern_sync>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d007      	beq.n	800b0d0 <mpu6050_basic_init+0x5a0>
    {
        mpu6050_interface_debug_print("mpu6050: set extern sync failed.\n");
 800b0c0:	481d      	ldr	r0, [pc, #116]	; (800b138 <mpu6050_basic_init+0x608>)
 800b0c2:	f7fd f976 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b0c6:	4813      	ldr	r0, [pc, #76]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b0c8:	f7fb faa0 	bl	800660c <mpu6050_deinit>

        return 1;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e07e      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default fsync interrupt */
    res = mpu6050_set_fsync_interrupt(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT);
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4810      	ldr	r0, [pc, #64]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b0d4:	f7fd f824 	bl	8008120 <mpu6050_set_fsync_interrupt>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d007      	beq.n	800b0f2 <mpu6050_basic_init+0x5c2>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt failed.\n");
 800b0e2:	4816      	ldr	r0, [pc, #88]	; (800b13c <mpu6050_basic_init+0x60c>)
 800b0e4:	f7fd f965 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b0e8:	480a      	ldr	r0, [pc, #40]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b0ea:	f7fb fa8f 	bl	800660c <mpu6050_deinit>

        return 1;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e06d      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default fsync interrupt level */
    res = mpu6050_set_fsync_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	4807      	ldr	r0, [pc, #28]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b0f6:	f7fc ffc5 	bl	8008084 <mpu6050_set_fsync_interrupt_level>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d01f      	beq.n	800b144 <mpu6050_basic_init+0x614>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt level failed.\n");
 800b104:	480e      	ldr	r0, [pc, #56]	; (800b140 <mpu6050_basic_init+0x610>)
 800b106:	f7fd f954 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b10a:	4802      	ldr	r0, [pc, #8]	; (800b114 <mpu6050_basic_init+0x5e4>)
 800b10c:	f7fb fa7e 	bl	800660c <mpu6050_deinit>

        return 1;
 800b110:	2301      	movs	r3, #1
 800b112:	e05c      	b.n	800b1ce <mpu6050_basic_init+0x69e>
 800b114:	20006730 	.word	0x20006730
 800b118:	0801423c 	.word	0x0801423c
 800b11c:	08014268 	.word	0x08014268
 800b120:	08014284 	.word	0x08014284
 800b124:	080142a8 	.word	0x080142a8
 800b128:	080142d0 	.word	0x080142d0
 800b12c:	080142fc 	.word	0x080142fc
 800b130:	0801431c 	.word	0x0801431c
 800b134:	08014344 	.word	0x08014344
 800b138:	08014370 	.word	0x08014370
 800b13c:	08014394 	.word	0x08014394
 800b140:	080143bc 	.word	0x080143bc
    }

    /* set the default iic master */
    res = mpu6050_set_iic_master(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_MASTER);
 800b144:	2100      	movs	r1, #0
 800b146:	4824      	ldr	r0, [pc, #144]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b148:	f7fc f9ca 	bl	80074e0 <mpu6050_set_iic_master>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d007      	beq.n	800b166 <mpu6050_basic_init+0x636>
    {
        mpu6050_interface_debug_print("mpu6050: set iic master failed.\n");
 800b156:	4821      	ldr	r0, [pc, #132]	; (800b1dc <mpu6050_basic_init+0x6ac>)
 800b158:	f7fd f92b 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b15c:	481e      	ldr	r0, [pc, #120]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b15e:	f7fb fa55 	bl	800660c <mpu6050_deinit>

        return 1;
 800b162:	2301      	movs	r3, #1
 800b164:	e033      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default iic bypass */
    res = mpu6050_set_iic_bypass(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_BYPASS);
 800b166:	2100      	movs	r1, #0
 800b168:	481b      	ldr	r0, [pc, #108]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b16a:	f7fd f827 	bl	80081bc <mpu6050_set_iic_bypass>
 800b16e:	4603      	mov	r3, r0
 800b170:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d007      	beq.n	800b188 <mpu6050_basic_init+0x658>
    {
        mpu6050_interface_debug_print("mpu6050: set iic bypass failed.\n");
 800b178:	4819      	ldr	r0, [pc, #100]	; (800b1e0 <mpu6050_basic_init+0x6b0>)
 800b17a:	f7fd f91a 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b17e:	4816      	ldr	r0, [pc, #88]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b180:	f7fb fa44 	bl	800660c <mpu6050_deinit>

        return 1;
 800b184:	2301      	movs	r3, #1
 800b186:	e022      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default accelerometer range */
    res = mpu6050_set_accelerometer_range(&gs_handle, MPU6050_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 800b188:	2100      	movs	r1, #0
 800b18a:	4813      	ldr	r0, [pc, #76]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b18c:	f7fc fd98 	bl	8007cc0 <mpu6050_set_accelerometer_range>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d007      	beq.n	800b1aa <mpu6050_basic_init+0x67a>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer range failed.\n");
 800b19a:	4812      	ldr	r0, [pc, #72]	; (800b1e4 <mpu6050_basic_init+0x6b4>)
 800b19c:	f7fd f909 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b1a0:	480d      	ldr	r0, [pc, #52]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b1a2:	f7fb fa33 	bl	800660c <mpu6050_deinit>

        return 1;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e011      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    /* set the default gyroscope range */
    res = mpu6050_set_gyroscope_range(&gs_handle, MPU6050_BASIC_DEFAULT_GYROSCOPE_RANGE);
 800b1aa:	2103      	movs	r1, #3
 800b1ac:	480a      	ldr	r0, [pc, #40]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b1ae:	f7fc fcdf 	bl	8007b70 <mpu6050_set_gyroscope_range>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d007      	beq.n	800b1cc <mpu6050_basic_init+0x69c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope range failed.\n");
 800b1bc:	480a      	ldr	r0, [pc, #40]	; (800b1e8 <mpu6050_basic_init+0x6b8>)
 800b1be:	f7fd f8f8 	bl	80083b2 <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800b1c2:	4805      	ldr	r0, [pc, #20]	; (800b1d8 <mpu6050_basic_init+0x6a8>)
 800b1c4:	f7fb fa22 	bl	800660c <mpu6050_deinit>

        return 1;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e000      	b.n	800b1ce <mpu6050_basic_init+0x69e>
    }

    return 0;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20006730 	.word	0x20006730
 800b1dc:	080143e8 	.word	0x080143e8
 800b1e0:	0801440c 	.word	0x0801440c
 800b1e4:	08014430 	.word	0x08014430
 800b1e8:	0801445c 	.word	0x0801445c

0800b1ec <mpu6050_basic_read_temperature>:
 *             - 0 success
 *             - 1 read temperature failed
 * @note       none
 */
uint8_t mpu6050_basic_read_temperature(float *degrees)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
    int16_t raw;

    /* read temperature */
    if (mpu6050_read_temperature(&gs_handle, &raw, degrees) != 0)
 800b1f4:	f107 030e 	add.w	r3, r7, #14
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4806      	ldr	r0, [pc, #24]	; (800b218 <mpu6050_basic_read_temperature+0x2c>)
 800b1fe:	f7fc f8d7 	bl	80073b0 <mpu6050_read_temperature>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <mpu6050_basic_read_temperature+0x20>
    {
        return 1;
 800b208:	2301      	movs	r3, #1
 800b20a:	e000      	b.n	800b20e <mpu6050_basic_read_temperature+0x22>
    }

    return 0;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20006730 	.word	0x20006730

0800b21c <mpu6050_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_basic_read(float g[3], float dps[3])
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08e      	sub	sp, #56	; 0x38
 800b220:	af02      	add	r7, sp, #8
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
    int16_t gyro_raw[3];
    float accel[3];
    float gyro[3];

    /* set 1 */
    len = 1;
 800b226:	2301      	movs	r3, #1
 800b228:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* read data */
    if (mpu6050_read(&gs_handle,
 800b22a:	f107 0020 	add.w	r0, r7, #32
 800b22e:	f107 0214 	add.w	r2, r7, #20
 800b232:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b236:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	f107 0308 	add.w	r3, r7, #8
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	4603      	mov	r3, r0
 800b244:	4811      	ldr	r0, [pc, #68]	; (800b28c <mpu6050_basic_read+0x70>)
 800b246:	f7fb fa25 	bl	8006694 <mpu6050_read>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <mpu6050_basic_read+0x38>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
    {
        return 1;
 800b250:	2301      	movs	r3, #1
 800b252:	e016      	b.n	800b282 <mpu6050_basic_read+0x66>
    }

    /* copy the data */
    g[0] = accel[0];
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	601a      	str	r2, [r3, #0]
    g[1] = accel[1];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3304      	adds	r3, #4
 800b25e:	69ba      	ldr	r2, [r7, #24]
 800b260:	601a      	str	r2, [r3, #0]
    g[2] = accel[2];
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3308      	adds	r3, #8
 800b266:	69fa      	ldr	r2, [r7, #28]
 800b268:	601a      	str	r2, [r3, #0]
    dps[0] = gyro[0];
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	601a      	str	r2, [r3, #0]
    dps[1] = gyro[1];
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	3304      	adds	r3, #4
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	601a      	str	r2, [r3, #0]
    dps[2] = gyro[2];
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	3308      	adds	r3, #8
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	601a      	str	r2, [r3, #0]

    return 0;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3730      	adds	r7, #48	; 0x30
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	20006730 	.word	0x20006730

0800b290 <I2C1_Init>:
 *  Created on: Oct 31, 2023
 *      Author: jeffr
 */
#include "i2c.h"

void I2C1_Init(void){
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
	uint32_t temp;
	RCC->AHB1ENR |= GPIOX_CLOCK(I2C1_SCL);
 800b296:	4b48      	ldr	r3, [pc, #288]	; (800b3b8 <I2C1_Init+0x128>)
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29a:	4a47      	ldr	r2, [pc, #284]	; (800b3b8 <I2C1_Init+0x128>)
 800b29c:	f043 0302 	orr.w	r3, r3, #2
 800b2a0:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER, I2C1_SCL);
 800b2a2:	4b46      	ldr	r3, [pc, #280]	; (800b3bc <I2C1_Init+0x12c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b2aa:	4a44      	ldr	r2, [pc, #272]	; (800b3bc <I2C1_Init+0x12c>)
 800b2ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b2b0:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, I2C1_SDA);
 800b2b2:	4b42      	ldr	r3, [pc, #264]	; (800b3bc <I2C1_Init+0x12c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b2ba:	4a40      	ldr	r2, [pc, #256]	; (800b3bc <I2C1_Init+0x12c>)
 800b2bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2c0:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT7 | GPIO_OTYPER_OT6;
 800b2c2:	4b3e      	ldr	r3, [pc, #248]	; (800b3bc <I2C1_Init+0x12c>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	4a3d      	ldr	r2, [pc, #244]	; (800b3bc <I2C1_Init+0x12c>)
 800b2c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2cc:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SCL);
 800b2ce:	4b3b      	ldr	r3, [pc, #236]	; (800b3bc <I2C1_Init+0x12c>)
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	4a3a      	ldr	r2, [pc, #232]	; (800b3bc <I2C1_Init+0x12c>)
 800b2d4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800b2d8:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SDA);//VERY HIGH SPEED
 800b2da:	4b38      	ldr	r3, [pc, #224]	; (800b3bc <I2C1_Init+0x12c>)
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	4a37      	ldr	r2, [pc, #220]	; (800b3bc <I2C1_Init+0x12c>)
 800b2e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2e4:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SCL);
 800b2e6:	4b35      	ldr	r3, [pc, #212]	; (800b3bc <I2C1_Init+0x12c>)
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b2ee:	4a33      	ldr	r2, [pc, #204]	; (800b3bc <I2C1_Init+0x12c>)
 800b2f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b2f4:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SDA);		//Habilita las resitencias pull up internas
 800b2f6:	4b31      	ldr	r3, [pc, #196]	; (800b3bc <I2C1_Init+0x12c>)
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b2fe:	4a2f      	ldr	r2, [pc, #188]	; (800b3bc <I2C1_Init+0x12c>)
 800b300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b304:	60d3      	str	r3, [r2, #12]
	GPIOX_AFR(4, I2C1_SCL);
 800b306:	4b2d      	ldr	r3, [pc, #180]	; (800b3bc <I2C1_Init+0x12c>)
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b30e:	4a2b      	ldr	r2, [pc, #172]	; (800b3bc <I2C1_Init+0x12c>)
 800b310:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b314:	6213      	str	r3, [r2, #32]
	GPIOX_AFR(4, I2C1_SDA);
 800b316:	4b29      	ldr	r3, [pc, #164]	; (800b3bc <I2C1_Init+0x12c>)
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b31e:	4a27      	ldr	r2, [pc, #156]	; (800b3bc <I2C1_Init+0x12c>)
 800b320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b324:	6213      	str	r3, [r2, #32]
	//CONFIGURAR EL I2C1
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <I2C1_Init+0x128>)
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	4a23      	ldr	r2, [pc, #140]	; (800b3b8 <I2C1_Init+0x128>)
 800b32c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b330:	6413      	str	r3, [r2, #64]	; 0x40
	//RESET
	I2C1->CR1 |= I2C_CR1_SWRST;
 800b332:	4b23      	ldr	r3, [pc, #140]	; (800b3c0 <I2C1_Init+0x130>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a22      	ldr	r2, [pc, #136]	; (800b3c0 <I2C1_Init+0x130>)
 800b338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b33c:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &=~ I2C_CR1_SWRST;
 800b33e:	4b20      	ldr	r3, [pc, #128]	; (800b3c0 <I2C1_Init+0x130>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a1f      	ldr	r2, [pc, #124]	; (800b3c0 <I2C1_Init+0x130>)
 800b344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b348:	6013      	str	r3, [r2, #0]
	/**
	 * PCLK1
	 */
	temp = SystemCoreClock / 1000000;
 800b34a:	4b1e      	ldr	r3, [pc, #120]	; (800b3c4 <I2C1_Init+0x134>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a1e      	ldr	r2, [pc, #120]	; (800b3c8 <I2C1_Init+0x138>)
 800b350:	fba2 2303 	umull	r2, r3, r2, r3
 800b354:	0c9b      	lsrs	r3, r3, #18
 800b356:	607b      	str	r3, [r7, #4]
	I2C1->CR2 &=~ (I2C_CR2_FREQ);
 800b358:	4b19      	ldr	r3, [pc, #100]	; (800b3c0 <I2C1_Init+0x130>)
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	4a18      	ldr	r2, [pc, #96]	; (800b3c0 <I2C1_Init+0x130>)
 800b35e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b362:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (temp & 0x3F);
 800b364:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <I2C1_Init+0x130>)
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b36e:	4914      	ldr	r1, [pc, #80]	; (800b3c0 <I2C1_Init+0x130>)
 800b370:	4313      	orrs	r3, r2
 800b372:	604b      	str	r3, [r1, #4]
	 * CCR = PCLK1 / (3 * 400000)
	 * DUTY == 1
	 * CCR = PCLK1 / (25 * 400000)
	 * ->FAST MODE PLUS
	 */
	temp = 16E+6 / (3 * 400E+3);
 800b374:	230d      	movs	r3, #13
 800b376:	607b      	str	r3, [r7, #4]
	I2C1->CCR = temp & 0xFFF;
 800b378:	4a11      	ldr	r2, [pc, #68]	; (800b3c0 <I2C1_Init+0x130>)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b380:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= I2C_CCR_FS;
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <I2C1_Init+0x130>)
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	4a0e      	ldr	r2, [pc, #56]	; (800b3c0 <I2C1_Init+0x130>)
 800b388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b38c:	61d3      	str	r3, [r2, #28]
	 * SM
	 * TRISE = PCLK1 / 1000000 + 1
	 * FS
	 * TRISE = (PCLK1 * 300) / (1000000000U) + 1
	 */
	temp = ((16E+6) * 300) / (1000000000U) + 1;
 800b38e:	2305      	movs	r3, #5
 800b390:	607b      	str	r3, [r7, #4]
	I2C1->TRISE = temp;
 800b392:	4a0b      	ldr	r2, [pc, #44]	; (800b3c0 <I2C1_Init+0x130>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6213      	str	r3, [r2, #32]
	//DIRECCION ESCLAVA DE NUESTRO I2C1
	I2C1->OAR1 = 0x74;
 800b398:	4b09      	ldr	r3, [pc, #36]	; (800b3c0 <I2C1_Init+0x130>)
 800b39a:	2274      	movs	r2, #116	; 0x74
 800b39c:	609a      	str	r2, [r3, #8]
	//habilitar el bus i2c
	I2C1->CR1 |= I2C_CR1_PE;
 800b39e:	4b08      	ldr	r3, [pc, #32]	; (800b3c0 <I2C1_Init+0x130>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a07      	ldr	r2, [pc, #28]	; (800b3c0 <I2C1_Init+0x130>)
 800b3a4:	f043 0301 	orr.w	r3, r3, #1
 800b3a8:	6013      	str	r3, [r2, #0]
	return;
 800b3aa:	bf00      	nop
}
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40023800 	.word	0x40023800
 800b3bc:	40020400 	.word	0x40020400
 800b3c0:	40005400 	.word	0x40005400
 800b3c4:	200000a4 	.word	0x200000a4
 800b3c8:	431bde83 	.word	0x431bde83

0800b3cc <i2c_reg_write>:

uint8_t i2c_reg_write(I2C_TypeDef *I2C, uint8_t SlaveADDR, uint8_t regAddr, uint8_t *pData, uint16_t len, uint32_t timeout){
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	607b      	str	r3, [r7, #4]
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	72fb      	strb	r3, [r7, #11]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	72bb      	strb	r3, [r7, #10]
	uint32_t temp= 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]
	uint32_t ticks = millis();
 800b3e2:	f7ff fb9d 	bl	800ab20 <millis>
 800b3e6:	6138      	str	r0, [r7, #16]
	if(len <= 0 || pData == NULL){
 800b3e8:	8c3b      	ldrh	r3, [r7, #32]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <i2c_reg_write+0x28>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <i2c_reg_write+0x2c>
		return 1;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e0b7      	b.n	800b568 <i2c_reg_write+0x19c>
	}
	//esperar que el bus este desocupado
	do{
		if((millis() - ticks)> timeout){
 800b3f8:	f7ff fb92 	bl	800ab20 <millis>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b404:	429a      	cmp	r2, r3
 800b406:	d201      	bcs.n	800b40c <i2c_reg_write+0x40>
			return 1;
 800b408:	2301      	movs	r3, #1
 800b40a:	e0ad      	b.n	800b568 <i2c_reg_write+0x19c>
		}
	}while(I2C->SR2 & I2C_SR2_BUSY);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1ef      	bne.n	800b3f8 <i2c_reg_write+0x2c>
	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	601a      	str	r2, [r3, #0]
	do{
		if((millis() - ticks)> timeout){
 800b424:	f7ff fb7c 	bl	800ab20 <millis>
 800b428:	4602      	mov	r2, r0
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b430:	429a      	cmp	r2, r3
 800b432:	d207      	bcs.n	800b444 <i2c_reg_write+0x78>
			I2C->CR1 |= I2C_CR1_STOP;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	601a      	str	r2, [r3, #0]
			return 1;
 800b440:	2301      	movs	r3, #1
 800b442:	e091      	b.n	800b568 <i2c_reg_write+0x19c>
		}
	}while(!(I2C->SR1 & I2C_SR1_SB));
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d0e9      	beq.n	800b424 <i2c_reg_write+0x58>

	//enviar la direccion del esclavo
	SlaveADDR = SlaveADDR <<1;					//[A6:A0] [R/W] (W = 0, R = 1)
 800b450:	7afb      	ldrb	r3, [r7, #11]
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	72fb      	strb	r3, [r7, #11]
	SlaveADDR &= ~1;
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	f023 0301 	bic.w	r3, r3, #1
 800b45c:	72fb      	strb	r3, [r7, #11]
	I2C->DR = SlaveADDR;
 800b45e:	7afa      	ldrb	r2, [r7, #11]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	611a      	str	r2, [r3, #16]
	do{
		if((millis() - ticks)> timeout){
 800b464:	f7ff fb5c 	bl	800ab20 <millis>
 800b468:	4602      	mov	r2, r0
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b470:	429a      	cmp	r2, r3
 800b472:	d207      	bcs.n	800b484 <i2c_reg_write+0xb8>
			I2C->CR1 |= I2C_CR1_STOP;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	601a      	str	r2, [r3, #0]
			return 1;
 800b480:	2301      	movs	r3, #1
 800b482:	e071      	b.n	800b568 <i2c_reg_write+0x19c>
		}
	}while(!(I2C->SR1 & I2C_SR1_ADDR));
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0e9      	beq.n	800b464 <i2c_reg_write+0x98>
	//Limpiar los registros de estado
	temp = I2C->SR1;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	617b      	str	r3, [r7, #20]
	(void)temp;

	//enviar la direccion de la region
	do{
		if((millis() - ticks)>timeout){
 800b49c:	f7ff fb40 	bl	800ab20 <millis>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d207      	bcs.n	800b4bc <i2c_reg_write+0xf0>
			I2C->CR1 |= I2C_CR1_STOP;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	601a      	str	r2, [r3, #0]
			return 1;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e055      	b.n	800b568 <i2c_reg_write+0x19c>
		}
	}while(!(I2C->SR1 & I2C_SR1_TXE));
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0e9      	beq.n	800b49c <i2c_reg_write+0xd0>
	I2C->DR = regAddr;
 800b4c8:	7aba      	ldrb	r2, [r7, #10]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	611a      	str	r2, [r3, #16]

	//enviar los n datos
	while(len>0){
 800b4ce:	e023      	b.n	800b518 <i2c_reg_write+0x14c>
		if(I2C->SR1 & I2C_SR1_TXE){
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00d      	beq.n	800b4f8 <i2c_reg_write+0x12c>
			I2C->DR = *pData;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	611a      	str	r2, [r3, #16]
			pData++;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	607b      	str	r3, [r7, #4]
			len--;
 800b4ec:	8c3b      	ldrh	r3, [r7, #32]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	843b      	strh	r3, [r7, #32]
			if(len == 0){
 800b4f2:	8c3b      	ldrh	r3, [r7, #32]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d013      	beq.n	800b520 <i2c_reg_write+0x154>
				break;
			}
		}
		if((millis() - ticks)>timeout){
 800b4f8:	f7ff fb12 	bl	800ab20 <millis>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b504:	429a      	cmp	r2, r3
 800b506:	d207      	bcs.n	800b518 <i2c_reg_write+0x14c>
			I2C->CR1 |= I2C_CR1_STOP;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	601a      	str	r2, [r3, #0]
			return 1;
 800b514:	2301      	movs	r3, #1
 800b516:	e027      	b.n	800b568 <i2c_reg_write+0x19c>
	while(len>0){
 800b518:	8c3b      	ldrh	r3, [r7, #32]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1d8      	bne.n	800b4d0 <i2c_reg_write+0x104>
 800b51e:	e000      	b.n	800b522 <i2c_reg_write+0x156>
				break;
 800b520:	bf00      	nop
		}
	}
	//wait
	do{
		if((millis() - ticks)>timeout){
 800b522:	f7ff fafd 	bl	800ab20 <millis>
 800b526:	4602      	mov	r2, r0
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b52e:	429a      	cmp	r2, r3
 800b530:	d207      	bcs.n	800b542 <i2c_reg_write+0x176>
			I2C->CR1 |= I2C_CR1_STOP;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	601a      	str	r2, [r3, #0]
			return 1;
 800b53e:	2301      	movs	r3, #1
 800b540:	e012      	b.n	800b568 <i2c_reg_write+0x19c>
		}
	}while(((I2C->SR1 & I2C_SR1_TXE) == 0) &&((I2C->SR1 & I2C_SR1_BTF) == 0));
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d105      	bne.n	800b55a <i2c_reg_write+0x18e>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	f003 0304 	and.w	r3, r3, #4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0e3      	beq.n	800b522 <i2c_reg_write+0x156>

	//stop condition
	I2C->CR1 |= I2C_CR1_STOP;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	601a      	str	r2, [r3, #0]
	return 0;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <i2c_reg_read>:
uint8_t i2c_reg_read(I2C_TypeDef *I2C, uint8_t SlaveADDR, uint8_t regAddr, uint8_t *pData, uint16_t len, uint32_t timeout){
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	460b      	mov	r3, r1
 800b57c:	72fb      	strb	r3, [r7, #11]
 800b57e:	4613      	mov	r3, r2
 800b580:	72bb      	strb	r3, [r7, #10]
	uint32_t temp= 0;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
	uint32_t ticks = millis();
 800b586:	f7ff facb 	bl	800ab20 <millis>
 800b58a:	6138      	str	r0, [r7, #16]

	if(len <= 0 || pData == NULL){
 800b58c:	8c3b      	ldrh	r3, [r7, #32]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <i2c_reg_read+0x28>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <i2c_reg_read+0x2c>
		return 1;
 800b598:	2301      	movs	r3, #1
 800b59a:	e11f      	b.n	800b7dc <i2c_reg_read+0x26c>
	}
	//esperar que el bus este desocupado
	do{
		if((millis() - ticks)> timeout){
 800b59c:	f7ff fac0 	bl	800ab20 <millis>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d201      	bcs.n	800b5b0 <i2c_reg_read+0x40>
			return 1;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e115      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while((I2C->SR2 & I2C_SR2_BUSY));
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1ef      	bne.n	800b59c <i2c_reg_read+0x2c>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	601a      	str	r2, [r3, #0]
	do{
		if((millis() - ticks)> timeout){
 800b5c8:	f7ff faaa 	bl	800ab20 <millis>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d207      	bcs.n	800b5e8 <i2c_reg_read+0x78>
			I2C->CR1 |= I2C_CR1_STOP;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	601a      	str	r2, [r3, #0]
			return 1;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e0f9      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_SB)  == 0);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0e9      	beq.n	800b5c8 <i2c_reg_read+0x58>

	//enviar la direccion del esclavo
	SlaveADDR = SlaveADDR <<1;					//[A6:A0] [R/W] (W = 0, R = 1)
 800b5f4:	7afb      	ldrb	r3, [r7, #11]
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	72fb      	strb	r3, [r7, #11]
	SlaveADDR &= ~1;
 800b5fa:	7afb      	ldrb	r3, [r7, #11]
 800b5fc:	f023 0301 	bic.w	r3, r3, #1
 800b600:	72fb      	strb	r3, [r7, #11]
	I2C->DR = SlaveADDR;
 800b602:	7afa      	ldrb	r2, [r7, #11]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	611a      	str	r2, [r3, #16]
	//I2C->DR = SlaveADDR;

	do{
		if((millis() - ticks)> timeout){
 800b608:	f7ff fa8a 	bl	800ab20 <millis>
 800b60c:	4602      	mov	r2, r0
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b614:	429a      	cmp	r2, r3
 800b616:	d207      	bcs.n	800b628 <i2c_reg_read+0xb8>
			I2C->CR1 |= I2C_CR1_STOP;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	601a      	str	r2, [r3, #0]
			return 1;
 800b624:	2301      	movs	r3, #1
 800b626:	e0d9      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_ADDR)  == 0);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0e9      	beq.n	800b608 <i2c_reg_read+0x98>
	//while((I2C->SR1 & I2C_SR1_ADDR) == 0);

	//Limpiar los registros de estado
	temp = I2C->SR1;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	617b      	str	r3, [r7, #20]
	(void)temp;

	//enviar la direccion base a leerse
	//enviar la direccion de la region
	do{
		if((millis() - ticks)>timeout){
 800b640:	f7ff fa6e 	bl	800ab20 <millis>
 800b644:	4602      	mov	r2, r0
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d207      	bcs.n	800b660 <i2c_reg_read+0xf0>
			I2C->CR1 |= I2C_CR1_STOP;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	601a      	str	r2, [r3, #0]
			return 1;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e0bd      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while(!(I2C->SR1 & I2C_SR1_TXE));
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0e9      	beq.n	800b640 <i2c_reg_read+0xd0>
	I2C->DR = regAddr;
 800b66c:	7aba      	ldrb	r2, [r7, #10]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	611a      	str	r2, [r3, #16]

	//una nueva condicion de inicio
	//wait
	do{
		if((millis() - ticks)>timeout){
 800b672:	f7ff fa55 	bl	800ab20 <millis>
 800b676:	4602      	mov	r2, r0
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67e:	429a      	cmp	r2, r3
 800b680:	d207      	bcs.n	800b692 <i2c_reg_read+0x122>
			I2C->CR1 |= I2C_CR1_STOP;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	601a      	str	r2, [r3, #0]
			return 1;
 800b68e:	2301      	movs	r3, #1
 800b690:	e0a4      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while(((I2C->SR1 & I2C_SR1_TXE) == 0) && ((I2C->SR1 & I2C_SR1_BTF) == 0));
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <i2c_reg_read+0x13a>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	f003 0304 	and.w	r3, r3, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d0e3      	beq.n	800b672 <i2c_reg_read+0x102>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	601a      	str	r2, [r3, #0]
	do{
		if((millis() - ticks)> timeout){
 800b6b6:	f7ff fa33 	bl	800ab20 <millis>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d207      	bcs.n	800b6d6 <i2c_reg_read+0x166>
			I2C->CR1 |= I2C_CR1_STOP;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	601a      	str	r2, [r3, #0]
			return 1;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e082      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_SB)  == 0);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0e9      	beq.n	800b6b6 <i2c_reg_read+0x146>
	//enviar la direccion del esclavo

	SlaveADDR |= 1;
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	f043 0301 	orr.w	r3, r3, #1
 800b6e8:	72fb      	strb	r3, [r7, #11]
	I2C->DR = SlaveADDR;
 800b6ea:	7afa      	ldrb	r2, [r7, #11]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	611a      	str	r2, [r3, #16]
	do{
		if((millis() - ticks)> timeout){
 800b6f0:	f7ff fa16 	bl	800ab20 <millis>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d207      	bcs.n	800b710 <i2c_reg_read+0x1a0>
			I2C->CR1 |= I2C_CR1_STOP;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	601a      	str	r2, [r3, #0]
			return 1;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e065      	b.n	800b7dc <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_ADDR)  == 0);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	f003 0302 	and.w	r3, r3, #2
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0e9      	beq.n	800b6f0 <i2c_reg_read+0x180>

	//Limpiar los registros de estado
	temp = I2C->SR1;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	699b      	ldr	r3, [r3, #24]
 800b726:	617b      	str	r3, [r7, #20]
	(void)temp;

	//leer bytes
	I2C->CR1  |= I2C_CR1_ACK;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	601a      	str	r2, [r3, #0]

	while(len> 0){
 800b734:	e04e      	b.n	800b7d4 <i2c_reg_read+0x264>
		if(len == 1){
 800b736:	8c3b      	ldrh	r3, [r7, #32]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d12a      	bne.n	800b792 <i2c_reg_read+0x222>
			I2C->CR1 &=~ I2C_CR1_ACK;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	601a      	str	r2, [r3, #0]

			do{
				if((millis() - ticks)>timeout){
 800b748:	f7ff f9ea 	bl	800ab20 <millis>
 800b74c:	4602      	mov	r2, r0
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b754:	429a      	cmp	r2, r3
 800b756:	d207      	bcs.n	800b768 <i2c_reg_read+0x1f8>
					I2C1->CR1 |= I2C_CR1_STOP;
 800b758:	4b22      	ldr	r3, [pc, #136]	; (800b7e4 <i2c_reg_read+0x274>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a21      	ldr	r2, [pc, #132]	; (800b7e4 <i2c_reg_read+0x274>)
 800b75e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b762:	6013      	str	r3, [r2, #0]
					return 1;
 800b764:	2301      	movs	r3, #1
 800b766:	e039      	b.n	800b7dc <i2c_reg_read+0x26c>
				}
			}while((I2C->SR1 & I2C_SR1_RXNE) == 0);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0e9      	beq.n	800b748 <i2c_reg_read+0x1d8>

			I2C1->CR1 |= I2C_CR1_STOP;
 800b774:	4b1b      	ldr	r3, [pc, #108]	; (800b7e4 <i2c_reg_read+0x274>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a1a      	ldr	r2, [pc, #104]	; (800b7e4 <i2c_reg_read+0x274>)
 800b77a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b77e:	6013      	str	r3, [r2, #0]

			//LEER
			*pData = I2C->DR;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	b2da      	uxtb	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	701a      	strb	r2, [r3, #0]
			len--;
 800b78a:	8c3b      	ldrh	r3, [r7, #32]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	843b      	strh	r3, [r7, #32]
			break;
 800b790:	e023      	b.n	800b7da <i2c_reg_read+0x26a>
		}else{
			//wait
			do{
				if((millis() - ticks)>timeout){
 800b792:	f7ff f9c5 	bl	800ab20 <millis>
 800b796:	4602      	mov	r2, r0
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d207      	bcs.n	800b7b2 <i2c_reg_read+0x242>
					I2C1->CR1 |= I2C_CR1_STOP;
 800b7a2:	4b10      	ldr	r3, [pc, #64]	; (800b7e4 <i2c_reg_read+0x274>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a0f      	ldr	r2, [pc, #60]	; (800b7e4 <i2c_reg_read+0x274>)
 800b7a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b7ac:	6013      	str	r3, [r2, #0]
					return 1;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e014      	b.n	800b7dc <i2c_reg_read+0x26c>
				}
			}while((I2C->SR1 & I2C_SR1_RXNE) == 0);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0e9      	beq.n	800b792 <i2c_reg_read+0x222>
			*pData = I2C->DR;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	701a      	strb	r2, [r3, #0]
			pData++;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	607b      	str	r3, [r7, #4]
			len--;
 800b7ce:	8c3b      	ldrh	r3, [r7, #32]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	843b      	strh	r3, [r7, #32]
	while(len> 0){
 800b7d4:	8c3b      	ldrh	r3, [r7, #32]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1ad      	bne.n	800b736 <i2c_reg_read+0x1c6>
		}
	}

	return 0;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	40005400 	.word	0x40005400

0800b7e8 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>:

class ZeroTerminatedRamString {
 public:
  static const size_t typeSortKey = 3;

  ZeroTerminatedRamString(const char* str) : str_(str) {}
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>:

  bool isNull() const {
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
    return !str_;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	bf0c      	ite	eq
 800b816:	2301      	moveq	r3, #1
 800b818:	2300      	movne	r3, #0
 800b81a:	b2db      	uxtb	r3, r3
  }
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>:

  size_t size() const {
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
    return str_ ? ::strlen(str_) : 0;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d006      	beq.n	800b846 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x1e>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7f4 fd27 	bl	8000290 <strlen>
 800b842:	4603      	mov	r3, r0
 800b844:	e000      	b.n	800b848 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x20>
 800b846:	2300      	movs	r3, #0
  }
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>:

  char operator[](size_t i) const {
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	4413      	add	r3, r2
 800b862:	781b      	ldrb	r3, [r3, #0]
  }
 800b864:	4618      	mov	r0, r3
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>:

  const char* data() const {
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
    return str_;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
  }
 800b87c:	4618      	mov	r0, r3
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>:
  }
};

class StaticStringAdapter : public ZeroTerminatedRamString {
 public:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff ffa6 	bl	800b7e8 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>:

  StringStoragePolicy::Link storagePolicy() const {
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
    return StringStoragePolicy::Link();
 800b8ae:	bf00      	nop
  }
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>:

template <>
struct StringAdapter<const char*, void> {
  typedef StaticStringAdapter AdaptedString;

  static AdaptedString adapt(const char* p) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 800b8c4:	f107 030c 	add.w	r3, r7, #12
 800b8c8:	6879      	ldr	r1, [r7, #4]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff ffdc 	bl	800b888 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
  }
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <_ZN11ArduinoJson8V6213HB26detail14SizedRamStringC1EPKcj>:

class SizedRamString {
 public:
  static const size_t typeSortKey = 2;

  SizedRamString(const char* str, size_t sz) : str_(str), size_(sz) {}
 800b8da:	b480      	push	{r7}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	605a      	str	r2, [r3, #4]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>:

  bool isNull() const {
    return !str_;
  }

  size_t size() const {
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
    return size_;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
  }
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>:

  char operator[](size_t i) const {
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	4413      	add	r3, r2
 800b92a:	781b      	ldrb	r3, [r3, #0]
  }
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>:
  JsonString() : data_(0), size_(0), ownership_(Linked) {}

  JsonString(const char* data, Ownership ownership = Linked)
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}

  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	605a      	str	r2, [r3, #4]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	78fa      	ldrb	r2, [r7, #3]
 800b956:	721a      	strb	r2, [r3, #8]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>:

  // Returns a pointer to the characters.
  const char* c_str() const {
 800b966:	b480      	push	{r7}
 800b968:	b083      	sub	sp, #12
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
    return data_;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
  }
 800b972:	4618      	mov	r0, r3
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>:
    return !data_;
  }

  // Returns true if the string is stored by address.
  // Returns false if the string is stored by copy.
  bool isLinked() const {
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	7a1b      	ldrb	r3, [r3, #8]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	bf0c      	ite	eq
 800b98e:	2301      	moveq	r3, #1
 800b990:	2300      	movne	r3, #0
 800b992:	b2db      	uxtb	r3, r3
  }
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>:

  // Returns length of the string.
  size_t size() const {
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    return size_;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685b      	ldr	r3, [r3, #4]
  }
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>:

  // Returns true if the string is non-null
  explicit operator bool() const {
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
    return data_ != 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bf14      	ite	ne
 800b9c8:	2301      	movne	r3, #1
 800b9ca:	2300      	moveq	r3, #0
 800b9cc:	b2db      	uxtb	r3, r3
  }
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>:
  VariantSlot* addSlot(MemoryPool*);
  void removeSlot(VariantSlot* slot);

  bool copyFrom(const CollectionData& src, MemoryPool* pool);

  VariantSlot* head() const {
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
    return head_;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
  }
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&content_);
 800b9fa:	687b      	ldr	r3, [r7, #4]
  }
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:

  const VariantData* data() const {
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(&content_);
 800ba10:	687b      	ldr	r3, [r7, #4]
  }
 800ba12:	4618      	mov	r0, r3
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:

  VariantSlot* next() {
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
    return next_ ? this + next_ : 0;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x20>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	e000      	b.n	800ba40 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x22>
 800ba3e:	2300      	movs	r3, #0
  }
 800ba40:	4618      	mov	r0, r3
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:

  const VariantSlot* next() const {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
    return const_cast<VariantSlot*>(this)->next();
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f7ff ffe2 	bl	800ba1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800ba5a:	4603      	mov	r3, r0
  }
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>:

  const VariantSlot* next(size_t distance) const {
    return const_cast<VariantSlot*>(this)->next(distance);
  }

  void setNext(VariantSlot* slot) {
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(!slot || slot - this >=
                                    numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(!slot || slot - this <=
                                    numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot ? slot - this : 0);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1c>
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	111b      	asrs	r3, r3, #4
 800ba7c:	b21a      	sxth	r2, r3
 800ba7e:	e000      	b.n	800ba82 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1e>
 800ba80:	2200      	movs	r2, #0
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	815a      	strh	r2, [r3, #10]
  }
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>:

  void setNextNotNull(VariantSlot* slot) {
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    ARDUINOJSON_ASSERT(slot - this >=
                       numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(slot - this <=
                       numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot - this);
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	111b      	asrs	r3, r3, #4
 800baa4:	b21a      	sxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	815a      	strh	r2, [r3, #10]
  }
 800baaa:	bf00      	nop
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>:

  void setKey(JsonString k) {
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	4638      	mov	r0, r7
 800bac0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
 800bac4:	463b      	mov	r3, r7
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff ff59 	bl	800b97e <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d007      	beq.n	800bae2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x2c>
      flags_ &= VALUE_MASK;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	7a1b      	ldrb	r3, [r3, #8]
 800bad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bada:	b2da      	uxtb	r2, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	721a      	strb	r2, [r3, #8]
 800bae0:	e006      	b.n	800baf0 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x3a>
    else
      flags_ |= OWNED_KEY_BIT;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	7a1b      	ldrb	r3, [r3, #8]
 800bae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baea:	b2da      	uxtb	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	721a      	strb	r2, [r3, #8]
    key_ = k.c_str();
 800baf0:	463b      	mov	r3, r7
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff ff37 	bl	800b966 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800baf8:	4602      	mov	r2, r0
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	60da      	str	r2, [r3, #12]
  }
 800bafe:	bf00      	nop
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>:

  const char* key() const {
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
    return key_;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68db      	ldr	r3, [r3, #12]
  }
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>:

  bool ownsKey() const {
    return (flags_ & OWNED_KEY_BIT) != 0;
  }

  void clear() {
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
    next_ = 0;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	815a      	strh	r2, [r3, #10]
    flags_ = 0;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	721a      	strb	r2, [r3, #8]
    key_ = 0;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	60da      	str	r2, [r3, #12]
  }
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>:
//               ^              ^
//             left_          right_

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
      : begin_(buf),
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	601a      	str	r2, [r3, #0]
        left_(buf),
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	605a      	str	r2, [r3, #4]
        right_(buf ? buf + capa : 0),
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x26>
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4413      	add	r3, r2
 800bb68:	e000      	b.n	800bb6c <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x28>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	6093      	str	r3, [r2, #8]
        end_(buf ? buf + capa : 0),
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3a>
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	e000      	b.n	800bb80 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3c>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	60d3      	str	r3, [r2, #12]
        overflowed_(false) {
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	741a      	strb	r2, [r3, #16]
    ARDUINOJSON_ASSERT(isAligned(begin_));
    ARDUINOJSON_ASSERT(isAligned(right_));
    ARDUINOJSON_ASSERT(isAligned(end_));
  }
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>:

  size_t size() const {
    return size_t(left_ - begin_ + end_ - right_);
  }

  bool overflowed() const {
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
    return overflowed_;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7c1b      	ldrb	r3, [r3, #16]
  }
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>:

  VariantSlot* allocVariant() {
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f002 fa71 	bl	800e0a0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>
 800bbbe:	4603      	mov	r3, r0
  }
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool11getFreeZoneEPPcPj>:
      newCopy[n] = 0;  // force null-terminator
    }
    return newCopy;
  }

  void getFreeZone(char** zoneStart, size_t* zoneSize) const {
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
    *zoneStart = left_;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	601a      	str	r2, [r3, #0]
    *zoneSize = size_t(right_ - left_);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	689a      	ldr	r2, [r3, #8]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	601a      	str	r2, [r3, #0]
  }
 800bbec:	bf00      	nop
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj>:

  const char* saveStringFromFreeZone(size_t len) {
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
#if ARDUINOJSON_ENABLE_STRING_DEDUPLICATION
    const char* dup = findString(adaptString(left_, len));
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6859      	ldr	r1, [r3, #4]
 800bc06:	f107 0308 	add.w	r3, r7, #8
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f002 fa54 	bl	800e0ba <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 800bc12:	f107 0308 	add.w	r3, r7, #8
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f002 fa5f 	bl	800e0dc <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>
 800bc1e:	6178      	str	r0, [r7, #20]
    if (dup)
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj+0x32>
      return dup;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	e013      	b.n	800bc52 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj+0x5a>
#endif

    const char* str = left_;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	613b      	str	r3, [r7, #16]
    left_ += len;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	441a      	add	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	605a      	str	r2, [r3, #4]
    *left_++ = 0;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	1c59      	adds	r1, r3, #1
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	6051      	str	r1, [r2, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
    checkInvariants();
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f83d 	bl	800bcca <_ZN11ArduinoJson8V6213HB26detail10MemoryPool15checkInvariantsEv>
    return str;
 800bc50:	693b      	ldr	r3, [r7, #16]
  }
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>:

  void markAsOverflowed() {
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
    overflowed_ = true;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	741a      	strb	r2, [r3, #16]
  }
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool5clearEv>:

  void clear() {
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
    left_ = begin_;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	605a      	str	r2, [r3, #4]
    right_ = end_;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68da      	ldr	r2, [r3, #12]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	609a      	str	r2, [r3, #8]
    overflowed_ = false;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	741a      	strb	r2, [r3, #16]
  }
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	6039      	str	r1, [r7, #0]
    return left_ + bytes <= right_;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	441a      	add	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	bf94      	ite	ls
 800bcb8:	2301      	movls	r3, #1
 800bcba:	2300      	movhi	r3, #0
 800bcbc:	b2db      	uxtb	r3, r3
  }
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <_ZN11ArduinoJson8V6213HB26detail10MemoryPool15checkInvariantsEv>:
    right_ += offset;
    end_ += offset;
  }

 private:
  void checkInvariants() {
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(begin_ <= left_);
    ARDUINOJSON_ASSERT(left_ <= right_);
    ARDUINOJSON_ASSERT(right_ <= end_);
    ARDUINOJSON_ASSERT(isAligned(right_));
  }
 800bcd2:	bf00      	nop
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) {
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff ffd7 	bl	800bc9e <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	f083 0301 	eor.w	r3, r3, #1
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d004      	beq.n	800bd06 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x28>
      overflowed_ = true;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	741a      	strb	r2, [r3, #16]
      return 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	e008      	b.n	800bd18 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x3a>
    }
    right_ -= bytes;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	425b      	negs	r3, r3
 800bd0e:	441a      	add	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	609a      	str	r2, [r3, #8]
    return right_;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
  }
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>:
class VariantData {
  VariantContent content_;  // must be first to allow cast from array to variant
  uint8_t flags_;

 public:
  VariantData() : flags_(VALUE_IS_NULL) {}
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	721a      	strb	r2, [r3, #8]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>:

  const CollectionData* asCollection() const {
    return isCollection() ? &content_.asCollection : 0;
  }

  CollectionData* asObject() {
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asCollection : 0;
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f829 	bl	800bd9c <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d001      	beq.n	800bd54 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv+0x18>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	e000      	b.n	800bd56 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv+0x1a>
 800bd54:	2300      	movs	r3, #0
  }
 800bd56:	4618      	mov	r0, r3
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <_ZNK11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>:

  const CollectionData* asObject() const {
 800bd5e:	b580      	push	{r7, lr}
 800bd60:	b082      	sub	sp, #8
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7ff ffe8 	bl	800bd3c <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>
 800bd6c:	4603      	mov	r3, r0
  }
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <_ZNK11ArduinoJson8V6213HB26detail11VariantData7isFloatEv>:
      default:
        return false;
    }
  }

  bool isFloat() const {
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
    return (flags_ & NUMBER_BIT) != 0;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	7a1b      	ldrb	r3, [r3, #8]
 800bd82:	f003 0308 	and.w	r3, r3, #8
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	bf14      	ite	ne
 800bd8a:	2301      	movne	r3, #1
 800bd8c:	2300      	moveq	r3, #0
 800bd8e:	b2db      	uxtb	r3, r3
  }
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
    return (flags_ & VALUE_IS_OBJECT) != 0;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	7a1b      	ldrb	r3, [r3, #8]
 800bda8:	f003 0320 	and.w	r3, r3, #32
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	bf14      	ite	ne
 800bdb0:	2301      	movne	r3, #1
 800bdb2:	2300      	moveq	r3, #0
 800bdb4:	b2db      	uxtb	r3, r3
  }
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>:

  bool isNull() const {
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
    return type() == VALUE_IS_NULL;
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f894 	bl	800bef8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bf0c      	ite	eq
 800bdd6:	2301      	moveq	r3, #1
 800bdd8:	2300      	movne	r3, #0
 800bdda:	b2db      	uxtb	r3, r3
  }
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData10isEnclosedEv>:

  bool isEnclosed() const {
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
    return !isFloat();
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff ffc2 	bl	800bd76 <_ZNK11ArduinoJson8V6213HB26detail11VariantData7isFloatEv>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f083 0301 	eor.w	r3, r3, #1
 800bdf8:	b2db      	uxtb	r3, r3
  }
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>:
  void remove(TAdaptedString key) {
    if (isObject())
      content_.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 800be0e:	2106      	movs	r1, #6
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f880 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asBoolean = value;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	78fa      	ldrb	r2, [r7, #3]
 800be1a:	701a      	strb	r2, [r3, #0]
  }
 800be1c:	bf00      	nop
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>:

  void setFloat(JsonFloat value) {
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 800be30:	210c      	movs	r1, #12
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f000 f86f 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asFloat = value;
 800be38:	68f9      	ldr	r1, [r7, #12]
 800be3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be3e:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800be42:	bf00      	nop
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    content_.asSignedInteger = value;
  }

  void setNull() {
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 800be52:	2100      	movs	r1, #0
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f85e 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
  }
 800be5a:	bf00      	nop
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>:

  void setString(JsonString s) {
 800be62:	b580      	push	{r7, lr}
 800be64:	b084      	sub	sp, #16
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	4638      	mov	r0, r7
 800be6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
 800be70:	463b      	mov	r3, r7
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fd83 	bl	800b97e <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d004      	beq.n	800be88 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x26>
      setType(VALUE_IS_LINKED_STRING);
 800be7e:	2104      	movs	r1, #4
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f848 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
 800be86:	e003      	b.n	800be90 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x2e>
    else
      setType(VALUE_IS_OWNED_STRING);
 800be88:	2105      	movs	r1, #5
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 f843 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asString.data = s.c_str();
 800be90:	463b      	mov	r3, r7
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fd67 	bl	800b966 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800be98:	4602      	mov	r2, r0
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]
    content_.asString.size = s.size();
 800be9e:	463b      	mov	r3, r7
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fd7d 	bl	800b9a0 <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>
 800bea6:	4602      	mov	r2, r0
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	605a      	str	r2, [r3, #4]
  }
 800beac:	bf00      	nop
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>:

  CollectionData& toArray() {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 800bebc:	2140      	movs	r1, #64	; 0x40
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f829 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 f94e 	bl	800c168 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 800becc:	687b      	ldr	r3, [r7, #4]
  }
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>:

  CollectionData& toObject() {
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b082      	sub	sp, #8
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 800bede:	2120      	movs	r1, #32
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f818 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 f93d 	bl	800c168 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 800beee:	687b      	ldr	r3, [r7, #4]
  }
 800bef0:	4618      	mov	r0, r3
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>:
      content_.asString.data += stringDistance;
    if (flags_ & COLLECTION_MASK)
      content_.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
    return flags_ & VALUE_MASK;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7a1b      	ldrb	r3, [r3, #8]
 800bf04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf08:	b2db      	uxtb	r3, r3
  }
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>:

    return storeString(pool, value, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
 800bf16:	b480      	push	{r7}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	70fb      	strb	r3, [r7, #3]
    flags_ &= OWNED_KEY_BIT;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	7a1b      	ldrb	r3, [r3, #8]
 800bf26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	721a      	strb	r2, [r3, #8]
    flags_ |= t;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	7a1a      	ldrb	r2, [r3, #8]
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	b2da      	uxtb	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	721a      	strb	r2, [r3, #8]
  }
 800bf3e:	bf00      	nop
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>:

  struct VariantStringSetter {
    VariantStringSetter(VariantData* instance) : instance_(instance) {}
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	6039      	str	r1, [r7, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(0) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data) : data_(data) {}
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>:
      containsKey(TChar* key) const {
    return variantGetMember(getData(), detail::adaptString(key)) != 0;
  }

 protected:
  const detail::VariantData* getData() const {
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
    return data_;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
  }
 800bf92:	4618      	mov	r0, r3
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), pool_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	60f8      	str	r0, [r7, #12]
 800bfa6:	60b9      	str	r1, [r7, #8]
 800bfa8:	607a      	str	r2, [r7, #4]
      : data_(data), pool_(pool) {}
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	601a      	str	r2, [r3, #0]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	605a      	str	r2, [r3, #4]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <_ZN11ArduinoJson8V6213HB29ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>:
struct Converter<JsonVariantConst> : private detail::VariantAttorney {
  static void toJson(JsonVariantConst src, JsonVariant dst) {
    variantCopyFrom(getData(dst), getData(src), getPool(dst));
  }

  static JsonVariantConst fromJson(JsonVariantConst src) {
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  }

  template <typename TClient>
  FORCE_INLINE static typename ResultOfGetData<TClient>::type getData(
      TClient& client) {
    return client.getData();
 800bfcc:	1d3b      	adds	r3, r7, #4
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff ffd9 	bl	800bf86 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	bf00      	nop
    return JsonVariantConst(getData(src));
 800bfd8:	f107 030c 	add.w	r3, r7, #12
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff ffc2 	bl	800bf68 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
  }
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

struct SlotKeySetter {
  SlotKeySetter(VariantSlot* instance) : instance_(instance) {}
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	6039      	str	r1, [r7, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800c014:	687b      	ldr	r3, [r7, #4]
}
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <_ZN11ArduinoJson8V6213HB212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v6/api/jsondocument/clear/
  void clear() {
 800c022:	b580      	push	{r7, lr}
 800c024:	b082      	sub	sp, #8
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
    pool_.clear();
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fe21 	bl	800bc74 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool5clearEv>
    data_.setNull();
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3318      	adds	r3, #24
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff ff07 	bl	800be4a <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
  }
 800c03c:	bf00      	nop
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>:
 protected:
  JsonDocument() : pool_(0, 0) {}

  JsonDocument(detail::MemoryPool pool) : pool_(pool) {}

  JsonDocument(char* buf, size_t capa) : pool_(buf, capa) {}
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	4618      	mov	r0, r3
 800c058:	f7ff fd74 	bl	800bb44 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	3318      	adds	r3, #24
 800c060:	4618      	mov	r0, r3
 800c062:	f7ff fe5d 	bl	800bd20 <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <_ZN11ArduinoJson8V6213HB212JsonDocumentD1Ev>:

  ~JsonDocument() {}
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4618      	mov	r0, r3
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>:

  JsonVariant getVariant() {
    return JsonVariant(&pool_, &data_);
  }

  JsonVariantConst getVariant() const {
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(&data_);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f103 0218 	add.w	r2, r3, #24
 800c094:	f107 030c 	add.w	r3, r7, #12
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff ff64 	bl	800bf68 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
  }
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>:

  detail::MemoryPool pool_;
  detail::VariantData data_;

 protected:
  detail::MemoryPool* getPool() {
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
    return &pool_;
 800c0b2:	687b      	ldr	r3, [r7, #4]
  }
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
    return &data_;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3318      	adds	r3, #24
  }
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
    return &data_;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3318      	adds	r3, #24
  }
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>:
#include <ArduinoJson/Strings/StringAdapters.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 800c0fa:	6838      	ldr	r0, [r7, #0]
 800c0fc:	f7ff fd58 	bl	800bbb0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>
 800c100:	60f8      	str	r0, [r7, #12]
  if (!slot)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x1c>
    return 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	e017      	b.n	800c13c <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x4c>

  if (tail_) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x38>
    ARDUINOJSON_ASSERT(pool->owns(tail_));  // Can't alter a linked array/object
    tail_->setNextNotNull(slot);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	68f9      	ldr	r1, [r7, #12]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff fcb9 	bl	800ba92 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>
    tail_ = slot;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	605a      	str	r2, [r3, #4]
 800c126:	e005      	b.n	800c134 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x44>
  } else {
    head_ = slot;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	601a      	str	r2, [r3, #0]
    tail_ = slot;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fcf2 	bl	800bb1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>
  return slot;
 800c13a:	68fb      	ldr	r3, [r7, #12]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>:

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff ffcd 	bl	800c0f0 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 800c156:	4603      	mov	r3, r0
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff ff57 	bl	800c00c <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>
 800c15e:	4603      	mov	r3, r0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>:
    return 0;
  }
  return slot->data();
}

inline void CollectionData::clear() {
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  head_ = 0;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
  tail_ = 0;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	605a      	str	r2, [r3, #4]
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>:
  if (!head_)
    return 0;
  return head_->next(index);
}

inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  VariantSlot* current = head_;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]
  while (current) {
 800c198:	e00b      	b.n	800c1b2 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x2a>
    VariantSlot* next = current->next();
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f7ff fc3f 	bl	800ba1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800c1a0:	60b8      	str	r0, [r7, #8]
    if (next == target)
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d101      	bne.n	800c1ae <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x26>
      return current;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	e005      	b.n	800c1ba <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x32>
    current = next;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	60fb      	str	r3, [r7, #12]
  while (current) {
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1f0      	bne.n	800c19a <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x12>
  }
  return 0;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>:
    index--;
  }
  return slotData(slot);
}

inline void CollectionData::removeSlot(VariantSlot* slot) {
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  if (!slot)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d01a      	beq.n	800c208 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x46>
    return;
  VariantSlot* prev = getPreviousSlot(slot);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff ffd7 	bl	800c188 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>
 800c1da:	60f8      	str	r0, [r7, #12]
  VariantSlot* next = slot->next();
 800c1dc:	6838      	ldr	r0, [r7, #0]
 800c1de:	f7ff fc1e 	bl	800ba1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800c1e2:	60b8      	str	r0, [r7, #8]
  if (prev)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x32>
    prev->setNext(next);
 800c1ea:	68b9      	ldr	r1, [r7, #8]
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7ff fc39 	bl	800ba64 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>
 800c1f2:	e002      	b.n	800c1fa <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x38>
  else
    head_ = next;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	601a      	str	r2, [r3, #0]
  if (!next)
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d104      	bne.n	800c20a <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    tail_ = prev;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]
 800c206:	e000      	b.n	800c20a <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    return;
 800c208:	bf00      	nop
}
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 800c21a:	2001      	movs	r0, #1
 800c21c:	f000 f836 	bl	800c28c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 800c220:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 800c222:	e002      	b.n	800c22a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3302      	adds	r3, #2
 800c228:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d005      	beq.n	800c23e <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	79fa      	ldrb	r2, [r7, #7]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d1f2      	bne.n	800c224 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x14>
    }
    return p[0];
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	781b      	ldrb	r3, [r3, #0]
  }
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc>:

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	4603      	mov	r3, r0
 800c252:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 800c254:	2000      	movs	r0, #0
 800c256:	f000 f819 	bl	800c28c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 800c25a:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d101      	bne.n	800c268 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 800c264:	2300      	movs	r3, #0
 800c266:	e00c      	b.n	800c282 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	79fa      	ldrb	r2, [r7, #7]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d103      	bne.n	800c27a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3301      	adds	r3, #1
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	e003      	b.n	800c282 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3302      	adds	r3, #2
 800c27e:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 800c280:	e7ec      	b.n	800c25c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
	...

0800c28c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool excludeSolidus) {
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
    return &"//\"\"\\\\b\bf\fn\nr\rt\t"[excludeSolidus ? 2 : 0];
 800c296:	79fb      	ldrb	r3, [r7, #7]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x14>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e000      	b.n	800c2a2 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x16>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	4a04      	ldr	r2, [pc, #16]	; (800c2b4 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x28>)
 800c2a4:	4413      	add	r3, r2
  }
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	08014484 	.word	0x08014484

0800c2b8 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE>:
  }
};

template <>
struct Converter<bool> : private detail::VariantAttorney {
  static void toJson(bool src, JsonVariant dst) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	1d3b      	adds	r3, r7, #4
 800c2c0:	e883 0006 	stmia.w	r3, {r1, r2}
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]
 800c2c8:	1d3b      	adds	r3, r7, #4
 800c2ca:	613b      	str	r3, [r7, #16]
    return data_;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	bf00      	nop
    auto data = getData(dst);
 800c2d2:	617b      	str	r3, [r7, #20]
    if (data)
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d004      	beq.n	800c2e4 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE+0x2c>
      data->setBoolean(src);
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6978      	ldr	r0, [r7, #20]
 800c2e0:	f7ff fd8f 	bl	800be02 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
  }
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
  }
};

template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	1d3b      	adds	r3, r7, #4
 800c2f6:	e883 0006 	stmia.w	r3, {r1, r2}
 800c2fa:	1d3b      	adds	r3, r7, #4
 800c2fc:	613b      	str	r3, [r7, #16]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	681c      	ldr	r4, [r3, #0]
 800c302:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f001 ff2a 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800c30a:	4601      	mov	r1, r0
 800c30c:	1d3b      	adds	r3, r7, #4
 800c30e:	617b      	str	r3, [r7, #20]
    return pool_;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	685b      	ldr	r3, [r3, #4]
    return client.getPool();
 800c314:	bf00      	nop
 800c316:	461a      	mov	r2, r3
 800c318:	4620      	mov	r0, r4
 800c31a:	f001 ff2c 	bl	800e176 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>
  }
 800c31e:	bf00      	nop
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	bd90      	pop	{r4, r7, pc}

0800c326 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 800c326:	b480      	push	{r7}
 800c328:	b083      	sub	sp, #12
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	4603      	mov	r3, r0
 800c32e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 800c330:	79fb      	ldrb	r3, [r7, #7]
 800c332:	2b2f      	cmp	r3, #47	; 0x2f
 800c334:	d904      	bls.n	800c340 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1a>
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	2b39      	cmp	r3, #57	; 0x39
 800c33a:	d801      	bhi.n	800c340 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1a>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1c>
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
	...

0800c350 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

inline bool parseNumber(const char* s, VariantData& result) {
 800c350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c354:	ed2d 8b02 	vpush	{d8}
 800c358:	b0a6      	sub	sp, #152	; 0x98
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6578      	str	r0, [r7, #84]	; 0x54
 800c35e:	6539      	str	r1, [r7, #80]	; 0x50
  typedef choose_largest<traits::mantissa_type, JsonUInt>::type mantissa_t;
  typedef traits::exponent_type exponent_t;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 800c360:	2300      	movs	r3, #0
 800c362:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  switch (*s) {
 800c366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	2b2b      	cmp	r3, #43	; 0x2b
 800c36c:	d008      	beq.n	800c380 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x30>
 800c36e:	2b2d      	cmp	r3, #45	; 0x2d
 800c370:	d10a      	bne.n	800c388 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '-':
      is_negative = true;
 800c372:	2301      	movs	r3, #1
 800c374:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      s++;
 800c378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c37a:	3301      	adds	r3, #1
 800c37c:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 800c37e:	e003      	b.n	800c388 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '+':
      s++;
 800c380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c382:	3301      	adds	r3, #1
 800c384:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 800c386:	bf00      	nop
    result.setFloat(is_negative ? -traits::inf() : traits::inf());
    return true;
  }
#endif

  if (!isdigit(*s) && *s != '.')
 800c388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7ff ffca 	bl	800c326 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800c392:	4603      	mov	r3, r0
 800c394:	f083 0301 	eor.w	r3, r3, #1
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d005      	beq.n	800c3aa <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 800c39e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a4:	d001      	beq.n	800c3aa <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5c>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x64>
    return false;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e1d5      	b.n	800c760 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  mantissa_t mantissa = 0;
 800c3b4:	f04f 0200 	mov.w	r2, #0
 800c3b8:	f04f 0300 	mov.w	r3, #0
 800c3bc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  exponent_t exponent_offset = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 800c3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  while (isdigit(*s)) {
 800c3d2:	e054      	b.n	800c47e <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 800c3d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	3b30      	subs	r3, #48	; 0x30
 800c3da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (mantissa > maxUint / 10)
 800c3de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c3e2:	f112 3f66 	cmn.w	r2, #1717986918	; 0x66666666
 800c3e6:	49ba      	ldr	r1, [pc, #744]	; (800c6d0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x380>)
 800c3e8:	418b      	sbcs	r3, r1
 800c3ea:	d251      	bcs.n	800c490 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x140>
      break;
    mantissa *= 10;
 800c3ec:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	462b      	mov	r3, r5
 800c3f4:	f04f 0000 	mov.w	r0, #0
 800c3f8:	f04f 0100 	mov.w	r1, #0
 800c3fc:	0099      	lsls	r1, r3, #2
 800c3fe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c402:	0090      	lsls	r0, r2, #2
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	eb12 0804 	adds.w	r8, r2, r4
 800c40c:	eb43 0905 	adc.w	r9, r3, r5
 800c410:	eb18 0308 	adds.w	r3, r8, r8
 800c414:	61bb      	str	r3, [r7, #24]
 800c416:	eb49 0309 	adc.w	r3, r9, r9
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800c420:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    if (mantissa > maxUint - digit)
 800c424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c428:	2200      	movs	r2, #0
 800c42a:	643b      	str	r3, [r7, #64]	; 0x40
 800c42c:	647a      	str	r2, [r7, #68]	; 0x44
 800c42e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c432:	460b      	mov	r3, r1
 800c434:	43db      	mvns	r3, r3
 800c436:	63bb      	str	r3, [r7, #56]	; 0x38
 800c438:	4613      	mov	r3, r2
 800c43a:	43db      	mvns	r3, r3
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c43e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c442:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800c446:	4621      	mov	r1, r4
 800c448:	4291      	cmp	r1, r2
 800c44a:	4629      	mov	r1, r5
 800c44c:	eb71 0303 	sbcs.w	r3, r1, r3
 800c450:	d320      	bcc.n	800c494 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x144>
      break;
    mantissa += digit;
 800c452:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c456:	2200      	movs	r2, #0
 800c458:	633b      	str	r3, [r7, #48]	; 0x30
 800c45a:	637a      	str	r2, [r7, #52]	; 0x34
 800c45c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c464:	4621      	mov	r1, r4
 800c466:	1851      	adds	r1, r2, r1
 800c468:	6139      	str	r1, [r7, #16]
 800c46a:	4629      	mov	r1, r5
 800c46c:	414b      	adcs	r3, r1
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c474:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    s++;
 800c478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c47a:	3301      	adds	r3, #1
 800c47c:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 800c47e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff ff4f 	bl	800c326 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1a2      	bne.n	800c3d4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x84>
 800c48e:	e002      	b.n	800c496 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 800c490:	bf00      	nop
 800c492:	e000      	b.n	800c496 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 800c494:	bf00      	nop
  }

  if (*s == '\0') {
 800c496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d138      	bne.n	800c510 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
    if (is_negative) {
 800c49e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d01a      	beq.n	800c4dc <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x18c>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 800c4a6:	f04f 0200 	mov.w	r2, #0
 800c4aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4ae:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 800c4b2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c4b6:	2a01      	cmp	r2, #1
 800c4b8:	f173 4300 	sbcs.w	r3, r3, #2147483648	; 0x80000000
 800c4bc:	d228      	bcs.n	800c510 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
        result.setInteger(JsonInteger(~mantissa + 1));
 800c4be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	4250      	negs	r0, r2
 800c4c6:	62b8      	str	r0, [r7, #40]	; 0x28
 800c4c8:	eb61 0303 	sbc.w	r3, r1, r3
 800c4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c4d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c4d4:	f001 fe88 	bl	800e1e8 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>
        return true;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e141      	b.n	800c760 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
      }
    } else {
      result.setInteger(JsonUInt(mantissa));
 800c4dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c4e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c4e2:	f001 fe94 	bl	800e20e <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>
      return true;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e13a      	b.n	800c760 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 800c4ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800c4ee:	f04f 020a 	mov.w	r2, #10
 800c4f2:	f04f 0300 	mov.w	r3, #0
 800c4f6:	f7f4 fa61 	bl	80009bc <__aeabi_uldivmod>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    exponent_offset++;
 800c502:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800c506:	b29b      	uxth	r3, r3
 800c508:	3301      	adds	r3, #1
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  while (mantissa > traits::mantissa_max) {
 800c510:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c518:	d2e7      	bcs.n	800c4ea <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x19a>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 800c51a:	e009      	b.n	800c530 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1e0>
    exponent_offset++;
 800c51c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800c520:	b29b      	uxth	r3, r3
 800c522:	3301      	adds	r3, #1
 800c524:	b29b      	uxth	r3, r3
 800c526:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    s++;
 800c52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c52c:	3301      	adds	r3, #1
 800c52e:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 800c530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f7ff fef6 	bl	800c326 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1ed      	bne.n	800c51c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1cc>
  }

  if (*s == '.') {
 800c540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b2e      	cmp	r3, #46	; 0x2e
 800c546:	d14c      	bne.n	800c5e2 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x292>
    s++;
 800c548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c54a:	3301      	adds	r3, #1
 800c54c:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800c54e:	e040      	b.n	800c5d2 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x282>
      if (mantissa < traits::mantissa_max / 10) {
 800c550:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c554:	f1b2 3f99 	cmp.w	r2, #2576980377	; 0x99999999
 800c558:	495e      	ldr	r1, [pc, #376]	; (800c6d4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x384>)
 800c55a:	418b      	sbcs	r3, r1
 800c55c:	d236      	bcs.n	800c5cc <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x27c>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800c55e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c562:	4622      	mov	r2, r4
 800c564:	462b      	mov	r3, r5
 800c566:	f04f 0000 	mov.w	r0, #0
 800c56a:	f04f 0100 	mov.w	r1, #0
 800c56e:	0099      	lsls	r1, r3, #2
 800c570:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c574:	0090      	lsls	r0, r2, #2
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	eb12 0a04 	adds.w	sl, r2, r4
 800c57e:	eb43 0b05 	adc.w	fp, r3, r5
 800c582:	eb1a 030a 	adds.w	r3, sl, sl
 800c586:	60bb      	str	r3, [r7, #8]
 800c588:	eb4b 030b 	adc.w	r3, fp, fp
 800c58c:	60fb      	str	r3, [r7, #12]
 800c58e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c592:	4652      	mov	r2, sl
 800c594:	465b      	mov	r3, fp
 800c596:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c598:	7809      	ldrb	r1, [r1, #0]
 800c59a:	3930      	subs	r1, #48	; 0x30
 800c59c:	b2c9      	uxtb	r1, r1
 800c59e:	b2c9      	uxtb	r1, r1
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	6239      	str	r1, [r7, #32]
 800c5a4:	6278      	str	r0, [r7, #36]	; 0x24
 800c5a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	1851      	adds	r1, r2, r1
 800c5ae:	6039      	str	r1, [r7, #0]
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	414b      	adcs	r3, r1
 800c5b4:	607b      	str	r3, [r7, #4]
 800c5b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c5ba:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        exponent_offset--;
 800c5be:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      }
      s++;
 800c5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800c5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7ff fea5 	bl	800c326 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1b6      	bne.n	800c550 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x200>
    }
  }

  int exponent = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (*s == 'e' || *s == 'E') {
 800c5e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b65      	cmp	r3, #101	; 0x65
 800c5ee:	d004      	beq.n	800c5fa <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2aa>
 800c5f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b45      	cmp	r3, #69	; 0x45
 800c5f6:	f040 8083 	bne.w	800c700 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
    s++;
 800c5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	657b      	str	r3, [r7, #84]	; 0x54
    bool negative_exponent = false;
 800c600:	2300      	movs	r3, #0
 800c602:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (*s == '-') {
 800c606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2b2d      	cmp	r3, #45	; 0x2d
 800c60c:	d106      	bne.n	800c61c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2cc>
      negative_exponent = true;
 800c60e:	2301      	movs	r3, #1
 800c610:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      s++;
 800c614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c616:	3301      	adds	r3, #1
 800c618:	657b      	str	r3, [r7, #84]	; 0x54
 800c61a:	e060      	b.n	800c6de <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
    } else if (*s == '+') {
 800c61c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b2b      	cmp	r3, #43	; 0x2b
 800c622:	d15c      	bne.n	800c6de <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      s++;
 800c624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c626:	3301      	adds	r3, #1
 800c628:	657b      	str	r3, [r7, #84]	; 0x54
    }

    while (isdigit(*s)) {
 800c62a:	e058      	b.n	800c6de <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      exponent = exponent * 10 + (*s - '0');
 800c62c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c630:	4613      	mov	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	461a      	mov	r2, r3
 800c63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	3b30      	subs	r3, #48	; 0x30
 800c640:	4413      	add	r3, r2
 800c642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 800c646:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800c64a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c64e:	4413      	add	r3, r2
 800c650:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800c654:	dd40      	ble.n	800c6d8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x388>
        if (negative_exponent)
 800c656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d010      	beq.n	800c680 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x330>
          result.setFloat(is_negative ? -0.0f : 0.0f);
 800c65e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x31c>
 800c666:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c6c0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x370>
 800c66a:	e001      	b.n	800c670 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x320>
 800c66c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c6c8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x378>
 800c670:	eeb0 0a47 	vmov.f32	s0, s14
 800c674:	eef0 0a67 	vmov.f32	s1, s15
 800c678:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c67a:	f7ff fbd3 	bl	800be24 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
 800c67e:	e01b      	b.n	800c6b8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x368>
        else
          result.setFloat(is_negative ? -traits::inf() : traits::inf());
 800c680:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x34e>
 800c688:	f001 fdd4 	bl	800e234 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>
 800c68c:	ec53 2b10 	vmov	r2, r3, d0
 800c690:	ee08 2a10 	vmov	s16, r2
 800c694:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c698:	ee08 3a90 	vmov	s17, r3
 800c69c:	e005      	b.n	800c6aa <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x35a>
 800c69e:	f001 fdc9 	bl	800e234 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>
 800c6a2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6a6:	eef0 8a60 	vmov.f32	s17, s1
 800c6aa:	eeb0 0a48 	vmov.f32	s0, s16
 800c6ae:	eef0 0a68 	vmov.f32	s1, s17
 800c6b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c6b4:	f7ff fbb6 	bl	800be24 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
        return true;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e051      	b.n	800c760 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
 800c6bc:	f3af 8000 	nop.w
 800c6c0:	00000000 	.word	0x00000000
 800c6c4:	80000000 	.word	0x80000000
	...
 800c6d0:	19999999 	.word	0x19999999
 800c6d4:	00019999 	.word	0x00019999
      }
      s++;
 800c6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6da:	3301      	adds	r3, #1
 800c6dc:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800c6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff fe1f 	bl	800c326 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d19e      	bne.n	800c62c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2dc>
    }
    if (negative_exponent)
 800c6ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d004      	beq.n	800c700 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
      exponent = -exponent;
 800c6f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6fa:	425b      	negs	r3, r3
 800c6fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  }
  exponent += exponent_offset;
 800c700:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800c704:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c708:	4413      	add	r3, r2
 800c70a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 800c70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3ca>
    return false;
 800c716:	2300      	movs	r3, #0
 800c718:	e022      	b.n	800c760 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  JsonFloat final_result =
      make_float(static_cast<JsonFloat>(mantissa), exponent);
 800c71a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800c71e:	f7f4 f86f 	bl	8000800 <__aeabi_ul2d>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800c72a:	ec43 2b10 	vmov	d0, r2, r3
 800c72e:	f001 fd93 	bl	800e258 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_>
 800c732:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

  result.setFloat(is_negative ? -final_result : final_result);
 800c736:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d006      	beq.n	800c74c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3fc>
 800c73e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c740:	64bb      	str	r3, [r7, #72]	; 0x48
 800c742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c744:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c74a:	e003      	b.n	800c754 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x404>
 800c74c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800c750:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 800c754:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800c758:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c75a:	f7ff fb63 	bl	800be24 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
  return true;
 800c75e:	2301      	movs	r3, #1
}
 800c760:	4618      	mov	r0, r3
 800c762:	3798      	adds	r7, #152	; 0x98
 800c764:	46bd      	mov	sp, r7
 800c766:	ecbd 8b02 	vpop	{d8}
 800c76a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c76e:	bf00      	nop

0800c770 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1Ev>:
    InvalidInput,
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>:
  DeserializationError(Code c) : code_(c) {}
 800c786:	b480      	push	{r7}
 800c788:	b083      	sub	sp, #12
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	460b      	mov	r3, r1
 800c790:	70fb      	strb	r3, [r7, #3]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	78fa      	ldrb	r2, [r7, #3]
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <_ZNK11ArduinoJson8V6213HB220DeserializationErrorcvbEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs.code_;
  }

  // Returns true if there is an error
  explicit operator bool() const {
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
    return code_ != Ok;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	bf14      	ite	ne
 800c7b6:	2301      	movne	r3, #1
 800c7b8:	2300      	moveq	r3, #0
 800c7ba:	b2db      	uxtb	r3, r3
  }
 800c7bc:	4618      	mov	r0, r3
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
    return true;
 800c7d0:	2301      	movs	r3, #1
  }
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 800c7de:	b480      	push	{r7}
 800c7e0:	b083      	sub	sp, #12
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
    return true;
 800c7e6:	2301      	movs	r3, #1
  }
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
    return true;
 800c7fc:	2301      	movs	r3, #1
  }
 800c7fe:	4618      	mov	r0, r3
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
    return true;
 800c812:	2301      	movs	r3, #1
  }
 800c814:	4618      	mov	r0, r3
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	220a      	movs	r2, #10
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	78fa      	ldrb	r2, [r7, #3]
 800c84c:	701a      	strb	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	3b01      	subs	r3, #1
 800c86a:	b2da      	uxtb	r2, r3
 800c86c:	f107 030c 	add.w	r3, r7, #12
 800c870:	4611      	mov	r1, r2
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff ffe2 	bl	800c83c <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Eh>
 800c878:	7b3b      	ldrb	r3, [r7, #12]
  }
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bf0c      	ite	eq
 800c892:	2301      	moveq	r3, #1
 800c894:	2300      	movne	r3, #0
 800c896:	b2db      	uxtb	r3, r3
  }
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <_ZN11ArduinoJson8V6213HB26detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800c8ac:	793b      	ldrb	r3, [r7, #4]
 800c8ae:	737b      	strb	r3, [r7, #13]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	7b3a      	ldrb	r2, [r7, #12]
 800c8b4:	f362 0307 	bfi	r3, r2, #0, #8
 800c8b8:	7b7a      	ldrb	r2, [r7, #13]
 800c8ba:	f362 230f 	bfi	r3, r2, #8, #8
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <_ZN11ArduinoJson8V6213HB26detail12StringCopierC1EPNS1_10MemoryPoolE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class StringCopier {
 public:
  StringCopier(MemoryPool* pool) : pool_(pool) {}
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>:

  void startString() {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
    pool_->getFreeZone(&ptr_, &capacity_);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	1d19      	adds	r1, r3, #4
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	330c      	adds	r3, #12
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	f7ff f963 	bl	800bbc8 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool11getFreeZoneEPPcPj>
    size_ = 0;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	609a      	str	r2, [r3, #8]
    if (capacity_ == 0)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d104      	bne.n	800c91a <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv+0x32>
      pool_->markAsOverflowed();
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff f9a0 	bl	800bc5a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>
  }
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>:

  JsonString save() {
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(ptr_);
    ARDUINOJSON_ASSERT(size_ < capacity_);  // needs room for the terminator
    return JsonString(pool_->saveStringFromFreeZone(size_), size_,
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
                      JsonString::Copied);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	4619      	mov	r1, r3
 800c936:	4610      	mov	r0, r2
 800c938:	f7ff f95e 	bl	800bbf8 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj>
 800c93c:	4601      	mov	r1, r0
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	689a      	ldr	r2, [r3, #8]
 800c942:	2300      	movs	r3, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7fe fff7 	bl	800b938 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  }
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)
      append(*s++);
  }

  void append(char c) {
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	460b      	mov	r3, r1
 800c95c:	70fb      	strb	r3, [r7, #3]
    if (size_ + 1 < capacity_)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d20a      	bcs.n	800c982 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc+0x30>
      ptr_[size_++] = c;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685a      	ldr	r2, [r3, #4]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	1c58      	adds	r0, r3, #1
 800c976:	6879      	ldr	r1, [r7, #4]
 800c978:	6088      	str	r0, [r1, #8]
 800c97a:	4413      	add	r3, r2
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	701a      	strb	r2, [r3, #0]
    else
      pool_->markAsOverflowed();
  }
 800c980:	e004      	b.n	800c98c <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc+0x3a>
      pool_->markAsOverflowed();
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4618      	mov	r0, r3
 800c988:	f7ff f967 	bl	800bc5a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>
  }
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>:

  bool isValid() const {
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
    return !pool_->overflowed();
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7ff f8f9 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f083 0301 	eor.w	r3, r3, #1
 800c9ac:	b2db      	uxtb	r3, r3
  }
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(ptr_);
    ARDUINOJSON_ASSERT(size_ < capacity_);
    ptr_[size_] = 0;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	685a      	ldr	r2, [r3, #4]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	701a      	strb	r2, [r3, #0]
    return JsonString(ptr_, size_, JsonString::Copied);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	6859      	ldr	r1, [r3, #4]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe ffad 	bl	800b938 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  }
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 800c9e6:	b480      	push	{r7}
 800c9e8:	b083      	sub	sp, #12
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 800c9f0:	88fb      	ldrh	r3, [r7, #6]
 800c9f2:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800c9f6:	d305      	bcc.n	800ca04 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x1e>
 800c9f8:	88fb      	ldrh	r3, [r7, #6]
 800c9fa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800c9fe:	d201      	bcs.n	800ca04 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x1e>
 800ca00:	2301      	movs	r3, #1
 800ca02:	e000      	b.n	800ca06 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x20>
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 800ca12:	b480      	push	{r7}
 800ca14:	b083      	sub	sp, #12
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	4603      	mov	r3, r0
 800ca1a:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ca22:	d305      	bcc.n	800ca30 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x1e>
 800ca24:	88fb      	ldrh	r3, [r7, #6]
 800ca26:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800ca2a:	d201      	bcs.n	800ca30 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x1e>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e000      	b.n	800ca32 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x20>
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <_ZN11ArduinoJson8V6213HB26detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 800ca3e:	b480      	push	{r7}
 800ca40:	b083      	sub	sp, #12
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	801a      	strh	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	605a      	str	r2, [r3, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4618      	mov	r0, r3
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 800ca6c:	887b      	ldrh	r3, [r7, #2]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff ffb9 	bl	800c9e6 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 800ca7a:	887b      	ldrh	r3, [r7, #2]
 800ca7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	801a      	strh	r2, [r3, #0]
      return false;
 800ca86:	2300      	movs	r3, #0
 800ca88:	e018      	b.n	800cabc <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 800ca8a:	887b      	ldrh	r3, [r7, #2]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7ff ffc0 	bl	800ca12 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt>
 800ca92:	4603      	mov	r3, r0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00d      	beq.n	800cab4 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	029a      	lsls	r2, r3, #10
 800ca9e:	887b      	ldrh	r3, [r7, #2]
 800caa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800caa4:	4313      	orrs	r3, r2
 800caa6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800caaa:	461a      	mov	r2, r3
      codepoint_ =
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	605a      	str	r2, [r3, #4]
      return true;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e003      	b.n	800cabc <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 800cab4:	887a      	ldrh	r2, [r7, #2]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	605a      	str	r2, [r3, #4]
    return true;
 800caba:	2301      	movs	r3, #1
  }
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <_ZNK11ArduinoJson8V6213HB26detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
    return codepoint_;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
  }
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <main>:
void MQTT_run(void);


/*Main ----------------------------------------------------*/
int main(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
	//systick init
	delay_init_it();
 800cae2:	f7fd ffd7 	bl	800aa94 <delay_init_it>
	//spi init
	SPI1_Init();
 800cae6:	f000 f8ad 	bl	800cc44 <_Z9SPI1_Initv>
	//pinout
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(ETH_RST) | GPIOX_CLOCK(BUTTON);
 800caea:	4b44      	ldr	r3, [pc, #272]	; (800cbfc <main+0x120>)
 800caec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caee:	4a43      	ldr	r2, [pc, #268]	; (800cbfc <main+0x120>)
 800caf0:	f043 030d 	orr.w	r3, r3, #13
 800caf4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, ETH_RST);
 800caf6:	4b42      	ldr	r3, [pc, #264]	; (800cc00 <main+0x124>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cafe:	4a40      	ldr	r2, [pc, #256]	; (800cc00 <main+0x124>)
 800cb00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb04:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_OUT, LED);
 800cb06:	4b3f      	ldr	r3, [pc, #252]	; (800cc04 <main+0x128>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800cb0e:	4a3d      	ldr	r2, [pc, #244]	; (800cc04 <main+0x128>)
 800cb10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb14:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_DIGITAL_INPUT, BUTTON);
 800cb16:	4b3c      	ldr	r3, [pc, #240]	; (800cc08 <main+0x12c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a3b      	ldr	r2, [pc, #236]	; (800cc08 <main+0x12c>)
 800cb1c:	f023 0303 	bic.w	r3, r3, #3
 800cb20:	6013      	str	r3, [r2, #0]

	//Ethernet W5100
	reg_wizchip_spi_cbfunc(w5100_ll_read_byte, w5100_ll_write_byte);
 800cb22:	493a      	ldr	r1, [pc, #232]	; (800cc0c <main+0x130>)
 800cb24:	483a      	ldr	r0, [pc, #232]	; (800cc10 <main+0x134>)
 800cb26:	f7f5 fc7f 	bl	8002428 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(w5100_cs_enable, w5100_cs_disable);
 800cb2a:	493a      	ldr	r1, [pc, #232]	; (800cc14 <main+0x138>)
 800cb2c:	483a      	ldr	r0, [pc, #232]	; (800cc18 <main+0x13c>)
 800cb2e:	f7f5 fc55 	bl	80023dc <reg_wizchip_cs_cbfunc>
	reg_wizchip_cris_cbfunc(w5100_critical_enter, w5100_critical_exit);
 800cb32:	493a      	ldr	r1, [pc, #232]	; (800cc1c <main+0x140>)
 800cb34:	483a      	ldr	r0, [pc, #232]	; (800cc20 <main+0x144>)
 800cb36:	f7f5 fc2b 	bl	8002390 <reg_wizchip_cris_cbfunc>

	//reset
	w5100_reset();
 800cb3a:	f000 f983 	bl	800ce44 <_Z11w5100_resetv>
	uint8_t temp = IK_DEST_UNREACH;
 800cb3e:	2340      	movs	r3, #64	; 0x40
 800cb40:	73fb      	strb	r3, [r7, #15]
	uint8_t W5x00_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};
 800cb42:	4a38      	ldr	r2, [pc, #224]	; (800cc24 <main+0x148>)
 800cb44:	1d3b      	adds	r3, r7, #4
 800cb46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb4a:	e883 0003 	stmia.w	r3, {r0, r1}

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)W5x00_AdrSet) == -1){
 800cb4e:	1d3b      	adds	r3, r7, #4
 800cb50:	4619      	mov	r1, r3
 800cb52:	2001      	movs	r0, #1
 800cb54:	f7f5 fc94 	bl	8002480 <ctlwizchip>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5e:	bf0c      	ite	eq
 800cb60:	2301      	moveq	r3, #1
 800cb62:	2300      	movne	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d001      	beq.n	800cb6e <main+0x92>
			Error_Handler();
 800cb6a:	f000 f98f 	bl	800ce8c <_Z13Error_Handlerv>
	}

	if(ctlwizchip(CW_SET_INTRMASK, &temp) == -1){
 800cb6e:	f107 030f 	add.w	r3, r7, #15
 800cb72:	4619      	mov	r1, r3
 800cb74:	2004      	movs	r0, #4
 800cb76:	f7f5 fc83 	bl	8002480 <ctlwizchip>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb80:	bf0c      	ite	eq
 800cb82:	2301      	moveq	r3, #1
 800cb84:	2300      	movne	r3, #0
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <main+0xb4>
		Error_Handler();
 800cb8c:	f000 f97e 	bl	800ce8c <_Z13Error_Handlerv>
	}
	wizchip_setnetinfo(&gWIZNETINFO);
 800cb90:	4825      	ldr	r0, [pc, #148]	; (800cc28 <main+0x14c>)
 800cb92:	f7f5 fea5 	bl	80028e0 <wizchip_setnetinfo>
	delay_ms(3000);
 800cb96:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800cb9a:	f7fd ffab 	bl	800aaf4 <delay_ms>

	//DHCP
	DHCP_init(DHCP_SOCKET, ethBuf0);
 800cb9e:	4923      	ldr	r1, [pc, #140]	; (800cc2c <main+0x150>)
 800cba0:	2000      	movs	r0, #0
 800cba2:	f7f7 f9cd 	bl	8003f40 <DHCP_init>
	while(1){
		if(proccess_dhcp() == DHCP_IP_LEASED){
 800cba6:	f001 f89b 	bl	800dce0 <_Z13proccess_dhcpv>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b04      	cmp	r3, #4
 800cbae:	bf0c      	ite	eq
 800cbb0:	2301      	moveq	r3, #1
 800cbb2:	2300      	movne	r3, #0
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d100      	bne.n	800cbbc <main+0xe0>
 800cbba:	e7f4      	b.n	800cba6 <main+0xca>
		  break;
 800cbbc:	bf00      	nop
		}
	}
	//DNS
	DNS_init(DNS_SOCKET, ethBuf1);
 800cbbe:	491c      	ldr	r1, [pc, #112]	; (800cc30 <main+0x154>)
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7f7 fe1b 	bl	80047fc <DNS_init>
	IP_TYPE = 0x1c;
 800cbc6:	4b1b      	ldr	r3, [pc, #108]	; (800cc34 <main+0x158>)
 800cbc8:	221c      	movs	r2, #28
 800cbca:	701a      	strb	r2, [r3, #0]
	while(1){
	  if(DNS_run(dns_server_ip, URL, mqtt_ip) == 1){
 800cbcc:	4a1a      	ldr	r2, [pc, #104]	; (800cc38 <main+0x15c>)
 800cbce:	491b      	ldr	r1, [pc, #108]	; (800cc3c <main+0x160>)
 800cbd0:	481b      	ldr	r0, [pc, #108]	; (800cc40 <main+0x164>)
 800cbd2:	f7f7 fe2f 	bl	8004834 <DNS_run>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	bf0c      	ite	eq
 800cbdc:	2301      	moveq	r3, #1
 800cbde:	2300      	movne	r3, #0
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d100      	bne.n	800cbe8 <main+0x10c>
 800cbe6:	e7f1      	b.n	800cbcc <main+0xf0>
		  break;
 800cbe8:	bf00      	nop
	  }
	}

	//MPU6050 INIT
	mpu6050_basic_init((mpu6050_address_t)0x68);
 800cbea:	2068      	movs	r0, #104	; 0x68
 800cbec:	f7fd ffa0 	bl	800ab30 <mpu6050_basic_init>

	 vTaskStartScheduler();
 800cbf0:	f7fc fad8 	bl	80091a4 <vTaskStartScheduler>
	//MQTT
	MQTT_run();
 800cbf4:	f001 f9b2 	bl	800df5c <_Z8MQTT_runv>
    /* Loop forever */
	for(;;);
 800cbf8:	e7fe      	b.n	800cbf8 <main+0x11c>
 800cbfa:	bf00      	nop
 800cbfc:	40023800 	.word	0x40023800
 800cc00:	40020800 	.word	0x40020800
 800cc04:	40020c00 	.word	0x40020c00
 800cc08:	40020000 	.word	0x40020000
 800cc0c:	0800cdb9 	.word	0x0800cdb9
 800cc10:	0800cd65 	.word	0x0800cd65
 800cc14:	0800ce2d 	.word	0x0800ce2d
 800cc18:	0800ce15 	.word	0x0800ce15
 800cc1c:	0800ce7b 	.word	0x0800ce7b
 800cc20:	0800ce69 	.word	0x0800ce69
 800cc24:	080144ac 	.word	0x080144ac
 800cc28:	20000050 	.word	0x20000050
 800cc2c:	20006b60 	.word	0x20006b60
 800cc30:	20007360 	.word	0x20007360
 800cc34:	20007d64 	.word	0x20007d64
 800cc38:	20007b60 	.word	0x20007b60
 800cc3c:	20000068 	.word	0x20000068
 800cc40:	2000007c 	.word	0x2000007c

0800cc44 <_Z9SPI1_Initv>:
}


/*Function definition -------------------------------------*/
void SPI1_Init(void){
 800cc44:	b480      	push	{r7}
 800cc46:	af00      	add	r7, sp, #0
	//PINOUT
	RCC->AHB1ENR |= GPIOX_CLOCK(SPI1_SCK) | GPIOX_CLOCK(SPI1_MISO) | GPIOX_CLOCK(SPI1_MOSI) |\
 800cc48:	4b42      	ldr	r3, [pc, #264]	; (800cd54 <_Z9SPI1_Initv+0x110>)
 800cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4c:	4a41      	ldr	r2, [pc, #260]	; (800cd54 <_Z9SPI1_Initv+0x110>)
 800cc4e:	f043 0303 	orr.w	r3, r3, #3
 800cc52:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOX_CLOCK(SPI1_NSS);
	GPIOX_MODER(MODE_ALTER, SPI1_SCK);
 800cc54:	4b40      	ldr	r3, [pc, #256]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cc5c:	4a3e      	ldr	r2, [pc, #248]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cc62:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_SCK);
 800cc64:	4b3c      	ldr	r3, [pc, #240]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc66:	6a1b      	ldr	r3, [r3, #32]
 800cc68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc6c:	4a3a      	ldr	r2, [pc, #232]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc6e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800cc72:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_ALTER, SPI1_MISO);
 800cc74:	4b38      	ldr	r3, [pc, #224]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cc7c:	4a36      	ldr	r2, [pc, #216]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc82:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_MISO);
 800cc84:	4b34      	ldr	r3, [pc, #208]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc86:	6a1b      	ldr	r3, [r3, #32]
 800cc88:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800cc8c:	4a32      	ldr	r2, [pc, #200]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc8e:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 800cc92:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_ALTER, SPI1_MOSI);
 800cc94:	4b30      	ldr	r3, [pc, #192]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800cc9c:	4a2e      	ldr	r2, [pc, #184]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cc9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cca2:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_MOSI);
 800cca4:	4b2c      	ldr	r3, [pc, #176]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ccac:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <_Z9SPI1_Initv+0x114>)
 800ccae:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800ccb2:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_OUT, SPI1_NSS);
 800ccb4:	4b29      	ldr	r3, [pc, #164]	; (800cd5c <_Z9SPI1_Initv+0x118>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f023 030c 	bic.w	r3, r3, #12
 800ccbc:	4a27      	ldr	r2, [pc, #156]	; (800cd5c <_Z9SPI1_Initv+0x118>)
 800ccbe:	f043 0304 	orr.w	r3, r3, #4
 800ccc2:	6013      	str	r3, [r2, #0]

	//SPI1
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800ccc4:	4b23      	ldr	r3, [pc, #140]	; (800cd54 <_Z9SPI1_Initv+0x110>)
 800ccc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccc8:	4a22      	ldr	r2, [pc, #136]	; (800cd54 <_Z9SPI1_Initv+0x110>)
 800ccca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ccce:	6453      	str	r3, [r2, #68]	; 0x44

	//1. configurar el baudrate
	SPI1->CR1 &=~ SPI_CR1_BR;
 800ccd0:	4b23      	ldr	r3, [pc, #140]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a22      	ldr	r2, [pc, #136]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccd6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ccda:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_0;		//Fpclk / 4 = 4MHZ
 800ccdc:	4b20      	ldr	r3, [pc, #128]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a1f      	ldr	r2, [pc, #124]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cce2:	f043 0308 	orr.w	r3, r3, #8
 800cce6:	6013      	str	r3, [r2, #0]

	//2. Configurar la polaridad y la fase del reloj (SPI MODO 0)
	//CPOL
	SPI1->CR1 &=~ SPI_CR1_CPOL;    //CPOL = 0
 800cce8:	4b1d      	ldr	r3, [pc, #116]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a1c      	ldr	r2, [pc, #112]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccee:	f023 0302 	bic.w	r3, r3, #2
 800ccf2:	6013      	str	r3, [r2, #0]
	//CPHA
	SPI1->CR1 &=~ SPI_CR1_CPHA;    //CPHA = 0
 800ccf4:	4b1a      	ldr	r3, [pc, #104]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a19      	ldr	r2, [pc, #100]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800ccfa:	f023 0301 	bic.w	r3, r3, #1
 800ccfe:	6013      	str	r3, [r2, #0]

	//3. configurar la longitud de la trama
	SPI1->CR1 &=~ SPI_CR1_DFF;     //8bits
 800cd00:	4b17      	ldr	r3, [pc, #92]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a16      	ldr	r2, [pc, #88]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd0a:	6013      	str	r3, [r2, #0]

	//4. configurar el LSP o MSB firts
	SPI1->CR1 &=~ SPI_CR1_LSBFIRST;//MSB first
 800cd0c:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a13      	ldr	r2, [pc, #76]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd16:	6013      	str	r3, [r2, #0]

	//5. Configurar el maneno del pin NSS
	SPI1->CR1 |= SPI_CR1_SSM;       //Software managment
 800cd18:	4b11      	ldr	r3, [pc, #68]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a10      	ldr	r2, [pc, #64]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd22:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;
 800cd24:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a0d      	ldr	r2, [pc, #52]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd2e:	6013      	str	r3, [r2, #0]

	//6. configurar el modo TI si fuera necesario

	//7. habilitar el modo maestro
	SPI1->CR1 |= SPI_CR1_MSTR;
 800cd30:	4b0b      	ldr	r3, [pc, #44]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a0a      	ldr	r2, [pc, #40]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd36:	f043 0304 	orr.w	r3, r3, #4
 800cd3a:	6013      	str	r3, [r2, #0]

	//8. Habilitar el spi
	SPI1->CR1 |= SPI_CR1_SPE;
 800cd3c:	4b08      	ldr	r3, [pc, #32]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a07      	ldr	r2, [pc, #28]	; (800cd60 <_Z9SPI1_Initv+0x11c>)
 800cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd46:	6013      	str	r3, [r2, #0]

	return;
 800cd48:	bf00      	nop
}
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	40023800 	.word	0x40023800
 800cd58:	40020000 	.word	0x40020000
 800cd5c:	40020400 	.word	0x40020400
 800cd60:	40013000 	.word	0x40013000

0800cd64 <_Z18w5100_ll_read_bytev>:

uint8_t w5100_ll_read_byte(void){
 800cd64:	b480      	push	{r7}
 800cd66:	af00      	add	r7, sp, #0
	while(!(SPI1->SR & SPI_SR_TXE));
 800cd68:	bf00      	nop
 800cd6a:	4b11      	ldr	r3, [pc, #68]	; (800cdb0 <_Z18w5100_ll_read_bytev+0x4c>)
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f003 0302 	and.w	r3, r3, #2
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bf0c      	ite	eq
 800cd76:	2301      	moveq	r3, #1
 800cd78:	2300      	movne	r3, #0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1f4      	bne.n	800cd6a <_Z18w5100_ll_read_bytev+0x6>
	*((__IO uint8_t *)&SPI1->DR) = 0xFF;
 800cd80:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <_Z18w5100_ll_read_bytev+0x50>)
 800cd82:	22ff      	movs	r2, #255	; 0xff
 800cd84:	701a      	strb	r2, [r3, #0]
	while(!(SPI1->SR & SPI_SR_RXNE));
 800cd86:	bf00      	nop
 800cd88:	4b09      	ldr	r3, [pc, #36]	; (800cdb0 <_Z18w5100_ll_read_bytev+0x4c>)
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	bf0c      	ite	eq
 800cd94:	2301      	moveq	r3, #1
 800cd96:	2300      	movne	r3, #0
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1f4      	bne.n	800cd88 <_Z18w5100_ll_read_bytev+0x24>
	return (uint8_t)(SPI1->DR);
 800cd9e:	4b04      	ldr	r3, [pc, #16]	; (800cdb0 <_Z18w5100_ll_read_bytev+0x4c>)
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	b2db      	uxtb	r3, r3
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	40013000 	.word	0x40013000
 800cdb4:	4001300c 	.word	0x4001300c

0800cdb8 <_Z19w5100_ll_write_byteh>:
void w5100_ll_write_byte(uint8_t byte){
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	while(!(SPI1->SR & SPI_SR_TXE));
 800cdc2:	bf00      	nop
 800cdc4:	4b11      	ldr	r3, [pc, #68]	; (800ce0c <_Z19w5100_ll_write_byteh+0x54>)
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f003 0302 	and.w	r3, r3, #2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	bf0c      	ite	eq
 800cdd0:	2301      	moveq	r3, #1
 800cdd2:	2300      	movne	r3, #0
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1f4      	bne.n	800cdc4 <_Z19w5100_ll_write_byteh+0xc>
	*((__IO uint8_t *)&SPI1->DR) = byte;
 800cdda:	4a0d      	ldr	r2, [pc, #52]	; (800ce10 <_Z19w5100_ll_write_byteh+0x58>)
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	7013      	strb	r3, [r2, #0]
	while(!(SPI1->SR & SPI_SR_RXNE));
 800cde0:	bf00      	nop
 800cde2:	4b0a      	ldr	r3, [pc, #40]	; (800ce0c <_Z19w5100_ll_write_byteh+0x54>)
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bf0c      	ite	eq
 800cdee:	2301      	moveq	r3, #1
 800cdf0:	2300      	movne	r3, #0
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1f4      	bne.n	800cde2 <_Z19w5100_ll_write_byteh+0x2a>
	temp = SPI1->DR;
 800cdf8:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <_Z19w5100_ll_write_byteh+0x54>)
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	73fb      	strb	r3, [r7, #15]

	(void)temp;
	return;
 800cdfe:	bf00      	nop
}
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	40013000 	.word	0x40013000
 800ce10:	4001300c 	.word	0x4001300c

0800ce14 <_Z15w5100_cs_enablev>:
void w5100_cs_enable(void){
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
	GPIOX_ODR(SPI1_NSS) = 0;
 800ce18:	4b03      	ldr	r3, [pc, #12]	; (800ce28 <_Z15w5100_cs_enablev+0x14>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]
	return;
 800ce1e:	bf00      	nop
}
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	42408284 	.word	0x42408284

0800ce2c <_Z16w5100_cs_disablev>:
void w5100_cs_disable(void){
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
	GPIOX_ODR(SPI1_NSS) = 1;
 800ce30:	4b03      	ldr	r3, [pc, #12]	; (800ce40 <_Z16w5100_cs_disablev+0x14>)
 800ce32:	2201      	movs	r2, #1
 800ce34:	601a      	str	r2, [r3, #0]
}
 800ce36:	bf00      	nop
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	42408284 	.word	0x42408284

0800ce44 <_Z11w5100_resetv>:
	GPIOX_ODR(ETH_RST) = 0;
}
void w5100_reset_deassert(void){
	GPIOX_ODR(ETH_RST) = 1;
}
void w5100_reset(void){
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
	GPIOX_ODR(ETH_RST) = 0;
 800ce48:	4b06      	ldr	r3, [pc, #24]	; (800ce64 <_Z11w5100_resetv+0x20>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 800ce4e:	2064      	movs	r0, #100	; 0x64
 800ce50:	f7fd fe50 	bl	800aaf4 <delay_ms>
	GPIOX_ODR(ETH_RST) = 1;
 800ce54:	4b03      	ldr	r3, [pc, #12]	; (800ce64 <_Z11w5100_resetv+0x20>)
 800ce56:	2201      	movs	r2, #1
 800ce58:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 800ce5a:	2064      	movs	r0, #100	; 0x64
 800ce5c:	f7fd fe4a 	bl	800aaf4 <delay_ms>
	return;
 800ce60:	bf00      	nop
}
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	42410294 	.word	0x42410294

0800ce68 <_Z20w5100_critical_enterv>:
void w5100_critical_enter(void){
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ce6c:	b672      	cpsid	i
}
 800ce6e:	bf00      	nop
	__disable_irq();
}
 800ce70:	bf00      	nop
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <_Z19w5100_critical_exitv>:
void w5100_critical_exit(void){
 800ce7a:	b480      	push	{r7}
 800ce7c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800ce7e:	b662      	cpsie	i
}
 800ce80:	bf00      	nop
	__enable_irq();
}
 800ce82:	bf00      	nop
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <_Z13Error_Handlerv>:

void Error_Handler(void){
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
	printf("error\r\n");
 800ce90:	4802      	ldr	r0, [pc, #8]	; (800ce9c <_Z13Error_Handlerv+0x10>)
 800ce92:	f004 fd83 	bl	801199c <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 800ce96:	b672      	cpsid	i
}
 800ce98:	bf00      	nop
	__disable_irq();
	while(1){
 800ce9a:	e7fe      	b.n	800ce9a <_Z13Error_Handlerv+0xe>
 800ce9c:	080144b4 	.word	0x080144b4

0800cea0 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JsonDocument with a memory pool on the stack.
template <size_t desiredCapacity>
class StaticJsonDocument : public JsonDocument {
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff f8e0 	bl	800c070 <_ZN11ArduinoJson8V6213HB212JsonDocumentD1Ev>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <_Z17mqtt_publish_datav>:

	}
}

uint8_t mqtt_publish_data(void){
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	ed2d 8b02 	vpush	{d8}
 800cec4:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 800cec8:	af00      	add	r7, sp, #0
	std::string buff;
 800ceca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cece:	4618      	mov	r0, r3
 800ced0:	f004 facd 	bl	801146e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	StaticJsonDocument<256> doc;
 800ced4:	f107 0310 	add.w	r3, r7, #16
 800ced8:	4618      	mov	r0, r3
 800ceda:	f001 fa02 	bl	800e2e2 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>
	MQTTMessage m;
	int rc = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	//message init
	m.qos = QOS0;
 800cee4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cee8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800ceec:	2200      	movs	r2, #0
 800ceee:	701a      	strb	r2, [r3, #0]
	m.retained = 0;
 800cef0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cef4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800cef8:	2200      	movs	r2, #0
 800cefa:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 800cefc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf00:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800cf04:	2200      	movs	r2, #0
 800cf06:	709a      	strb	r2, [r3, #2]
 800cf08:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf0c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cf10:	4ad4      	ldr	r2, [pc, #848]	; (800d264 <_Z17mqtt_publish_datav+0x3a8>)
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800cf18:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800cf2a:	f107 0210 	add.w	r2, r7, #16
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf34:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800cf38:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cf3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800cf40:	6812      	ldr	r2, [r2, #0]
 800cf42:	601a      	str	r2, [r3, #0]
      public VariantOperators<MemberProxy<TUpstream, TStringRef>> {
  friend class VariantAttorney;

 public:
  FORCE_INLINE MemberProxy(TUpstream upstream, TStringRef key)
      : upstream_(upstream), key_(key) {}
 800cf44:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cf52:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 800cf56:	6812      	ldr	r2, [r2, #0]
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf5e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cf68:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	605a      	str	r2, [r3, #4]
    return {*this, key};
 800cf70:	bf00      	nop
 800cf72:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800cf7a:	4abb      	ldr	r2, [pc, #748]	; (800d268 <_Z17mqtt_publish_datav+0x3ac>)
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800cf86:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cf90:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800cf94:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cf98:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800cf9c:	6812      	ldr	r2, [r2, #0]
 800cf9e:	601a      	str	r2, [r3, #0]
 800cfa0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cfa4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800cfa8:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cfac:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 800cfb0:	6812      	ldr	r2, [r2, #0]
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cfb8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800cfbc:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cfc0:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800cfc4:	6812      	ldr	r2, [r2, #0]
 800cfc6:	601a      	str	r2, [r3, #0]
  const TDerived& derived() const {
    return static_cast<const TDerived&>(*this);
  }

  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(derived());
 800cfc8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cfcc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f001 fe18 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cfdc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cfe6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800cfea:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800cfee:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 800cff2:	6812      	ldr	r2, [r2, #0]
 800cff4:	601a      	str	r2, [r3, #0]
    return *this;
  }

 private:
  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(upstream_);
 800cff6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800cffa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d006:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d010:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800d014:	6818      	ldr	r0, [r3, #0]
 800d016:	f7ff f848 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d01a:	4604      	mov	r4, r0
 800d01c:	bf00      	nop
 800d01e:	bf00      	nop
 800d020:	bf00      	nop
 800d022:	bf00      	nop
 800d024:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d028:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d02c:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d030:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800d034:	6812      	ldr	r2, [r2, #0]
 800d036:	601a      	str	r2, [r3, #0]
  FORCE_INLINE VariantData* getData() const {
    return VariantAttorney::getData(derived());
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return VariantAttorney::getOrCreateData(derived());
 800d038:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d03c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	f001 fde0 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d046:	4602      	mov	r2, r0
 800d048:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d04c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d056:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d05a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d05e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800d062:	6812      	ldr	r2, [r2, #0]
 800d064:	601a      	str	r2, [r3, #0]
    return variantGetMember(VariantAttorney::getData(upstream_),
                            adaptString(key_));
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d066:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d06a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d076:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d07a:	601a      	str	r2, [r3, #0]
  }

  template <typename TClient>
  FORCE_INLINE static VariantData* getOrCreateData(TClient& client) {
    return client.getOrCreateData();
 800d07c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d080:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	f7ff f827 	bl	800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800d08a:	4605      	mov	r5, r0
 800d08c:	bf00      	nop
                                 adaptString(key_),
 800d08e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d092:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d09a:	4618      	mov	r0, r3
 800d09c:	f001 f85f 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d0a6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d0b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d0b6:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800d0b8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d0bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	f7fe fff2 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	bf00      	nop
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	f003 faab 	bl	801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800d0d4:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800d0d6:	bf00      	nop
    return client.getOrCreateData();
 800d0d8:	bf00      	nop
 800d0da:	bf00      	nop
  return JsonVariant(getPool(), getData());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
  return JsonVariant(getPool(), getOrCreateData());
 800d0dc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe ff5b 	bl	800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T*>::toJson(value, getOrCreateVariant());
 800d0e8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d0ec:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800d0f0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d0f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d0f8:	ca06      	ldmia	r2, {r1, r2}
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	f7ff f8f6 	bl	800c2ec <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
 800d100:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d104:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d108:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d10c:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 800d110:	6812      	ldr	r2, [r2, #0]
 800d112:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800d114:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d118:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800d11c:	6818      	ldr	r0, [r3, #0]
 800d11e:	f001 fd72 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d122:	4602      	mov	r2, r0
 800d124:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d128:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d132:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d136:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d13a:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 800d13e:	6812      	ldr	r2, [r2, #0]
 800d140:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800d142:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d146:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d152:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d156:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800d158:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d15c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	f7fe ffa2 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d166:	4602      	mov	r2, r0
 800d168:	bf00      	nop
 800d16a:	bf00      	nop
 800d16c:	bf00      	nop
 800d16e:	bf00      	nop
    MemoryPool* pool = getPool();
 800d170:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d174:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800d178:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 800d17a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d17e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00b      	beq.n	800d1a0 <_Z17mqtt_publish_datav+0x2e4>
 800d188:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d18c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	f7fe fd01 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800d196:	4603      	mov	r3, r0
 800d198:	f083 0301 	eor.w	r3, r3, #1
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d1a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800d1a8:	4a30      	ldr	r2, [pc, #192]	; (800d26c <_Z17mqtt_publish_datav+0x3b0>)
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800d1b0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d1b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d1be:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800d1c2:	f107 0210 	add.w	r2, r7, #16
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d1cc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800d1d0:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d1d4:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 800d1dc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d1e0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d1ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800d1ee:	6812      	ldr	r2, [r2, #0]
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d1f6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d200:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800d204:	6812      	ldr	r2, [r2, #0]
 800d206:	605a      	str	r2, [r3, #4]
 800d208:	bf00      	nop
 800d20a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d20e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800d212:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d21c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d220:	4a13      	ldr	r2, [pc, #76]	; (800d270 <_Z17mqtt_publish_datav+0x3b4>)
 800d222:	601a      	str	r2, [r3, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 800d224:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d228:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	781c      	ldrb	r4, [r3, #0]
 800d230:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d234:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d238:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d23c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800d240:	6812      	ldr	r2, [r2, #0]
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d248:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d24c:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d250:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800d254:	6812      	ldr	r2, [r2, #0]
 800d256:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800d258:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d25c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d260:	e008      	b.n	800d274 <_Z17mqtt_publish_datav+0x3b8>
 800d262:	bf00      	nop
 800d264:	080144bc 	.word	0x080144bc
 800d268:	080144c0 	.word	0x080144c0
 800d26c:	080144cc 	.word	0x080144cc
 800d270:	200085d4 	.word	0x200085d4
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f001 fcc6 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d27a:	4602      	mov	r2, r0
 800d27c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d280:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d28a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d28e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d292:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800d296:	6812      	ldr	r2, [r2, #0]
 800d298:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800d29a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d29e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d2aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d2b4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	f7fe fef6 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d2be:	4605      	mov	r5, r0
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	bf00      	nop
 800d2c6:	bf00      	nop
 800d2c8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d2cc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800d2d0:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d2d4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800d2d8:	6812      	ldr	r2, [r2, #0]
 800d2da:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getOrCreateData(derived());
 800d2dc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d2e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800d2e4:	6818      	ldr	r0, [r3, #0]
 800d2e6:	f001 fc8e 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d2f0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d2fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d2fe:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d302:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800d306:	6812      	ldr	r2, [r2, #0]
 800d308:	601a      	str	r2, [r3, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d30a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d30e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d31a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d31e:	601a      	str	r2, [r3, #0]
    return client.getOrCreateData();
 800d320:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d324:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	f7fe fed5 	bl	800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800d32e:	4606      	mov	r6, r0
 800d330:	bf00      	nop
                                 adaptString(key_),
 800d332:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d336:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 ff0d 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d344:	4680      	mov	r8, r0
 800d346:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d34a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d356:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d35a:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800d35c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d360:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800d364:	6818      	ldr	r0, [r3, #0]
 800d366:	f7fe fea0 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d36a:	4603      	mov	r3, r0
 800d36c:	bf00      	nop
 800d36e:	461a      	mov	r2, r3
 800d370:	4641      	mov	r1, r8
 800d372:	4630      	mov	r0, r6
 800d374:	f003 f959 	bl	801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800d378:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800d37a:	bf00      	nop
    return client.getOrCreateData();
 800d37c:	bf00      	nop
 800d37e:	bf00      	nop
 800d380:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800d384:	4629      	mov	r1, r5
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe fe09 	bl	800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800d38c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d390:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800d394:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d398:	4620      	mov	r0, r4
 800d39a:	f7fe ff8d 	bl	800c2b8 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE>
 800d39e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d3a6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d3aa:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800d3ae:	6812      	ldr	r2, [r2, #0]
 800d3b0:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800d3b2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	f001 fc23 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d3d4:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d3d8:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 800d3dc:	6812      	ldr	r2, [r2, #0]
 800d3de:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800d3e0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d3f4:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800d3f6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d3fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800d3fe:	6818      	ldr	r0, [r3, #0]
 800d400:	f7fe fe53 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d404:	4602      	mov	r2, r0
 800d406:	bf00      	nop
 800d408:	bf00      	nop
 800d40a:	bf00      	nop
 800d40c:	bf00      	nop
    MemoryPool* pool = getPool();
 800d40e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d412:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d416:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 800d418:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d41c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00b      	beq.n	800d43e <_Z17mqtt_publish_datav+0x582>
 800d426:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d42a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800d42e:	6818      	ldr	r0, [r3, #0]
 800d430:	f7fe fbb2 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800d434:	4603      	mov	r3, r0
 800d436:	f083 0301 	eor.w	r3, r3, #1
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d442:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d446:	4adb      	ldr	r2, [pc, #876]	; (800d7b4 <_Z17mqtt_publish_datav+0x8f8>)
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800d44e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d452:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d456:	601a      	str	r2, [r3, #0]
 800d458:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d45c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800d460:	f107 0210 	add.w	r2, r7, #16
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d46a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800d46e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d472:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800d476:	6812      	ldr	r2, [r2, #0]
 800d478:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 800d47a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d47e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d488:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800d48c:	6812      	ldr	r2, [r2, #0]
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d494:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d49e:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	605a      	str	r2, [r3, #4]
 800d4a6:	bf00      	nop
 800d4a8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d4ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4b0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4be:	4abe      	ldr	r2, [pc, #760]	; (800d7b8 <_Z17mqtt_publish_datav+0x8fc>)
 800d4c0:	601a      	str	r2, [r3, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 800d4c2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	ed93 8a00 	vldr	s16, [r3]
 800d4d0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d4d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800d4d8:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d4dc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d4e0:	6812      	ldr	r2, [r2, #0]
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d4e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d4ec:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d4f0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800d4f4:	6812      	ldr	r2, [r2, #0]
 800d4f6:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800d4f8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d4fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	f001 fb80 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d506:	4602      	mov	r2, r0
 800d508:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d50c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d516:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d51a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d51e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800d522:	6812      	ldr	r2, [r2, #0]
 800d524:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800d526:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d52a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d536:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d53a:	601a      	str	r2, [r3, #0]
 800d53c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d540:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800d544:	6818      	ldr	r0, [r3, #0]
 800d546:	f7fe fdb0 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d54a:	4604      	mov	r4, r0
 800d54c:	bf00      	nop
 800d54e:	bf00      	nop
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d558:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d55c:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d560:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800d564:	6812      	ldr	r2, [r2, #0]
 800d566:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getOrCreateData(derived());
 800d568:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d56c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d570:	6818      	ldr	r0, [r3, #0]
 800d572:	f001 fb48 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d576:	4602      	mov	r2, r0
 800d578:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d57c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d586:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d58a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d58e:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800d592:	6812      	ldr	r2, [r2, #0]
 800d594:	601a      	str	r2, [r3, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d596:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d59a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d5a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d5aa:	601a      	str	r2, [r3, #0]
    return client.getOrCreateData();
 800d5ac:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d5b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	f7fe fd8f 	bl	800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	bf00      	nop
                                 adaptString(key_),
 800d5be:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d5c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 fdc7 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d5d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d5e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d5e6:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800d5e8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d5ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	f7fe fd5a 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	bf00      	nop
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4628      	mov	r0, r5
 800d600:	f003 f813 	bl	801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800d604:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800d606:	bf00      	nop
    return client.getOrCreateData();
 800d608:	bf00      	nop
 800d60a:	bf00      	nop
 800d60c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d610:	4621      	mov	r1, r4
 800d612:	4618      	mov	r0, r3
 800d614:	f7fe fcc3 	bl	800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800d618:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d61c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800d620:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d624:	eeb0 0a48 	vmov.f32	s0, s16
 800d628:	f001 f993 	bl	800e952 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800d62c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d630:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d634:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d638:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800d63c:	6812      	ldr	r2, [r2, #0]
 800d63e:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800d640:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d644:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d648:	6818      	ldr	r0, [r3, #0]
 800d64a:	f001 fadc 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d64e:	4602      	mov	r2, r0
 800d650:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d654:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d65e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d662:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d666:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800d66a:	6812      	ldr	r2, [r2, #0]
 800d66c:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800d66e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d672:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d67e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d682:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800d684:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d688:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800d68c:	6818      	ldr	r0, [r3, #0]
 800d68e:	f7fe fd0c 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d692:	4602      	mov	r2, r0
 800d694:	bf00      	nop
 800d696:	bf00      	nop
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
    MemoryPool* pool = getPool();
 800d69c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d6a0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d6a4:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 800d6a6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d6aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00b      	beq.n	800d6cc <_Z17mqtt_publish_datav+0x810>
 800d6b4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d6b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d6bc:	6818      	ldr	r0, [r3, #0]
 800d6be:	f7fe fa6b 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	f083 0301 	eor.w	r3, r3, #1
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	4b3b      	ldr	r3, [pc, #236]	; (800d7bc <_Z17mqtt_publish_datav+0x900>)
 800d6ce:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800d6d2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d6d6:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800d6da:	f107 0310 	add.w	r3, r7, #16
 800d6de:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800d6e2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d6e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d6ea:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800d6ee:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 800d6f0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800d6f4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800d6fe:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800d702:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800d706:	6812      	ldr	r2, [r2, #0]
 800d708:	605a      	str	r2, [r3, #4]
 800d70a:	bf00      	nop
 800d70c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d710:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800d714:	4b2a      	ldr	r3, [pc, #168]	; (800d7c0 <_Z17mqtt_publish_datav+0x904>)
 800d716:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    Converter<T>::toJson(value, getOrCreateVariant());
 800d71a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800d71e:	ed93 8a00 	vldr	s16, [r3]
 800d722:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800d726:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 800d72a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800d72e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
    return VariantAttorney::getPool(derived());
 800d732:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 800d736:	f001 fa66 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800d740:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800d744:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
    return VariantAttorney::getPool(upstream_);
 800d748:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800d752:	f8d7 02e8 	ldr.w	r0, [r7, #744]	; 0x2e8
 800d756:	f7fe fca8 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d75a:	4604      	mov	r4, r0
 800d75c:	bf00      	nop
 800d75e:	bf00      	nop
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800d768:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
    return VariantAttorney::getOrCreateData(derived());
 800d76c:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 800d770:	f001 fa49 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d774:	4603      	mov	r3, r0
 800d776:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800d77a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800d77e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d782:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    return client.getOrCreateData();
 800d78c:	f8d7 02d8 	ldr.w	r0, [r7, #728]	; 0x2d8
 800d790:	f7fe fca2 	bl	800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800d794:	4605      	mov	r5, r0
 800d796:	bf00      	nop
                                 adaptString(key_),
 800d798:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800d79c:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fcdd 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800d7b0:	e008      	b.n	800d7c4 <_Z17mqtt_publish_datav+0x908>
 800d7b2:	bf00      	nop
 800d7b4:	080144d0 	.word	0x080144d0
 800d7b8:	200085f0 	.word	0x200085f0
 800d7bc:	080144dc 	.word	0x080144dc
 800d7c0:	200085d8 	.word	0x200085d8
    return client.getPool();
 800d7c4:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 800d7c8:	f7fe fc6f 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	bf00      	nop
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	f002 ff28 	bl	801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800d7da:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800d7dc:	bf00      	nop
    return client.getOrCreateData();
 800d7de:	bf00      	nop
 800d7e0:	bf00      	nop
 800d7e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fe fbd8 	bl	800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800d7ee:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d7f2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800d7f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7fa:	eeb0 0a48 	vmov.f32	s0, s16
 800d7fe:	f001 f8a8 	bl	800e952 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800d802:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800d806:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    return VariantAttorney::getPool(derived());
 800d80a:	f8d7 02d0 	ldr.w	r0, [r7, #720]	; 0x2d0
 800d80e:	f001 f9fa 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d812:	4603      	mov	r3, r0
 800d814:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800d818:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800d81c:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    return VariantAttorney::getPool(upstream_);
 800d820:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    return client.getPool();
 800d82a:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 800d82e:	f7fe fc3c 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d832:	4603      	mov	r3, r0
 800d834:	bf00      	nop
 800d836:	bf00      	nop
 800d838:	bf00      	nop
 800d83a:	bf00      	nop
    MemoryPool* pool = getPool();
 800d83c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    return pool && !pool->overflowed();
 800d840:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d008      	beq.n	800d85a <_Z17mqtt_publish_datav+0x99e>
 800d848:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 800d84c:	f7fe f9a4 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800d850:	4603      	mov	r3, r0
 800d852:	f083 0301 	eor.w	r3, r3, #1
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b00      	cmp	r3, #0
 800d85a:	4bdf      	ldr	r3, [pc, #892]	; (800dbd8 <_Z17mqtt_publish_datav+0xd1c>)
 800d85c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800d860:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d864:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800d868:	f107 0310 	add.w	r3, r7, #16
 800d86c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 800d870:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800d874:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
      : upstream_(upstream), key_(key) {}
 800d878:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 800d87c:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 800d886:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 800d88a:	605a      	str	r2, [r3, #4]
 800d88c:	bf00      	nop
 800d88e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d892:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800d896:	4bd1      	ldr	r3, [pc, #836]	; (800dbdc <_Z17mqtt_publish_datav+0xd20>)
 800d898:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
    Converter<T>::toJson(value, getOrCreateVariant());
 800d89c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800d8a0:	ed93 8a00 	vldr	s16, [r3]
 800d8a4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800d8a8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800d8ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800d8b0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
    return VariantAttorney::getPool(derived());
 800d8b4:	f8d7 0348 	ldr.w	r0, [r7, #840]	; 0x348
 800d8b8:	f001 f9a5 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800d8c2:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800d8c6:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
    return VariantAttorney::getPool(upstream_);
 800d8ca:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800d8d4:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800d8d8:	f7fe fbe7 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d8dc:	4604      	mov	r4, r0
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	bf00      	nop
 800d8e4:	bf00      	nop
 800d8e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800d8ea:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    return VariantAttorney::getOrCreateData(derived());
 800d8ee:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 800d8f2:	f001 f988 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800d8fc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800d900:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d904:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    return client.getOrCreateData();
 800d90e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800d912:	f7fe fbe1 	bl	800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800d916:	4605      	mov	r5, r0
 800d918:	bf00      	nop
                                 adaptString(key_),
 800d91a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800d91e:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800d920:	4618      	mov	r0, r3
 800d922:	f000 fc1c 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d926:	4606      	mov	r6, r0
 800d928:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
    return client.getPool();
 800d932:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 800d936:	f7fe fbb8 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d93a:	4603      	mov	r3, r0
 800d93c:	bf00      	nop
 800d93e:	461a      	mov	r2, r3
 800d940:	4631      	mov	r1, r6
 800d942:	4628      	mov	r0, r5
 800d944:	f002 fe71 	bl	801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800d948:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800d94a:	bf00      	nop
    return client.getOrCreateData();
 800d94c:	bf00      	nop
 800d94e:	bf00      	nop
 800d950:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800d954:	4621      	mov	r1, r4
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fb21 	bl	800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800d95c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800d960:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800d964:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d968:	eeb0 0a48 	vmov.f32	s0, s16
 800d96c:	f000 fff1 	bl	800e952 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800d970:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800d974:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    return VariantAttorney::getPool(derived());
 800d978:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 800d97c:	f001 f943 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800d980:	4603      	mov	r3, r0
 800d982:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800d986:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800d98a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    return VariantAttorney::getPool(upstream_);
 800d98e:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
    return client.getPool();
 800d998:	f8d7 0318 	ldr.w	r0, [r7, #792]	; 0x318
 800d99c:	f7fe fb85 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	bf00      	nop
 800d9a4:	bf00      	nop
 800d9a6:	bf00      	nop
 800d9a8:	bf00      	nop
    MemoryPool* pool = getPool();
 800d9aa:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
    return pool && !pool->overflowed();
 800d9ae:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d008      	beq.n	800d9c8 <_Z17mqtt_publish_datav+0xb0c>
 800d9b6:	f8d7 0314 	ldr.w	r0, [r7, #788]	; 0x314
 800d9ba:	f7fe f8ed 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	f083 0301 	eor.w	r3, r3, #1
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	4b85      	ldr	r3, [pc, #532]	; (800dbe0 <_Z17mqtt_publish_datav+0xd24>)
 800d9ca:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800d9ce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800d9d2:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800d9d6:	f107 0310 	add.w	r3, r7, #16
 800d9da:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800d9de:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800d9e2:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
      : upstream_(upstream), key_(key) {}
 800d9e6:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800d9ea:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800d9f4:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800d9f8:	605a      	str	r2, [r3, #4]
 800d9fa:	bf00      	nop
 800d9fc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800da00:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800da04:	4b77      	ldr	r3, [pc, #476]	; (800dbe4 <_Z17mqtt_publish_datav+0xd28>)
 800da06:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    Converter<T>::toJson(value, getOrCreateVariant());
 800da0a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800da0e:	ed93 8a00 	vldr	s16, [r3]
 800da12:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800da16:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800da1a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800da1e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
    return VariantAttorney::getPool(derived());
 800da22:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 800da26:	f001 f8ee 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 800da30:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800da34:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
    return VariantAttorney::getPool(upstream_);
 800da38:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800da42:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 800da46:	f7fe fb30 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800da4a:	4604      	mov	r4, r0
 800da4c:	bf00      	nop
 800da4e:	bf00      	nop
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800da58:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    return VariantAttorney::getOrCreateData(derived());
 800da5c:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 800da60:	f001 f8d1 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800da64:	4603      	mov	r3, r0
 800da66:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800da6a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800da6e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800da72:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    return client.getOrCreateData();
 800da7c:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 800da80:	f7fe fb2a 	bl	800c0d8 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800da84:	4605      	mov	r5, r0
 800da86:	bf00      	nop
                                 adaptString(key_),
 800da88:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800da8c:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 fb65 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800da94:	4606      	mov	r6, r0
 800da96:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    return client.getPool();
 800daa0:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 800daa4:	f7fe fb01 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800daa8:	4603      	mov	r3, r0
 800daaa:	bf00      	nop
 800daac:	461a      	mov	r2, r3
 800daae:	4631      	mov	r1, r6
 800dab0:	4628      	mov	r0, r5
 800dab2:	f002 fdba 	bl	801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800dab6:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800dab8:	bf00      	nop
    return client.getOrCreateData();
 800daba:	bf00      	nop
 800dabc:	bf00      	nop
 800dabe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800dac2:	4621      	mov	r1, r4
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe fa6a 	bl	800bf9e <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800daca:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800dace:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800dad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dad6:	eeb0 0a48 	vmov.f32	s0, s16
 800dada:	f000 ff3a 	bl	800e952 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800dade:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800dae2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
    return VariantAttorney::getPool(derived());
 800dae6:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 800daea:	f001 f88c 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800daee:	4603      	mov	r3, r0
 800daf0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800daf4:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800daf8:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
    return VariantAttorney::getPool(upstream_);
 800dafc:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
    return client.getPool();
 800db06:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 800db0a:	f7fe face 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800db0e:	4603      	mov	r3, r0
 800db10:	bf00      	nop
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	bf00      	nop
    MemoryPool* pool = getPool();
 800db18:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
    return pool && !pool->overflowed();
 800db1c:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800db20:	2b00      	cmp	r3, #0
 800db22:	d008      	beq.n	800db36 <_Z17mqtt_publish_datav+0xc7a>
 800db24:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 800db28:	f7fe f836 	bl	800bb98 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f083 0301 	eor.w	r3, r3, #1
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2b00      	cmp	r3, #0
    return getVariant();
 800db36:	f107 0310 	add.w	r3, r7, #16
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fe faa3 	bl	800c086 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>
 800db40:	4603      	mov	r3, r0
 800db42:	bf00      	nop
 800db44:	461a      	mov	r2, r3
	doc["led"] = led;
	doc["temperature"] = temp;
	doc["ax"] = a[0];
	doc["ay"] = a[1];
	doc["az"] = a[2];
	serializeJson(doc, buff);
 800db46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800db4a:	4619      	mov	r1, r3
 800db4c:	4610      	mov	r0, r2
 800db4e:	f000 fb2d 	bl	800e1ac <_ZN11ArduinoJson8V6213HB213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>
	//publish data
	m.payload = (void *)buff.c_str();
 800db52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800db56:	4618      	mov	r0, r3
 800db58:	f003 fcf0 	bl	801153c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800db5c:	4602      	mov	r2, r0
 800db5e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800db62:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800db66:	609a      	str	r2, [r3, #8]
	m.payloadlen = buff.length();
 800db68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800db6c:	4618      	mov	r0, r3
 800db6e:	f003 fc91 	bl	8011494 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800db72:	4602      	mov	r2, r0
 800db74:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800db78:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800db7c:	60da      	str	r2, [r3, #12]
	rc = MQTTPublish(&c, (const char*)"Led/estado", &m);
 800db7e:	463b      	mov	r3, r7
 800db80:	461a      	mov	r2, r3
 800db82:	4919      	ldr	r1, [pc, #100]	; (800dbe8 <_Z17mqtt_publish_datav+0xd2c>)
 800db84:	4819      	ldr	r0, [pc, #100]	; (800dbec <_Z17mqtt_publish_datav+0xd30>)
 800db86:	f7f7 fba8 	bl	80052da <MQTTPublish>
 800db8a:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac
	if(rc == SUCCESSS){
 800db8e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <_Z17mqtt_publish_datav+0xce6>
		printf("Published %d\r\n", rc);
 800db96:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800db9a:	4815      	ldr	r0, [pc, #84]	; (800dbf0 <_Z17mqtt_publish_datav+0xd34>)
 800db9c:	f003 fe98 	bl	80118d0 <iprintf>
 800dba0:	e004      	b.n	800dbac <_Z17mqtt_publish_datav+0xcf0>
	}else{
		printf("Published error! %d\r\n", rc);
 800dba2:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800dba6:	4813      	ldr	r0, [pc, #76]	; (800dbf4 <_Z17mqtt_publish_datav+0xd38>)
 800dba8:	f003 fe92 	bl	80118d0 <iprintf>
	}
	return rc;
 800dbac:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800dbb0:	b2dc      	uxtb	r4, r3

}
 800dbb2:	f107 0310 	add.w	r3, r7, #16
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff f972 	bl	800cea0 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>
 800dbbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f003 fc5b 	bl	801147c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return rc;
 800dbc6:	4623      	mov	r3, r4
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	ecbd 8b02 	vpop	{d8}
 800dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd8:	080144e0 	.word	0x080144e0
 800dbdc:	200085dc 	.word	0x200085dc
 800dbe0:	080144e4 	.word	0x080144e4
 800dbe4:	200085e0 	.word	0x200085e0
 800dbe8:	080144e8 	.word	0x080144e8
 800dbec:	20008578 	.word	0x20008578
 800dbf0:	080144f4 	.word	0x080144f4
 800dbf4:	08014504 	.word	0x08014504

0800dbf8 <_Z25print_network_informationv>:

void print_network_information(void)
{
 800dbf8:	b5b0      	push	{r4, r5, r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af04      	add	r7, sp, #16
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 800dbfe:	2217      	movs	r2, #23
 800dc00:	2100      	movs	r1, #0
 800dc02:	4831      	ldr	r0, [pc, #196]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc04:	f003 ffe6 	bl	8011bd4 <memset>

	wizchip_getnetinfo(&gWIZNETINFO);
 800dc08:	482f      	ldr	r0, [pc, #188]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc0a:	f7f4 fea5 	bl	8002958 <wizchip_getnetinfo>
	printf("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800dc0e:	4b2e      	ldr	r3, [pc, #184]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	4618      	mov	r0, r3
 800dc14:	4b2c      	ldr	r3, [pc, #176]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc16:	785b      	ldrb	r3, [r3, #1]
 800dc18:	461c      	mov	r4, r3
 800dc1a:	4b2b      	ldr	r3, [pc, #172]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc1c:	789b      	ldrb	r3, [r3, #2]
 800dc1e:	461d      	mov	r5, r3
 800dc20:	4b29      	ldr	r3, [pc, #164]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc22:	78db      	ldrb	r3, [r3, #3]
 800dc24:	461a      	mov	r2, r3
 800dc26:	4b28      	ldr	r3, [pc, #160]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc28:	791b      	ldrb	r3, [r3, #4]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4b26      	ldr	r3, [pc, #152]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc2e:	795b      	ldrb	r3, [r3, #5]
 800dc30:	9302      	str	r3, [sp, #8]
 800dc32:	9101      	str	r1, [sp, #4]
 800dc34:	9200      	str	r2, [sp, #0]
 800dc36:	462b      	mov	r3, r5
 800dc38:	4622      	mov	r2, r4
 800dc3a:	4601      	mov	r1, r0
 800dc3c:	4823      	ldr	r0, [pc, #140]	; (800dccc <_Z25print_network_informationv+0xd4>)
 800dc3e:	f003 fe47 	bl	80118d0 <iprintf>
	printf("IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800dc42:	4b21      	ldr	r3, [pc, #132]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc44:	799b      	ldrb	r3, [r3, #6]
 800dc46:	4619      	mov	r1, r3
 800dc48:	4b1f      	ldr	r3, [pc, #124]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc4a:	79db      	ldrb	r3, [r3, #7]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	4b1e      	ldr	r3, [pc, #120]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc50:	7a1b      	ldrb	r3, [r3, #8]
 800dc52:	4618      	mov	r0, r3
 800dc54:	4b1c      	ldr	r3, [pc, #112]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc56:	7a5b      	ldrb	r3, [r3, #9]
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	481c      	ldr	r0, [pc, #112]	; (800dcd0 <_Z25print_network_informationv+0xd8>)
 800dc5e:	f003 fe37 	bl	80118d0 <iprintf>
	printf("Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800dc62:	4b19      	ldr	r3, [pc, #100]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc64:	7a9b      	ldrb	r3, [r3, #10]
 800dc66:	4619      	mov	r1, r3
 800dc68:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc6a:	7adb      	ldrb	r3, [r3, #11]
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	4b16      	ldr	r3, [pc, #88]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc70:	7b1b      	ldrb	r3, [r3, #12]
 800dc72:	4618      	mov	r0, r3
 800dc74:	4b14      	ldr	r3, [pc, #80]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc76:	7b5b      	ldrb	r3, [r3, #13]
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	4815      	ldr	r0, [pc, #84]	; (800dcd4 <_Z25print_network_informationv+0xdc>)
 800dc7e:	f003 fe27 	bl	80118d0 <iprintf>
	printf("Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800dc82:	4b11      	ldr	r3, [pc, #68]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc84:	7b9b      	ldrb	r3, [r3, #14]
 800dc86:	4619      	mov	r1, r3
 800dc88:	4b0f      	ldr	r3, [pc, #60]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc8a:	7bdb      	ldrb	r3, [r3, #15]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4b0e      	ldr	r3, [pc, #56]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc90:	7c1b      	ldrb	r3, [r3, #16]
 800dc92:	4618      	mov	r0, r3
 800dc94:	4b0c      	ldr	r3, [pc, #48]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dc96:	7c5b      	ldrb	r3, [r3, #17]
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	480e      	ldr	r0, [pc, #56]	; (800dcd8 <_Z25print_network_informationv+0xe0>)
 800dc9e:	f003 fe17 	bl	80118d0 <iprintf>
	printf("DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 800dca2:	4b09      	ldr	r3, [pc, #36]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dca4:	7c9b      	ldrb	r3, [r3, #18]
 800dca6:	4619      	mov	r1, r3
 800dca8:	4b07      	ldr	r3, [pc, #28]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dcaa:	7cdb      	ldrb	r3, [r3, #19]
 800dcac:	461a      	mov	r2, r3
 800dcae:	4b06      	ldr	r3, [pc, #24]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dcb0:	7d1b      	ldrb	r3, [r3, #20]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <_Z25print_network_informationv+0xd0>)
 800dcb6:	7d5b      	ldrb	r3, [r3, #21]
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	4603      	mov	r3, r0
 800dcbc:	4807      	ldr	r0, [pc, #28]	; (800dcdc <_Z25print_network_informationv+0xe4>)
 800dcbe:	f003 fe07 	bl	80118d0 <iprintf>
}
 800dcc2:	bf00      	nop
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bdb0      	pop	{r4, r5, r7, pc}
 800dcc8:	20000050 	.word	0x20000050
 800dccc:	0801451c 	.word	0x0801451c
 800dcd0:	0801454c 	.word	0x0801454c
 800dcd4:	08014568 	.word	0x08014568
 800dcd8:	08014584 	.word	0x08014584
 800dcdc:	080145a0 	.word	0x080145a0

0800dce0 <_Z13proccess_dhcpv>:

int proccess_dhcp(void){
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	71fb      	strb	r3, [r7, #7]
	uint32_t timout = millis();
 800dcea:	f7fc ff19 	bl	800ab20 <millis>
 800dcee:	6038      	str	r0, [r7, #0]
	while(1){
		ret = DHCP_run();
 800dcf0:	f7f5 ff62 	bl	8003bb8 <DHCP_run>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	71fb      	strb	r3, [r7, #7]

		if(ret == DHCP_IP_LEASED){
 800dcf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcfc:	2b04      	cmp	r3, #4
 800dcfe:	d10a      	bne.n	800dd16 <_Z13proccess_dhcpv+0x36>
			//printf information
			memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 800dd00:	2217      	movs	r2, #23
 800dd02:	2100      	movs	r1, #0
 800dd04:	480f      	ldr	r0, [pc, #60]	; (800dd44 <_Z13proccess_dhcpv+0x64>)
 800dd06:	f003 ff65 	bl	8011bd4 <memset>

			wizchip_getnetinfo(&gWIZNETINFO);
 800dd0a:	480e      	ldr	r0, [pc, #56]	; (800dd44 <_Z13proccess_dhcpv+0x64>)
 800dd0c:	f7f4 fe24 	bl	8002958 <wizchip_getnetinfo>
			print_network_information();
 800dd10:	f7ff ff72 	bl	800dbf8 <_Z25print_network_informationv>
			break;
 800dd14:	e00f      	b.n	800dd36 <_Z13proccess_dhcpv+0x56>
			//todo

		}

		//check timeout
		if((millis() - timout) >= DHCP_TIMEOUT ){
 800dd16:	f7fc ff03 	bl	800ab20 <millis>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	1ad3      	subs	r3, r2, r3
 800dd20:	f247 522f 	movw	r2, #29999	; 0x752f
 800dd24:	4293      	cmp	r3, r2
 800dd26:	bf8c      	ite	hi
 800dd28:	2301      	movhi	r3, #1
 800dd2a:	2300      	movls	r3, #0
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0de      	beq.n	800dcf0 <_Z13proccess_dhcpv+0x10>
			DHCP_stop();
 800dd32:	f7f6 f859 	bl	8003de8 <DHCP_stop>
			break;
		}

	}
	return ret;
 800dd36:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	20000050 	.word	0x20000050

0800dd48 <_Z14messageArrivedP11MessageData>:

void messageArrived(MessageData* md)
{
 800dd48:	b5b0      	push	{r4, r5, r7, lr}
 800dd4a:	b0fa      	sub	sp, #488	; 0x1e8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800dd52:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dd56:	6018      	str	r0, [r3, #0]
	StaticJsonDocument<256> doc;
 800dd58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 fac0 	bl	800e2e2 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>
	DeserializationError err;
 800dd62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fd02 	bl	800c770 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1Ev>
	unsigned char topicSusc[100];
	uint32_t rd_size;
	uint32_t rd_pt;
	uint32_t rdmore_size;

	MQTTMessage* message = md->message;
 800dd6c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800dd70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	MQTTString* topic = md->topicName;
 800dd7c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800dd80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	rdmore_size = (int)topic->lenstring.len;
 800dd8c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	rd_pt = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	while(rdmore_size != 0)
 800dd9c:	e035      	b.n	800de0a <_Z14messageArrivedP11MessageData+0xc2>
	{
		if(rdmore_size > sizeof(topicSusc) - 1)
 800dd9e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800dda2:	2b63      	cmp	r3, #99	; 0x63
 800dda4:	d903      	bls.n	800ddae <_Z14messageArrivedP11MessageData+0x66>
		{
			rd_size = sizeof(topicSusc) - 1;
 800dda6:	2363      	movs	r3, #99	; 0x63
 800dda8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800ddac:	e003      	b.n	800ddb6 <_Z14messageArrivedP11MessageData+0x6e>
		}
		else
		{
			rd_size = rdmore_size;
 800ddae:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800ddb2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		}

		memset(topicSusc, 0, rd_size + 1);
 800ddb6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	f107 0320 	add.w	r3, r7, #32
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f003 ff06 	bl	8011bd4 <memset>

		memcpy(topicSusc, ((char*)topic->lenstring.data) + rd_pt, rd_size);
 800ddc8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800ddcc:	689a      	ldr	r2, [r3, #8]
 800ddce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800ddd2:	18d1      	adds	r1, r2, r3
 800ddd4:	f107 0320 	add.w	r3, r7, #32
 800ddd8:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800dddc:	4618      	mov	r0, r3
 800ddde:	f004 f801 	bl	8011de4 <memcpy>
		printf("SubScribe Topic : %s\r\n", topicSusc);
 800dde2:	f107 0320 	add.w	r3, r7, #32
 800dde6:	4619      	mov	r1, r3
 800dde8:	4854      	ldr	r0, [pc, #336]	; (800df3c <_Z14messageArrivedP11MessageData+0x1f4>)
 800ddea:	f003 fd71 	bl	80118d0 <iprintf>
		rd_pt += rd_size;
 800ddee:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800ddf2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		rdmore_size -= rd_size;
 800ddfc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800de00:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800de04:	1ad3      	subs	r3, r2, r3
 800de06:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	while(rdmore_size != 0)
 800de0a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1c5      	bne.n	800dd9e <_Z14messageArrivedP11MessageData+0x56>
	}

	if (opts.nodelimiter)
 800de12:	4b4b      	ldr	r3, [pc, #300]	; (800df40 <_Z14messageArrivedP11MessageData+0x1f8>)
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00b      	beq.n	800de32 <_Z14messageArrivedP11MessageData+0xea>
	{
		printf("Message 1 : %.*s\r\n", (int)message->payloadlen, (char*)message->payload);
 800de1a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	4619      	mov	r1, r3
 800de22:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	461a      	mov	r2, r3
 800de2a:	4846      	ldr	r0, [pc, #280]	; (800df44 <_Z14messageArrivedP11MessageData+0x1fc>)
 800de2c:	f003 fd50 	bl	80118d0 <iprintf>
 800de30:	e00b      	b.n	800de4a <_Z14messageArrivedP11MessageData+0x102>
	}
	else
	{
		printf("Message 2: %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 800de32:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	4619      	mov	r1, r3
 800de3a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800de3e:	689a      	ldr	r2, [r3, #8]
 800de40:	4b3f      	ldr	r3, [pc, #252]	; (800df40 <_Z14messageArrivedP11MessageData+0x1f8>)
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	4840      	ldr	r0, [pc, #256]	; (800df48 <_Z14messageArrivedP11MessageData+0x200>)
 800de46:	f003 fd43 	bl	80118d0 <iprintf>
	}
	//Procesar el json
	std::string msg((char*)message->payload, (int)message->payloadlen);
 800de4a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800de4e:	689c      	ldr	r4, [r3, #8]
 800de50:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800de54:	68dd      	ldr	r5, [r3, #12]
 800de56:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800de5a:	4618      	mov	r0, r3
 800de5c:	f003 fa7d 	bl	801135a <_ZNSaIcEC1Ev>
 800de60:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800de64:	f107 0008 	add.w	r0, r7, #8
 800de68:	462a      	mov	r2, r5
 800de6a:	4621      	mov	r1, r4
 800de6c:	f003 fb8c 	bl	8011588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800de70:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800de74:	4618      	mov	r0, r3
 800de76:	f003 fa71 	bl	801135c <_ZNSaIcED1Ev>
	err = deserializeJson(doc, msg);
 800de7a:	f107 0208 	add.w	r2, r7, #8
 800de7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800de82:	4611      	mov	r1, r2
 800de84:	4618      	mov	r0, r3
 800de86:	f000 fa3d 	bl	800e304 <_ZN11ArduinoJson8V6213HB215deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>
 800de8a:	4602      	mov	r2, r0
 800de8c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800de90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800de94:	701a      	strb	r2, [r3, #0]
	if(err){
 800de96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fe fc83 	bl	800c7a6 <_ZNK11ArduinoJson8V6213HB220DeserializationErrorcvbEv>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d003      	beq.n	800deae <_Z14messageArrivedP11MessageData+0x166>
		printf("error deserialize json\r\n");
 800dea6:	4829      	ldr	r0, [pc, #164]	; (800df4c <_Z14messageArrivedP11MessageData+0x204>)
 800dea8:	f003 fd78 	bl	801199c <puts>
			GPIOX_ODR(LED) = 0;
			led = false;
		}
		mqtt_publish_data();
	}
	return;
 800deac:	e036      	b.n	800df1c <_Z14messageArrivedP11MessageData+0x1d4>
 800deae:	4b28      	ldr	r3, [pc, #160]	; (800df50 <_Z14messageArrivedP11MessageData+0x208>)
 800deb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800deb4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800deb8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800debc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dec0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800dec4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800dec8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
      : upstream_(upstream), key_(key) {}
 800decc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800ded0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800deda:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800dede:	605a      	str	r2, [r3, #4]
    return {*this, key};
 800dee0:	bf00      	nop
		if(doc["ledState"] == true){
 800dee2:	2301      	movs	r3, #1
 800dee4:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 800dee8:	f207 12c3 	addw	r2, r7, #451	; 0x1c3
 800deec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800def0:	4611      	mov	r1, r2
 800def2:	4618      	mov	r0, r3
 800def4:	f000 fa18 	bl	800e328 <_ZN11ArduinoJson8V6213HB26detaileqIbEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS1_11MemberProxyIRNS0_12JsonDocumentEPKcEERKS6_>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <_Z14messageArrivedP11MessageData+0x1c4>
			GPIOX_ODR(LED) = 1;
 800defe:	4b15      	ldr	r3, [pc, #84]	; (800df54 <_Z14messageArrivedP11MessageData+0x20c>)
 800df00:	2201      	movs	r2, #1
 800df02:	601a      	str	r2, [r3, #0]
			led = true;
 800df04:	4b14      	ldr	r3, [pc, #80]	; (800df58 <_Z14messageArrivedP11MessageData+0x210>)
 800df06:	2201      	movs	r2, #1
 800df08:	701a      	strb	r2, [r3, #0]
 800df0a:	e005      	b.n	800df18 <_Z14messageArrivedP11MessageData+0x1d0>
			GPIOX_ODR(LED) = 0;
 800df0c:	4b11      	ldr	r3, [pc, #68]	; (800df54 <_Z14messageArrivedP11MessageData+0x20c>)
 800df0e:	2200      	movs	r2, #0
 800df10:	601a      	str	r2, [r3, #0]
			led = false;
 800df12:	4b11      	ldr	r3, [pc, #68]	; (800df58 <_Z14messageArrivedP11MessageData+0x210>)
 800df14:	2200      	movs	r2, #0
 800df16:	701a      	strb	r2, [r3, #0]
		mqtt_publish_data();
 800df18:	f7fe ffd0 	bl	800cebc <_Z17mqtt_publish_datav>
	return;
 800df1c:	bf00      	nop
}
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	4618      	mov	r0, r3
 800df24:	f003 faaa 	bl	801147c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800df28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe ffb7 	bl	800cea0 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>
	return;
 800df32:	bf00      	nop
}
 800df34:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bdb0      	pop	{r4, r5, r7, pc}
 800df3c:	080145bc 	.word	0x080145bc
 800df40:	20000080 	.word	0x20000080
 800df44:	080145d4 	.word	0x080145d4
 800df48:	080145e8 	.word	0x080145e8
 800df4c:	080145fc 	.word	0x080145fc
 800df50:	08014614 	.word	0x08014614
 800df54:	424182b0 	.word	0x424182b0
 800df58:	200085d4 	.word	0x200085d4

0800df5c <_Z8MQTT_runv>:

void MQTT_run(void){
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b09c      	sub	sp, #112	; 0x70
 800df60:	af04      	add	r7, sp, #16
	int rc = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	65bb      	str	r3, [r7, #88]	; 0x58

	uint32_t ck_timer;

	NewNetwork(&n, MQTT_SOCKET);
 800df66:	2100      	movs	r1, #0
 800df68:	483d      	ldr	r0, [pc, #244]	; (800e060 <_Z8MQTT_runv+0x104>)
 800df6a:	f7f7 fadb 	bl	8005524 <NewNetwork>
	ConnectNetwork(&n, mqtt_ip, mqtt_port);
 800df6e:	f240 725b 	movw	r2, #1883	; 0x75b
 800df72:	493c      	ldr	r1, [pc, #240]	; (800e064 <_Z8MQTT_runv+0x108>)
 800df74:	483a      	ldr	r0, [pc, #232]	; (800e060 <_Z8MQTT_runv+0x104>)
 800df76:	f7f7 fb4e 	bl	8005616 <ConnectNetwork>
	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 800df7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df7e:	9302      	str	r3, [sp, #8]
 800df80:	4b39      	ldr	r3, [pc, #228]	; (800e068 <_Z8MQTT_runv+0x10c>)
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	4b38      	ldr	r3, [pc, #224]	; (800e06c <_Z8MQTT_runv+0x110>)
 800df8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df90:	4933      	ldr	r1, [pc, #204]	; (800e060 <_Z8MQTT_runv+0x104>)
 800df92:	4837      	ldr	r0, [pc, #220]	; (800e070 <_Z8MQTT_runv+0x114>)
 800df94:	f7f6 fd48 	bl	8004a28 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 800df98:	4a36      	ldr	r2, [pc, #216]	; (800e074 <_Z8MQTT_runv+0x118>)
 800df9a:	463b      	mov	r3, r7
 800df9c:	4611      	mov	r1, r2
 800df9e:	2258      	movs	r2, #88	; 0x58
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f003 ff1f 	bl	8011de4 <memcpy>
	data.willFlag = 0;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	76fb      	strb	r3, [r7, #27]
	data.MQTTVersion = 3;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	723b      	strb	r3, [r7, #8]
	data.clientID.cstring = opts.clientid;
 800dfae:	4b32      	ldr	r3, [pc, #200]	; (800e078 <_Z8MQTT_runv+0x11c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	60fb      	str	r3, [r7, #12]
	data.username.cstring = opts.username;
 800dfb4:	4b30      	ldr	r3, [pc, #192]	; (800e078 <_Z8MQTT_runv+0x11c>)
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	643b      	str	r3, [r7, #64]	; 0x40
	data.password.cstring = opts.password;
 800dfba:	4b2f      	ldr	r3, [pc, #188]	; (800e078 <_Z8MQTT_runv+0x11c>)
 800dfbc:	695b      	ldr	r3, [r3, #20]
 800dfbe:	64fb      	str	r3, [r7, #76]	; 0x4c
	data.keepAliveInterval = 60;
 800dfc0:	233c      	movs	r3, #60	; 0x3c
 800dfc2:	833b      	strh	r3, [r7, #24]
	data.cleansession = 1;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	76bb      	strb	r3, [r7, #26]

	if(MQTTConnect(&c, &data) == SUCCESSS){
 800dfc8:	463b      	mov	r3, r7
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4828      	ldr	r0, [pc, #160]	; (800e070 <_Z8MQTT_runv+0x114>)
 800dfce:	f7f7 f855 	bl	800507c <MQTTConnect>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bf0c      	ite	eq
 800dfd8:	2301      	moveq	r3, #1
 800dfda:	2300      	movne	r3, #0
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <_Z8MQTT_runv+0x8e>
		printf("connect server\r\n");
 800dfe2:	4826      	ldr	r0, [pc, #152]	; (800e07c <_Z8MQTT_runv+0x120>)
 800dfe4:	f003 fcda 	bl	801199c <puts>
 800dfe8:	e004      	b.n	800dff4 <_Z8MQTT_runv+0x98>
	}else{
		printf("disconnect\r\n");
 800dfea:	4825      	ldr	r0, [pc, #148]	; (800e080 <_Z8MQTT_runv+0x124>)
 800dfec:	f003 fcd6 	bl	801199c <puts>
		Error_Handler();
 800dff0:	f7fe ff4c 	bl	800ce8c <_Z13Error_Handlerv>
	}
	opts.showtopics = 1;
 800dff4:	4b20      	ldr	r3, [pc, #128]	; (800e078 <_Z8MQTT_runv+0x11c>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	621a      	str	r2, [r3, #32]

	printf("Subscribing to %s\r\n", MQTT_TOPIC);
 800dffa:	4922      	ldr	r1, [pc, #136]	; (800e084 <_Z8MQTT_runv+0x128>)
 800dffc:	4822      	ldr	r0, [pc, #136]	; (800e088 <_Z8MQTT_runv+0x12c>)
 800dffe:	f003 fc67 	bl	80118d0 <iprintf>
	rc = MQTTSubscribe(&c, ( const char*)MQTT_TOPIC, opts.qos, messageArrived);
 800e002:	4b1d      	ldr	r3, [pc, #116]	; (800e078 <_Z8MQTT_runv+0x11c>)
 800e004:	7b1a      	ldrb	r2, [r3, #12]
 800e006:	4b21      	ldr	r3, [pc, #132]	; (800e08c <_Z8MQTT_runv+0x130>)
 800e008:	491e      	ldr	r1, [pc, #120]	; (800e084 <_Z8MQTT_runv+0x128>)
 800e00a:	4819      	ldr	r0, [pc, #100]	; (800e070 <_Z8MQTT_runv+0x114>)
 800e00c:	f7f7 f8bc 	bl	8005188 <MQTTSubscribe>
 800e010:	65b8      	str	r0, [r7, #88]	; 0x58
	printf("Subscribed %d\r\n", rc);
 800e012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e014:	481e      	ldr	r0, [pc, #120]	; (800e090 <_Z8MQTT_runv+0x134>)
 800e016:	f003 fc5b 	bl	80118d0 <iprintf>



	ck_timer = millis();
 800e01a:	f7fc fd81 	bl	800ab20 <millis>
 800e01e:	65f8      	str	r0, [r7, #92]	; 0x5c

	while(1){
		MQTTYield(&c, data.keepAliveInterval);
 800e020:	8b3b      	ldrh	r3, [r7, #24]
 800e022:	4619      	mov	r1, r3
 800e024:	4812      	ldr	r0, [pc, #72]	; (800e070 <_Z8MQTT_runv+0x114>)
 800e026:	f7f6 ffe5 	bl	8004ff4 <MQTTYield>

		//publish data

		if((millis() - ck_timer) >= 1000){
 800e02a:	f7fc fd79 	bl	800ab20 <millis>
 800e02e:	4602      	mov	r2, r0
 800e030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e038:	4293      	cmp	r3, r2
 800e03a:	bf8c      	ite	hi
 800e03c:	2301      	movhi	r3, #1
 800e03e:	2300      	movls	r3, #0
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d0ec      	beq.n	800e020 <_Z8MQTT_runv+0xc4>
		     ck_timer = millis();
 800e046:	f7fc fd6b 	bl	800ab20 <millis>
 800e04a:	65f8      	str	r0, [r7, #92]	; 0x5c
			 mpu6050_basic_read(a, g);
 800e04c:	4911      	ldr	r1, [pc, #68]	; (800e094 <_Z8MQTT_runv+0x138>)
 800e04e:	4812      	ldr	r0, [pc, #72]	; (800e098 <_Z8MQTT_runv+0x13c>)
 800e050:	f7fd f8e4 	bl	800b21c <mpu6050_basic_read>
			 mpu6050_basic_read_temperature(&temp);
 800e054:	4811      	ldr	r0, [pc, #68]	; (800e09c <_Z8MQTT_runv+0x140>)
 800e056:	f7fd f8c9 	bl	800b1ec <mpu6050_basic_read_temperature>

			mqtt_publish_data();
 800e05a:	f7fe ff2f 	bl	800cebc <_Z17mqtt_publish_datav>
		MQTTYield(&c, data.keepAliveInterval);
 800e05e:	e7df      	b.n	800e020 <_Z8MQTT_runv+0xc4>
 800e060:	20008568 	.word	0x20008568
 800e064:	20007b60 	.word	0x20007b60
 800e068:	20007d68 	.word	0x20007d68
 800e06c:	20007b64 	.word	0x20007b64
 800e070:	20008578 	.word	0x20008578
 800e074:	08014660 	.word	0x08014660
 800e078:	20000080 	.word	0x20000080
 800e07c:	08014620 	.word	0x08014620
 800e080:	08014630 	.word	0x08014630
 800e084:	080146d8 	.word	0x080146d8
 800e088:	0801463c 	.word	0x0801463c
 800e08c:	0800dd49 	.word	0x0800dd49
 800e090:	08014650 	.word	0x08014650
 800e094:	200085e4 	.word	0x200085e4
 800e098:	200085d8 	.word	0x200085d8
 800e09c:	200085f0 	.word	0x200085f0

0800e0a0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>:
  T* allocRight() {
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 800e0a8:	2110      	movs	r1, #16
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7fd fe17 	bl	800bcde <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>
 800e0b0:	4603      	mov	r3, r0
  }
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b084      	sub	sp, #16
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	607a      	str	r2, [r7, #4]
                                                               size_t n) {
  return SizedStringAdapter<TChar*>::adapt(p, n);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	68b9      	ldr	r1, [r7, #8]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 f970 	bl	800e3b2 <_ZN11ArduinoJson8V6213HB26detail18SizedStringAdapterIPcvE5adaptEPKcj>
 800e0d2:	bf00      	nop
}
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>:
  const char* findString(const TAdaptedString& str) const {
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b086      	sub	sp, #24
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
    size_t n = str.size();
 800e0e6:	6838      	ldr	r0, [r7, #0]
 800e0e8:	f7fd fc0a 	bl	800b900 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800e0ec:	6138      	str	r0, [r7, #16]
    for (char* next = begin_; next + n < left_; ++next) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	617b      	str	r3, [r7, #20]
 800e0f4:	e027      	b.n	800e146 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x6a>
      if (next[n] == '\0' && stringEquals(str, adaptString(next, n)))
 800e0f6:	697a      	ldr	r2, [r7, #20]
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d112      	bne.n	800e128 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 800e102:	f107 0308 	add.w	r3, r7, #8
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	6979      	ldr	r1, [r7, #20]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff ffd5 	bl	800e0ba <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	f107 0308 	add.w	r3, r7, #8
 800e116:	cb0c      	ldmia	r3, {r2, r3}
 800e118:	c903      	ldmia	r1, {r0, r1}
 800e11a:	f000 f959 	bl	800e3d0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 800e124:	2301      	movs	r3, #1
 800e126:	e000      	b.n	800e12a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4e>
 800e128:	2300      	movs	r3, #0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d004      	beq.n	800e138 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x5c>
        return next;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	e011      	b.n	800e156 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x7a>
        ++next;
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	3301      	adds	r3, #1
 800e136:	617b      	str	r3, [r7, #20]
      while (*next)
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d1f8      	bne.n	800e132 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x56>
    for (char* next = begin_; next + n < left_; ++next) {
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	3301      	adds	r3, #1
 800e144:	617b      	str	r3, [r7, #20]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	441a      	add	r2, r3
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d3d0      	bcc.n	800e0f6 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x1a>
    return 0;
 800e154:	2300      	movs	r3, #0
  }
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 800e15e:	b580      	push	{r7, lr}
 800e160:	b082      	sub	sp, #8
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7fd fba8 	bl	800b8bc <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>
 800e16c:	4603      	mov	r3, r0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
    return;
  var->setNull();
}

template <typename TAdaptedString>
inline bool variantSetString(VariantData* var, TAdaptedString value,
 800e176:	b580      	push	{r7, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	60b9      	str	r1, [r7, #8]
 800e180:	607a      	str	r2, [r7, #4]
                             MemoryPool* pool) {
  return var != 0 ? var->setString(value, pool) : 0;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d007      	beq.n	800e198 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x22>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	68b9      	ldr	r1, [r7, #8]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 f95f 	bl	800e452 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>
 800e194:	4603      	mov	r3, r0
 800e196:	e000      	b.n	800e19a <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x24>
 800e198:	2300      	movs	r3, #0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bf14      	ite	ne
 800e19e:	2301      	movne	r3, #1
 800e1a0:	2300      	moveq	r3, #0
 800e1a2:	b2db      	uxtb	r3, r3
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <_ZN11ArduinoJson8V6213HB213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Produces a minified JSON document.
// https://arduinojson.org/v6/api/json/serializejson/
template <typename TDestination>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 f96e 	bl	800e49a <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 800e1be:	4603      	mov	r3, r0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvEC1Eb>:
struct Comparer<T, typename enable_if<is_integral<T>::value ||
                                      is_floating_point<T>::value>::type>
    : ComparerBase {
  T rhs;

  explicit Comparer(T value) : rhs(value) {}
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	78fa      	ldrb	r2, [r7, #3]
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_SIGNED_INTEGER);
 800e1f4:	210a      	movs	r1, #10
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7fd fe8d 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asSignedInteger = value;
 800e1fc:	68f9      	ldr	r1, [r7, #12]
 800e1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e202:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800e206:	bf00      	nop
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_unsigned<T>::value>::type setInteger(T value) {
 800e20e:	b580      	push	{r7, lr}
 800e210:	b084      	sub	sp, #16
 800e212:	af00      	add	r7, sp, #0
 800e214:	60f8      	str	r0, [r7, #12]
 800e216:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_UNSIGNED_INTEGER);
 800e21a:	2108      	movs	r1, #8
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f7fd fe7a 	bl	800bf16 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asUnsignedInteger = static_cast<JsonUInt>(value);
 800e222:	68f9      	ldr	r1, [r7, #12]
 800e224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e228:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800e22c:	bf00      	nop
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800e234:	b580      	push	{r7, lr}
 800e236:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 800e238:	f04f 0000 	mov.w	r0, #0
 800e23c:	4905      	ldr	r1, [pc, #20]	; (800e254 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv+0x20>)
 800e23e:	f000 f957 	bl	800e4f0 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE5forgeEy>
 800e242:	eeb0 7a40 	vmov.f32	s14, s0
 800e246:	eef0 7a60 	vmov.f32	s15, s1
  }
 800e24a:	eeb0 0a47 	vmov.f32	s0, s14
 800e24e:	eef0 0a67 	vmov.f32	s1, s15
 800e252:	bd80      	pop	{r7, pc}
 800e254:	7ff00000 	.word	0x7ff00000

0800e258 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	ed87 0b02 	vstr	d0, [r7, #8]
 800e262:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	dd04      	ble.n	800e274 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x1c>
 800e26a:	f000 f955 	bl	800e518 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800e26e:	4603      	mov	r3, r0
 800e270:	613b      	str	r3, [r7, #16]
 800e272:	e003      	b.n	800e27c <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 800e274:	f000 f960 	bl	800e538 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800e278:	4603      	mov	r3, r0
 800e27a:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	dc02      	bgt.n	800e288 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	425b      	negs	r3, r3
 800e286:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 800e288:	2300      	movs	r3, #0
 800e28a:	75fb      	strb	r3, [r7, #23]
 800e28c:	e01b      	b.n	800e2c6 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x6e>
    if (e & 1)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d010      	beq.n	800e2ba <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x62>
      m *= powersOfTen[index];
 800e298:	7dfa      	ldrb	r2, [r7, #23]
 800e29a:	f107 0310 	add.w	r3, r7, #16
 800e29e:	4611      	mov	r1, r2
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f959 	bl	800e558 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800e2a6:	ec53 2b10 	vmov	r2, r3, d0
 800e2aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2ae:	f7f1 fff7 	bl	80002a0 <__aeabi_dmul>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    e >>= 1;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	105b      	asrs	r3, r3, #1
 800e2be:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	75fb      	strb	r3, [r7, #23]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1e0      	bne.n	800e28e <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 800e2cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e2d0:	ec43 2b17 	vmov	d7, r2, r3
}
 800e2d4:	eeb0 0a47 	vmov.f32	s0, s14
 800e2d8:	eef0 0a67 	vmov.f32	s1, s15
 800e2dc:	3718      	adds	r7, #24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>:
  static const size_t capacity_ =
      detail::AddPadding<detail::Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(buffer_, capacity_) {}
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	3328      	adds	r3, #40	; 0x28
 800e2f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f7fd fea5 	bl	800c044 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <_ZN11ArduinoJson8V6213HB215deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v6/api/json/deserializejson/
template <typename... Args>
DeserializationError deserializeJson(JsonDocument& doc, Args&&... args) {
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return deserialize<JsonDeserializer>(doc, detail::forward<Args>(args)...);
 800e30e:	6838      	ldr	r0, [r7, #0]
 800e310:	f000 f958 	bl	800e5c4 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800e314:	4603      	mov	r3, r0
 800e316:	4619      	mov	r1, r3
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f95e 	bl	800e5da <_ZN11ArduinoJson8V6213HB26detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>
 800e31e:	4603      	mov	r3, r0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <_ZN11ArduinoJson8V6213HB26detaileqIbEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS1_11MemberProxyIRNS0_12JsonDocumentEPKcEERKS6_>:
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
  }
  template <typename T>
  friend
      typename enable_if<!is_base_of<VariantOperatorTag, T>::value, bool>::type
      operator==(TVariant lhs, const T& rhs) {
 800e328:	b590      	push	{r4, r7, lr}
 800e32a:	b08b      	sub	sp, #44	; 0x2c
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
 800e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e338:	623b      	str	r3, [r7, #32]
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	61fb      	str	r3, [r7, #28]
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	61bb      	str	r3, [r7, #24]
    return VariantAttorney::getData(derived());
 800e342:	69b8      	ldr	r0, [r7, #24]
 800e344:	f000 fc5f 	bl	800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800e348:	4603      	mov	r3, r0
 800e34a:	617b      	str	r3, [r7, #20]
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	613b      	str	r3, [r7, #16]
    return variantGetMember(VariantAttorney::getData(upstream_),
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60fb      	str	r3, [r7, #12]
    return client.getData();
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f7fd feb2 	bl	800c0c0 <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>
 800e35c:	4604      	mov	r4, r0
 800e35e:	bf00      	nop
                            adaptString(key_));
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(upstream_),
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff fefa 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800e36a:	4603      	mov	r3, r0
 800e36c:	4619      	mov	r1, r3
 800e36e:	4620      	mov	r0, r4
 800e370:	f002 fcc3 	bl	8010cfa <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 800e374:	4602      	mov	r2, r0
                            adaptString(key_));
 800e376:	bf00      	nop
 800e378:	bf00      	nop
 800e37a:	bf00      	nop

 private:
  FORCE_INLINE ArduinoJson::JsonVariant getVariant() const;

  FORCE_INLINE ArduinoJson::JsonVariantConst getVariantConst() const {
    return ArduinoJson::JsonVariantConst(getData());
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4611      	mov	r1, r2
 800e382:	4618      	mov	r0, r3
 800e384:	f7fd fdf0 	bl	800bf68 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800e388:	68bb      	ldr	r3, [r7, #8]
    return Converter<T>::fromJson(getVariantConst());
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fd fe1a 	bl	800bfc4 <_ZN11ArduinoJson8V6213HB29ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>
 800e390:	4603      	mov	r3, r0
 800e392:	bf00      	nop
    return as<T>();
 800e394:	bf00      	nop
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
 800e396:	6839      	ldr	r1, [r7, #0]
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 f8f5 	bl	800e588 <_ZN11ArduinoJson8V6213HB26detail7compareIbEENS1_13CompareResultENS0_16JsonVariantConstERKT_>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	bf0c      	ite	eq
 800e3a4:	2301      	moveq	r3, #1
 800e3a6:	2300      	movne	r3, #0
 800e3a8:	b2db      	uxtb	r3, r3
  }
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	372c      	adds	r7, #44	; 0x2c
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd90      	pop	{r4, r7, pc}

0800e3b2 <_ZN11ArduinoJson8V6213HB26detail18SizedStringAdapterIPcvE5adaptEPKcj>:
template <typename TChar>
struct SizedStringAdapter<TChar*,
                          typename enable_if<IsChar<TChar>::value>::type> {
  typedef SizedRamString AdaptedString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7fd fa89 	bl	800b8da <_ZN11ArduinoJson8V6213HB26detail14SizedRamStringC1EPKcj>
  }
 800e3c8:	68f8      	ldr	r0, [r7, #12]
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
}

template <typename TAdaptedString1, typename TAdaptedString2>
typename enable_if<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey,
                   bool>::type
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 800e3d0:	b590      	push	{r4, r7, lr}
 800e3d2:	b089      	sub	sp, #36	; 0x24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	f107 0408 	add.w	r4, r7, #8
 800e3da:	e884 0003 	stmia.w	r4, {r0, r1}
 800e3de:	4639      	mov	r1, r7
 800e3e0:	e881 000c 	stmia.w	r1, {r2, r3}
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 800e3e4:	f107 0308 	add.w	r3, r7, #8
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fd fa89 	bl	800b900 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800e3ee:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800e3f0:	463b      	mov	r3, r7
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fd fa84 	bl	800b900 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800e3f8:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800e3fa:	69ba      	ldr	r2, [r7, #24]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d001      	beq.n	800e406 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x36>
    return false;
 800e402:	2300      	movs	r3, #0
 800e404:	e021      	b.n	800e44a <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800e406:	2300      	movs	r3, #0
 800e408:	61fb      	str	r3, [r7, #28]
 800e40a:	e019      	b.n	800e440 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x70>
    if (s1[i] != s2[i])
 800e40c:	f107 0308 	add.w	r3, r7, #8
 800e410:	69f9      	ldr	r1, [r7, #28]
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd fa80 	bl	800b918 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>
 800e418:	4603      	mov	r3, r0
 800e41a:	461c      	mov	r4, r3
 800e41c:	463b      	mov	r3, r7
 800e41e:	69f9      	ldr	r1, [r7, #28]
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd fa79 	bl	800b918 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>
 800e426:	4603      	mov	r3, r0
 800e428:	429c      	cmp	r4, r3
 800e42a:	bf14      	ite	ne
 800e42c:	2301      	movne	r3, #1
 800e42e:	2300      	moveq	r3, #0
 800e430:	b2db      	uxtb	r3, r3
 800e432:	2b00      	cmp	r3, #0
 800e434:	d001      	beq.n	800e43a <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
      return false;
 800e436:	2300      	movs	r3, #0
 800e438:	e007      	b.n	800e44a <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	3301      	adds	r3, #1
 800e43e:	61fb      	str	r3, [r7, #28]
 800e440:	69fa      	ldr	r2, [r7, #28]
 800e442:	69bb      	ldr	r3, [r7, #24]
 800e444:	429a      	cmp	r2, r3
 800e446:	d3e1      	bcc.n	800e40c <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x3c>
  }
  return true;
 800e448:	2301      	movs	r3, #1
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3724      	adds	r7, #36	; 0x24
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd90      	pop	{r4, r7, pc}

0800e452 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>:
  inline bool setString(TAdaptedString value, MemoryPool* pool) {
 800e452:	b580      	push	{r7, lr}
 800e454:	b086      	sub	sp, #24
 800e456:	af00      	add	r7, sp, #0
 800e458:	60f8      	str	r0, [r7, #12]
 800e45a:	60b9      	str	r1, [r7, #8]
 800e45c:	607a      	str	r2, [r7, #4]
    if (value.isNull()) {
 800e45e:	f107 0308 	add.w	r3, r7, #8
 800e462:	4618      	mov	r0, r3
 800e464:	f7fd f9cf 	bl	800b806 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x26>
      setNull();
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f7fd fceb 	bl	800be4a <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
      return true;
 800e474:	2301      	movs	r3, #1
 800e476:	e00c      	b.n	800e492 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x40>
    return storeString(pool, value, VariantStringSetter(this));
 800e478:	f107 0314 	add.w	r3, r7, #20
 800e47c:	68f9      	ldr	r1, [r7, #12]
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fd fd63 	bl	800bf4a <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>
 800e484:	697a      	ldr	r2, [r7, #20]
 800e486:	68b9      	ldr	r1, [r7, #8]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f8fd 	bl	800e688 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>
 800e48e:	4603      	mov	r3, r0
 800e490:	bf00      	nop
  }
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer);
  return variantAccept(VariantAttorney::getData(source), serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b084      	sub	sp, #16
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 800e4a4:	f107 030c 	add.w	r3, r7, #12
 800e4a8:	6839      	ldr	r1, [r7, #0]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 f902 	bl	800e6b4 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 800e4b0:	68f9      	ldr	r1, [r7, #12]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f90d 	bl	800e6d2 <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 800e4b8:	4603      	mov	r3, r0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d005      	beq.n	800e4de <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 f923 	bl	800e720 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	e004      	b.n	800e4e8 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 800e4de:	6838      	ldr	r0, [r7, #0]
 800e4e0:	f000 f913 	bl	800e70a <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	bf00      	nop
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 800e4fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e4fe:	f000 f9f1 	bl	800e8e4 <_ZN11ArduinoJson8V6213HB26detail10alias_castIdyEET_T0_>
 800e502:	eeb0 7a40 	vmov.f32	s14, s0
 800e506:	eef0 7a60 	vmov.f32	s15, s1
  }
 800e50a:	eeb0 0a47 	vmov.f32	s0, s14
 800e50e:	eef0 0a67 	vmov.f32	s1, s15
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800e51e:	1d3b      	adds	r3, r7, #4
 800e520:	4904      	ldr	r1, [pc, #16]	; (800e534 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 800e522:	4618      	mov	r0, r3
 800e524:	f000 f9f4 	bl	800e910 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 800e528:	687b      	ldr	r3, [r7, #4]
  }
 800e52a:	4618      	mov	r0, r3
 800e52c:	3708      	adds	r7, #8
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	080146e8 	.word	0x080146e8

0800e538 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800e53e:	1d3b      	adds	r3, r7, #4
 800e540:	4904      	ldr	r1, [pc, #16]	; (800e554 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f9e4 	bl	800e910 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 800e548:	687b      	ldr	r3, [r7, #4]
  }
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	08014730 	.word	0x08014730

0800e558 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	00db      	lsls	r3, r3, #3
 800e56a:	4413      	add	r3, r2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f000 f9de 	bl	800e92e <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>
 800e572:	eeb0 7a40 	vmov.f32	s14, s0
 800e576:	eef0 7a60 	vmov.f32	s15, s1
  }
 800e57a:	eeb0 0a47 	vmov.f32	s0, s14
 800e57e:	eef0 0a67 	vmov.f32	s1, s15
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_ZN11ArduinoJson8V6213HB26detail7compareIbEENS1_13CompareResultENS0_16JsonVariantConstERKT_>:
  explicit Comparer(const T& value)
      : VariantComparer(VariantAttorney::getData(value)) {}
};

template <typename T>
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  Comparer<T> comparer(rhs);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781a      	ldrb	r2, [r3, #0]
 800e596:	f107 030c 	add.w	r3, r7, #12
 800e59a:	4611      	mov	r1, r2
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7ff fe13 	bl	800e1c8 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvEC1Eb>
 800e5a2:	1d3b      	adds	r3, r7, #4
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fd fcee 	bl	800bf86 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	bf00      	nop
  return variantAccept(VariantAttorney::getData(lhs), comparer);
 800e5ae:	f107 030c 	add.w	r3, r7, #12
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	f7ff ff84 	bl	800e4c2 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 800e5ba:	4603      	mov	r3, r0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>:
#include "type_traits.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <class T>
T&& forward(typename remove_reference<T>::type& t) noexcept {
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800e5cc:	687b      	ldr	r3, [r7, #4]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	370c      	adds	r7, #12
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <_ZN11ArduinoJson8V6213HB26detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>:

template <template <typename, typename> class TDeserializer, typename TStream,
          typename... Args,
          typename = typename enable_if<  // issue #1897
              !is_integral<typename first_or_void<Args...>::type>::value>::type>
DeserializationError deserialize(JsonDocument& doc, TStream&& input,
 800e5da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5dc:	b0ad      	sub	sp, #180	; 0xb4
 800e5de:	af04      	add	r7, sp, #16
 800e5e0:	6078      	str	r0, [r7, #4]
 800e5e2:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  auto reader = makeReader(detail::forward<TStream>(input));
 800e5e4:	6838      	ldr	r0, [r7, #0]
 800e5e6:	f7ff ffed 	bl	800e5c4 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	f107 0310 	add.w	r3, r7, #16
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 f9cc 	bl	800e990 <_ZN11ArduinoJson8V6213HB26detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e5fe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e602:	f7fd fd5d 	bl	800c0c0 <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>
 800e606:	4603      	mov	r3, r0
 800e608:	bf00      	nop
  auto data = VariantAttorney::getData(doc);
 800e60a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return client.getPool();
 800e614:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800e618:	f7fd fd47 	bl	800c0aa <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800e61c:	4603      	mov	r3, r0
 800e61e:	bf00      	nop
  auto pool = VariantAttorney::getPool(doc);
 800e620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  auto options = makeDeserializationOptions(args...);
 800e624:	f107 0318 	add.w	r3, r7, #24
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe f8f9 	bl	800c820 <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Ev>
 800e62e:	7e38      	ldrb	r0, [r7, #24]
 800e630:	f7fe f938 	bl	800c8a4 <_ZN11ArduinoJson8V6213HB26detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800e634:	4603      	mov	r3, r0
 800e636:	81bb      	strh	r3, [r7, #12]
  doc.clear();
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7fd fcf2 	bl	800c022 <_ZN11ArduinoJson8V6213HB212JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(pool, reader,
 800e63e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e642:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	f000 f9b2 	bl	800e9b2 <_ZN11ArduinoJson8V6213HB26detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>
 800e64e:	f107 051c 	add.w	r5, r7, #28
 800e652:	466c      	mov	r4, sp
 800e654:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e65a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e65e:	f107 0310 	add.w	r3, r7, #16
 800e662:	cb0c      	ldmia	r3, {r2, r3}
 800e664:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e668:	4628      	mov	r0, r5
 800e66a:	f000 f9b0 	bl	800e9ce <_ZN11ArduinoJson8V6213HB26detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>
                                         makeStringStorage(input, pool))
      .parse(*data, options.filter, options.nestingLimit);
 800e66e:	f107 001c 	add.w	r0, r7, #28
 800e672:	7b7b      	ldrb	r3, [r7, #13]
 800e674:	4632      	mov	r2, r6
 800e676:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800e67a:	f000 f9c0 	bl	800e9fe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800e67e:	4603      	mov	r3, r0
}
 800e680:	4618      	mov	r0, r3
 800e682:	37a4      	adds	r7, #164	; 0xa4
 800e684:	46bd      	mov	sp, r7
 800e686:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e688 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>:
  else
    return storeString(pool, str, StringStoragePolicy::Copy(), callback);
}

template <typename TAdaptedString, typename TCallback>
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 800e688:	b590      	push	{r4, r7, lr}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 800e694:	f107 0308 	add.w	r3, r7, #8
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd f904 	bl	800b8a6 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	68b9      	ldr	r1, [r7, #8]
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f000 f9e6 	bl	800ea76 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 800e6aa:	4603      	mov	r3, r0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}

0800e6b4 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:

template <typename TDestination>
class Writer<TDestination,
             typename enable_if<is_std_string<TDestination>::value>::type> {
 public:
  Writer(TDestination& str) : str_(&str) {}
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	683a      	ldr	r2, [r7, #0]
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b084      	sub	sp, #16
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6039      	str	r1, [r7, #0]
  TSerializer<TWriter> serializer(writer);
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 f9f3 	bl	800eace <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
    return client.getData();
 800e6e8:	1d3b      	adds	r3, r7, #4
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fd fc4b 	bl	800bf86 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	bf00      	nop
  return variantAccept(VariantAttorney::getData(source), serializer);
 800e6f4:	f107 0308 	add.w	r3, r7, #8
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	f000 f9f6 	bl	800eaec <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>
 800e700:	4603      	mov	r3, r0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>:

  TResult visitSignedInteger(JsonInteger) {
    return TResult();
  }

  TResult visitNull() {
 800e70a:	b480      	push	{r7}
 800e70c:	b083      	sub	sp, #12
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
    return TResult();
 800e712:	2300      	movs	r3, #0
  }
 800e714:	4618      	mov	r0, r3
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f7fd fbe4 	bl	800bef8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 800e730:	4603      	mov	r3, r0
 800e732:	3b02      	subs	r3, #2
 800e734:	2b3e      	cmp	r3, #62	; 0x3e
 800e736:	f200 80cc 	bhi.w	800e8d2 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1b2>
 800e73a:	a201      	add	r2, pc, #4	; (adr r2, 800e740 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x20>)
 800e73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e740:	0800e885 	.word	0x0800e885
 800e744:	0800e885 	.word	0x0800e885
 800e748:	0800e871 	.word	0x0800e871
 800e74c:	0800e871 	.word	0x0800e871
 800e750:	0800e8b9 	.word	0x0800e8b9
 800e754:	0800e8d3 	.word	0x0800e8d3
 800e758:	0800e8a9 	.word	0x0800e8a9
 800e75c:	0800e8d3 	.word	0x0800e8d3
 800e760:	0800e899 	.word	0x0800e899
 800e764:	0800e8d3 	.word	0x0800e8d3
 800e768:	0800e83d 	.word	0x0800e83d
 800e76c:	0800e8d3 	.word	0x0800e8d3
 800e770:	0800e8d3 	.word	0x0800e8d3
 800e774:	0800e8d3 	.word	0x0800e8d3
 800e778:	0800e8d3 	.word	0x0800e8d3
 800e77c:	0800e8d3 	.word	0x0800e8d3
 800e780:	0800e8d3 	.word	0x0800e8d3
 800e784:	0800e8d3 	.word	0x0800e8d3
 800e788:	0800e8d3 	.word	0x0800e8d3
 800e78c:	0800e8d3 	.word	0x0800e8d3
 800e790:	0800e8d3 	.word	0x0800e8d3
 800e794:	0800e8d3 	.word	0x0800e8d3
 800e798:	0800e8d3 	.word	0x0800e8d3
 800e79c:	0800e8d3 	.word	0x0800e8d3
 800e7a0:	0800e8d3 	.word	0x0800e8d3
 800e7a4:	0800e8d3 	.word	0x0800e8d3
 800e7a8:	0800e8d3 	.word	0x0800e8d3
 800e7ac:	0800e8d3 	.word	0x0800e8d3
 800e7b0:	0800e8d3 	.word	0x0800e8d3
 800e7b4:	0800e8d3 	.word	0x0800e8d3
 800e7b8:	0800e863 	.word	0x0800e863
 800e7bc:	0800e8d3 	.word	0x0800e8d3
 800e7c0:	0800e8d3 	.word	0x0800e8d3
 800e7c4:	0800e8d3 	.word	0x0800e8d3
 800e7c8:	0800e8d3 	.word	0x0800e8d3
 800e7cc:	0800e8d3 	.word	0x0800e8d3
 800e7d0:	0800e8d3 	.word	0x0800e8d3
 800e7d4:	0800e8d3 	.word	0x0800e8d3
 800e7d8:	0800e8d3 	.word	0x0800e8d3
 800e7dc:	0800e8d3 	.word	0x0800e8d3
 800e7e0:	0800e8d3 	.word	0x0800e8d3
 800e7e4:	0800e8d3 	.word	0x0800e8d3
 800e7e8:	0800e8d3 	.word	0x0800e8d3
 800e7ec:	0800e8d3 	.word	0x0800e8d3
 800e7f0:	0800e8d3 	.word	0x0800e8d3
 800e7f4:	0800e8d3 	.word	0x0800e8d3
 800e7f8:	0800e8d3 	.word	0x0800e8d3
 800e7fc:	0800e8d3 	.word	0x0800e8d3
 800e800:	0800e8d3 	.word	0x0800e8d3
 800e804:	0800e8d3 	.word	0x0800e8d3
 800e808:	0800e8d3 	.word	0x0800e8d3
 800e80c:	0800e8d3 	.word	0x0800e8d3
 800e810:	0800e8d3 	.word	0x0800e8d3
 800e814:	0800e8d3 	.word	0x0800e8d3
 800e818:	0800e8d3 	.word	0x0800e8d3
 800e81c:	0800e8d3 	.word	0x0800e8d3
 800e820:	0800e8d3 	.word	0x0800e8d3
 800e824:	0800e8d3 	.word	0x0800e8d3
 800e828:	0800e8d3 	.word	0x0800e8d3
 800e82c:	0800e8d3 	.word	0x0800e8d3
 800e830:	0800e8d3 	.word	0x0800e8d3
 800e834:	0800e8d3 	.word	0x0800e8d3
 800e838:	0800e855 	.word	0x0800e855
        return visitor.visitFloat(content_.asFloat);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	ed93 7b00 	vldr	d7, [r3]
 800e842:	eeb0 0a47 	vmov.f32	s0, s14
 800e846:	eef0 0a67 	vmov.f32	s1, s15
 800e84a:	6838      	ldr	r0, [r7, #0]
 800e84c:	f000 f997 	bl	800eb7e <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE10visitFloatEd>
 800e850:	4603      	mov	r3, r0
 800e852:	e043      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(content_.asCollection);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4619      	mov	r1, r3
 800e858:	6838      	ldr	r0, [r7, #0]
 800e85a:	f000 f984 	bl	800eb66 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800e85e:	4603      	mov	r3, r0
 800e860:	e03c      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(content_.asCollection);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4619      	mov	r1, r3
 800e866:	6838      	ldr	r0, [r7, #0]
 800e868:	f000 f957 	bl	800eb1a <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800e86c:	4603      	mov	r3, r0
 800e86e:	e035      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(content_.asString.data,
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 800e878:	461a      	mov	r2, r3
 800e87a:	6838      	ldr	r0, [r7, #0]
 800e87c:	f000 f959 	bl	800eb32 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800e880:	4603      	mov	r3, r0
                                   content_.asString.size);
 800e882:	e02b      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(content_.asString.data,
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 800e88c:	461a      	mov	r2, r3
 800e88e:	6838      	ldr	r0, [r7, #0]
 800e890:	f000 f95c 	bl	800eb4c <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800e894:	4603      	mov	r3, r0
                                    content_.asString.size);
 800e896:	e021      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89e:	6838      	ldr	r0, [r7, #0]
 800e8a0:	f000 f97e 	bl	800eba0 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE18visitSignedIntegerEx>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	e019      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ae:	6838      	ldr	r0, [r7, #0]
 800e8b0:	f000 f987 	bl	800ebc2 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	e011      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(content_.asBoolean != 0);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	bf14      	ite	ne
 800e8c0:	2301      	movne	r3, #1
 800e8c2:	2300      	moveq	r3, #0
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6838      	ldr	r0, [r7, #0]
 800e8ca:	f000 f98b 	bl	800ebe4 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE12visitBooleanEb>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	e004      	b.n	800e8dc <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	f7ff ff19 	bl	800e70a <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	bf00      	nop
  }
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <_ZN11ArduinoJson8V6213HB26detail10alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 800e8ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800e8f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e8fa:	ec43 2b17 	vmov	d7, r2, r3
}
 800e8fe:	eeb0 0a47 	vmov.f32	s0, s14
 800e902:	eef0 0a67 	vmov.f32	s1, s15
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	683a      	ldr	r2, [r7, #0]
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 800e92e:	b480      	push	{r7}
 800e930:	b083      	sub	sp, #12
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
  return *p;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	ec43 2b17 	vmov	d7, r2, r3
}
 800e940:	eeb0 0a47 	vmov.f32	s0, s14
 800e944:	eef0 0a67 	vmov.f32	s1, s15
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 800e952:	b580      	push	{r7, lr}
 800e954:	b086      	sub	sp, #24
 800e956:	af00      	add	r7, sp, #0
 800e958:	ed87 0a03 	vstr	s0, [r7, #12]
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e962:	1d3b      	adds	r3, r7, #4
 800e964:	613b      	str	r3, [r7, #16]
    return data_;
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	bf00      	nop
    auto data = getData(dst);
 800e96c:	617b      	str	r3, [r7, #20]
    if (data)
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d009      	beq.n	800e988 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE+0x36>
      data->setFloat(static_cast<JsonFloat>(src));
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7f1 ff21 	bl	80007bc <__aeabi_f2d>
 800e97a:	4602      	mov	r2, r0
 800e97c:	460b      	mov	r3, r1
 800e97e:	ec43 2b10 	vmov	d0, r2, r3
 800e982:	6978      	ldr	r0, [r7, #20]
 800e984:	f7fd fa4e 	bl	800be24 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
  }
 800e988:	bf00      	nop
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <_ZN11ArduinoJson8V6213HB26detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<typename remove_reference<TInput>::type> makeReader(TInput&& input) {
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  return Reader<typename remove_reference<TInput>::type>{
      detail::forward<TInput>(input)};
 800e99a:	6838      	ldr	r0, [r7, #0]
 800e99c:	f7ff fe12 	bl	800e5c4 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f939 	bl	800ec1c <_ZN11ArduinoJson8V6213HB26detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>
}
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <_ZN11ArduinoJson8V6213HB26detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>:
#include <ArduinoJson/StringStorage/StringMover.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
StringCopier makeStringStorage(TInput&, MemoryPool* pool) {
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b084      	sub	sp, #16
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	60f8      	str	r0, [r7, #12]
 800e9ba:	60b9      	str	r1, [r7, #8]
 800e9bc:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(pool != 0);
  return StringCopier(pool);
 800e9be:	6879      	ldr	r1, [r7, #4]
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f7fd ff82 	bl	800c8ca <_ZN11ArduinoJson8V6213HB26detail12StringCopierC1EPNS1_10MemoryPoolE>
}
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <_ZN11ArduinoJson8V6213HB26detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool* pool,
 800e9ce:	b590      	push	{r4, r7, lr}
 800e9d0:	b089      	sub	sp, #36	; 0x24
 800e9d2:	af04      	add	r7, sp, #16
 800e9d4:	60f8      	str	r0, [r7, #12]
 800e9d6:	60b9      	str	r1, [r7, #8]
 800e9d8:	4639      	mov	r1, r7
 800e9da:	e881 000c 	stmia.w	r1, {r2, r3}
  return TDeserializer<TReader, TWriter>(pool, reader, writer);
 800e9de:	466c      	mov	r4, sp
 800e9e0:	f107 0320 	add.w	r3, r7, #32
 800e9e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e9ea:	463b      	mov	r3, r7
 800e9ec:	cb0c      	ldmia	r3, {r2, r3}
 800e9ee:	68b9      	ldr	r1, [r7, #8]
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f000 f92b 	bl	800ec4c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>
}
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	3714      	adds	r7, #20
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd90      	pop	{r4, r7, pc}

0800e9fe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 800e9fe:	b590      	push	{r4, r7, lr}
 800ea00:	b089      	sub	sp, #36	; 0x24
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	60f8      	str	r0, [r7, #12]
 800ea06:	60b9      	str	r1, [r7, #8]
 800ea08:	713a      	strb	r2, [r7, #4]
 800ea0a:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 800ea0c:	783b      	ldrb	r3, [r7, #0]
 800ea0e:	4622      	mov	r2, r4
 800ea10:	68b9      	ldr	r1, [r7, #8]
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f000 f93c 	bl	800ec90 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && !variant.isEnclosed()) {
 800ea1c:	7dfb      	ldrb	r3, [r7, #23]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d112      	bne.n	800ea48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	3314      	adds	r3, #20
 800ea26:	4618      	mov	r0, r3
 800ea28:	f000 fa20 	bl	800ee6c <_ZNK11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00a      	beq.n	800ea48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800ea32:	68b8      	ldr	r0, [r7, #8]
 800ea34:	f7fd f9d6 	bl	800bde4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData10isEnclosedEv>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f083 0301 	eor.w	r3, r3, #1
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800ea44:	2301      	movs	r3, #1
 800ea46:	e000      	b.n	800ea4a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d007      	beq.n	800ea5e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x60>
      return DeserializationError::InvalidInput;
 800ea4e:	f107 0318 	add.w	r3, r7, #24
 800ea52:	2103      	movs	r1, #3
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fd fe96 	bl	800c786 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>
 800ea5a:	7e3b      	ldrb	r3, [r7, #24]
 800ea5c:	e007      	b.n	800ea6e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x70>
    return err;
 800ea5e:	7dfa      	ldrb	r2, [r7, #23]
 800ea60:	f107 031c 	add.w	r3, r7, #28
 800ea64:	4611      	mov	r1, r2
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fd fe8d 	bl	800c786 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>
 800ea6c:	7f3b      	ldrb	r3, [r7, #28]
  }
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3724      	adds	r7, #36	; 0x24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd90      	pop	{r4, r7, pc}

0800ea76 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 800ea76:	b590      	push	{r4, r7, lr}
 800ea78:	b089      	sub	sp, #36	; 0x24
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	60f8      	str	r0, [r7, #12]
 800ea7e:	60b9      	str	r1, [r7, #8]
 800ea80:	713a      	strb	r2, [r7, #4]
 800ea82:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 800ea84:	f107 0308 	add.w	r3, r7, #8
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fc fef1 	bl	800b870 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 800ea8e:	4604      	mov	r4, r0
 800ea90:	f107 0308 	add.w	r3, r7, #8
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fc fec7 	bl	800b828 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	f107 0014 	add.w	r0, r7, #20
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	f7fc ff48 	bl	800b938 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	f107 0314 	add.w	r3, r7, #20
 800eaae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eab0:	f000 f9e8 	bl	800ee84 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 800eab4:	f107 0308 	add.w	r3, r7, #8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fc fea4 	bl	800b806 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800eabe:	4603      	mov	r3, r0
 800eac0:	f083 0301 	eor.w	r3, r3, #1
 800eac4:	b2db      	uxtb	r3, r3
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3724      	adds	r7, #36	; 0x24
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd90      	pop	{r4, r7, pc}

0800eace <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  JsonSerializer(TWriter writer) : formatter_(writer) {}
 800eace:	b580      	push	{r7, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
 800ead6:	6039      	str	r1, [r7, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	4618      	mov	r0, r3
 800eade:	f000 f9ef 	bl	800eec0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d005      	beq.n	800eb08 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x1c>
    return var->accept(visitor);
 800eafc:	6839      	ldr	r1, [r7, #0]
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 f9ee 	bl	800eee0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
 800eb04:	4603      	mov	r3, r0
 800eb06:	e004      	b.n	800eb12 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x26>
    return visitor.visitNull();
 800eb08:	6838      	ldr	r0, [r7, #0]
 800eb0a:	f000 faf3 	bl	800f0f4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	bf00      	nop
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>:

  TResult visitObject(const CollectionData&) {
 800eb1a:	b480      	push	{r7}
 800eb1c:	b083      	sub	sp, #12
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	6039      	str	r1, [r7, #0]
    return TResult();
 800eb24:	2300      	movs	r3, #0
  }
 800eb26:	4618      	mov	r0, r3
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>:

  TResult visitRawJson(const char*, size_t) {
    return TResult();
  }

  TResult visitString(const char*, size_t) {
 800eb32:	b480      	push	{r7}
 800eb34:	b085      	sub	sp, #20
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	607a      	str	r2, [r7, #4]
    return TResult();
 800eb3e:	2300      	movs	r3, #0
  }
 800eb40:	4618      	mov	r0, r3
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>:
  TResult visitRawJson(const char*, size_t) {
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	607a      	str	r2, [r7, #4]
    return TResult();
 800eb58:	2300      	movs	r3, #0
  }
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>:
  TResult visitArray(const CollectionData&) {
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	6039      	str	r1, [r7, #0]
    return TResult();
 800eb70:	2300      	movs	r3, #0
  }
 800eb72:	4618      	mov	r0, r3
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr

0800eb7e <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b084      	sub	sp, #16
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	60f8      	str	r0, [r7, #12]
 800eb86:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800eb8a:	68f9      	ldr	r1, [r7, #12]
 800eb8c:	463b      	mov	r3, r7
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fb2f 	bl	800f1f4 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800eb96:	4603      	mov	r3, r0
  }
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800ebac:	68f9      	ldr	r1, [r7, #12]
 800ebae:	463b      	mov	r3, r7
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 fb3f 	bl	800f236 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800ebb8:	4603      	mov	r3, r0
  }
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	60f8      	str	r0, [r7, #12]
 800ebca:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800ebce:	68f9      	ldr	r1, [r7, #12]
 800ebd0:	463b      	mov	r3, r7
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 fb47 	bl	800f268 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800ebda:	4603      	mov	r3, r0
  }
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3710      	adds	r7, #16
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 800ebee:	78f9      	ldrb	r1, [r7, #3]
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	460a      	mov	r2, r1
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7ff ffe3 	bl	800ebc2 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>
 800ebfc:	4603      	mov	r3, r0
  }
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 800ec06:	b480      	push	{r7}
 800ec08:	b083      	sub	sp, #12
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800ec0e:	687b      	ldr	r3, [r7, #4]
  }
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <_ZN11ArduinoJson8V6213HB26detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>:
};

template <typename TSource>
struct Reader<TSource, typename void_<typename TSource::const_iterator>::type>
    : IteratorReader<typename TSource::const_iterator> {
  explicit Reader(const TSource& source)
 800ec1c:	b5b0      	push	{r4, r5, r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
      : IteratorReader<typename TSource::const_iterator>(source.begin(),
                                                         source.end()) {}
 800ec26:	687c      	ldr	r4, [r7, #4]
 800ec28:	6838      	ldr	r0, [r7, #0]
 800ec2a:	f002 fc2d 	bl	8011488 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800ec2e:	4605      	mov	r5, r0
 800ec30:	6838      	ldr	r0, [r7, #0]
 800ec32:	f002 fc2b 	bl	801148c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 800ec36:	4603      	mov	r3, r0
 800ec38:	461a      	mov	r2, r3
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f000 fb2c 	bl	800f29a <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bdb0      	pop	{r4, r5, r7, pc}

0800ec4c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>:
  JsonDeserializer(MemoryPool* pool, TReader reader,
 800ec4c:	b590      	push	{r4, r7, lr}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	4639      	mov	r1, r7
 800ec58:	e881 000c 	stmia.w	r1, {r2, r3}
      : stringStorage_(stringStorage),
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	461c      	mov	r4, r3
 800ec60:	f107 0320 	add.w	r3, r7, #32
 800ec64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        foundSomething_(false),
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	741a      	strb	r2, [r3, #16]
        latch_(reader),
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f103 0014 	add.w	r0, r3, #20
 800ec76:	463b      	mov	r3, r7
 800ec78:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ec7c:	f000 fb20 	bl	800f2c0 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
        pool_(pool) {}
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	621a      	str	r2, [r3, #32]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3714      	adds	r7, #20
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd90      	pop	{r4, r7, pc}

0800ec90 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 800ec90:	b5b0      	push	{r4, r5, r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	713a      	strb	r2, [r7, #4]
 800ec9c:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f000 fb26 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800eca4:	4603      	mov	r3, r0
 800eca6:	75fb      	strb	r3, [r7, #23]
    if (err)
 800eca8:	7dfb      	ldrb	r3, [r7, #23]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 800ecae:	7dfb      	ldrb	r3, [r7, #23]
 800ecb0:	e0d2      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f000 fb52 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b7b      	cmp	r3, #123	; 0x7b
 800ecbc:	f300 80ba 	bgt.w	800ee34 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800ecc0:	2b5b      	cmp	r3, #91	; 0x5b
 800ecc2:	da04      	bge.n	800ecce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 800ecc4:	2b22      	cmp	r3, #34	; 0x22
 800ecc6:	d07b      	beq.n	800edc0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800ecc8:	2b27      	cmp	r3, #39	; 0x27
 800ecca:	d079      	beq.n	800edc0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800eccc:	e0b2      	b.n	800ee34 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800ecce:	3b5b      	subs	r3, #91	; 0x5b
 800ecd0:	2b20      	cmp	r3, #32
 800ecd2:	f200 80af 	bhi.w	800ee34 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800ecd6:	a201      	add	r2, pc, #4	; (adr r2, 800ecdc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 800ecd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecdc:	0800ed61 	.word	0x0800ed61
 800ece0:	0800ee35 	.word	0x0800ee35
 800ece4:	0800ee35 	.word	0x0800ee35
 800ece8:	0800ee35 	.word	0x0800ee35
 800ecec:	0800ee35 	.word	0x0800ee35
 800ecf0:	0800ee35 	.word	0x0800ee35
 800ecf4:	0800ee35 	.word	0x0800ee35
 800ecf8:	0800ee35 	.word	0x0800ee35
 800ecfc:	0800ee35 	.word	0x0800ee35
 800ed00:	0800ee35 	.word	0x0800ee35
 800ed04:	0800ee35 	.word	0x0800ee35
 800ed08:	0800ee07 	.word	0x0800ee07
 800ed0c:	0800ee35 	.word	0x0800ee35
 800ed10:	0800ee35 	.word	0x0800ee35
 800ed14:	0800ee35 	.word	0x0800ee35
 800ed18:	0800ee35 	.word	0x0800ee35
 800ed1c:	0800ee35 	.word	0x0800ee35
 800ed20:	0800ee35 	.word	0x0800ee35
 800ed24:	0800ee35 	.word	0x0800ee35
 800ed28:	0800ee29 	.word	0x0800ee29
 800ed2c:	0800ee35 	.word	0x0800ee35
 800ed30:	0800ee35 	.word	0x0800ee35
 800ed34:	0800ee35 	.word	0x0800ee35
 800ed38:	0800ee35 	.word	0x0800ee35
 800ed3c:	0800ee35 	.word	0x0800ee35
 800ed40:	0800ede5 	.word	0x0800ede5
 800ed44:	0800ee35 	.word	0x0800ee35
 800ed48:	0800ee35 	.word	0x0800ee35
 800ed4c:	0800ee35 	.word	0x0800ee35
 800ed50:	0800ee35 	.word	0x0800ee35
 800ed54:	0800ee35 	.word	0x0800ee35
 800ed58:	0800ee35 	.word	0x0800ee35
 800ed5c:	0800ed91 	.word	0x0800ed91
        if (filter.allowArray())
 800ed60:	1d3b      	adds	r3, r7, #4
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fd fd3b 	bl	800c7de <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowArrayEv>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00a      	beq.n	800ed84 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 800ed6e:	68b8      	ldr	r0, [r7, #8]
 800ed70:	f7fd f8a0 	bl	800beb4 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>
 800ed74:	4601      	mov	r1, r0
 800ed76:	783b      	ldrb	r3, [r7, #0]
 800ed78:	462a      	mov	r2, r5
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 fb05 	bl	800f38a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 800ed80:	4603      	mov	r3, r0
 800ed82:	e069      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 800ed84:	7839      	ldrb	r1, [r7, #0]
 800ed86:	68f8      	ldr	r0, [r7, #12]
 800ed88:	f000 fb85 	bl	800f496 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	e063      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 800ed90:	1d3b      	adds	r3, r7, #4
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fd fd2e 	bl	800c7f4 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter11allowObjectEv>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00a      	beq.n	800edb4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 800ed9e:	68b8      	ldr	r0, [r7, #8]
 800eda0:	f7fd f899 	bl	800bed6 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
 800eda4:	4601      	mov	r1, r0
 800eda6:	783b      	ldrb	r3, [r7, #0]
 800eda8:	4622      	mov	r2, r4
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 fbb6 	bl	800f51c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 800edb0:	4603      	mov	r3, r0
 800edb2:	e051      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 800edb4:	7839      	ldrb	r1, [r7, #0]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f000 fcac 	bl	800f714 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800edbc:	4603      	mov	r3, r0
 800edbe:	e04b      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800edc0:	1d3b      	adds	r3, r7, #4
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fd fd21 	bl	800c80a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d005      	beq.n	800edda <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f000 fd1f 	bl	800f814 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>
 800edd6:	4603      	mov	r3, r0
 800edd8:	e03e      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f000 fd3f 	bl	800f85e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800ede0:	4603      	mov	r3, r0
 800ede2:	e039      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800ede4:	1d3b      	adds	r3, r7, #4
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fd fd0f 	bl	800c80a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 800edf2:	2101      	movs	r1, #1
 800edf4:	68b8      	ldr	r0, [r7, #8]
 800edf6:	f7fd f804 	bl	800be02 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800edfa:	4919      	ldr	r1, [pc, #100]	; (800ee60 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 fd63 	bl	800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800ee02:	4603      	mov	r3, r0
 800ee04:	e028      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800ee06:	1d3b      	adds	r3, r7, #4
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fd fcfe 	bl	800c80a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 800ee14:	2100      	movs	r1, #0
 800ee16:	68b8      	ldr	r0, [r7, #8]
 800ee18:	f7fc fff3 	bl	800be02 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800ee1c:	4911      	ldr	r1, [pc, #68]	; (800ee64 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f000 fd52 	bl	800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800ee24:	4603      	mov	r3, r0
 800ee26:	e017      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 800ee28:	490f      	ldr	r1, [pc, #60]	; (800ee68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 fd4c 	bl	800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800ee30:	4603      	mov	r3, r0
 800ee32:	e011      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800ee34:	1d3b      	adds	r3, r7, #4
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fd fce7 	bl	800c80a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d005      	beq.n	800ee4e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 800ee42:	68b9      	ldr	r1, [r7, #8]
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f000 fd65 	bl	800f914 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	e004      	b.n	800ee58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f000 fda6 	bl	800f9a0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 800ee54:	4603      	mov	r3, r0
 800ee56:	bf00      	nop
  }
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee60:	080146b8 	.word	0x080146b8
 800ee64:	080146c0 	.word	0x080146c0
 800ee68:	080146c8 	.word	0x080146c8

0800ee6c <_ZNK11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
    return current_;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	7a1b      	ldrb	r3, [r3, #8]
  }
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>:

    template <typename TStoredString>
    void operator()(TStoredString s) {
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      if (s)
 800ee92:	463b      	mov	r3, r7
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fc fd8f 	bl	800b9b8 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d006      	beq.n	800eeae <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x2a>
        instance_->setString(s);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6818      	ldr	r0, [r3, #0]
 800eea4:	463b      	mov	r3, r7
 800eea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eea8:	f7fc ffdb 	bl	800be62 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
      else
        instance_->setNull();
    }
 800eeac:	e004      	b.n	800eeb8 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x34>
        instance_->setNull();
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fc ffc9 	bl	800be4a <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
    }
 800eeb8:	bf00      	nop
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	463a      	mov	r2, r7
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f000 feab 	bl	800fc2c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b086      	sub	sp, #24
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7fd f804 	bl	800bef8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 800eef0:	4603      	mov	r3, r0
 800eef2:	3b02      	subs	r3, #2
 800eef4:	2b3e      	cmp	r3, #62	; 0x3e
 800eef6:	f200 80f4 	bhi.w	800f0e2 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x202>
 800eefa:	a201      	add	r2, pc, #4	; (adr r2, 800ef00 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20>)
 800eefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef00:	0800f095 	.word	0x0800f095
 800ef04:	0800f095 	.word	0x0800f095
 800ef08:	0800f081 	.word	0x0800f081
 800ef0c:	0800f081 	.word	0x0800f081
 800ef10:	0800f0c9 	.word	0x0800f0c9
 800ef14:	0800f0e3 	.word	0x0800f0e3
 800ef18:	0800f0b9 	.word	0x0800f0b9
 800ef1c:	0800f0e3 	.word	0x0800f0e3
 800ef20:	0800f0a9 	.word	0x0800f0a9
 800ef24:	0800f0e3 	.word	0x0800f0e3
 800ef28:	0800effd 	.word	0x0800effd
 800ef2c:	0800f0e3 	.word	0x0800f0e3
 800ef30:	0800f0e3 	.word	0x0800f0e3
 800ef34:	0800f0e3 	.word	0x0800f0e3
 800ef38:	0800f0e3 	.word	0x0800f0e3
 800ef3c:	0800f0e3 	.word	0x0800f0e3
 800ef40:	0800f0e3 	.word	0x0800f0e3
 800ef44:	0800f0e3 	.word	0x0800f0e3
 800ef48:	0800f0e3 	.word	0x0800f0e3
 800ef4c:	0800f0e3 	.word	0x0800f0e3
 800ef50:	0800f0e3 	.word	0x0800f0e3
 800ef54:	0800f0e3 	.word	0x0800f0e3
 800ef58:	0800f0e3 	.word	0x0800f0e3
 800ef5c:	0800f0e3 	.word	0x0800f0e3
 800ef60:	0800f0e3 	.word	0x0800f0e3
 800ef64:	0800f0e3 	.word	0x0800f0e3
 800ef68:	0800f0e3 	.word	0x0800f0e3
 800ef6c:	0800f0e3 	.word	0x0800f0e3
 800ef70:	0800f0e3 	.word	0x0800f0e3
 800ef74:	0800f0e3 	.word	0x0800f0e3
 800ef78:	0800f073 	.word	0x0800f073
 800ef7c:	0800f0e3 	.word	0x0800f0e3
 800ef80:	0800f0e3 	.word	0x0800f0e3
 800ef84:	0800f0e3 	.word	0x0800f0e3
 800ef88:	0800f0e3 	.word	0x0800f0e3
 800ef8c:	0800f0e3 	.word	0x0800f0e3
 800ef90:	0800f0e3 	.word	0x0800f0e3
 800ef94:	0800f0e3 	.word	0x0800f0e3
 800ef98:	0800f0e3 	.word	0x0800f0e3
 800ef9c:	0800f0e3 	.word	0x0800f0e3
 800efa0:	0800f0e3 	.word	0x0800f0e3
 800efa4:	0800f0e3 	.word	0x0800f0e3
 800efa8:	0800f0e3 	.word	0x0800f0e3
 800efac:	0800f0e3 	.word	0x0800f0e3
 800efb0:	0800f0e3 	.word	0x0800f0e3
 800efb4:	0800f0e3 	.word	0x0800f0e3
 800efb8:	0800f0e3 	.word	0x0800f0e3
 800efbc:	0800f0e3 	.word	0x0800f0e3
 800efc0:	0800f0e3 	.word	0x0800f0e3
 800efc4:	0800f0e3 	.word	0x0800f0e3
 800efc8:	0800f0e3 	.word	0x0800f0e3
 800efcc:	0800f0e3 	.word	0x0800f0e3
 800efd0:	0800f0e3 	.word	0x0800f0e3
 800efd4:	0800f0e3 	.word	0x0800f0e3
 800efd8:	0800f0e3 	.word	0x0800f0e3
 800efdc:	0800f0e3 	.word	0x0800f0e3
 800efe0:	0800f0e3 	.word	0x0800f0e3
 800efe4:	0800f0e3 	.word	0x0800f0e3
 800efe8:	0800f0e3 	.word	0x0800f0e3
 800efec:	0800f0e3 	.word	0x0800f0e3
 800eff0:	0800f0e3 	.word	0x0800f0e3
 800eff4:	0800f0e3 	.word	0x0800f0e3
 800eff8:	0800f015 	.word	0x0800f015
        return visitor.visitFloat(content_.asFloat);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	ed93 7b00 	vldr	d7, [r3]
 800f002:	eeb0 0a47 	vmov.f32	s0, s14
 800f006:	eef0 0a67 	vmov.f32	s1, s15
 800f00a:	6838      	ldr	r0, [r7, #0]
 800f00c:	f000 fe21 	bl	800fc52 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>
 800f010:	4603      	mov	r3, r0
 800f012:	e06b      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitArray(content_.asCollection);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	683a      	ldr	r2, [r7, #0]
 800f018:	617a      	str	r2, [r7, #20]
 800f01a:	613b      	str	r3, [r7, #16]
    write('[');
 800f01c:	215b      	movs	r1, #91	; 0x5b
 800f01e:	6978      	ldr	r0, [r7, #20]
 800f020:	f001 fa0a 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = array.head();
 800f024:	6938      	ldr	r0, [r7, #16]
 800f026:	f7fc fcd8 	bl	800b9da <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 800f02a:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 800f02c:	e012      	b.n	800f054 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x174>
      slot->data()->accept(*this);
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f7fc fcea 	bl	800ba08 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800f034:	4603      	mov	r3, r0
 800f036:	6979      	ldr	r1, [r7, #20]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff ff51 	bl	800eee0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7fc fd04 	bl	800ba4c <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800f044:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17c>
      write(',');
 800f04c:	212c      	movs	r1, #44	; 0x2c
 800f04e:	6978      	ldr	r0, [r7, #20]
 800f050:	f001 f9f2 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e9      	bne.n	800f02e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x14e>
 800f05a:	e000      	b.n	800f05e <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17e>
        break;
 800f05c:	bf00      	nop
    write(']');
 800f05e:	215d      	movs	r1, #93	; 0x5d
 800f060:	6978      	ldr	r0, [r7, #20]
 800f062:	f001 f9e9 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800f066:	6978      	ldr	r0, [r7, #20]
 800f068:	f000 febd 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800f06c:	4603      	mov	r3, r0
 800f06e:	bf00      	nop
 800f070:	e03c      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitObject(content_.asCollection);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4619      	mov	r1, r3
 800f076:	6838      	ldr	r0, [r7, #0]
 800f078:	f000 fdff 	bl	800fc7a <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>
 800f07c:	4603      	mov	r3, r0
 800f07e:	e035      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitString(content_.asString.data,
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 800f088:	461a      	mov	r2, r3
 800f08a:	6838      	ldr	r0, [r7, #0]
 800f08c:	f000 fe34 	bl	800fcf8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>
 800f090:	4603      	mov	r3, r0
                                   content_.asString.size);
 800f092:	e02b      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitRawJson(content_.asString.data,
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 800f09c:	461a      	mov	r2, r3
 800f09e:	6838      	ldr	r0, [r7, #0]
 800f0a0:	f000 fe3e 	bl	800fd20 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>
 800f0a4:	4603      	mov	r3, r0
                                    content_.asString.size);
 800f0a6:	e021      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ae:	6838      	ldr	r0, [r7, #0]
 800f0b0:	f000 fe4a 	bl	800fd48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	e019      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0be:	6838      	ldr	r0, [r7, #0]
 800f0c0:	f000 fe56 	bl	800fd70 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	e011      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitBoolean(content_.asBoolean != 0);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	bf14      	ite	ne
 800f0d0:	2301      	movne	r3, #1
 800f0d2:	2300      	moveq	r3, #0
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	6838      	ldr	r0, [r7, #0]
 800f0da:	f000 fe5d 	bl	800fd98 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	e004      	b.n	800f0ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitNull();
 800f0e2:	6838      	ldr	r0, [r7, #0]
 800f0e4:	f000 f806 	bl	800f0f4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	bf00      	nop
  }
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>:
  size_t visitNull() {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
    formatter_.writeRaw("null");
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4906      	ldr	r1, [pc, #24]	; (800f118 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv+0x24>)
 800f100:	4618      	mov	r0, r3
 800f102:	f000 fe5d 	bl	800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fe6d 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800f10c:	4603      	mov	r3, r0
  }
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	080146c8 	.word	0x080146c8

0800f11c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>:
  COMPARE_RESULT_GREATER_OR_EQUAL = 3,
  COMPARE_RESULT_LESS_OR_EQUAL = 5
};

template <typename T>
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f132:	f7f1 fbfb 	bl	800092c <__aeabi_dcmplt>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x24>
    return COMPARE_RESULT_LESS;
 800f13c:	2304      	movs	r3, #4
 800f13e:	e00d      	b.n	800f15c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else if (lhs > rhs)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14c:	f7f1 fc0c 	bl	8000968 <__aeabi_dcmpgt>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x3e>
    return COMPARE_RESULT_GREATER;
 800f156:	2302      	movs	r3, #2
 800f158:	e000      	b.n	800f15c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else
    return COMPARE_RESULT_EQUAL;
 800f15a:	2301      	movs	r3, #1
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3708      	adds	r7, #8
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17a:	4290      	cmp	r0, r2
 800f17c:	eb71 0303 	sbcs.w	r3, r1, r3
 800f180:	da01      	bge.n	800f186 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800f182:	2304      	movs	r3, #4
 800f184:	e00c      	b.n	800f1a0 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	6839      	ldr	r1, [r7, #0]
 800f18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f192:	4290      	cmp	r0, r2
 800f194:	eb71 0303 	sbcs.w	r3, r1, r3
 800f198:	da01      	bge.n	800f19e <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800f19a:	2302      	movs	r3, #2
 800f19c:	e000      	b.n	800f1a0 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800f19e:	2301      	movs	r3, #1
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c2:	4290      	cmp	r0, r2
 800f1c4:	eb71 0303 	sbcs.w	r3, r1, r3
 800f1c8:	d201      	bcs.n	800f1ce <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800f1ca:	2304      	movs	r3, #4
 800f1cc:	e00c      	b.n	800f1e8 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1da:	4290      	cmp	r0, r2
 800f1dc:	eb71 0303 	sbcs.w	r3, r1, r3
 800f1e0:	d201      	bcs.n	800f1e6 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e000      	b.n	800f1e8 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800f1e6:	2301      	movs	r3, #1
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
    return COMPARE_RESULT_LESS;
  return arithmeticCompare<T2>(static_cast<T2>(lhs), rhs);
}

template <typename T1, typename T2>
CompareResult arithmeticCompare(
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b088      	sub	sp, #32
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
    const T1& lhs, const T2& rhs,
    typename enable_if<is_floating_point<T1>::value ||
                       is_floating_point<T2>::value>::type* = 0) {
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	4618      	mov	r0, r3
 800f210:	f7f1 fab2 	bl	8000778 <__aeabi_ui2d>
 800f214:	4602      	mov	r2, r0
 800f216:	460b      	mov	r3, r1
 800f218:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800f21c:	f107 0218 	add.w	r2, r7, #24
 800f220:	f107 0310 	add.w	r3, r7, #16
 800f224:	4611      	mov	r1, r2
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff ff78 	bl	800f11c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800f22c:	4603      	mov	r3, r0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3720      	adds	r7, #32
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800f236:	b5b0      	push	{r4, r5, r7, lr}
 800f238:	b086      	sub	sp, #24
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	60b9      	str	r1, [r7, #8]
 800f240:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2200      	movs	r2, #0
 800f24a:	461c      	mov	r4, r3
 800f24c:	4615      	mov	r5, r2
 800f24e:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800f252:	f107 0310 	add.w	r3, r7, #16
 800f256:	4619      	mov	r1, r3
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f7ff ff83 	bl	800f164 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>
 800f25e:	4603      	mov	r3, r0
}
 800f260:	4618      	mov	r0, r3
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bdb0      	pop	{r4, r5, r7, pc}

0800f268 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800f268:	b5b0      	push	{r4, r5, r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2200      	movs	r2, #0
 800f27c:	461c      	mov	r4, r3
 800f27e:	4615      	mov	r5, r2
 800f280:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800f284:	f107 0310 	add.w	r3, r7, #16
 800f288:	4619      	mov	r1, r3
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f7ff ff8e 	bl	800f1ac <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 800f290:	4603      	mov	r3, r0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bdb0      	pop	{r4, r5, r7, pc}

0800f29a <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>:
  explicit IteratorReader(TIterator begin, TIterator end)
 800f29a:	b480      	push	{r7}
 800f29c:	b085      	sub	sp, #20
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	60b9      	str	r1, [r7, #8]
 800f2a4:	607a      	str	r2, [r7, #4]
      : ptr_(begin), end_(end) {}
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	601a      	str	r2, [r3, #0]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	605a      	str	r2, [r3, #4]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3714      	adds	r7, #20
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	1d3b      	adds	r3, r7, #4
 800f2ca:	e883 0006 	stmia.w	r3, {r1, r2}
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	1d3b      	adds	r3, r7, #4
 800f2d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2d8:	e882 0003 	stmia.w	r2, {r0, r1}
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	725a      	strb	r2, [r3, #9]
  }
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3714      	adds	r7, #20
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 f82f 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d013      	beq.n	800f32c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x3c>
 800f304:	2b00      	cmp	r3, #0
 800f306:	db1d      	blt.n	800f344 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800f308:	2b20      	cmp	r3, #32
 800f30a:	dc1b      	bgt.n	800f344 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800f30c:	2b09      	cmp	r3, #9
 800f30e:	db19      	blt.n	800f344 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800f310:	3b09      	subs	r3, #9
 800f312:	4a11      	ldr	r2, [pc, #68]	; (800f358 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x68>)
 800f314:	fa22 f303 	lsr.w	r3, r2, r3
 800f318:	f003 0301 	and.w	r3, r3, #1
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	bf14      	ite	ne
 800f320:	2301      	movne	r3, #1
 800f322:	2300      	moveq	r3, #0
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b00      	cmp	r3, #0
 800f328:	d108      	bne.n	800f33c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x4c>
 800f32a:	e00b      	b.n	800f344 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	7c1b      	ldrb	r3, [r3, #16]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x48>
 800f334:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 800f336:	e00b      	b.n	800f350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800f338:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800f33a:	e009      	b.n	800f350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          move();
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fd6f 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          continue;
 800f342:	e004      	b.n	800f34e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	741a      	strb	r2, [r3, #16]
          return DeserializationError::Ok;
 800f34a:	2300      	movs	r3, #0
 800f34c:	e000      	b.n	800f350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800f34e:	e7d3      	b.n	800f2f8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	00800013 	.word	0x00800013

0800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>:
  char current() {
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
    return latch_.current();
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3314      	adds	r3, #20
 800f368:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	7a5b      	ldrb	r3, [r3, #9]
 800f36e:	f083 0301 	eor.w	r3, r3, #1
 800f372:	b2db      	uxtb	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv+0x22>
      load();
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	f001 f97a 	bl	8010672 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>
    }
    return current_;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	7a1b      	ldrb	r3, [r3, #8]
  }
 800f382:	4618      	mov	r0, r3
 800f384:	3710      	adds	r7, #16
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}

0800f38a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800f38a:	b590      	push	{r4, r7, lr}
 800f38c:	b089      	sub	sp, #36	; 0x24
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	60b9      	str	r1, [r7, #8]
 800f394:	713a      	strb	r2, [r7, #4]
 800f396:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800f398:	463b      	mov	r3, r7
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fd fa71 	bl	800c882 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d001      	beq.n	800f3aa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800f3a6:	2305      	movs	r3, #5
 800f3a8:	e071      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f000 fd38 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 800f3b0:	68f8      	ldr	r0, [r7, #12]
 800f3b2:	f7ff ff9d 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	77fb      	strb	r3, [r7, #31]
    if (err)
 800f3ba:	7ffb      	ldrb	r3, [r7, #31]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 800f3c0:	7ffb      	ldrb	r3, [r7, #31]
 800f3c2:	e064      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 800f3c4:	215d      	movs	r1, #93	; 0x5d
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f000 fd37 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	e05b      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter memberFilter = filter[0UL];
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	617b      	str	r3, [r7, #20]
 800f3da:	f107 0214 	add.w	r2, r7, #20
 800f3de:	1d3b      	adds	r3, r7, #4
 800f3e0:	4611      	mov	r1, r2
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 fd46 	bl	800fe74 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixImEES2_RKT_>
      if (memberFilter.allow()) {
 800f3e8:	f107 0310 	add.w	r3, r7, #16
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fd f9eb 	bl	800c7c8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d01c      	beq.n	800f432 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(pool_);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6a1b      	ldr	r3, [r3, #32]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	68b8      	ldr	r0, [r7, #8]
 800f400:	f7fc fea0 	bl	800c144 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>
 800f404:	61b8      	str	r0, [r7, #24]
        if (!value)
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 800f40c:	2304      	movs	r3, #4
 800f40e:	e03e      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, memberFilter, nestingLimit.decrement());
 800f410:	463b      	mov	r3, r7
 800f412:	4618      	mov	r0, r3
 800f414:	f7fd fa22 	bl	800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800f418:	4603      	mov	r3, r0
 800f41a:	4622      	mov	r2, r4
 800f41c:	69b9      	ldr	r1, [r7, #24]
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f7ff fc36 	bl	800ec90 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800f424:	4603      	mov	r3, r0
 800f426:	77fb      	strb	r3, [r7, #31]
        if (err)
 800f428:	7ffb      	ldrb	r3, [r7, #31]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d011      	beq.n	800f452 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800f42e:	7ffb      	ldrb	r3, [r7, #31]
 800f430:	e02d      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 800f432:	463b      	mov	r3, r7
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd fa11 	bl	800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800f43a:	4603      	mov	r3, r0
 800f43c:	4619      	mov	r1, r3
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f000 fd24 	bl	800fe8c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800f444:	4603      	mov	r3, r0
 800f446:	77fb      	strb	r3, [r7, #31]
        if (err)
 800f448:	7ffb      	ldrb	r3, [r7, #31]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800f44e:	7ffb      	ldrb	r3, [r7, #31]
 800f450:	e01d      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7ff ff4c 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f458:	4603      	mov	r3, r0
 800f45a:	77fb      	strb	r3, [r7, #31]
      if (err)
 800f45c:	7ffb      	ldrb	r3, [r7, #31]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 800f462:	7ffb      	ldrb	r3, [r7, #31]
 800f464:	e013      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 800f466:	215d      	movs	r1, #93	; 0x5d
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f000 fce6 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 800f474:	2300      	movs	r3, #0
 800f476:	e00a      	b.n	800f48e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 800f478:	212c      	movs	r1, #44	; 0x2c
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 fcdd 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f480:	4603      	mov	r3, r0
 800f482:	f083 0301 	eor.w	r3, r3, #1
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d0ad      	beq.n	800f3e8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 800f48c:	2303      	movs	r3, #3
  }
 800f48e:	4618      	mov	r0, r3
 800f490:	3724      	adds	r7, #36	; 0x24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd90      	pop	{r4, r7, pc}

0800f496 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 800f496:	b580      	push	{r7, lr}
 800f498:	b084      	sub	sp, #16
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800f4a0:	463b      	mov	r3, r7
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd f9ed 	bl	800c882 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d001      	beq.n	800f4b2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800f4ae:	2305      	movs	r3, #5
 800f4b0:	e030      	b.n	800f514 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fcb4 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 800f4b8:	463b      	mov	r3, r7
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fd f9ce 	bl	800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fce1 	bl	800fe8c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f4ce:	7bfb      	ldrb	r3, [r7, #15]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
 800f4d6:	e01d      	b.n	800f514 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ff09 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ea:	e013      	b.n	800f514 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 800f4ec:	215d      	movs	r1, #93	; 0x5d
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 fca3 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e00a      	b.n	800f514 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 800f4fe:	212c      	movs	r1, #44	; 0x2c
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 fc9a 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f506:	4603      	mov	r3, r0
 800f508:	f083 0301 	eor.w	r3, r3, #1
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d0d2      	beq.n	800f4b8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 800f512:	2303      	movs	r3, #3
  }
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b091      	sub	sp, #68	; 0x44
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	713a      	strb	r2, [r7, #4]
 800f528:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800f52a:	463b      	mov	r3, r7
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7fd f9a8 	bl	800c882 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800f538:	2305      	movs	r3, #5
 800f53a:	e0e7      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    move();
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f000 fc6f 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f7ff fed4 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f548:	4603      	mov	r3, r0
 800f54a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 800f54e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f552:	2b00      	cmp	r3, #0
 800f554:	d002      	beq.n	800f55c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 800f556:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f55a:	e0d7      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    if (eat('}'))
 800f55c:	217d      	movs	r1, #125	; 0x7d
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f000 fc6b 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e0ce      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = parseKey();
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f000 fd22 	bl	800ffb8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>
 800f574:	4603      	mov	r3, r0
 800f576:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800f57a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 800f582:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f586:	e0c1      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f7ff feb1 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800f594:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 800f59c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f5a0:	e0b4      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(':'))
 800f5a2:	213a      	movs	r1, #58	; 0x3a
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f000 fc48 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	f083 0301 	eor.w	r3, r3, #1
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	e0a8      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      JsonString key = stringStorage_.str();
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	f107 0318 	add.w	r3, r7, #24
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd f9f7 	bl	800c9b6 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier3strEv>
      TFilter memberFilter = filter[key.c_str()];
 800f5c8:	f107 0318 	add.w	r3, r7, #24
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fc f9ca 	bl	800b966 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800f5d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f5da:	1d3b      	adds	r3, r7, #4
 800f5dc:	4611      	mov	r1, r2
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fd0a 	bl	800fff8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixIPKcEES2_RKT_>
      if (memberFilter.allow()) {
 800f5e4:	f107 0314 	add.w	r3, r7, #20
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fd f8ed 	bl	800c7c8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d049      	beq.n	800f688 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x16c>
        VariantData* variant = object.getMember(adaptString(key.c_str()));
 800f5f4:	f107 0318 	add.w	r3, r7, #24
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fc f9b4 	bl	800b966 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800f5fe:	4603      	mov	r3, r0
 800f600:	4618      	mov	r0, r3
 800f602:	f7fe fdac 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800f606:	4603      	mov	r3, r0
 800f608:	4619      	mov	r1, r3
 800f60a:	68b8      	ldr	r0, [r7, #8]
 800f60c:	f000 fd00 	bl	8010010 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 800f610:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (!variant) {
 800f612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f614:	2b00      	cmp	r3, #0
 800f616:	d123      	bne.n	800f660 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x144>
          key = stringStorage_.save();
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f61e:	4611      	mov	r1, r2
 800f620:	4618      	mov	r0, r3
 800f622:	f7fd f97e 	bl	800c922 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>
 800f626:	f107 0318 	add.w	r3, r7, #24
 800f62a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f62e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f630:	c303      	stmia	r3!, {r0, r1}
 800f632:	701a      	strb	r2, [r3, #0]
          VariantSlot* slot = object.addSlot(pool_);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	4619      	mov	r1, r3
 800f63a:	68b8      	ldr	r0, [r7, #8]
 800f63c:	f7fc fd58 	bl	800c0f0 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 800f640:	6378      	str	r0, [r7, #52]	; 0x34
          if (!slot)
 800f642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f644:	2b00      	cmp	r3, #0
 800f646:	d101      	bne.n	800f64c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
            return DeserializationError::NoMemory;
 800f648:	2304      	movs	r3, #4
 800f64a:	e05f      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
          slot->setKey(key);
 800f64c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f64e:	f107 0318 	add.w	r3, r7, #24
 800f652:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f654:	f7fc fa2f 	bl	800bab6 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
          variant = slot->data();
 800f658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f65a:	f7fc f9ca 	bl	800b9f2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800f65e:	63f8      	str	r0, [r7, #60]	; 0x3c
        err = parseVariant(*variant, memberFilter, nestingLimit.decrement());
 800f660:	463b      	mov	r3, r7
 800f662:	4618      	mov	r0, r3
 800f664:	f7fd f8fa 	bl	800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800f668:	4603      	mov	r3, r0
 800f66a:	4622      	mov	r2, r4
 800f66c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f7ff fb0e 	bl	800ec90 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800f674:	4603      	mov	r3, r0
 800f676:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 800f67a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d015      	beq.n	800f6ae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 800f682:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f686:	e041      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
        err = skipVariant(nestingLimit.decrement());
 800f688:	463b      	mov	r3, r7
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fd f8e6 	bl	800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800f690:	4603      	mov	r3, r0
 800f692:	4619      	mov	r1, r3
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 fbf9 	bl	800fe8c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800f69a:	4603      	mov	r3, r0
 800f69c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 800f6a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d002      	beq.n	800f6ae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 800f6a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f6ac:	e02e      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f7ff fe1e 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800f6ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1ac>
        return err;
 800f6c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f6c6:	e021      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (eat('}'))
 800f6c8:	217d      	movs	r1, #125	; 0x7d
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	f000 fbb5 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
        return DeserializationError::Ok;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	e018      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(','))
 800f6da:	212c      	movs	r1, #44	; 0x2c
 800f6dc:	68f8      	ldr	r0, [r7, #12]
 800f6de:	f000 fbac 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f083 0301 	eor.w	r3, r3, #1
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d001      	beq.n	800f6f2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1d6>
        return DeserializationError::InvalidInput;
 800f6ee:	2303      	movs	r3, #3
 800f6f0:	e00c      	b.n	800f70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	f7ff fdfc 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800f6fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f702:	2b00      	cmp	r3, #0
 800f704:	f43f af33 	beq.w	800f56e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 800f708:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  }
 800f70c:	4618      	mov	r0, r3
 800f70e:	3744      	adds	r7, #68	; 0x44
 800f710:	46bd      	mov	sp, r7
 800f712:	bd90      	pop	{r4, r7, pc}

0800f714 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800f71e:	463b      	mov	r3, r7
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd f8ae 	bl	800c882 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d001      	beq.n	800f730 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800f72c:	2305      	movs	r3, #5
 800f72e:	e06d      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fb75 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f7ff fdda 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f73c:	4603      	mov	r3, r0
 800f73e:	73fb      	strb	r3, [r7, #15]
    if (err)
 800f740:	7bfb      	ldrb	r3, [r7, #15]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d001      	beq.n	800f74a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 800f746:	7bfb      	ldrb	r3, [r7, #15]
 800f748:	e060      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 800f74a:	217d      	movs	r1, #125	; 0x7d
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 fb74 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 800f758:	2300      	movs	r3, #0
 800f75a:	e057      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 fc6e 	bl	801003e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>
 800f762:	4603      	mov	r3, r0
 800f764:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f766:	7bfb      	ldrb	r3, [r7, #15]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 800f76c:	7bfb      	ldrb	r3, [r7, #15]
 800f76e:	e04d      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7ff fdbd 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f776:	4603      	mov	r3, r0
 800f778:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f77a:	7bfb      	ldrb	r3, [r7, #15]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d001      	beq.n	800f784 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 800f780:	7bfb      	ldrb	r3, [r7, #15]
 800f782:	e043      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 800f784:	213a      	movs	r1, #58	; 0x3a
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fb57 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f083 0301 	eor.w	r3, r3, #1
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 800f798:	2303      	movs	r3, #3
 800f79a:	e037      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 800f79c:	463b      	mov	r3, r7
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fd f85c 	bl	800c85c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 fb6f 	bl	800fe8c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f7b2:	7bfb      	ldrb	r3, [r7, #15]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ba:	e027      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7ff fd97 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f7c6:	7bfb      	ldrb	r3, [r7, #15]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 800f7cc:	7bfb      	ldrb	r3, [r7, #15]
 800f7ce:	e01d      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 800f7d0:	217d      	movs	r1, #125	; 0x7d
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fb31 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e014      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800f7e2:	212c      	movs	r1, #44	; 0x2c
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fb28 	bl	800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	f083 0301 	eor.w	r3, r3, #1
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d001      	beq.n	800f7fa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	e008      	b.n	800f80c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff fd78 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
      if (err)
 800f804:	7bfb      	ldrb	r3, [r7, #15]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d0a8      	beq.n	800f75c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 800f80a:	7bfb      	ldrb	r3, [r7, #15]
  }
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
    stringStorage_.startString();
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4618      	mov	r0, r3
 800f822:	f7fd f861 	bl	800c8e8 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>
    err = parseQuotedString();
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 fc25 	bl	8010076 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 800f82c:	4603      	mov	r3, r0
 800f82e:	75fb      	strb	r3, [r7, #23]
    if (err)
 800f830:	7dfb      	ldrb	r3, [r7, #23]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d001      	beq.n	800f83a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	e00d      	b.n	800f856 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x42>
    variant.setString(stringStorage_.save());
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	f107 0308 	add.w	r3, r7, #8
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7fd f86d 	bl	800c922 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>
 800f848:	f107 0308 	add.w	r3, r7, #8
 800f84c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f84e:	6838      	ldr	r0, [r7, #0]
 800f850:	f7fc fb07 	bl	800be62 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
    return DeserializationError::Ok;
 800f854:	2300      	movs	r3, #0
  }
 800f856:	4618      	mov	r0, r3
 800f858:	3718      	adds	r7, #24
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 800f85e:	b580      	push	{r7, lr}
 800f860:	b084      	sub	sp, #16
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7ff fd78 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f86c:	4603      	mov	r3, r0
 800f86e:	73fb      	strb	r3, [r7, #15]
    move();
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fad5 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff fd70 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73bb      	strb	r3, [r7, #14]
      move();
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 facd 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 800f886:	7bba      	ldrb	r2, [r7, #14]
 800f888:	7bfb      	ldrb	r3, [r7, #15]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d016      	beq.n	800f8bc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 800f88e:	7bbb      	ldrb	r3, [r7, #14]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 800f894:	2302      	movs	r3, #2
 800f896:	e013      	b.n	800f8c0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 800f898:	7bbb      	ldrb	r3, [r7, #14]
 800f89a:	2b5c      	cmp	r3, #92	; 0x5c
 800f89c:	d1eb      	bne.n	800f876 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7ff fd5c 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	bf14      	ite	ne
 800f8aa:	2301      	movne	r3, #1
 800f8ac:	2300      	moveq	r3, #0
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d0e0      	beq.n	800f876 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
          move();
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f000 fab3 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (;;) {
 800f8ba:	e7dc      	b.n	800f876 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        break;
 800f8bc:	bf00      	nop
    return DeserializationError::Ok;
 800f8be:	2300      	movs	r3, #0
  }
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>:
  DeserializationError::Code skipKeyword(const char* s) {
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f8d2:	e016      	b.n	800f902 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x3a>
      char c = current();
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff fd41 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 800f8de:	7bfb      	ldrb	r3, [r7, #15]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d101      	bne.n	800f8e8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x20>
        return DeserializationError::IncompleteInput;
 800f8e4:	2302      	movs	r3, #2
 800f8e6:	e011      	b.n	800f90c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      if (*s != c)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	7bfa      	ldrb	r2, [r7, #15]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d001      	beq.n	800f8f6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x2e>
        return DeserializationError::InvalidInput;
 800f8f2:	2303      	movs	r3, #3
 800f8f4:	e00a      	b.n	800f90c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      ++s;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	603b      	str	r3, [r7, #0]
      move();
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 fa8f 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    while (*s) {
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e4      	bne.n	800f8d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0xc>
    return DeserializationError::Ok;
 800f90a:	2300      	movs	r3, #0
  }
 800f90c:	4618      	mov	r0, r3
 800f90e:	3710      	adds	r7, #16
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 800f91e:	2300      	movs	r3, #0
 800f920:	73fb      	strb	r3, [r7, #15]
    char c = current();
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7ff fd1a 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f928:	4603      	mov	r3, r0
 800f92a:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 800f92c:	e010      	b.n	800f950 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x3c>
      move();
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 fa76 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      buffer_[n++] = c;
 800f934:	7bfb      	ldrb	r3, [r7, #15]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	73fa      	strb	r2, [r7, #15]
 800f93a:	461a      	mov	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4413      	add	r3, r2
 800f940:	7bba      	ldrb	r2, [r7, #14]
 800f942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      c = current();
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7ff fd08 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 800f950:	7bbb      	ldrb	r3, [r7, #14]
 800f952:	4618      	mov	r0, r3
 800f954:	f000 fc10 	bl	8010178 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d004      	beq.n	800f968 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	2b3e      	cmp	r3, #62	; 0x3e
 800f962:	d801      	bhi.n	800f968 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 800f964:	2301      	movs	r3, #1
 800f966:	e000      	b.n	800f96a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x56>
 800f968:	2300      	movs	r3, #0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d1df      	bne.n	800f92e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	4413      	add	r3, r2
 800f974:	2200      	movs	r2, #0
 800f976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (!parseNumber(buffer_, result))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	3324      	adds	r3, #36	; 0x24
 800f97e:	6839      	ldr	r1, [r7, #0]
 800f980:	4618      	mov	r0, r3
 800f982:	f7fc fce5 	bl	800c350 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE>
 800f986:	4603      	mov	r3, r0
 800f988:	f083 0301 	eor.w	r3, r3, #1
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x82>
      return DeserializationError::InvalidInput;
 800f992:	2303      	movs	r3, #3
 800f994:	e000      	b.n	800f998 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x84>
    return DeserializationError::Ok;
 800f996:	2300      	movs	r3, #0
  }
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
    char c = current();
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff fcd7 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800f9b2:	e007      	b.n	800f9c4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x24>
      move();
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fa33 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff fcce 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800f9c4:	7bfb      	ldrb	r3, [r7, #15]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fbd6 	bl	8010178 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1f0      	bne.n	800f9b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 800f9d2:	2300      	movs	r3, #0
  }
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>:
  void operator()(TStoredString s) {
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!s)
 800f9ea:	463b      	mov	r3, r7
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fb ffe3 	bl	800b9b8 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	f083 0301 	eor.w	r3, r3, #1
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x30>
    instance_->setKey(s);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6818      	ldr	r0, [r3, #0]
 800fa02:	463b      	mov	r3, r7
 800fa04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fa06:	f7fc f856 	bl	800bab6 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
 800fa0a:	e000      	b.n	800fa0e <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x32>
      return;
 800fa0c:	bf00      	nop
  }
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 800fa14:	b590      	push	{r4, r7, lr}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	461c      	mov	r4, r3
 800fa22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa2a:	f7f0 ff75 	bl	8000918 <__aeabi_dcmpeq>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_+0x24>
 800fa34:	2300      	movs	r3, #0
 800fa36:	461c      	mov	r4, r3
 800fa38:	b2e3      	uxtb	r3, r4
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd90      	pop	{r4, r7, pc}

0800fa42 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b082      	sub	sp, #8
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 800fa4c:	f04f 0200 	mov.w	r2, #0
 800fa50:	f04f 0300 	mov.w	r3, #0
 800fa54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa58:	f7f0 ff5e 	bl	8000918 <__aeabi_dcmpeq>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d110      	bne.n	800fa84 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 800fa62:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	f7f0 fd49 	bl	8000500 <__adddf3>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	460b      	mov	r3, r1
 800fa72:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa76:	f7f0 ff4f 	bl	8000918 <__aeabi_dcmpeq>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d001      	beq.n	800fa84 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 800fa80:	2301      	movs	r3, #1
 800fa82:	e000      	b.n	800fa86 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x44>
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 800fa90:	b5b0      	push	{r4, r5, r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	ed87 0b00 	vstr	d0, [r7]
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 800fa9c:	4b61      	ldr	r3, [pc, #388]	; (800fc24 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x194>)
 800fa9e:	61fb      	str	r3, [r7, #28]
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2209      	movs	r2, #9
 800faa4:	729a      	strb	r2, [r3, #10]

    exponent = normalize(value);
 800faa6:	463b      	mov	r3, r7
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 fb89 	bl	80101c0 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>
 800faae:	4603      	mov	r3, r0
 800fab0:	461a      	mov	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	811a      	strh	r2, [r3, #8]

    integral = uint32_t(value);
 800fab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800faba:	4610      	mov	r0, r2
 800fabc:	4619      	mov	r1, r3
 800fabe:	f7f0 ff5d 	bl	800097c <__aeabi_d2uiz>
 800fac2:	4602      	mov	r2, r0
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	601a      	str	r2, [r3, #0]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	61bb      	str	r3, [r7, #24]
 800face:	e014      	b.n	800fafa <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x6a>
      maxDecimalPart /= 10;
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	4a55      	ldr	r2, [pc, #340]	; (800fc28 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800fad4:	fba2 2303 	umull	r2, r3, r2, r3
 800fad8:	08db      	lsrs	r3, r3, #3
 800fada:	61fb      	str	r3, [r7, #28]
      decimalPlaces--;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	3b01      	subs	r3, #1
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	b25a      	sxtb	r2, r3
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	729a      	strb	r2, [r3, #10]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	4a4d      	ldr	r2, [pc, #308]	; (800fc28 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800faf2:	fba2 2303 	umull	r2, r3, r2, r3
 800faf6:	08db      	lsrs	r3, r3, #3
 800faf8:	61bb      	str	r3, [r7, #24]
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	2b09      	cmp	r3, #9
 800fafe:	d8e7      	bhi.n	800fad0 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x40>
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 800fb00:	e9d7 4500 	ldrd	r4, r5, [r7]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7f0 fe35 	bl	8000778 <__aeabi_ui2d>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	460b      	mov	r3, r1
 800fb12:	4620      	mov	r0, r4
 800fb14:	4629      	mov	r1, r5
 800fb16:	f7f0 fcf1 	bl	80004fc <__aeabi_dsub>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	4614      	mov	r4, r2
 800fb20:	461d      	mov	r5, r3
 800fb22:	69f8      	ldr	r0, [r7, #28]
 800fb24:	f7f0 fe28 	bl	8000778 <__aeabi_ui2d>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	4629      	mov	r1, r5
 800fb30:	f7f0 fbb6 	bl	80002a0 <__aeabi_dmul>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	e9c7 2304 	strd	r2, r3, [r7, #16]

    decimal = uint32_t(remainder);
 800fb3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fb40:	f7f0 ff1c 	bl	800097c <__aeabi_d2uiz>
 800fb44:	4602      	mov	r2, r0
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	605a      	str	r2, [r3, #4]
    remainder = remainder - TFloat(decimal);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7f0 fe12 	bl	8000778 <__aeabi_ui2d>
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fb5c:	f7f0 fcce 	bl	80004fc <__aeabi_dsub>
 800fb60:	4602      	mov	r2, r0
 800fb62:	460b      	mov	r3, r1
 800fb64:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	685c      	ldr	r4, [r3, #4]
 800fb6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fb70:	4602      	mov	r2, r0
 800fb72:	460b      	mov	r3, r1
 800fb74:	f7f0 fcc4 	bl	8000500 <__adddf3>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	4610      	mov	r0, r2
 800fb7e:	4619      	mov	r1, r3
 800fb80:	f7f0 fefc 	bl	800097c <__aeabi_d2uiz>
 800fb84:	4603      	mov	r3, r0
 800fb86:	18e2      	adds	r2, r4, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	605a      	str	r2, [r3, #4]
    if (decimal >= maxDecimalPart) {
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	69fa      	ldr	r2, [r7, #28]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d82e      	bhi.n	800fbf4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
      decimal = 0;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	605a      	str	r2, [r3, #4]
      integral++;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	601a      	str	r2, [r3, #0]
      if (exponent && integral >= 10) {
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d021      	beq.n	800fbf4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b09      	cmp	r3, #9
 800fbb6:	d91d      	bls.n	800fbf4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
        exponent++;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	b21a      	sxth	r2, r3
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	811a      	strh	r2, [r3, #8]
        integral = 1;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	601a      	str	r2, [r3, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800fbd0:	e010      	b.n	800fbf4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
      decimal /= 10;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	4a14      	ldr	r2, [pc, #80]	; (800fc28 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800fbd8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbdc:	08da      	lsrs	r2, r3, #3
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	605a      	str	r2, [r3, #4]
      decimalPlaces--;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	3b01      	subs	r3, #1
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	b25a      	sxtb	r2, r3
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	729a      	strb	r2, [r3, #10]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6859      	ldr	r1, [r3, #4]
 800fbf8:	4b0b      	ldr	r3, [pc, #44]	; (800fc28 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800fbfa:	fba3 2301 	umull	r2, r3, r3, r1
 800fbfe:	08da      	lsrs	r2, r3, #3
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	005b      	lsls	r3, r3, #1
 800fc08:	1aca      	subs	r2, r1, r3
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	d104      	bne.n	800fc18 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	dcdc      	bgt.n	800fbd2 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x142>
    }
  }
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3720      	adds	r7, #32
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bdb0      	pop	{r4, r5, r7, pc}
 800fc22:	bf00      	nop
 800fc24:	3b9aca00 	.word	0x3b9aca00
 800fc28:	cccccccd 	.word	0xcccccccd

0800fc2c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	6812      	ldr	r2, [r2, #0]
 800fc3c:	601a      	str	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	605a      	str	r2, [r3, #4]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4618      	mov	r0, r3
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>:
  size_t visitFloat(JsonFloat value) {
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b084      	sub	sp, #16
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	60f8      	str	r0, [r7, #12]
 800fc5a:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	ed97 0b00 	vldr	d0, [r7]
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 fb89 	bl	801037c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f000 f8bb 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fc70:	4603      	mov	r3, r0
  }
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>:
  size_t visitObject(const CollectionData& object) {
 800fc7a:	b590      	push	{r4, r7, lr}
 800fc7c:	b085      	sub	sp, #20
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
 800fc82:	6039      	str	r1, [r7, #0]
    write('{');
 800fc84:	217b      	movs	r1, #123	; 0x7b
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fbd6 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = object.head();
 800fc8c:	6838      	ldr	r0, [r7, #0]
 800fc8e:	f7fb fea4 	bl	800b9da <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 800fc92:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 800fc94:	e01f      	b.n	800fcd6 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x5c>
      formatter_.writeString(slot->key());
 800fc96:	687c      	ldr	r4, [r7, #4]
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f7fb ff34 	bl	800bb06 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	4619      	mov	r1, r3
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 fbd8 	bl	8010458 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>
      write(':');
 800fca8:	213a      	movs	r1, #58	; 0x3a
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 fbc4 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      slot->data()->accept(*this);
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f7fb fea9 	bl	800ba08 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	6879      	ldr	r1, [r7, #4]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff f910 	bl	800eee0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f7fb fec3 	bl	800ba4c <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800fcc6:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d007      	beq.n	800fcde <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x64>
      write(',');
 800fcce:	212c      	movs	r1, #44	; 0x2c
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fbb1 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1dc      	bne.n	800fc96 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x1c>
 800fcdc:	e000      	b.n	800fce0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x66>
        break;
 800fcde:	bf00      	nop
    write('}');
 800fce0:	217d      	movs	r1, #125	; 0x7d
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fba8 	bl	8010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 f87c 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fcee:	4603      	mov	r3, r0
  }
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3714      	adds	r7, #20
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd90      	pop	{r4, r7, pc}

0800fcf8 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>:
  size_t visitString(const char* value, size_t n) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
    formatter_.writeString(value, n);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f000 fbc2 	bl	8010494 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 f868 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fd16:	4603      	mov	r3, r0
  }
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3710      	adds	r7, #16
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>:
  size_t visitRawJson(const char* data, size_t n) {
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	60b9      	str	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
    formatter_.writeRaw(data, n);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	68b9      	ldr	r1, [r7, #8]
 800fd32:	4618      	mov	r0, r3
 800fd34:	f000 fbd3 	bl	80104de <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 f854 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fd3e:	4603      	mov	r3, r0
  }
 800fd40:	4618      	mov	r0, r3
 800fd42:	3710      	adds	r7, #16
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>:
  size_t visitSignedInteger(JsonInteger value) {
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800fd54:	68f9      	ldr	r1, [r7, #12]
 800fd56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd5a:	4608      	mov	r0, r1
 800fd5c:	f000 fbcf 	bl	80104fe <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	f000 f840 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fd66:	4603      	mov	r3, r0
  }
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>:
  size_t visitUnsignedInteger(JsonUInt value) {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800fd7c:	68f9      	ldr	r1, [r7, #12]
 800fd7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd82:	4608      	mov	r0, r1
 800fd84:	f000 fbdf 	bl	8010546 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f000 f82c 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fd8e:	4603      	mov	r3, r0
  }
 800fd90:	4618      	mov	r0, r3
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>:
  size_t visitBoolean(bool value) {
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	78fa      	ldrb	r2, [r7, #3]
 800fda8:	4611      	mov	r1, r2
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fc00 	bl	80105b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 f818 	bl	800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fdb6:	4603      	mov	r3, r0
  }
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 800fdc0:	b590      	push	{r4, r7, lr}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 800fdca:	687c      	ldr	r4, [r7, #4]
 800fdcc:	6838      	ldr	r0, [r7, #0]
 800fdce:	f7f0 fa5f 	bl	8000290 <strlen>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	6839      	ldr	r1, [r7, #0]
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f000 fc03 	bl	80105e4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800fdde:	bf00      	nop
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd90      	pop	{r4, r7, pc}

0800fde6 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f000 fc0d 	bl	8010610 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800fdf6:	4603      	mov	r3, r0
  }
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
 800fe08:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>:
  void move() {
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b082      	sub	sp, #8
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
    latch_.clear();
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	3314      	adds	r3, #20
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f000 fc13 	bl	8010658 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>
  }
 800fe32:	bf00      	nop
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>:
  bool eat(char charToSkip) {
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b082      	sub	sp, #8
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	460b      	mov	r3, r1
 800fe44:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7ff fa88 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	461a      	mov	r2, r3
 800fe50:	78fb      	ldrb	r3, [r7, #3]
 800fe52:	4293      	cmp	r3, r2
 800fe54:	bf14      	ite	ne
 800fe56:	2301      	movne	r3, #1
 800fe58:	2300      	moveq	r3, #0
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x2a>
      return false;
 800fe60:	2300      	movs	r3, #0
 800fe62:	e003      	b.n	800fe6c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x32>
    move();
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff ffdb 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    return true;
 800fe6a:	2301      	movs	r3, #1
  }
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 800fe7e:	bf00      	nop
  }
 800fe80:	4618      	mov	r0, r3
 800fe82:	370c      	adds	r7, #12
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr

0800fe8c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f7ff fa2a 	bl	800f2f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	73fb      	strb	r3, [r7, #15]
    if (err)
 800fea0:	7bfb      	ldrb	r3, [r7, #15]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d001      	beq.n	800feaa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 800fea6:	7bfb      	ldrb	r3, [r7, #15]
 800fea8:	e07c      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f7ff fa56 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b7b      	cmp	r3, #123	; 0x7b
 800feb4:	dc71      	bgt.n	800ff9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800feb6:	2b5b      	cmp	r3, #91	; 0x5b
 800feb8:	da04      	bge.n	800fec4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 800feba:	2b22      	cmp	r3, #34	; 0x22
 800febc:	d056      	beq.n	800ff6c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800febe:	2b27      	cmp	r3, #39	; 0x27
 800fec0:	d054      	beq.n	800ff6c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800fec2:	e06a      	b.n	800ff9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800fec4:	3b5b      	subs	r3, #91	; 0x5b
 800fec6:	2b20      	cmp	r3, #32
 800fec8:	d867      	bhi.n	800ff9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800feca:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800ff55 	.word	0x0800ff55
 800fed4:	0800ff9b 	.word	0x0800ff9b
 800fed8:	0800ff9b 	.word	0x0800ff9b
 800fedc:	0800ff9b 	.word	0x0800ff9b
 800fee0:	0800ff9b 	.word	0x0800ff9b
 800fee4:	0800ff9b 	.word	0x0800ff9b
 800fee8:	0800ff9b 	.word	0x0800ff9b
 800feec:	0800ff9b 	.word	0x0800ff9b
 800fef0:	0800ff9b 	.word	0x0800ff9b
 800fef4:	0800ff9b 	.word	0x0800ff9b
 800fef8:	0800ff9b 	.word	0x0800ff9b
 800fefc:	0800ff83 	.word	0x0800ff83
 800ff00:	0800ff9b 	.word	0x0800ff9b
 800ff04:	0800ff9b 	.word	0x0800ff9b
 800ff08:	0800ff9b 	.word	0x0800ff9b
 800ff0c:	0800ff9b 	.word	0x0800ff9b
 800ff10:	0800ff9b 	.word	0x0800ff9b
 800ff14:	0800ff9b 	.word	0x0800ff9b
 800ff18:	0800ff9b 	.word	0x0800ff9b
 800ff1c:	0800ff8f 	.word	0x0800ff8f
 800ff20:	0800ff9b 	.word	0x0800ff9b
 800ff24:	0800ff9b 	.word	0x0800ff9b
 800ff28:	0800ff9b 	.word	0x0800ff9b
 800ff2c:	0800ff9b 	.word	0x0800ff9b
 800ff30:	0800ff9b 	.word	0x0800ff9b
 800ff34:	0800ff77 	.word	0x0800ff77
 800ff38:	0800ff9b 	.word	0x0800ff9b
 800ff3c:	0800ff9b 	.word	0x0800ff9b
 800ff40:	0800ff9b 	.word	0x0800ff9b
 800ff44:	0800ff9b 	.word	0x0800ff9b
 800ff48:	0800ff9b 	.word	0x0800ff9b
 800ff4c:	0800ff9b 	.word	0x0800ff9b
 800ff50:	0800ff61 	.word	0x0800ff61
        return skipArray(nestingLimit);
 800ff54:	7839      	ldrb	r1, [r7, #0]
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7ff fa9d 	bl	800f496 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	e021      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 800ff60:	7839      	ldrb	r1, [r7, #0]
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7ff fbd6 	bl	800f714 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	e01b      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff fc76 	bl	800f85e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800ff72:	4603      	mov	r3, r0
 800ff74:	e016      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 800ff76:	490d      	ldr	r1, [pc, #52]	; (800ffac <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff fca5 	bl	800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	e010      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 800ff82:	490b      	ldr	r1, [pc, #44]	; (800ffb0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f7ff fc9f 	bl	800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	e00a      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 800ff8e:	4909      	ldr	r1, [pc, #36]	; (800ffb4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7ff fc99 	bl	800f8c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800ff96:	4603      	mov	r3, r0
 800ff98:	e004      	b.n	800ffa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff fd00 	bl	800f9a0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	bf00      	nop
  }
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	080146b8 	.word	0x080146b8
 800ffb0:	080146c0 	.word	0x080146c0
 800ffb4:	080146c8 	.word	0x080146c8

0800ffb8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    stringStorage_.startString();
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fc fc90 	bl	800c8e8 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>
    if (isQuote(current())) {
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff f9c7 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 fb64 	bl	801069e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d004      	beq.n	800ffe6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 f84a 	bl	8010076 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	e004      	b.n	800fff0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 fb6d 	bl	80106c6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>
 800ffec:	4603      	mov	r3, r0
 800ffee:	bf00      	nop
  }
 800fff0:	4618      	mov	r0, r3
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixIPKcEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8010002:	bf00      	nop
  }
 8010004:	4618      	mov	r0, r3
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>:
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 801001a:	6839      	ldr	r1, [r7, #0]
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fb8b 	bl	8010738 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 8010022:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d004      	beq.n	8010034 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x24>
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7fb fce1 	bl	800b9f2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8010030:	4603      	mov	r3, r0
 8010032:	e000      	b.n	8010036 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x26>
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 801003e:	b580      	push	{r7, lr}
 8010040:	b082      	sub	sp, #8
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff f988 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 801004c:	4603      	mov	r3, r0
 801004e:	4618      	mov	r0, r3
 8010050:	f000 fb25 	bl	801069e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d004      	beq.n	8010064 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x26>
      return skipQuotedString();
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff fbff 	bl	800f85e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 8010060:	4603      	mov	r3, r0
 8010062:	e004      	b.n	801006e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f000 fb96 	bl	8010796 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>
 801006a:	4603      	mov	r3, r0
 801006c:	bf00      	nop
  }
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8010076:	b580      	push	{r7, lr}
 8010078:	b086      	sub	sp, #24
 801007a:	af00      	add	r7, sp, #0
 801007c:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 801007e:	f107 030c 	add.w	r3, r7, #12
 8010082:	4618      	mov	r0, r3
 8010084:	f7fc fcdb 	bl	800ca3e <_ZN11ArduinoJson8V6213HB26detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff f967 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 801008e:	4603      	mov	r3, r0
 8010090:	75bb      	strb	r3, [r7, #22]
    move();
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f7ff fec4 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7ff f95f 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 801009e:	4603      	mov	r3, r0
 80100a0:	75fb      	strb	r3, [r7, #23]
      move();
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7ff febc 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 80100a8:	7dfa      	ldrb	r2, [r7, #23]
 80100aa:	7dbb      	ldrb	r3, [r7, #22]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d051      	beq.n	8010154 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 80100b0:	7dfb      	ldrb	r3, [r7, #23]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d101      	bne.n	80100ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 80100b6:	2302      	movs	r3, #2
 80100b8:	e05a      	b.n	8010170 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	2b5c      	cmp	r3, #92	; 0x5c
 80100be:	d140      	bne.n	8010142 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xcc>
        c = current();
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff f94b 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80100c6:	4603      	mov	r3, r0
 80100c8:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d101      	bne.n	80100d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 80100d0:	2302      	movs	r3, #2
 80100d2:	e04d      	b.n	8010170 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
 80100d6:	2b75      	cmp	r3, #117	; 0x75
 80100d8:	d125      	bne.n	8010126 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xb0>
          move();
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f7ff fea0 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          err = parseHex4(codeunit);
 80100e0:	f107 030a 	add.w	r3, r7, #10
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 fb73 	bl	80107d2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>
 80100ec:	4603      	mov	r3, r0
 80100ee:	757b      	strb	r3, [r7, #21]
          if (err)
 80100f0:	7d7b      	ldrb	r3, [r7, #21]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x84>
            return err;
 80100f6:	7d7b      	ldrb	r3, [r7, #21]
 80100f8:	e03a      	b.n	8010170 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 80100fa:	897a      	ldrh	r2, [r7, #10]
 80100fc:	f107 030c 	add.w	r3, r7, #12
 8010100:	4611      	mov	r1, r2
 8010102:	4618      	mov	r0, r3
 8010104:	f7fc fcac 	bl	800ca60 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d020      	beq.n	8010150 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringStorage_);
 801010e:	f107 030c 	add.w	r3, r7, #12
 8010112:	4618      	mov	r0, r3
 8010114:	f7fc fcd6 	bl	800cac4 <_ZNK11ArduinoJson8V6213HB26detail5Utf169Codepoint5valueEv>
 8010118:	4602      	mov	r2, r0
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4619      	mov	r1, r3
 801011e:	4610      	mov	r0, r2
 8010120:	f000 fb90 	bl	8010844 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>
 8010124:	e7b8      	b.n	8010098 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	4618      	mov	r0, r3
 801012a:	f7fc f88e 	bl	800c24a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc>
 801012e:	4603      	mov	r3, r0
 8010130:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8010132:	7dfb      	ldrb	r3, [r7, #23]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d101      	bne.n	801013c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8010138:	2303      	movs	r3, #3
 801013a:	e019      	b.n	8010170 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        move();
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7ff fe6f 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      stringStorage_.append(c);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	7dfa      	ldrb	r2, [r7, #23]
 8010146:	4611      	mov	r1, r2
 8010148:	4618      	mov	r0, r3
 801014a:	f7fc fc02 	bl	800c952 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
 801014e:	e7a3      	b.n	8010098 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
          continue;
 8010150:	bf00      	nop
    for (;;) {
 8010152:	e7a1      	b.n	8010098 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        break;
 8010154:	bf00      	nop
    if (!stringStorage_.isValid())
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	f7fc fc1b 	bl	800c994 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>
 801015e:	4603      	mov	r3, r0
 8010160:	f083 0301 	eor.w	r3, r3, #1
 8010164:	b2db      	uxtb	r3, r3
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 801016a:	2304      	movs	r3, #4
 801016c:	e000      	b.n	8010170 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 801016e:	2300      	movs	r3, #0
  }
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	2239      	movs	r2, #57	; 0x39
 8010186:	2130      	movs	r1, #48	; 0x30
 8010188:	4618      	mov	r0, r3
 801018a:	f000 fbd9 	bl	8010940 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 801018e:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10e      	bne.n	80101b2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8010194:	79fb      	ldrb	r3, [r7, #7]
 8010196:	2b2b      	cmp	r3, #43	; 0x2b
 8010198:	d00b      	beq.n	80101b2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 801019a:	79fb      	ldrb	r3, [r7, #7]
 801019c:	2b2d      	cmp	r3, #45	; 0x2d
 801019e:	d008      	beq.n	80101b2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	2b2e      	cmp	r3, #46	; 0x2e
 80101a4:	d005      	beq.n	80101b2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 80101a6:	79fb      	ldrb	r3, [r7, #7]
 80101a8:	2b65      	cmp	r3, #101	; 0x65
 80101aa:	d002      	beq.n	80101b2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 80101ac:	79fb      	ldrb	r3, [r7, #7]
 80101ae:	2b45      	cmp	r3, #69	; 0x45
 80101b0:	d101      	bne.n	80101b6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3e>
 80101b2:	2301      	movs	r3, #1
 80101b4:	e000      	b.n	80101b8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x40>
 80101b6:	2300      	movs	r3, #0
  }
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>:

  static int16_t normalize(TFloat& value) {
 80101c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101c2:	b089      	sub	sp, #36	; 0x24
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 80101c8:	2300      	movs	r3, #0
 80101ca:	83fb      	strh	r3, [r7, #30]

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 80101cc:	2308      	movs	r3, #8
 80101ce:	777b      	strb	r3, [r7, #29]
    int bit = 1 << index;
 80101d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80101d4:	2201      	movs	r2, #1
 80101d6:	fa02 f303 	lsl.w	r3, r2, r3
 80101da:	61bb      	str	r3, [r7, #24]

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101e2:	a362      	add	r3, pc, #392	; (adr r3, 801036c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1ac>)
 80101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e8:	f7f0 fbb4 	bl	8000954 <__aeabi_dcmpge>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d04a      	beq.n	8010288 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
      for (; index >= 0; index--) {
 80101f2:	e045      	b.n	8010280 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc0>
        if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80101fa:	f7fe f98d 	bl	800e518 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80101fe:	4603      	mov	r3, r0
 8010200:	60bb      	str	r3, [r7, #8]
 8010202:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010206:	f107 0308 	add.w	r3, r7, #8
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe f9a3 	bl	800e558 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 8010212:	ec53 2b10 	vmov	r2, r3, d0
 8010216:	2101      	movs	r1, #1
 8010218:	460e      	mov	r6, r1
 801021a:	4620      	mov	r0, r4
 801021c:	4629      	mov	r1, r5
 801021e:	f7f0 fb99 	bl	8000954 <__aeabi_dcmpge>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x6c>
 8010228:	2300      	movs	r3, #0
 801022a:	461e      	mov	r6, r3
 801022c:	b2f3      	uxtb	r3, r6
 801022e:	2b00      	cmp	r3, #0
 8010230:	d01d      	beq.n	801026e <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xae>
          value *= traits::negativeBinaryPowersOfTen()[index];
 8010232:	f7fe f981 	bl	800e538 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8010236:	4603      	mov	r3, r0
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801023e:	f107 030c 	add.w	r3, r7, #12
 8010242:	4611      	mov	r1, r2
 8010244:	4618      	mov	r0, r3
 8010246:	f7fe f987 	bl	800e558 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 801024a:	ec51 0b10 	vmov	r0, r1, d0
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010254:	f7f0 f824 	bl	80002a0 <__aeabi_dmul>
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	6879      	ldr	r1, [r7, #4]
 801025e:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 + bit);
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	b29a      	uxth	r2, r3
 8010266:	8bfb      	ldrh	r3, [r7, #30]
 8010268:	4413      	add	r3, r2
 801026a:	b29b      	uxth	r3, r3
 801026c:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	105b      	asrs	r3, r3, #1
 8010272:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 8010274:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010278:	b2db      	uxtb	r3, r3
 801027a:	3b01      	subs	r3, #1
 801027c:	b2db      	uxtb	r3, r3
 801027e:	777b      	strb	r3, [r7, #29]
 8010280:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010284:	2b00      	cmp	r3, #0
 8010286:	dab5      	bge.n	80101f4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x34>
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801028e:	f04f 0200 	mov.w	r2, #0
 8010292:	f04f 0300 	mov.w	r3, #0
 8010296:	f7f0 fb67 	bl	8000968 <__aeabi_dcmpgt>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d05c      	beq.n	801035a <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80102a6:	a333      	add	r3, pc, #204	; (adr r3, 8010374 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1b4>)
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	f7f0 fb48 	bl	8000940 <__aeabi_dcmple>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d051      	beq.n	801035a <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
      for (; index >= 0; index--) {
 80102b6:	e04c      	b.n	8010352 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x192>
        if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80102be:	f7fe f93b 	bl	800e538 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80102c2:	4603      	mov	r3, r0
 80102c4:	613b      	str	r3, [r7, #16]
 80102c6:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80102ca:	f107 0310 	add.w	r3, r7, #16
 80102ce:	4611      	mov	r1, r2
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fe f941 	bl	800e558 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 80102d6:	ec51 0b10 	vmov	r0, r1, d0
 80102da:	f04f 0200 	mov.w	r2, #0
 80102de:	4b22      	ldr	r3, [pc, #136]	; (8010368 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1a8>)
 80102e0:	f7ef ffde 	bl	80002a0 <__aeabi_dmul>
 80102e4:	4602      	mov	r2, r0
 80102e6:	460b      	mov	r3, r1
 80102e8:	2101      	movs	r1, #1
 80102ea:	460e      	mov	r6, r1
 80102ec:	4620      	mov	r0, r4
 80102ee:	4629      	mov	r1, r5
 80102f0:	f7f0 fb1c 	bl	800092c <__aeabi_dcmplt>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d101      	bne.n	80102fe <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x13e>
 80102fa:	2300      	movs	r3, #0
 80102fc:	461e      	mov	r6, r3
 80102fe:	b2f3      	uxtb	r3, r6
 8010300:	2b00      	cmp	r3, #0
 8010302:	d01d      	beq.n	8010340 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x180>
          value *= traits::positiveBinaryPowersOfTen()[index];
 8010304:	f7fe f908 	bl	800e518 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8010308:	4603      	mov	r3, r0
 801030a:	617b      	str	r3, [r7, #20]
 801030c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010310:	f107 0314 	add.w	r3, r7, #20
 8010314:	4611      	mov	r1, r2
 8010316:	4618      	mov	r0, r3
 8010318:	f7fe f91e 	bl	800e558 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 801031c:	ec51 0b10 	vmov	r0, r1, d0
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010326:	f7ef ffbb 	bl	80002a0 <__aeabi_dmul>
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	6879      	ldr	r1, [r7, #4]
 8010330:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 - bit);
 8010334:	8bfa      	ldrh	r2, [r7, #30]
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	b29b      	uxth	r3, r3
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	b29b      	uxth	r3, r3
 801033e:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	105b      	asrs	r3, r3, #1
 8010344:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 8010346:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801034a:	b2db      	uxtb	r3, r3
 801034c:	3b01      	subs	r3, #1
 801034e:	b2db      	uxtb	r3, r3
 8010350:	777b      	strb	r3, [r7, #29]
 8010352:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010356:	2b00      	cmp	r3, #0
 8010358:	daae      	bge.n	80102b8 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xf8>
      }
    }

    return powersOf10;
 801035a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  }
 801035e:	4618      	mov	r0, r3
 8010360:	3724      	adds	r7, #36	; 0x24
 8010362:	46bd      	mov	sp, r7
 8010364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010366:	bf00      	nop
 8010368:	40240000 	.word	0x40240000
 801036c:	00000000 	.word	0x00000000
 8010370:	416312d0 	.word	0x416312d0
 8010374:	88e368f1 	.word	0x88e368f1
 8010378:	3ee4f8b5 	.word	0x3ee4f8b5

0801037c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 801037c:	b5b0      	push	{r4, r5, r7, lr}
 801037e:	b088      	sub	sp, #32
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	ed87 0b00 	vstr	d0, [r7]
    if (isnan(value))
 8010388:	ed97 0b00 	vldr	d0, [r7]
 801038c:	f7ff fb42 	bl	800fa14 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d004      	beq.n	80103a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x24>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8010396:	4927      	ldr	r1, [pc, #156]	; (8010434 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 8010398:	68f8      	ldr	r0, [r7, #12]
 801039a:	f7ff fd11 	bl	800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 801039e:	e045      	b.n	801042c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (isinf(value))
 80103a0:	ed97 0b00 	vldr	d0, [r7]
 80103a4:	f7ff fb4d 	bl	800fa42 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d004      	beq.n	80103b8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x3c>
      return writeRaw("null");
 80103ae:	4921      	ldr	r1, [pc, #132]	; (8010434 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f7ff fd05 	bl	800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 80103b6:	e039      	b.n	801042c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (value < 0.0) {
 80103b8:	f04f 0200 	mov.w	r2, #0
 80103bc:	f04f 0300 	mov.w	r3, #0
 80103c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80103c4:	f7f0 fab2 	bl	800092c <__aeabi_dcmplt>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d009      	beq.n	80103e2 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x66>
      writeRaw('-');
 80103ce:	212d      	movs	r1, #45	; 0x2d
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f000 facf 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 80103d6:	683c      	ldr	r4, [r7, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80103de:	e9c7 4500 	strd	r4, r5, [r7]
    FloatParts<T> parts(value);
 80103e2:	f107 0314 	add.w	r3, r7, #20
 80103e6:	ed97 0b00 	vldr	d0, [r7]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff fb50 	bl	800fa90 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>
    writeInteger(parts.integral);
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	4619      	mov	r1, r3
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f000 facd 	bl	8010994 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 80103fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d006      	beq.n	8010410 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x94>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8010408:	4619      	mov	r1, r3
 801040a:	68f8      	ldr	r0, [r7, #12]
 801040c:	f000 faf4 	bl	80109f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 8010410:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d009      	beq.n	801042c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
      writeRaw('e');
 8010418:	2165      	movs	r1, #101	; 0x65
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f000 faaa 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 8010420:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010424:	4619      	mov	r1, r3
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f000 fb2a 	bl	8010a80 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 801042c:	3720      	adds	r7, #32
 801042e:	46bd      	mov	sp, r7
 8010430:	bdb0      	pop	{r4, r5, r7, pc}
 8010432:	bf00      	nop
 8010434:	080146c8 	.word	0x080146c8

08010438 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	460b      	mov	r3, r1
 8010442:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	78fa      	ldrb	r2, [r7, #3]
 8010448:	4611      	mov	r1, r2
 801044a:	4618      	mov	r0, r3
 801044c:	f000 fa92 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8010450:	bf00      	nop
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>:
  void writeString(const char* value) {
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
    writeRaw('\"');
 8010462:	2122      	movs	r1, #34	; 0x22
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fa85 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (*value)
 801046a:	e007      	b.n	801047c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x24>
      writeChar(*value++);
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	1c5a      	adds	r2, r3, #1
 8010470:	603a      	str	r2, [r7, #0]
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	4619      	mov	r1, r3
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fb20 	bl	8010abc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (*value)
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d1f3      	bne.n	801046c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x14>
    writeRaw('\"');
 8010484:	2122      	movs	r1, #34	; 0x22
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 fa74 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 80104a0:	2122      	movs	r1, #34	; 0x22
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f000 fa66 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 80104a8:	e007      	b.n	80104ba <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	1c5a      	adds	r2, r3, #1
 80104ae:	60ba      	str	r2, [r7, #8]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	4619      	mov	r1, r3
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 fb01 	bl	8010abc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	1e5a      	subs	r2, r3, #1
 80104be:	607a      	str	r2, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	bf14      	ite	ne
 80104c4:	2301      	movne	r3, #1
 80104c6:	2300      	moveq	r3, #0
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d1ed      	bne.n	80104aa <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 80104ce:	2122      	movs	r1, #34	; 0x22
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f000 fa4f 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80104d6:	bf00      	nop
 80104d8:	3710      	adds	r7, #16
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}

080104de <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 80104de:	b580      	push	{r7, lr}
 80104e0:	b084      	sub	sp, #16
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	60f8      	str	r0, [r7, #12]
 80104e6:	60b9      	str	r1, [r7, #8]
 80104e8:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	68b9      	ldr	r1, [r7, #8]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f000 f877 	bl	80105e4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80104f6:	bf00      	nop
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 80104fe:	b5b0      	push	{r4, r5, r7, lr}
 8010500:	b086      	sub	sp, #24
 8010502:	af00      	add	r7, sp, #0
 8010504:	60f8      	str	r0, [r7, #12]
 8010506:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 801050a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801050e:	2b00      	cmp	r3, #0
 8010510:	da0c      	bge.n	801052c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 8010512:	212d      	movs	r1, #45	; 0x2d
 8010514:	68f8      	ldr	r0, [r7, #12]
 8010516:	f000 fa2d 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 801051a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801051e:	2100      	movs	r1, #0
 8010520:	4254      	negs	r4, r2
 8010522:	eb61 0503 	sbc.w	r5, r1, r3
 8010526:	e9c7 4504 	strd	r4, r5, [r7, #16]
 801052a:	e003      	b.n	8010534 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 801052c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 8010534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f000 f804 	bl	8010546 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 801053e:	bf00      	nop
 8010540:	3718      	adds	r7, #24
 8010542:	46bd      	mov	sp, r7
 8010544:	bdb0      	pop	{r4, r5, r7, pc}

08010546 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8010546:	b580      	push	{r7, lr}
 8010548:	b08c      	sub	sp, #48	; 0x30
 801054a:	af00      	add	r7, sp, #0
 801054c:	60f8      	str	r0, [r7, #12]
 801054e:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 8010552:	f107 0310 	add.w	r3, r7, #16
 8010556:	3316      	adds	r3, #22
 8010558:	62bb      	str	r3, [r7, #40]	; 0x28
    char* begin = end;
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	62fb      	str	r3, [r7, #44]	; 0x2c
      *--begin = char(value % 10 + '0');
 801055e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010562:	f04f 020a 	mov.w	r2, #10
 8010566:	f04f 0300 	mov.w	r3, #0
 801056a:	f7f0 fa27 	bl	80009bc <__aeabi_uldivmod>
 801056e:	b2d3      	uxtb	r3, r2
 8010570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010572:	3a01      	subs	r2, #1
 8010574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010576:	3330      	adds	r3, #48	; 0x30
 8010578:	b2da      	uxtb	r2, r3
 801057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 801057e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010582:	f04f 020a 	mov.w	r2, #10
 8010586:	f04f 0300 	mov.w	r3, #0
 801058a:	f7f0 fa17 	bl	80009bc <__aeabi_uldivmod>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8010596:	e9d7 2300 	ldrd	r2, r3, [r7]
 801059a:	4313      	orrs	r3, r2
 801059c:	d1df      	bne.n	801055e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 801059e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f000 fab6 	bl	8010b14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80105a8:	bf00      	nop
 80105aa:	3730      	adds	r7, #48	; 0x30
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	70fb      	strb	r3, [r7, #3]
    if (value)
 80105bc:	78fb      	ldrb	r3, [r7, #3]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d004      	beq.n	80105cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 80105c2:	4906      	ldr	r1, [pc, #24]	; (80105dc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f7ff fbfb 	bl	800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80105ca:	e003      	b.n	80105d4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 80105cc:	4904      	ldr	r1, [pc, #16]	; (80105e0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7ff fbf6 	bl	800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80105d4:	bf00      	nop
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	080146b8 	.word	0x080146b8
 80105e0:	080146c0 	.word	0x080146c0

080105e4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	68b9      	ldr	r1, [r7, #8]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 fa9e 	bl	8010b38 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 80105fc:	4602      	mov	r2, r0
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	441a      	add	r2, r3
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	605a      	str	r2, [r3, #4]
  }
 8010608:	bf00      	nop
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
    return writer_.count();
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fa9e 	bl	8010b5c <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 8010620:	4603      	mov	r3, r0
  }
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>:
    return 0;
  return var->getMember(key);
}

template <typename TAdaptedString>
VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,
 801062a:	b580      	push	{r7, lr}
 801062c:	b084      	sub	sp, #16
 801062e:	af00      	add	r7, sp, #0
 8010630:	60f8      	str	r0, [r7, #12]
 8010632:	60b9      	str	r1, [r7, #8]
 8010634:	607a      	str	r2, [r7, #4]
                                   MemoryPool* pool) {
  if (!var)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d101      	bne.n	8010640 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x16>
    return 0;
 801063c:	2300      	movs	r3, #0
 801063e:	e007      	b.n	8010650 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x26>
  return var->getOrAddMember(key, pool);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	68b9      	ldr	r1, [r7, #8]
 8010646:	4618      	mov	r0, r3
 8010648:	f000 fa94 	bl	8010b74 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>
 801064c:	4603      	mov	r3, r0
 801064e:	bf00      	nop
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>:
  void clear() {
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	725a      	strb	r2, [r3, #9]
  }
 8010666:	bf00      	nop
 8010668:	370c      	adds	r7, #12
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>:
  }

 private:
  void load() {
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4618      	mov	r0, r3
 801067e:	f000 fa9f 	bl	8010bc0 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>
 8010682:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801068a:	b2da      	uxtb	r2, r3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	721a      	strb	r2, [r3, #8]
    loaded_ = true;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2201      	movs	r2, #1
 8010694:	725a      	strb	r2, [r3, #9]
  }
 8010696:	bf00      	nop
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 801069e:	b480      	push	{r7}
 80106a0:	b083      	sub	sp, #12
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	4603      	mov	r3, r0
 80106a6:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 80106a8:	79fb      	ldrb	r3, [r7, #7]
 80106aa:	2b27      	cmp	r3, #39	; 0x27
 80106ac:	d002      	beq.n	80106b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x16>
 80106ae:	79fb      	ldrb	r3, [r7, #7]
 80106b0:	2b22      	cmp	r3, #34	; 0x22
 80106b2:	d101      	bne.n	80106b8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1a>
 80106b4:	2301      	movs	r3, #1
 80106b6:	e000      	b.n	80106ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1c>
 80106b8:	2300      	movs	r3, #0
  }
 80106ba:	4618      	mov	r0, r3
 80106bc:	370c      	adds	r7, #12
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
    char c = current();
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fe fe44 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80106d4:	4603      	mov	r3, r0
 80106d6:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
 80106da:	4618      	mov	r0, r3
 80106dc:	f000 fa93 	bl	8010c06 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d015      	beq.n	8010712 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x4c>
        move();
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f7ff fb9a 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
        stringStorage_.append(c);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	7bfa      	ldrb	r2, [r7, #15]
 80106f0:	4611      	mov	r1, r2
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fc f92d 	bl	800c952 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
        c = current();
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7fe fe2f 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80106fe:	4603      	mov	r3, r0
 8010700:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8010702:	7bfb      	ldrb	r3, [r7, #15]
 8010704:	4618      	mov	r0, r3
 8010706:	f000 fa7e 	bl	8010c06 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1ea      	bne.n	80106e6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x20>
 8010710:	e001      	b.n	8010716 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8010712:	2303      	movs	r3, #3
 8010714:	e00c      	b.n	8010730 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    if (!stringStorage_.isValid())
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	f7fc f93b 	bl	800c994 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>
 801071e:	4603      	mov	r3, r0
 8010720:	f083 0301 	eor.w	r3, r3, #1
 8010724:	b2db      	uxtb	r3, r3
 8010726:	2b00      	cmp	r3, #0
 8010728:	d001      	beq.n	801072e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 801072a:	2304      	movs	r3, #4
 801072c:	e000      	b.n	8010730 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 801072e:	2300      	movs	r3, #0
  }
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  if (key.isNull())
 8010742:	463b      	mov	r3, r7
 8010744:	4618      	mov	r0, r3
 8010746:	f7fb f85e 	bl	800b806 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d001      	beq.n	8010754 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x1c>
    return 0;
 8010750:	2300      	movs	r3, #0
 8010752:	e01c      	b.n	801078e <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x56>
  VariantSlot* slot = head_;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	60fb      	str	r3, [r7, #12]
  while (slot) {
 801075a:	e012      	b.n	8010782 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x4a>
    if (stringEquals(key, adaptString(slot->key())))
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f7fb f9d2 	bl	800bb06 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 8010762:	4603      	mov	r3, r0
 8010764:	4618      	mov	r0, r3
 8010766:	f7fd fcfa 	bl	800e15e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 801076a:	4603      	mov	r3, r0
 801076c:	4619      	mov	r1, r3
 801076e:	6838      	ldr	r0, [r7, #0]
 8010770:	f000 fa70 	bl	8010c54 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d107      	bne.n	801078a <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x52>
    slot = slot->next();
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f7fb f94f 	bl	800ba1e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8010780:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1e9      	bne.n	801075c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x24>
 8010788:	e000      	b.n	801078c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x54>
      break;
 801078a:	bf00      	nop
  return slot;
 801078c:	68fb      	ldr	r3, [r7, #12]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8010796:	b580      	push	{r7, lr}
 8010798:	b084      	sub	sp, #16
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
    char c = current();
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7fe fddc 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80107a4:	4603      	mov	r3, r0
 80107a6:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80107a8:	e007      	b.n	80107ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x24>
      move();
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7ff fb38 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7fe fdd3 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80107b6:	4603      	mov	r3, r0
 80107b8:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	4618      	mov	r0, r3
 80107be:	f000 fa22 	bl	8010c06 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1f0      	bne.n	80107aa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 80107c8:	2300      	movs	r3, #0
  }
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b084      	sub	sp, #16
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
 80107da:	6039      	str	r1, [r7, #0]
    result = 0;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2200      	movs	r2, #0
 80107e0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 80107e2:	2300      	movs	r3, #0
 80107e4:	73fb      	strb	r3, [r7, #15]
 80107e6:	e025      	b.n	8010834 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x62>
      char digit = current();
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7fe fdb7 	bl	800f35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 80107ee:	4603      	mov	r3, r0
 80107f0:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 80107f2:	7bbb      	ldrb	r3, [r7, #14]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 80107f8:	2302      	movs	r3, #2
 80107fa:	e01f      	b.n	801083c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 80107fc:	7bbb      	ldrb	r3, [r7, #14]
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 fa62 	bl	8010cc8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>
 8010804:	4603      	mov	r3, r0
 8010806:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 8010808:	7b7b      	ldrb	r3, [r7, #13]
 801080a:	2b0f      	cmp	r3, #15
 801080c:	d901      	bls.n	8010812 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 801080e:	2303      	movs	r3, #3
 8010810:	e014      	b.n	801083c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	011b      	lsls	r3, r3, #4
 8010818:	b21a      	sxth	r2, r3
 801081a:	7b7b      	ldrb	r3, [r7, #13]
 801081c:	b21b      	sxth	r3, r3
 801081e:	4313      	orrs	r3, r2
 8010820:	b21b      	sxth	r3, r3
 8010822:	b29a      	uxth	r2, r3
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	801a      	strh	r2, [r3, #0]
      move();
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff faf9 	bl	800fe20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 801082e:	7bfb      	ldrb	r3, [r7, #15]
 8010830:	3301      	adds	r3, #1
 8010832:	73fb      	strb	r3, [r7, #15]
 8010834:	7bfb      	ldrb	r3, [r7, #15]
 8010836:	2b03      	cmp	r3, #3
 8010838:	d9d6      	bls.n	80107e8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 801083a:	2300      	movs	r3, #0
  }
 801083c:	4618      	mov	r0, r3
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 8010844:	b580      	push	{r7, lr}
 8010846:	b086      	sub	sp, #24
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2b7f      	cmp	r3, #127	; 0x7f
 8010852:	d806      	bhi.n	8010862 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	b2db      	uxtb	r3, r3
 8010858:	4619      	mov	r1, r3
 801085a:	6838      	ldr	r0, [r7, #0]
 801085c:	f7fc f879 	bl	800c952 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8010860:	e06a      	b.n	8010938 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xf4>
    char* p = buf;
 8010862:	f107 030c 	add.w	r3, r7, #12
 8010866:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	617a      	str	r2, [r7, #20]
 801086e:	2200      	movs	r2, #0
 8010870:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	b2db      	uxtb	r3, r3
 8010876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801087a:	b2da      	uxtb	r2, r3
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	1c59      	adds	r1, r3, #1
 8010880:	6179      	str	r1, [r7, #20]
 8010882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010886:	b2d2      	uxtb	r2, r2
 8010888:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	099b      	lsrs	r3, r3, #6
 801088e:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 8010890:	8a7b      	ldrh	r3, [r7, #18]
 8010892:	2b1f      	cmp	r3, #31
 8010894:	d809      	bhi.n	80108aa <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x66>
      *(p++) = char(codepoint16 | 0xC0);
 8010896:	8a7b      	ldrh	r3, [r7, #18]
 8010898:	b2da      	uxtb	r2, r3
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	1c59      	adds	r1, r3, #1
 801089e:	6179      	str	r1, [r7, #20]
 80108a0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80108a4:	b2d2      	uxtb	r2, r2
 80108a6:	701a      	strb	r2, [r3, #0]
 80108a8:	e03a      	b.n	8010920 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 80108aa:	8a7b      	ldrh	r3, [r7, #18]
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108b2:	b2da      	uxtb	r2, r3
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	1c59      	adds	r1, r3, #1
 80108b8:	6179      	str	r1, [r7, #20]
 80108ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80108be:	b2d2      	uxtb	r2, r2
 80108c0:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 80108c2:	8a7b      	ldrh	r3, [r7, #18]
 80108c4:	099b      	lsrs	r3, r3, #6
 80108c6:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 80108c8:	8a7b      	ldrh	r3, [r7, #18]
 80108ca:	2b0f      	cmp	r3, #15
 80108cc:	d809      	bhi.n	80108e2 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x9e>
        *(p++) = char(codepoint16 | 0xE0);
 80108ce:	8a7b      	ldrh	r3, [r7, #18]
 80108d0:	b2da      	uxtb	r2, r3
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	1c59      	adds	r1, r3, #1
 80108d6:	6179      	str	r1, [r7, #20]
 80108d8:	f062 021f 	orn	r2, r2, #31
 80108dc:	b2d2      	uxtb	r2, r2
 80108de:	701a      	strb	r2, [r3, #0]
 80108e0:	e01e      	b.n	8010920 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 80108e2:	8a7b      	ldrh	r3, [r7, #18]
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	1c59      	adds	r1, r3, #1
 80108f0:	6179      	str	r1, [r7, #20]
 80108f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80108f6:	b2d2      	uxtb	r2, r2
 80108f8:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 80108fa:	8a7b      	ldrh	r3, [r7, #18]
 80108fc:	099b      	lsrs	r3, r3, #6
 80108fe:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 8010900:	8a7b      	ldrh	r3, [r7, #18]
 8010902:	b2da      	uxtb	r2, r3
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	1c59      	adds	r1, r3, #1
 8010908:	6179      	str	r1, [r7, #20]
 801090a:	f062 020f 	orn	r2, r2, #15
 801090e:	b2d2      	uxtb	r2, r2
 8010910:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8010912:	e005      	b.n	8010920 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      str.append(*p);
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	4619      	mov	r1, r3
 801091a:	6838      	ldr	r0, [r7, #0]
 801091c:	f7fc f819 	bl	800c952 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
    while (*(--p)) {
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	3b01      	subs	r3, #1
 8010924:	617b      	str	r3, [r7, #20]
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	bf14      	ite	ne
 801092e:	2301      	movne	r3, #1
 8010930:	2300      	moveq	r3, #0
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1ed      	bne.n	8010914 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xd0>
}
 8010938:	bf00      	nop
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	4603      	mov	r3, r0
 8010948:	71fb      	strb	r3, [r7, #7]
 801094a:	460b      	mov	r3, r1
 801094c:	71bb      	strb	r3, [r7, #6]
 801094e:	4613      	mov	r3, r2
 8010950:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8010952:	79ba      	ldrb	r2, [r7, #6]
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	429a      	cmp	r2, r3
 8010958:	d805      	bhi.n	8010966 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 801095a:	79fa      	ldrb	r2, [r7, #7]
 801095c:	797b      	ldrb	r3, [r7, #5]
 801095e:	429a      	cmp	r2, r3
 8010960:	d801      	bhi.n	8010966 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 8010962:	2301      	movs	r3, #1
 8010964:	e000      	b.n	8010968 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x28>
 8010966:	2300      	movs	r3, #0
  }
 8010968:	4618      	mov	r0, r3
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	460b      	mov	r3, r1
 801097e:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	78fa      	ldrb	r2, [r7, #3]
 8010984:	4611      	mov	r1, r2
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f9cc 	bl	8010d24 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8010994:	b580      	push	{r7, lr}
 8010996:	b08a      	sub	sp, #40	; 0x28
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 801099e:	f107 0308 	add.w	r3, r7, #8
 80109a2:	3316      	adds	r3, #22
 80109a4:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 80109aa:	6839      	ldr	r1, [r7, #0]
 80109ac:	4b11      	ldr	r3, [pc, #68]	; (80109f4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 80109ae:	fba3 2301 	umull	r2, r3, r3, r1
 80109b2:	08da      	lsrs	r2, r3, #3
 80109b4:	4613      	mov	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	4413      	add	r3, r2
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	1aca      	subs	r2, r1, r3
 80109be:	b2d3      	uxtb	r3, r2
 80109c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109c2:	3a01      	subs	r2, #1
 80109c4:	627a      	str	r2, [r7, #36]	; 0x24
 80109c6:	3330      	adds	r3, #48	; 0x30
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	4a08      	ldr	r2, [pc, #32]	; (80109f4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 80109d2:	fba2 2303 	umull	r2, r3, r2, r3
 80109d6:	08db      	lsrs	r3, r3, #3
 80109d8:	603b      	str	r3, [r7, #0]
    } while (value);
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1e4      	bne.n	80109aa <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 80109e0:	6a3a      	ldr	r2, [r7, #32]
 80109e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f895 	bl	8010b14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80109ea:	bf00      	nop
 80109ec:	3728      	adds	r7, #40	; 0x28
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	cccccccd 	.word	0xcccccccd

080109f8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b08a      	sub	sp, #40	; 0x28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	4613      	mov	r3, r2
 8010a04:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 8010a06:	f107 0310 	add.w	r3, r7, #16
 8010a0a:	3310      	adds	r3, #16
 8010a0c:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8010a0e:	6a3b      	ldr	r3, [r7, #32]
 8010a10:	627b      	str	r3, [r7, #36]	; 0x24
    while (width--) {
 8010a12:	e017      	b.n	8010a44 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 8010a14:	68b9      	ldr	r1, [r7, #8]
 8010a16:	4b19      	ldr	r3, [pc, #100]	; (8010a7c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8010a18:	fba3 2301 	umull	r2, r3, r3, r1
 8010a1c:	08da      	lsrs	r2, r3, #3
 8010a1e:	4613      	mov	r3, r2
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	4413      	add	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	1aca      	subs	r2, r1, r3
 8010a28:	b2d3      	uxtb	r3, r2
 8010a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a2c:	3a01      	subs	r2, #1
 8010a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8010a30:	3330      	adds	r3, #48	; 0x30
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	701a      	strb	r2, [r3, #0]
      value /= 10;
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	4a10      	ldr	r2, [pc, #64]	; (8010a7c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8010a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a40:	08db      	lsrs	r3, r3, #3
 8010a42:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8010a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	3a01      	subs	r2, #1
 8010a4c:	b2d2      	uxtb	r2, r2
 8010a4e:	71fa      	strb	r2, [r7, #7]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	bf14      	ite	ne
 8010a54:	2301      	movne	r3, #1
 8010a56:	2300      	moveq	r3, #0
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1da      	bne.n	8010a14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	3b01      	subs	r3, #1
 8010a62:	627b      	str	r3, [r7, #36]	; 0x24
 8010a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a66:	222e      	movs	r2, #46	; 0x2e
 8010a68:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 8010a6a:	6a3a      	ldr	r2, [r7, #32]
 8010a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	f000 f850 	bl	8010b14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8010a74:	bf00      	nop
 8010a76:	3728      	adds	r7, #40	; 0x28
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	cccccccd 	.word	0xcccccccd

08010a80 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8010a8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	da07      	bge.n	8010aa4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 8010a94:	212d      	movs	r1, #45	; 0x2d
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f7ff ff6c 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8010a9c:	887b      	ldrh	r3, [r7, #2]
 8010a9e:	425b      	negs	r3, r3
 8010aa0:	81fb      	strh	r3, [r7, #14]
 8010aa2:	e001      	b.n	8010aa8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 8010aa4:	887b      	ldrh	r3, [r7, #2]
 8010aa6:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 8010aa8:	89fb      	ldrh	r3, [r7, #14]
 8010aaa:	4619      	mov	r1, r3
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 f94f 	bl	8010d50 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8010ab2:	bf00      	nop
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
	...

08010abc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 8010ac8:	78fb      	ldrb	r3, [r7, #3]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fb fba0 	bl	800c210 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 8010ad4:	7bfb      	ldrb	r3, [r7, #15]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d009      	beq.n	8010aee <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 8010ada:	215c      	movs	r1, #92	; 0x5c
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f7ff ff49 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 8010ae2:	7bfb      	ldrb	r3, [r7, #15]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7ff ff44 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8010aec:	e00c      	b.n	8010b08 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 8010aee:	78fb      	ldrb	r3, [r7, #3]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d005      	beq.n	8010b00 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 8010af4:	78fb      	ldrb	r3, [r7, #3]
 8010af6:	4619      	mov	r1, r3
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7ff ff3b 	bl	8010974 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8010afe:	e003      	b.n	8010b08 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8010b00:	4903      	ldr	r1, [pc, #12]	; (8010b10 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff f95c 	bl	800fdc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8010b08:	bf00      	nop
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	080146d0 	.word	0x080146d0

08010b14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b084      	sub	sp, #16
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8010b20:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8010b28:	461a      	mov	r2, r3
 8010b2a:	68b9      	ldr	r1, [r7, #8]
 8010b2c:	f7ff fd5a 	bl	80105e4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8010b30:	bf00      	nop
 8010b32:	3710      	adds	r7, #16
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b084      	sub	sp, #16
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	68b9      	ldr	r1, [r7, #8]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f000 fce5 	bl	801151c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 8010b52:	687b      	ldr	r3, [r7, #4]
  }
 8010b54:	4618      	mov	r0, r3
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
    return count_;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	685b      	ldr	r3, [r3, #4]
  }
 8010b68:	4618      	mov	r0, r3
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>:
  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
    if (isNull())
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f7fb f91e 	bl	800bdc2 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d002      	beq.n	8010b92 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x1e>
      toObject();
 8010b8c:	68f8      	ldr	r0, [r7, #12]
 8010b8e:	f7fb f9a2 	bl	800bed6 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
    if (!isObject())
 8010b92:	68f8      	ldr	r0, [r7, #12]
 8010b94:	f7fb f902 	bl	800bd9c <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	f083 0301 	eor.w	r3, r3, #1
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d001      	beq.n	8010ba8 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x34>
      return 0;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e007      	b.n	8010bb8 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x44>
    return content_.asCollection.getOrAddMember(key, pool);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	68b9      	ldr	r1, [r7, #8]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 f902 	bl	8010db8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	bf00      	nop
  }
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>:
  int read() {
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    if (ptr_ < end_)
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	3304      	adds	r3, #4
 8010bce:	4619      	mov	r1, r3
 8010bd0:	4610      	mov	r0, r2
 8010bd2:	f000 f919 	bl	8010e08 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00e      	beq.n	8010bfa <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3a>
      return static_cast<unsigned char>(*ptr_++);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2100      	movs	r1, #0
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f929 	bl	8010e38 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>
 8010be6:	4603      	mov	r3, r0
 8010be8:	60fb      	str	r3, [r7, #12]
 8010bea:	f107 030c 	add.w	r3, r7, #12
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 f93a 	bl	8010e68 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	e001      	b.n	8010bfe <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3e>
      return -1;
 8010bfa:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8010c10:	79fb      	ldrb	r3, [r7, #7]
 8010c12:	2239      	movs	r2, #57	; 0x39
 8010c14:	2130      	movs	r1, #48	; 0x30
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fe92 	bl	8010940 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d111      	bne.n	8010c46 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
 8010c22:	79fb      	ldrb	r3, [r7, #7]
 8010c24:	227a      	movs	r2, #122	; 0x7a
 8010c26:	215f      	movs	r1, #95	; 0x5f
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7ff fe89 	bl	8010940 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d108      	bne.n	8010c46 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	225a      	movs	r2, #90	; 0x5a
 8010c38:	2141      	movs	r1, #65	; 0x41
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fe80 	bl	8010940 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 8010c40:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d001      	beq.n	8010c4a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x44>
 8010c46:	2301      	movs	r3, #1
 8010c48:	e000      	b.n	8010c4c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x46>
 8010c4a:	2300      	movs	r3, #0
  }
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b087      	sub	sp, #28
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
  size_t size1 = s1.size();
 8010c5e:	1d3b      	adds	r3, r7, #4
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7fa fde1 	bl	800b828 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8010c66:	6138      	str	r0, [r7, #16]
  size_t size2 = s2.size();
 8010c68:	463b      	mov	r3, r7
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fa fddc 	bl	800b828 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8010c70:	60f8      	str	r0, [r7, #12]
  if (size1 != size2)
 8010c72:	693a      	ldr	r2, [r7, #16]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d001      	beq.n	8010c7e <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2a>
    return false;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	e020      	b.n	8010cc0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 8010c7e:	2300      	movs	r3, #0
 8010c80:	617b      	str	r3, [r7, #20]
 8010c82:	e018      	b.n	8010cb6 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x62>
    if (s1[i] != s2[i])
 8010c84:	1d3b      	adds	r3, r7, #4
 8010c86:	6979      	ldr	r1, [r7, #20]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fa fde1 	bl	800b850 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	461c      	mov	r4, r3
 8010c92:	463b      	mov	r3, r7
 8010c94:	6979      	ldr	r1, [r7, #20]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fa fdda 	bl	800b850 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	429c      	cmp	r4, r3
 8010ca0:	bf14      	ite	ne
 8010ca2:	2301      	movne	r3, #1
 8010ca4:	2300      	moveq	r3, #0
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x5c>
      return false;
 8010cac:	2300      	movs	r3, #0
 8010cae:	e007      	b.n	8010cc0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	617b      	str	r3, [r7, #20]
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d3e2      	bcc.n	8010c84 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x30>
  return true;
 8010cbe:	2301      	movs	r3, #1
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	371c      	adds	r7, #28
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd90      	pop	{r4, r7, pc}

08010cc8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	2b40      	cmp	r3, #64	; 0x40
 8010cd6:	d803      	bhi.n	8010ce0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 8010cd8:	79fb      	ldrb	r3, [r7, #7]
 8010cda:	3b30      	subs	r3, #48	; 0x30
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	e006      	b.n	8010cee <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	f023 0320 	bic.w	r3, r3, #32
 8010ce6:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 8010ce8:	79fb      	ldrb	r3, [r7, #7]
 8010cea:	3b37      	subs	r3, #55	; 0x37
 8010cec:	b2db      	uxtb	r3, r3
  }
 8010cee:	4618      	mov	r0, r3
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>:
VariantData* variantGetMember(const VariantData* var, TAdaptedString key) {
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	6039      	str	r1, [r7, #0]
  if (!var)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d101      	bne.n	8010d0e <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x14>
    return 0;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	e006      	b.n	8010d1c <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x22>
  return var->getMember(key);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6839      	ldr	r1, [r7, #0]
 8010d12:	4618      	mov	r0, r3
 8010d14:	f000 f8b4 	bl	8010e80 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	bf00      	nop
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	78fa      	ldrb	r2, [r7, #3]
 8010d34:	4611      	mov	r1, r2
 8010d36:	4618      	mov	r0, r3
 8010d38:	f000 f8ba 	bl	8010eb0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	441a      	add	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	605a      	str	r2, [r3, #4]
  }
 8010d48:	bf00      	nop
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b08a      	sub	sp, #40	; 0x28
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	460b      	mov	r3, r1
 8010d5a:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8010d5c:	f107 0308 	add.w	r3, r7, #8
 8010d60:	3316      	adds	r3, #22
 8010d62:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 8010d68:	887a      	ldrh	r2, [r7, #2]
 8010d6a:	4b12      	ldr	r3, [pc, #72]	; (8010db4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8010d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8010d70:	08d9      	lsrs	r1, r3, #3
 8010d72:	460b      	mov	r3, r1
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	440b      	add	r3, r1
 8010d78:	005b      	lsls	r3, r3, #1
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d82:	3a01      	subs	r2, #1
 8010d84:	627a      	str	r2, [r7, #36]	; 0x24
 8010d86:	3330      	adds	r3, #48	; 0x30
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8010d8e:	887b      	ldrh	r3, [r7, #2]
 8010d90:	4a08      	ldr	r2, [pc, #32]	; (8010db4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8010d92:	fba2 2303 	umull	r2, r3, r2, r3
 8010d96:	08db      	lsrs	r3, r3, #3
 8010d98:	807b      	strh	r3, [r7, #2]
    } while (value);
 8010d9a:	887b      	ldrh	r3, [r7, #2]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d1e3      	bne.n	8010d68 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8010da0:	6a3a      	ldr	r2, [r7, #32]
 8010da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7ff feb5 	bl	8010b14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8010daa:	bf00      	nop
 8010dac:	3728      	adds	r7, #40	; 0x28
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	cccccccd 	.word	0xcccccccd

08010db8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	607a      	str	r2, [r7, #4]
  if (key.isNull())
 8010dc4:	f107 0308 	add.w	r3, r7, #8
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7fa fd1c 	bl	800b806 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d001      	beq.n	8010dd8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
    return 0;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e013      	b.n	8010e00 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  VariantSlot* slot = getSlot(key);
 8010dd8:	68b9      	ldr	r1, [r7, #8]
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f7ff fcac 	bl	8010738 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 8010de0:	6178      	str	r0, [r7, #20]
  if (slot)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x3a>
    return slot->data();
 8010de8:	6978      	ldr	r0, [r7, #20]
 8010dea:	f7fa fe02 	bl	800b9f2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8010dee:	4603      	mov	r3, r0
 8010df0:	e006      	b.n	8010e00 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  return addMember(key, pool);
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	68b9      	ldr	r1, [r7, #8]
 8010df6:	68f8      	ldr	r0, [r7, #12]
 8010df8:	f000 f86c 	bl	8010ed4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	bf00      	nop
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010e08:	b590      	push	{r4, r7, lr}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() < __rhs.base(); }
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 f883 	bl	8010f1e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	681c      	ldr	r4, [r3, #0]
 8010e1c:	6838      	ldr	r0, [r7, #0]
 8010e1e:	f000 f87e 	bl	8010f1e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8010e22:	4603      	mov	r3, r0
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	429c      	cmp	r4, r3
 8010e28:	bf34      	ite	cc
 8010e2a:	2301      	movcc	r3, #1
 8010e2c:	2300      	movcs	r3, #0
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	4618      	mov	r0, r3
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd90      	pop	{r4, r7, pc}

08010e38 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b084      	sub	sp, #16
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current++); }
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	1c59      	adds	r1, r3, #1
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	6011      	str	r1, [r2, #0]
 8010e4c:	60fb      	str	r3, [r7, #12]
 8010e4e:	f107 020c 	add.w	r2, r7, #12
 8010e52:	f107 0308 	add.w	r3, r7, #8
 8010e56:	4611      	mov	r1, r2
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7fe ffd1 	bl	800fe00 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4618      	mov	r0, r3
 8010e76:	370c      	adds	r7, #12
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>:
  VariantData* getMember(TAdaptedString key) const {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
    const CollectionData* col = asObject();
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7fa ff67 	bl	800bd5e <_ZNK11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>
 8010e90:	60f8      	str	r0, [r7, #12]
    return col ? col->getMember(key) : 0;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d006      	beq.n	8010ea6 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x26>
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6839      	ldr	r1, [r7, #0]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff f8b7 	bl	8010010 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	e000      	b.n	8010ea8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x28>
 8010ea6:	2300      	movs	r3, #0
  }
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	460b      	mov	r3, r1
 8010eba:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	78fa      	ldrb	r2, [r7, #3]
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f000 fae7 	bl	8011498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8010eca:	2301      	movs	r3, #1
  }
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addMember(TAdaptedString key,
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
  VariantSlot* slot = addSlot(pool);
 8010ee0:	6879      	ldr	r1, [r7, #4]
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	f7fb f904 	bl	800c0f0 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8010ee8:	6178      	str	r0, [r7, #20]
  if (!slotSetKey(slot, key, pool)) {
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	68b9      	ldr	r1, [r7, #8]
 8010eee:	6978      	ldr	r0, [r7, #20]
 8010ef0:	f000 f820 	bl	8010f34 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	f083 0301 	eor.w	r3, r3, #1
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d005      	beq.n	8010f0c <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x38>
    removeSlot(slot);
 8010f00:	6979      	ldr	r1, [r7, #20]
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7fb f95d 	bl	800c1c2 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>
    return 0;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	e004      	b.n	8010f16 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x42>
  return slot->data();
 8010f0c:	6978      	ldr	r0, [r7, #20]
 8010f0e:	f7fa fd70 	bl	800b9f2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8010f12:	4603      	mov	r3, r0
 8010f14:	bf00      	nop
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3718      	adds	r7, #24
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010f1e:	b480      	push	{r7}
 8010f20:	b083      	sub	sp, #12
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	370c      	adds	r7, #12
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>:
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
  if (!var)
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d101      	bne.n	8010f4a <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x16>
    return false;
 8010f46:	2300      	movs	r3, #0
 8010f48:	e00c      	b.n	8010f64 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x30>
  return storeString(pool, key, SlotKeySetter(var));
 8010f4a:	f107 0314 	add.w	r3, r7, #20
 8010f4e:	68f9      	ldr	r1, [r7, #12]
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fb f84c 	bl	800bfee <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>
 8010f56:	697a      	ldr	r2, [r7, #20]
 8010f58:	68b9      	ldr	r1, [r7, #8]
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 f806 	bl	8010f6c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>
 8010f60:	4603      	mov	r3, r0
 8010f62:	bf00      	nop
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3718      	adds	r7, #24
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 8010f6c:	b590      	push	{r4, r7, lr}
 8010f6e:	b085      	sub	sp, #20
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 8010f78:	f107 0308 	add.w	r3, r7, #8
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fa fc92 	bl	800b8a6 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4622      	mov	r2, r4
 8010f86:	68b9      	ldr	r1, [r7, #8]
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f000 f805 	bl	8010f98 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 8010f8e:	4603      	mov	r3, r0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd90      	pop	{r4, r7, pc}

08010f98 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 8010f98:	b590      	push	{r4, r7, lr}
 8010f9a:	b089      	sub	sp, #36	; 0x24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	713a      	strb	r2, [r7, #4]
 8010fa4:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 8010fa6:	f107 0308 	add.w	r3, r7, #8
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fa fc60 	bl	800b870 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	f107 0308 	add.w	r3, r7, #8
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fa fc36 	bl	800b828 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	f107 0014 	add.w	r0, r7, #20
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	4621      	mov	r1, r4
 8010fc6:	f7fa fcb7 	bl	800b938 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 8010fca:	4638      	mov	r0, r7
 8010fcc:	f107 0314 	add.w	r3, r7, #20
 8010fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010fd2:	f7fe fd03 	bl	800f9dc <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 8010fd6:	f107 0308 	add.w	r3, r7, #8
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fa fc13 	bl	800b806 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	f083 0301 	eor.w	r3, r3, #1
 8010fe6:	b2db      	uxtb	r3, r3
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3724      	adds	r7, #36	; 0x24
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd90      	pop	{r4, r7, pc}

08010ff0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010ffc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8011000:	f003 0301 	and.w	r3, r3, #1
 8011004:	2b00      	cmp	r3, #0
 8011006:	d013      	beq.n	8011030 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8011008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801100c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8011010:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00b      	beq.n	8011030 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8011018:	e000      	b.n	801101c <ITM_SendChar+0x2c>
    {
      __NOP();
 801101a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 801101c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d0f9      	beq.n	801101a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8011026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	b2d2      	uxtb	r2, r2
 801102e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8011030:	687b      	ldr	r3, [r7, #4]
}
 8011032:	4618      	mov	r0, r3
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <__io_putchar>:
 *  Created on: Oct 25, 2023
 *      Author: jeffr
 */

#include "stm32f4xx.h"
int __io_putchar(int ch){
 801103e:	b580      	push	{r7, lr}
 8011040:	b082      	sub	sp, #8
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4618      	mov	r0, r3
 801104a:	f7ff ffd1 	bl	8010ff0 <ITM_SendChar>
	return ch;
 801104e:	687b      	ldr	r3, [r7, #4]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011058:	b480      	push	{r7}
 801105a:	af00      	add	r7, sp, #0
  return 1;
 801105c:	2301      	movs	r3, #1
}
 801105e:	4618      	mov	r0, r3
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <_kill>:

int _kill(int pid, int sig)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8011072:	f000 fe83 	bl	8011d7c <__errno>
 8011076:	4603      	mov	r3, r0
 8011078:	2216      	movs	r2, #22
 801107a:	601a      	str	r2, [r3, #0]
  return -1;
 801107c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011080:	4618      	mov	r0, r3
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <_exit>:

void _exit (int status)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8011090:	f04f 31ff 	mov.w	r1, #4294967295
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7ff ffe7 	bl	8011068 <_kill>
  while (1) {}    /* Make sure we hang here */
 801109a:	e7fe      	b.n	801109a <_exit+0x12>

0801109c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110a8:	2300      	movs	r3, #0
 80110aa:	617b      	str	r3, [r7, #20]
 80110ac:	e00a      	b.n	80110c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80110ae:	f3af 8000 	nop.w
 80110b2:	4601      	mov	r1, r0
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	1c5a      	adds	r2, r3, #1
 80110b8:	60ba      	str	r2, [r7, #8]
 80110ba:	b2ca      	uxtb	r2, r1
 80110bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	3301      	adds	r3, #1
 80110c2:	617b      	str	r3, [r7, #20]
 80110c4:	697a      	ldr	r2, [r7, #20]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	dbf0      	blt.n	80110ae <_read+0x12>
  }

  return len;
 80110cc:	687b      	ldr	r3, [r7, #4]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b086      	sub	sp, #24
 80110da:	af00      	add	r7, sp, #0
 80110dc:	60f8      	str	r0, [r7, #12]
 80110de:	60b9      	str	r1, [r7, #8]
 80110e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110e2:	2300      	movs	r3, #0
 80110e4:	617b      	str	r3, [r7, #20]
 80110e6:	e009      	b.n	80110fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	1c5a      	adds	r2, r3, #1
 80110ec:	60ba      	str	r2, [r7, #8]
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff ffa4 	bl	801103e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	3301      	adds	r3, #1
 80110fa:	617b      	str	r3, [r7, #20]
 80110fc:	697a      	ldr	r2, [r7, #20]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	429a      	cmp	r2, r3
 8011102:	dbf1      	blt.n	80110e8 <_write+0x12>
  }
  return len;
 8011104:	687b      	ldr	r3, [r7, #4]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <_close>:

int _close(int file)
{
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8011116:	f04f 33ff 	mov.w	r3, #4294967295
}
 801111a:	4618      	mov	r0, r3
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr

08011126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011126:	b480      	push	{r7}
 8011128:	b083      	sub	sp, #12
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
 801112e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011136:	605a      	str	r2, [r3, #4]
  return 0;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	370c      	adds	r7, #12
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr

08011146 <_isatty>:

int _isatty(int file)
{
 8011146:	b480      	push	{r7}
 8011148:	b083      	sub	sp, #12
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801114e:	2301      	movs	r3, #1
}
 8011150:	4618      	mov	r0, r3
 8011152:	370c      	adds	r7, #12
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3714      	adds	r7, #20
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
	...

08011178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011180:	4a14      	ldr	r2, [pc, #80]	; (80111d4 <_sbrk+0x5c>)
 8011182:	4b15      	ldr	r3, [pc, #84]	; (80111d8 <_sbrk+0x60>)
 8011184:	1ad3      	subs	r3, r2, r3
 8011186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801118c:	4b13      	ldr	r3, [pc, #76]	; (80111dc <_sbrk+0x64>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d102      	bne.n	801119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011194:	4b11      	ldr	r3, [pc, #68]	; (80111dc <_sbrk+0x64>)
 8011196:	4a12      	ldr	r2, [pc, #72]	; (80111e0 <_sbrk+0x68>)
 8011198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801119a:	4b10      	ldr	r3, [pc, #64]	; (80111dc <_sbrk+0x64>)
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4413      	add	r3, r2
 80111a2:	693a      	ldr	r2, [r7, #16]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d207      	bcs.n	80111b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80111a8:	f000 fde8 	bl	8011d7c <__errno>
 80111ac:	4603      	mov	r3, r0
 80111ae:	220c      	movs	r2, #12
 80111b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80111b2:	f04f 33ff 	mov.w	r3, #4294967295
 80111b6:	e009      	b.n	80111cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80111b8:	4b08      	ldr	r3, [pc, #32]	; (80111dc <_sbrk+0x64>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80111be:	4b07      	ldr	r3, [pc, #28]	; (80111dc <_sbrk+0x64>)
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	4413      	add	r3, r2
 80111c6:	4a05      	ldr	r2, [pc, #20]	; (80111dc <_sbrk+0x64>)
 80111c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80111ca:	68fb      	ldr	r3, [r7, #12]
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3718      	adds	r7, #24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	20020000 	.word	0x20020000
 80111d8:	00000400 	.word	0x00000400
 80111dc:	200085f4 	.word	0x200085f4
 80111e0:	20008748 	.word	0x20008748

080111e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80111e4:	b480      	push	{r7}
 80111e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80111e8:	4b06      	ldr	r3, [pc, #24]	; (8011204 <SystemInit+0x20>)
 80111ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111ee:	4a05      	ldr	r2, [pc, #20]	; (8011204 <SystemInit+0x20>)
 80111f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80111f8:	bf00      	nop
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	e000ed00 	.word	0xe000ed00

08011208 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8011208:	b480      	push	{r7}
 801120a:	b087      	sub	sp, #28
 801120c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 801120e:	2300      	movs	r3, #0
 8011210:	613b      	str	r3, [r7, #16]
 8011212:	2300      	movs	r3, #0
 8011214:	617b      	str	r3, [r7, #20]
 8011216:	2302      	movs	r3, #2
 8011218:	60fb      	str	r3, [r7, #12]
 801121a:	2300      	movs	r3, #0
 801121c:	60bb      	str	r3, [r7, #8]
 801121e:	2302      	movs	r3, #2
 8011220:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8011222:	4b34      	ldr	r3, [pc, #208]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	f003 030c 	and.w	r3, r3, #12
 801122a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	2b08      	cmp	r3, #8
 8011230:	d011      	beq.n	8011256 <SystemCoreClockUpdate+0x4e>
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b08      	cmp	r3, #8
 8011236:	d844      	bhi.n	80112c2 <SystemCoreClockUpdate+0xba>
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d003      	beq.n	8011246 <SystemCoreClockUpdate+0x3e>
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	2b04      	cmp	r3, #4
 8011242:	d004      	beq.n	801124e <SystemCoreClockUpdate+0x46>
 8011244:	e03d      	b.n	80112c2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8011246:	4b2c      	ldr	r3, [pc, #176]	; (80112f8 <SystemCoreClockUpdate+0xf0>)
 8011248:	4a2c      	ldr	r2, [pc, #176]	; (80112fc <SystemCoreClockUpdate+0xf4>)
 801124a:	601a      	str	r2, [r3, #0]
      break;
 801124c:	e03d      	b.n	80112ca <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 801124e:	4b2a      	ldr	r3, [pc, #168]	; (80112f8 <SystemCoreClockUpdate+0xf0>)
 8011250:	4a2b      	ldr	r2, [pc, #172]	; (8011300 <SystemCoreClockUpdate+0xf8>)
 8011252:	601a      	str	r2, [r3, #0]
      break;
 8011254:	e039      	b.n	80112ca <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8011256:	4b27      	ldr	r3, [pc, #156]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	0d9b      	lsrs	r3, r3, #22
 801125c:	f003 0301 	and.w	r3, r3, #1
 8011260:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011262:	4b24      	ldr	r3, [pc, #144]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801126a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00c      	beq.n	801128c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8011272:	4a23      	ldr	r2, [pc, #140]	; (8011300 <SystemCoreClockUpdate+0xf8>)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	fbb2 f3f3 	udiv	r3, r2, r3
 801127a:	4a1e      	ldr	r2, [pc, #120]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 801127c:	6852      	ldr	r2, [r2, #4]
 801127e:	0992      	lsrs	r2, r2, #6
 8011280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011284:	fb02 f303 	mul.w	r3, r2, r3
 8011288:	617b      	str	r3, [r7, #20]
 801128a:	e00b      	b.n	80112a4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 801128c:	4a1b      	ldr	r2, [pc, #108]	; (80112fc <SystemCoreClockUpdate+0xf4>)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	fbb2 f3f3 	udiv	r3, r2, r3
 8011294:	4a17      	ldr	r2, [pc, #92]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 8011296:	6852      	ldr	r2, [r2, #4]
 8011298:	0992      	lsrs	r2, r2, #6
 801129a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801129e:	fb02 f303 	mul.w	r3, r2, r3
 80112a2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80112a4:	4b13      	ldr	r3, [pc, #76]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	0c1b      	lsrs	r3, r3, #16
 80112aa:	f003 0303 	and.w	r3, r3, #3
 80112ae:	3301      	adds	r3, #1
 80112b0:	005b      	lsls	r3, r3, #1
 80112b2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80112b4:	697a      	ldr	r2, [r7, #20]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112bc:	4a0e      	ldr	r2, [pc, #56]	; (80112f8 <SystemCoreClockUpdate+0xf0>)
 80112be:	6013      	str	r3, [r2, #0]
      break;
 80112c0:	e003      	b.n	80112ca <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80112c2:	4b0d      	ldr	r3, [pc, #52]	; (80112f8 <SystemCoreClockUpdate+0xf0>)
 80112c4:	4a0d      	ldr	r2, [pc, #52]	; (80112fc <SystemCoreClockUpdate+0xf4>)
 80112c6:	601a      	str	r2, [r3, #0]
      break;
 80112c8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80112ca:	4b0a      	ldr	r3, [pc, #40]	; (80112f4 <SystemCoreClockUpdate+0xec>)
 80112cc:	689b      	ldr	r3, [r3, #8]
 80112ce:	091b      	lsrs	r3, r3, #4
 80112d0:	f003 030f 	and.w	r3, r3, #15
 80112d4:	4a0b      	ldr	r2, [pc, #44]	; (8011304 <SystemCoreClockUpdate+0xfc>)
 80112d6:	5cd3      	ldrb	r3, [r2, r3]
 80112d8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80112da:	4b07      	ldr	r3, [pc, #28]	; (80112f8 <SystemCoreClockUpdate+0xf0>)
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	fa22 f303 	lsr.w	r3, r2, r3
 80112e4:	4a04      	ldr	r2, [pc, #16]	; (80112f8 <SystemCoreClockUpdate+0xf0>)
 80112e6:	6013      	str	r3, [r2, #0]
}
 80112e8:	bf00      	nop
 80112ea:	371c      	adds	r7, #28
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr
 80112f4:	40023800 	.word	0x40023800
 80112f8:	200000a4 	.word	0x200000a4
 80112fc:	00f42400 	.word	0x00f42400
 8011300:	017d7840 	.word	0x017d7840
 8011304:	08014778 	.word	0x08014778

08011308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011308:	480d      	ldr	r0, [pc, #52]	; (8011340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801130a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801130c:	f7ff ff6a 	bl	80111e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011310:	480c      	ldr	r0, [pc, #48]	; (8011344 <LoopForever+0x6>)
  ldr r1, =_edata
 8011312:	490d      	ldr	r1, [pc, #52]	; (8011348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011314:	4a0d      	ldr	r2, [pc, #52]	; (801134c <LoopForever+0xe>)
  movs r3, #0
 8011316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011318:	e002      	b.n	8011320 <LoopCopyDataInit>

0801131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801131e:	3304      	adds	r3, #4

08011320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011324:	d3f9      	bcc.n	801131a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011326:	4a0a      	ldr	r2, [pc, #40]	; (8011350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011328:	4c0a      	ldr	r4, [pc, #40]	; (8011354 <LoopForever+0x16>)
  movs r3, #0
 801132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801132c:	e001      	b.n	8011332 <LoopFillZerobss>

0801132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011330:	3204      	adds	r2, #4

08011332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011334:	d3fb      	bcc.n	801132e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8011336:	f000 fd27 	bl	8011d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801133a:	f7fb fbcf 	bl	800cadc <main>

0801133e <LoopForever>:

LoopForever:
  b LoopForever
 801133e:	e7fe      	b.n	801133e <LoopForever>
  ldr   r0, =_estack
 8011340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011348:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 801134c:	08014824 	.word	0x08014824
  ldr r2, =_sbss
 8011350:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8011354:	20008748 	.word	0x20008748

08011358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011358:	e7fe      	b.n	8011358 <ADC_IRQHandler>

0801135a <_ZNSaIcEC1Ev>:
 801135a:	4770      	bx	lr

0801135c <_ZNSaIcED1Ev>:
 801135c:	4770      	bx	lr

0801135e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801135e:	b10a      	cbz	r2, 8011364 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8011360:	f000 bd40 	b.w	8011de4 <memcpy>
 8011364:	4770      	bx	lr
	...

08011368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8011368:	b508      	push	{r3, lr}
 801136a:	680b      	ldr	r3, [r1, #0]
 801136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011370:	d302      	bcc.n	8011378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8011372:	480d      	ldr	r0, [pc, #52]	; (80113a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8011374:	f000 f92d 	bl	80115d2 <_ZSt20__throw_length_errorPKc>
 8011378:	4293      	cmp	r3, r2
 801137a:	d90b      	bls.n	8011394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801137c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8011380:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8011384:	d206      	bcs.n	8011394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8011386:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801138a:	bf2a      	itet	cs
 801138c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8011390:	6008      	strcc	r0, [r1, #0]
 8011392:	600b      	strcs	r3, [r1, #0]
 8011394:	6808      	ldr	r0, [r1, #0]
 8011396:	3001      	adds	r0, #1
 8011398:	d501      	bpl.n	801139e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801139a:	f000 f914 	bl	80115c6 <_ZSt17__throw_bad_allocv>
 801139e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113a2:	f000 b8ff 	b.w	80115a4 <_Znwj>
 80113a6:	bf00      	nop
 80113a8:	08014788 	.word	0x08014788

080113ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80113ac:	f850 3b08 	ldr.w	r3, [r0], #8
 80113b0:	4283      	cmp	r3, r0
 80113b2:	d002      	beq.n	80113ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80113b4:	4618      	mov	r0, r3
 80113b6:	f000 b8f3 	b.w	80115a0 <_ZdlPv>
 80113ba:	4770      	bx	lr

080113bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80113bc:	6840      	ldr	r0, [r0, #4]
 80113be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80113c2:	3901      	subs	r1, #1
 80113c4:	1a09      	subs	r1, r1, r0
 80113c6:	4291      	cmp	r1, r2
 80113c8:	b508      	push	{r3, lr}
 80113ca:	d202      	bcs.n	80113d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80113cc:	4618      	mov	r0, r3
 80113ce:	f000 f900 	bl	80115d2 <_ZSt20__throw_length_errorPKc>
 80113d2:	bd08      	pop	{r3, pc}

080113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80113d4:	2a01      	cmp	r2, #1
 80113d6:	b410      	push	{r4}
 80113d8:	d104      	bne.n	80113e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80113da:	780a      	ldrb	r2, [r1, #0]
 80113dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e0:	7002      	strb	r2, [r0, #0]
 80113e2:	4770      	bx	lr
 80113e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e8:	f7ff bfb9 	b.w	801135e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080113ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80113ec:	b508      	push	{r3, lr}
 80113ee:	1a52      	subs	r2, r2, r1
 80113f0:	f7ff fff0 	bl	80113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80113f4:	bd08      	pop	{r3, pc}

080113f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80113f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80113fa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80113fc:	461f      	mov	r7, r3
 80113fe:	6843      	ldr	r3, [r0, #4]
 8011400:	eb01 0802 	add.w	r8, r1, r2
 8011404:	1ab2      	subs	r2, r6, r2
 8011406:	441a      	add	r2, r3
 8011408:	eba3 0908 	sub.w	r9, r3, r8
 801140c:	4603      	mov	r3, r0
 801140e:	9201      	str	r2, [sp, #4]
 8011410:	f853 2b08 	ldr.w	r2, [r3], #8
 8011414:	429a      	cmp	r2, r3
 8011416:	bf18      	it	ne
 8011418:	6882      	ldrne	r2, [r0, #8]
 801141a:	460d      	mov	r5, r1
 801141c:	bf08      	it	eq
 801141e:	220f      	moveq	r2, #15
 8011420:	a901      	add	r1, sp, #4
 8011422:	4604      	mov	r4, r0
 8011424:	f7ff ffa0 	bl	8011368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011428:	4682      	mov	sl, r0
 801142a:	b11d      	cbz	r5, 8011434 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 801142c:	6821      	ldr	r1, [r4, #0]
 801142e:	462a      	mov	r2, r5
 8011430:	f7ff ffd0 	bl	80113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011434:	b137      	cbz	r7, 8011444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8011436:	b12e      	cbz	r6, 8011444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8011438:	4632      	mov	r2, r6
 801143a:	4639      	mov	r1, r7
 801143c:	eb0a 0005 	add.w	r0, sl, r5
 8011440:	f7ff ffc8 	bl	80113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011444:	f1b9 0f00 	cmp.w	r9, #0
 8011448:	d007      	beq.n	801145a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801144a:	6821      	ldr	r1, [r4, #0]
 801144c:	4435      	add	r5, r6
 801144e:	464a      	mov	r2, r9
 8011450:	4441      	add	r1, r8
 8011452:	eb0a 0005 	add.w	r0, sl, r5
 8011456:	f7ff ffbd 	bl	80113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801145a:	4620      	mov	r0, r4
 801145c:	f7ff ffa6 	bl	80113ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011460:	9b01      	ldr	r3, [sp, #4]
 8011462:	f8c4 a000 	str.w	sl, [r4]
 8011466:	60a3      	str	r3, [r4, #8]
 8011468:	b002      	add	sp, #8
 801146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801146e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801146e:	f100 0208 	add.w	r2, r0, #8
 8011472:	6002      	str	r2, [r0, #0]
 8011474:	2200      	movs	r2, #0
 8011476:	6042      	str	r2, [r0, #4]
 8011478:	7202      	strb	r2, [r0, #8]
 801147a:	4770      	bx	lr

0801147c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801147c:	b510      	push	{r4, lr}
 801147e:	4604      	mov	r4, r0
 8011480:	f7ff ff94 	bl	80113ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011484:	4620      	mov	r0, r4
 8011486:	bd10      	pop	{r4, pc}

08011488 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8011488:	6800      	ldr	r0, [r0, #0]
 801148a:	4770      	bx	lr

0801148c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 801148c:	e9d0 2000 	ldrd	r2, r0, [r0]
 8011490:	4410      	add	r0, r2
 8011492:	4770      	bx	lr

08011494 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8011494:	6840      	ldr	r0, [r0, #4]
 8011496:	4770      	bx	lr

08011498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8011498:	4603      	mov	r3, r0
 801149a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801149c:	f853 2b08 	ldr.w	r2, [r3], #8
 80114a0:	6846      	ldr	r6, [r0, #4]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	bf18      	it	ne
 80114a6:	6883      	ldrne	r3, [r0, #8]
 80114a8:	f106 0501 	add.w	r5, r6, #1
 80114ac:	bf08      	it	eq
 80114ae:	230f      	moveq	r3, #15
 80114b0:	429d      	cmp	r5, r3
 80114b2:	4604      	mov	r4, r0
 80114b4:	460f      	mov	r7, r1
 80114b6:	d906      	bls.n	80114c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80114b8:	2301      	movs	r3, #1
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	2300      	movs	r3, #0
 80114be:	461a      	mov	r2, r3
 80114c0:	4631      	mov	r1, r6
 80114c2:	f7ff ff98 	bl	80113f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	559f      	strb	r7, [r3, r6]
 80114ca:	6823      	ldr	r3, [r4, #0]
 80114cc:	6065      	str	r5, [r4, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	555a      	strb	r2, [r3, r5]
 80114d2:	b003      	add	sp, #12
 80114d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080114d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80114d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114d8:	4604      	mov	r4, r0
 80114da:	4623      	mov	r3, r4
 80114dc:	6840      	ldr	r0, [r0, #4]
 80114de:	f853 6b08 	ldr.w	r6, [r3], #8
 80114e2:	429e      	cmp	r6, r3
 80114e4:	bf18      	it	ne
 80114e6:	68a3      	ldrne	r3, [r4, #8]
 80114e8:	eb00 0502 	add.w	r5, r0, r2
 80114ec:	bf08      	it	eq
 80114ee:	230f      	moveq	r3, #15
 80114f0:	429d      	cmp	r5, r3
 80114f2:	d80a      	bhi.n	801150a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 80114f4:	b112      	cbz	r2, 80114fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 80114f6:	4430      	add	r0, r6
 80114f8:	f7ff ff6c 	bl	80113d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80114fc:	6823      	ldr	r3, [r4, #0]
 80114fe:	6065      	str	r5, [r4, #4]
 8011500:	2200      	movs	r2, #0
 8011502:	4620      	mov	r0, r4
 8011504:	555a      	strb	r2, [r3, r5]
 8011506:	b002      	add	sp, #8
 8011508:	bd70      	pop	{r4, r5, r6, pc}
 801150a:	9200      	str	r2, [sp, #0]
 801150c:	460b      	mov	r3, r1
 801150e:	2200      	movs	r2, #0
 8011510:	4601      	mov	r1, r0
 8011512:	4620      	mov	r0, r4
 8011514:	f7ff ff6f 	bl	80113f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011518:	e7f0      	b.n	80114fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

0801151c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 801151c:	b570      	push	{r4, r5, r6, lr}
 801151e:	4b06      	ldr	r3, [pc, #24]	; (8011538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8011520:	4604      	mov	r4, r0
 8011522:	460d      	mov	r5, r1
 8011524:	4616      	mov	r6, r2
 8011526:	2100      	movs	r1, #0
 8011528:	f7ff ff48 	bl	80113bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801152c:	4632      	mov	r2, r6
 801152e:	4629      	mov	r1, r5
 8011530:	4620      	mov	r0, r4
 8011532:	f7ff ffd0 	bl	80114d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8011536:	bd70      	pop	{r4, r5, r6, pc}
 8011538:	080147a0 	.word	0x080147a0

0801153c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801153c:	6800      	ldr	r0, [r0, #0]
 801153e:	4770      	bx	lr

08011540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8011540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011542:	4604      	mov	r4, r0
 8011544:	4616      	mov	r6, r2
 8011546:	460d      	mov	r5, r1
 8011548:	b919      	cbnz	r1, 8011552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801154a:	b112      	cbz	r2, 8011552 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801154c:	480d      	ldr	r0, [pc, #52]	; (8011584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801154e:	f000 f83d 	bl	80115cc <_ZSt19__throw_logic_errorPKc>
 8011552:	1b73      	subs	r3, r6, r5
 8011554:	2b0f      	cmp	r3, #15
 8011556:	9301      	str	r3, [sp, #4]
 8011558:	d907      	bls.n	801156a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801155a:	2200      	movs	r2, #0
 801155c:	a901      	add	r1, sp, #4
 801155e:	4620      	mov	r0, r4
 8011560:	f7ff ff02 	bl	8011368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011564:	9b01      	ldr	r3, [sp, #4]
 8011566:	6020      	str	r0, [r4, #0]
 8011568:	60a3      	str	r3, [r4, #8]
 801156a:	4632      	mov	r2, r6
 801156c:	4629      	mov	r1, r5
 801156e:	6820      	ldr	r0, [r4, #0]
 8011570:	f7ff ff3c 	bl	80113ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8011574:	9b01      	ldr	r3, [sp, #4]
 8011576:	6822      	ldr	r2, [r4, #0]
 8011578:	6063      	str	r3, [r4, #4]
 801157a:	2100      	movs	r1, #0
 801157c:	54d1      	strb	r1, [r2, r3]
 801157e:	b002      	add	sp, #8
 8011580:	bd70      	pop	{r4, r5, r6, pc}
 8011582:	bf00      	nop
 8011584:	080147b5 	.word	0x080147b5

08011588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 8011588:	b510      	push	{r4, lr}
 801158a:	f100 0308 	add.w	r3, r0, #8
 801158e:	4604      	mov	r4, r0
 8011590:	6003      	str	r3, [r0, #0]
 8011592:	440a      	add	r2, r1
 8011594:	f04f 0300 	mov.w	r3, #0
 8011598:	f7ff ffd2 	bl	8011540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801159c:	4620      	mov	r0, r4
 801159e:	bd10      	pop	{r4, pc}

080115a0 <_ZdlPv>:
 80115a0:	f000 b832 	b.w	8011608 <free>

080115a4 <_Znwj>:
 80115a4:	2801      	cmp	r0, #1
 80115a6:	bf38      	it	cc
 80115a8:	2001      	movcc	r0, #1
 80115aa:	b510      	push	{r4, lr}
 80115ac:	4604      	mov	r4, r0
 80115ae:	4620      	mov	r0, r4
 80115b0:	f000 f822 	bl	80115f8 <malloc>
 80115b4:	b100      	cbz	r0, 80115b8 <_Znwj+0x14>
 80115b6:	bd10      	pop	{r4, pc}
 80115b8:	f000 f80e 	bl	80115d8 <_ZSt15get_new_handlerv>
 80115bc:	b908      	cbnz	r0, 80115c2 <_Znwj+0x1e>
 80115be:	f000 f813 	bl	80115e8 <abort>
 80115c2:	4780      	blx	r0
 80115c4:	e7f3      	b.n	80115ae <_Znwj+0xa>

080115c6 <_ZSt17__throw_bad_allocv>:
 80115c6:	b508      	push	{r3, lr}
 80115c8:	f000 f80e 	bl	80115e8 <abort>

080115cc <_ZSt19__throw_logic_errorPKc>:
 80115cc:	b508      	push	{r3, lr}
 80115ce:	f000 f80b 	bl	80115e8 <abort>

080115d2 <_ZSt20__throw_length_errorPKc>:
 80115d2:	b508      	push	{r3, lr}
 80115d4:	f000 f808 	bl	80115e8 <abort>

080115d8 <_ZSt15get_new_handlerv>:
 80115d8:	4b02      	ldr	r3, [pc, #8]	; (80115e4 <_ZSt15get_new_handlerv+0xc>)
 80115da:	6818      	ldr	r0, [r3, #0]
 80115dc:	f3bf 8f5b 	dmb	ish
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	200085f8 	.word	0x200085f8

080115e8 <abort>:
 80115e8:	b508      	push	{r3, lr}
 80115ea:	2006      	movs	r0, #6
 80115ec:	f000 fb54 	bl	8011c98 <raise>
 80115f0:	2001      	movs	r0, #1
 80115f2:	f7ff fd49 	bl	8011088 <_exit>
	...

080115f8 <malloc>:
 80115f8:	4b02      	ldr	r3, [pc, #8]	; (8011604 <malloc+0xc>)
 80115fa:	4601      	mov	r1, r0
 80115fc:	6818      	ldr	r0, [r3, #0]
 80115fe:	f000 b82b 	b.w	8011658 <_malloc_r>
 8011602:	bf00      	nop
 8011604:	20000100 	.word	0x20000100

08011608 <free>:
 8011608:	4b02      	ldr	r3, [pc, #8]	; (8011614 <free+0xc>)
 801160a:	4601      	mov	r1, r0
 801160c:	6818      	ldr	r0, [r3, #0]
 801160e:	f000 bbf7 	b.w	8011e00 <_free_r>
 8011612:	bf00      	nop
 8011614:	20000100 	.word	0x20000100

08011618 <sbrk_aligned>:
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	4e0e      	ldr	r6, [pc, #56]	; (8011654 <sbrk_aligned+0x3c>)
 801161c:	460c      	mov	r4, r1
 801161e:	6831      	ldr	r1, [r6, #0]
 8011620:	4605      	mov	r5, r0
 8011622:	b911      	cbnz	r1, 801162a <sbrk_aligned+0x12>
 8011624:	f000 fb88 	bl	8011d38 <_sbrk_r>
 8011628:	6030      	str	r0, [r6, #0]
 801162a:	4621      	mov	r1, r4
 801162c:	4628      	mov	r0, r5
 801162e:	f000 fb83 	bl	8011d38 <_sbrk_r>
 8011632:	1c43      	adds	r3, r0, #1
 8011634:	d00a      	beq.n	801164c <sbrk_aligned+0x34>
 8011636:	1cc4      	adds	r4, r0, #3
 8011638:	f024 0403 	bic.w	r4, r4, #3
 801163c:	42a0      	cmp	r0, r4
 801163e:	d007      	beq.n	8011650 <sbrk_aligned+0x38>
 8011640:	1a21      	subs	r1, r4, r0
 8011642:	4628      	mov	r0, r5
 8011644:	f000 fb78 	bl	8011d38 <_sbrk_r>
 8011648:	3001      	adds	r0, #1
 801164a:	d101      	bne.n	8011650 <sbrk_aligned+0x38>
 801164c:	f04f 34ff 	mov.w	r4, #4294967295
 8011650:	4620      	mov	r0, r4
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	20008600 	.word	0x20008600

08011658 <_malloc_r>:
 8011658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801165c:	1ccd      	adds	r5, r1, #3
 801165e:	f025 0503 	bic.w	r5, r5, #3
 8011662:	3508      	adds	r5, #8
 8011664:	2d0c      	cmp	r5, #12
 8011666:	bf38      	it	cc
 8011668:	250c      	movcc	r5, #12
 801166a:	2d00      	cmp	r5, #0
 801166c:	4607      	mov	r7, r0
 801166e:	db01      	blt.n	8011674 <_malloc_r+0x1c>
 8011670:	42a9      	cmp	r1, r5
 8011672:	d905      	bls.n	8011680 <_malloc_r+0x28>
 8011674:	230c      	movs	r3, #12
 8011676:	603b      	str	r3, [r7, #0]
 8011678:	2600      	movs	r6, #0
 801167a:	4630      	mov	r0, r6
 801167c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011680:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011754 <_malloc_r+0xfc>
 8011684:	f000 f868 	bl	8011758 <__malloc_lock>
 8011688:	f8d8 3000 	ldr.w	r3, [r8]
 801168c:	461c      	mov	r4, r3
 801168e:	bb5c      	cbnz	r4, 80116e8 <_malloc_r+0x90>
 8011690:	4629      	mov	r1, r5
 8011692:	4638      	mov	r0, r7
 8011694:	f7ff ffc0 	bl	8011618 <sbrk_aligned>
 8011698:	1c43      	adds	r3, r0, #1
 801169a:	4604      	mov	r4, r0
 801169c:	d155      	bne.n	801174a <_malloc_r+0xf2>
 801169e:	f8d8 4000 	ldr.w	r4, [r8]
 80116a2:	4626      	mov	r6, r4
 80116a4:	2e00      	cmp	r6, #0
 80116a6:	d145      	bne.n	8011734 <_malloc_r+0xdc>
 80116a8:	2c00      	cmp	r4, #0
 80116aa:	d048      	beq.n	801173e <_malloc_r+0xe6>
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	4631      	mov	r1, r6
 80116b0:	4638      	mov	r0, r7
 80116b2:	eb04 0903 	add.w	r9, r4, r3
 80116b6:	f000 fb3f 	bl	8011d38 <_sbrk_r>
 80116ba:	4581      	cmp	r9, r0
 80116bc:	d13f      	bne.n	801173e <_malloc_r+0xe6>
 80116be:	6821      	ldr	r1, [r4, #0]
 80116c0:	1a6d      	subs	r5, r5, r1
 80116c2:	4629      	mov	r1, r5
 80116c4:	4638      	mov	r0, r7
 80116c6:	f7ff ffa7 	bl	8011618 <sbrk_aligned>
 80116ca:	3001      	adds	r0, #1
 80116cc:	d037      	beq.n	801173e <_malloc_r+0xe6>
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	442b      	add	r3, r5
 80116d2:	6023      	str	r3, [r4, #0]
 80116d4:	f8d8 3000 	ldr.w	r3, [r8]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d038      	beq.n	801174e <_malloc_r+0xf6>
 80116dc:	685a      	ldr	r2, [r3, #4]
 80116de:	42a2      	cmp	r2, r4
 80116e0:	d12b      	bne.n	801173a <_malloc_r+0xe2>
 80116e2:	2200      	movs	r2, #0
 80116e4:	605a      	str	r2, [r3, #4]
 80116e6:	e00f      	b.n	8011708 <_malloc_r+0xb0>
 80116e8:	6822      	ldr	r2, [r4, #0]
 80116ea:	1b52      	subs	r2, r2, r5
 80116ec:	d41f      	bmi.n	801172e <_malloc_r+0xd6>
 80116ee:	2a0b      	cmp	r2, #11
 80116f0:	d917      	bls.n	8011722 <_malloc_r+0xca>
 80116f2:	1961      	adds	r1, r4, r5
 80116f4:	42a3      	cmp	r3, r4
 80116f6:	6025      	str	r5, [r4, #0]
 80116f8:	bf18      	it	ne
 80116fa:	6059      	strne	r1, [r3, #4]
 80116fc:	6863      	ldr	r3, [r4, #4]
 80116fe:	bf08      	it	eq
 8011700:	f8c8 1000 	streq.w	r1, [r8]
 8011704:	5162      	str	r2, [r4, r5]
 8011706:	604b      	str	r3, [r1, #4]
 8011708:	4638      	mov	r0, r7
 801170a:	f104 060b 	add.w	r6, r4, #11
 801170e:	f000 f829 	bl	8011764 <__malloc_unlock>
 8011712:	f026 0607 	bic.w	r6, r6, #7
 8011716:	1d23      	adds	r3, r4, #4
 8011718:	1af2      	subs	r2, r6, r3
 801171a:	d0ae      	beq.n	801167a <_malloc_r+0x22>
 801171c:	1b9b      	subs	r3, r3, r6
 801171e:	50a3      	str	r3, [r4, r2]
 8011720:	e7ab      	b.n	801167a <_malloc_r+0x22>
 8011722:	42a3      	cmp	r3, r4
 8011724:	6862      	ldr	r2, [r4, #4]
 8011726:	d1dd      	bne.n	80116e4 <_malloc_r+0x8c>
 8011728:	f8c8 2000 	str.w	r2, [r8]
 801172c:	e7ec      	b.n	8011708 <_malloc_r+0xb0>
 801172e:	4623      	mov	r3, r4
 8011730:	6864      	ldr	r4, [r4, #4]
 8011732:	e7ac      	b.n	801168e <_malloc_r+0x36>
 8011734:	4634      	mov	r4, r6
 8011736:	6876      	ldr	r6, [r6, #4]
 8011738:	e7b4      	b.n	80116a4 <_malloc_r+0x4c>
 801173a:	4613      	mov	r3, r2
 801173c:	e7cc      	b.n	80116d8 <_malloc_r+0x80>
 801173e:	230c      	movs	r3, #12
 8011740:	603b      	str	r3, [r7, #0]
 8011742:	4638      	mov	r0, r7
 8011744:	f000 f80e 	bl	8011764 <__malloc_unlock>
 8011748:	e797      	b.n	801167a <_malloc_r+0x22>
 801174a:	6025      	str	r5, [r4, #0]
 801174c:	e7dc      	b.n	8011708 <_malloc_r+0xb0>
 801174e:	605b      	str	r3, [r3, #4]
 8011750:	deff      	udf	#255	; 0xff
 8011752:	bf00      	nop
 8011754:	200085fc 	.word	0x200085fc

08011758 <__malloc_lock>:
 8011758:	4801      	ldr	r0, [pc, #4]	; (8011760 <__malloc_lock+0x8>)
 801175a:	f000 bb39 	b.w	8011dd0 <__retarget_lock_acquire_recursive>
 801175e:	bf00      	nop
 8011760:	20008744 	.word	0x20008744

08011764 <__malloc_unlock>:
 8011764:	4801      	ldr	r0, [pc, #4]	; (801176c <__malloc_unlock+0x8>)
 8011766:	f000 bb34 	b.w	8011dd2 <__retarget_lock_release_recursive>
 801176a:	bf00      	nop
 801176c:	20008744 	.word	0x20008744

08011770 <std>:
 8011770:	2300      	movs	r3, #0
 8011772:	b510      	push	{r4, lr}
 8011774:	4604      	mov	r4, r0
 8011776:	e9c0 3300 	strd	r3, r3, [r0]
 801177a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801177e:	6083      	str	r3, [r0, #8]
 8011780:	8181      	strh	r1, [r0, #12]
 8011782:	6643      	str	r3, [r0, #100]	; 0x64
 8011784:	81c2      	strh	r2, [r0, #14]
 8011786:	6183      	str	r3, [r0, #24]
 8011788:	4619      	mov	r1, r3
 801178a:	2208      	movs	r2, #8
 801178c:	305c      	adds	r0, #92	; 0x5c
 801178e:	f000 fa21 	bl	8011bd4 <memset>
 8011792:	4b05      	ldr	r3, [pc, #20]	; (80117a8 <std+0x38>)
 8011794:	6263      	str	r3, [r4, #36]	; 0x24
 8011796:	4b05      	ldr	r3, [pc, #20]	; (80117ac <std+0x3c>)
 8011798:	62a3      	str	r3, [r4, #40]	; 0x28
 801179a:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <std+0x40>)
 801179c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801179e:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <std+0x44>)
 80117a0:	6224      	str	r4, [r4, #32]
 80117a2:	6323      	str	r3, [r4, #48]	; 0x30
 80117a4:	bd10      	pop	{r4, pc}
 80117a6:	bf00      	nop
 80117a8:	080119ad 	.word	0x080119ad
 80117ac:	080119cf 	.word	0x080119cf
 80117b0:	08011a07 	.word	0x08011a07
 80117b4:	08011a2b 	.word	0x08011a2b

080117b8 <stdio_exit_handler>:
 80117b8:	4a02      	ldr	r2, [pc, #8]	; (80117c4 <stdio_exit_handler+0xc>)
 80117ba:	4903      	ldr	r1, [pc, #12]	; (80117c8 <stdio_exit_handler+0x10>)
 80117bc:	4803      	ldr	r0, [pc, #12]	; (80117cc <stdio_exit_handler+0x14>)
 80117be:	f000 b869 	b.w	8011894 <_fwalk_sglue>
 80117c2:	bf00      	nop
 80117c4:	200000a8 	.word	0x200000a8
 80117c8:	080127fd 	.word	0x080127fd
 80117cc:	200000b4 	.word	0x200000b4

080117d0 <cleanup_stdio>:
 80117d0:	6841      	ldr	r1, [r0, #4]
 80117d2:	4b0c      	ldr	r3, [pc, #48]	; (8011804 <cleanup_stdio+0x34>)
 80117d4:	4299      	cmp	r1, r3
 80117d6:	b510      	push	{r4, lr}
 80117d8:	4604      	mov	r4, r0
 80117da:	d001      	beq.n	80117e0 <cleanup_stdio+0x10>
 80117dc:	f001 f80e 	bl	80127fc <_fflush_r>
 80117e0:	68a1      	ldr	r1, [r4, #8]
 80117e2:	4b09      	ldr	r3, [pc, #36]	; (8011808 <cleanup_stdio+0x38>)
 80117e4:	4299      	cmp	r1, r3
 80117e6:	d002      	beq.n	80117ee <cleanup_stdio+0x1e>
 80117e8:	4620      	mov	r0, r4
 80117ea:	f001 f807 	bl	80127fc <_fflush_r>
 80117ee:	68e1      	ldr	r1, [r4, #12]
 80117f0:	4b06      	ldr	r3, [pc, #24]	; (801180c <cleanup_stdio+0x3c>)
 80117f2:	4299      	cmp	r1, r3
 80117f4:	d004      	beq.n	8011800 <cleanup_stdio+0x30>
 80117f6:	4620      	mov	r0, r4
 80117f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117fc:	f000 bffe 	b.w	80127fc <_fflush_r>
 8011800:	bd10      	pop	{r4, pc}
 8011802:	bf00      	nop
 8011804:	20008604 	.word	0x20008604
 8011808:	2000866c 	.word	0x2000866c
 801180c:	200086d4 	.word	0x200086d4

08011810 <global_stdio_init.part.0>:
 8011810:	b510      	push	{r4, lr}
 8011812:	4b0b      	ldr	r3, [pc, #44]	; (8011840 <global_stdio_init.part.0+0x30>)
 8011814:	4c0b      	ldr	r4, [pc, #44]	; (8011844 <global_stdio_init.part.0+0x34>)
 8011816:	4a0c      	ldr	r2, [pc, #48]	; (8011848 <global_stdio_init.part.0+0x38>)
 8011818:	601a      	str	r2, [r3, #0]
 801181a:	4620      	mov	r0, r4
 801181c:	2200      	movs	r2, #0
 801181e:	2104      	movs	r1, #4
 8011820:	f7ff ffa6 	bl	8011770 <std>
 8011824:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011828:	2201      	movs	r2, #1
 801182a:	2109      	movs	r1, #9
 801182c:	f7ff ffa0 	bl	8011770 <std>
 8011830:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011834:	2202      	movs	r2, #2
 8011836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801183a:	2112      	movs	r1, #18
 801183c:	f7ff bf98 	b.w	8011770 <std>
 8011840:	2000873c 	.word	0x2000873c
 8011844:	20008604 	.word	0x20008604
 8011848:	080117b9 	.word	0x080117b9

0801184c <__sfp_lock_acquire>:
 801184c:	4801      	ldr	r0, [pc, #4]	; (8011854 <__sfp_lock_acquire+0x8>)
 801184e:	f000 babf 	b.w	8011dd0 <__retarget_lock_acquire_recursive>
 8011852:	bf00      	nop
 8011854:	20008745 	.word	0x20008745

08011858 <__sfp_lock_release>:
 8011858:	4801      	ldr	r0, [pc, #4]	; (8011860 <__sfp_lock_release+0x8>)
 801185a:	f000 baba 	b.w	8011dd2 <__retarget_lock_release_recursive>
 801185e:	bf00      	nop
 8011860:	20008745 	.word	0x20008745

08011864 <__sinit>:
 8011864:	b510      	push	{r4, lr}
 8011866:	4604      	mov	r4, r0
 8011868:	f7ff fff0 	bl	801184c <__sfp_lock_acquire>
 801186c:	6a23      	ldr	r3, [r4, #32]
 801186e:	b11b      	cbz	r3, 8011878 <__sinit+0x14>
 8011870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011874:	f7ff bff0 	b.w	8011858 <__sfp_lock_release>
 8011878:	4b04      	ldr	r3, [pc, #16]	; (801188c <__sinit+0x28>)
 801187a:	6223      	str	r3, [r4, #32]
 801187c:	4b04      	ldr	r3, [pc, #16]	; (8011890 <__sinit+0x2c>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d1f5      	bne.n	8011870 <__sinit+0xc>
 8011884:	f7ff ffc4 	bl	8011810 <global_stdio_init.part.0>
 8011888:	e7f2      	b.n	8011870 <__sinit+0xc>
 801188a:	bf00      	nop
 801188c:	080117d1 	.word	0x080117d1
 8011890:	2000873c 	.word	0x2000873c

08011894 <_fwalk_sglue>:
 8011894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011898:	4607      	mov	r7, r0
 801189a:	4688      	mov	r8, r1
 801189c:	4614      	mov	r4, r2
 801189e:	2600      	movs	r6, #0
 80118a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118a4:	f1b9 0901 	subs.w	r9, r9, #1
 80118a8:	d505      	bpl.n	80118b6 <_fwalk_sglue+0x22>
 80118aa:	6824      	ldr	r4, [r4, #0]
 80118ac:	2c00      	cmp	r4, #0
 80118ae:	d1f7      	bne.n	80118a0 <_fwalk_sglue+0xc>
 80118b0:	4630      	mov	r0, r6
 80118b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b6:	89ab      	ldrh	r3, [r5, #12]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d907      	bls.n	80118cc <_fwalk_sglue+0x38>
 80118bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118c0:	3301      	adds	r3, #1
 80118c2:	d003      	beq.n	80118cc <_fwalk_sglue+0x38>
 80118c4:	4629      	mov	r1, r5
 80118c6:	4638      	mov	r0, r7
 80118c8:	47c0      	blx	r8
 80118ca:	4306      	orrs	r6, r0
 80118cc:	3568      	adds	r5, #104	; 0x68
 80118ce:	e7e9      	b.n	80118a4 <_fwalk_sglue+0x10>

080118d0 <iprintf>:
 80118d0:	b40f      	push	{r0, r1, r2, r3}
 80118d2:	b507      	push	{r0, r1, r2, lr}
 80118d4:	4906      	ldr	r1, [pc, #24]	; (80118f0 <iprintf+0x20>)
 80118d6:	ab04      	add	r3, sp, #16
 80118d8:	6808      	ldr	r0, [r1, #0]
 80118da:	f853 2b04 	ldr.w	r2, [r3], #4
 80118de:	6881      	ldr	r1, [r0, #8]
 80118e0:	9301      	str	r3, [sp, #4]
 80118e2:	f000 fc5b 	bl	801219c <_vfiprintf_r>
 80118e6:	b003      	add	sp, #12
 80118e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118ec:	b004      	add	sp, #16
 80118ee:	4770      	bx	lr
 80118f0:	20000100 	.word	0x20000100

080118f4 <_puts_r>:
 80118f4:	6a03      	ldr	r3, [r0, #32]
 80118f6:	b570      	push	{r4, r5, r6, lr}
 80118f8:	6884      	ldr	r4, [r0, #8]
 80118fa:	4605      	mov	r5, r0
 80118fc:	460e      	mov	r6, r1
 80118fe:	b90b      	cbnz	r3, 8011904 <_puts_r+0x10>
 8011900:	f7ff ffb0 	bl	8011864 <__sinit>
 8011904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011906:	07db      	lsls	r3, r3, #31
 8011908:	d405      	bmi.n	8011916 <_puts_r+0x22>
 801190a:	89a3      	ldrh	r3, [r4, #12]
 801190c:	0598      	lsls	r0, r3, #22
 801190e:	d402      	bmi.n	8011916 <_puts_r+0x22>
 8011910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011912:	f000 fa5d 	bl	8011dd0 <__retarget_lock_acquire_recursive>
 8011916:	89a3      	ldrh	r3, [r4, #12]
 8011918:	0719      	lsls	r1, r3, #28
 801191a:	d513      	bpl.n	8011944 <_puts_r+0x50>
 801191c:	6923      	ldr	r3, [r4, #16]
 801191e:	b18b      	cbz	r3, 8011944 <_puts_r+0x50>
 8011920:	3e01      	subs	r6, #1
 8011922:	68a3      	ldr	r3, [r4, #8]
 8011924:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011928:	3b01      	subs	r3, #1
 801192a:	60a3      	str	r3, [r4, #8]
 801192c:	b9e9      	cbnz	r1, 801196a <_puts_r+0x76>
 801192e:	2b00      	cmp	r3, #0
 8011930:	da2e      	bge.n	8011990 <_puts_r+0x9c>
 8011932:	4622      	mov	r2, r4
 8011934:	210a      	movs	r1, #10
 8011936:	4628      	mov	r0, r5
 8011938:	f000 f89c 	bl	8011a74 <__swbuf_r>
 801193c:	3001      	adds	r0, #1
 801193e:	d007      	beq.n	8011950 <_puts_r+0x5c>
 8011940:	250a      	movs	r5, #10
 8011942:	e007      	b.n	8011954 <_puts_r+0x60>
 8011944:	4621      	mov	r1, r4
 8011946:	4628      	mov	r0, r5
 8011948:	f000 f8d2 	bl	8011af0 <__swsetup_r>
 801194c:	2800      	cmp	r0, #0
 801194e:	d0e7      	beq.n	8011920 <_puts_r+0x2c>
 8011950:	f04f 35ff 	mov.w	r5, #4294967295
 8011954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011956:	07da      	lsls	r2, r3, #31
 8011958:	d405      	bmi.n	8011966 <_puts_r+0x72>
 801195a:	89a3      	ldrh	r3, [r4, #12]
 801195c:	059b      	lsls	r3, r3, #22
 801195e:	d402      	bmi.n	8011966 <_puts_r+0x72>
 8011960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011962:	f000 fa36 	bl	8011dd2 <__retarget_lock_release_recursive>
 8011966:	4628      	mov	r0, r5
 8011968:	bd70      	pop	{r4, r5, r6, pc}
 801196a:	2b00      	cmp	r3, #0
 801196c:	da04      	bge.n	8011978 <_puts_r+0x84>
 801196e:	69a2      	ldr	r2, [r4, #24]
 8011970:	429a      	cmp	r2, r3
 8011972:	dc06      	bgt.n	8011982 <_puts_r+0x8e>
 8011974:	290a      	cmp	r1, #10
 8011976:	d004      	beq.n	8011982 <_puts_r+0x8e>
 8011978:	6823      	ldr	r3, [r4, #0]
 801197a:	1c5a      	adds	r2, r3, #1
 801197c:	6022      	str	r2, [r4, #0]
 801197e:	7019      	strb	r1, [r3, #0]
 8011980:	e7cf      	b.n	8011922 <_puts_r+0x2e>
 8011982:	4622      	mov	r2, r4
 8011984:	4628      	mov	r0, r5
 8011986:	f000 f875 	bl	8011a74 <__swbuf_r>
 801198a:	3001      	adds	r0, #1
 801198c:	d1c9      	bne.n	8011922 <_puts_r+0x2e>
 801198e:	e7df      	b.n	8011950 <_puts_r+0x5c>
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	250a      	movs	r5, #10
 8011994:	1c5a      	adds	r2, r3, #1
 8011996:	6022      	str	r2, [r4, #0]
 8011998:	701d      	strb	r5, [r3, #0]
 801199a:	e7db      	b.n	8011954 <_puts_r+0x60>

0801199c <puts>:
 801199c:	4b02      	ldr	r3, [pc, #8]	; (80119a8 <puts+0xc>)
 801199e:	4601      	mov	r1, r0
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	f7ff bfa7 	b.w	80118f4 <_puts_r>
 80119a6:	bf00      	nop
 80119a8:	20000100 	.word	0x20000100

080119ac <__sread>:
 80119ac:	b510      	push	{r4, lr}
 80119ae:	460c      	mov	r4, r1
 80119b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b4:	f000 f99a 	bl	8011cec <_read_r>
 80119b8:	2800      	cmp	r0, #0
 80119ba:	bfab      	itete	ge
 80119bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80119be:	89a3      	ldrhlt	r3, [r4, #12]
 80119c0:	181b      	addge	r3, r3, r0
 80119c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80119c6:	bfac      	ite	ge
 80119c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80119ca:	81a3      	strhlt	r3, [r4, #12]
 80119cc:	bd10      	pop	{r4, pc}

080119ce <__swrite>:
 80119ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d2:	461f      	mov	r7, r3
 80119d4:	898b      	ldrh	r3, [r1, #12]
 80119d6:	05db      	lsls	r3, r3, #23
 80119d8:	4605      	mov	r5, r0
 80119da:	460c      	mov	r4, r1
 80119dc:	4616      	mov	r6, r2
 80119de:	d505      	bpl.n	80119ec <__swrite+0x1e>
 80119e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119e4:	2302      	movs	r3, #2
 80119e6:	2200      	movs	r2, #0
 80119e8:	f000 f96e 	bl	8011cc8 <_lseek_r>
 80119ec:	89a3      	ldrh	r3, [r4, #12]
 80119ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119f6:	81a3      	strh	r3, [r4, #12]
 80119f8:	4632      	mov	r2, r6
 80119fa:	463b      	mov	r3, r7
 80119fc:	4628      	mov	r0, r5
 80119fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a02:	f000 b9a9 	b.w	8011d58 <_write_r>

08011a06 <__sseek>:
 8011a06:	b510      	push	{r4, lr}
 8011a08:	460c      	mov	r4, r1
 8011a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a0e:	f000 f95b 	bl	8011cc8 <_lseek_r>
 8011a12:	1c43      	adds	r3, r0, #1
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	bf15      	itete	ne
 8011a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8011a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011a22:	81a3      	strheq	r3, [r4, #12]
 8011a24:	bf18      	it	ne
 8011a26:	81a3      	strhne	r3, [r4, #12]
 8011a28:	bd10      	pop	{r4, pc}

08011a2a <__sclose>:
 8011a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a2e:	f000 b93b 	b.w	8011ca8 <_close_r>
	...

08011a34 <_vsiprintf_r>:
 8011a34:	b500      	push	{lr}
 8011a36:	b09b      	sub	sp, #108	; 0x6c
 8011a38:	9100      	str	r1, [sp, #0]
 8011a3a:	9104      	str	r1, [sp, #16]
 8011a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a40:	9105      	str	r1, [sp, #20]
 8011a42:	9102      	str	r1, [sp, #8]
 8011a44:	4905      	ldr	r1, [pc, #20]	; (8011a5c <_vsiprintf_r+0x28>)
 8011a46:	9103      	str	r1, [sp, #12]
 8011a48:	4669      	mov	r1, sp
 8011a4a:	f000 fa7f 	bl	8011f4c <_svfiprintf_r>
 8011a4e:	9b00      	ldr	r3, [sp, #0]
 8011a50:	2200      	movs	r2, #0
 8011a52:	701a      	strb	r2, [r3, #0]
 8011a54:	b01b      	add	sp, #108	; 0x6c
 8011a56:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a5a:	bf00      	nop
 8011a5c:	ffff0208 	.word	0xffff0208

08011a60 <vsiprintf>:
 8011a60:	4613      	mov	r3, r2
 8011a62:	460a      	mov	r2, r1
 8011a64:	4601      	mov	r1, r0
 8011a66:	4802      	ldr	r0, [pc, #8]	; (8011a70 <vsiprintf+0x10>)
 8011a68:	6800      	ldr	r0, [r0, #0]
 8011a6a:	f7ff bfe3 	b.w	8011a34 <_vsiprintf_r>
 8011a6e:	bf00      	nop
 8011a70:	20000100 	.word	0x20000100

08011a74 <__swbuf_r>:
 8011a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a76:	460e      	mov	r6, r1
 8011a78:	4614      	mov	r4, r2
 8011a7a:	4605      	mov	r5, r0
 8011a7c:	b118      	cbz	r0, 8011a86 <__swbuf_r+0x12>
 8011a7e:	6a03      	ldr	r3, [r0, #32]
 8011a80:	b90b      	cbnz	r3, 8011a86 <__swbuf_r+0x12>
 8011a82:	f7ff feef 	bl	8011864 <__sinit>
 8011a86:	69a3      	ldr	r3, [r4, #24]
 8011a88:	60a3      	str	r3, [r4, #8]
 8011a8a:	89a3      	ldrh	r3, [r4, #12]
 8011a8c:	071a      	lsls	r2, r3, #28
 8011a8e:	d525      	bpl.n	8011adc <__swbuf_r+0x68>
 8011a90:	6923      	ldr	r3, [r4, #16]
 8011a92:	b31b      	cbz	r3, 8011adc <__swbuf_r+0x68>
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	6922      	ldr	r2, [r4, #16]
 8011a98:	1a98      	subs	r0, r3, r2
 8011a9a:	6963      	ldr	r3, [r4, #20]
 8011a9c:	b2f6      	uxtb	r6, r6
 8011a9e:	4283      	cmp	r3, r0
 8011aa0:	4637      	mov	r7, r6
 8011aa2:	dc04      	bgt.n	8011aae <__swbuf_r+0x3a>
 8011aa4:	4621      	mov	r1, r4
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	f000 fea8 	bl	80127fc <_fflush_r>
 8011aac:	b9e0      	cbnz	r0, 8011ae8 <__swbuf_r+0x74>
 8011aae:	68a3      	ldr	r3, [r4, #8]
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	60a3      	str	r3, [r4, #8]
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	1c5a      	adds	r2, r3, #1
 8011ab8:	6022      	str	r2, [r4, #0]
 8011aba:	701e      	strb	r6, [r3, #0]
 8011abc:	6962      	ldr	r2, [r4, #20]
 8011abe:	1c43      	adds	r3, r0, #1
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d004      	beq.n	8011ace <__swbuf_r+0x5a>
 8011ac4:	89a3      	ldrh	r3, [r4, #12]
 8011ac6:	07db      	lsls	r3, r3, #31
 8011ac8:	d506      	bpl.n	8011ad8 <__swbuf_r+0x64>
 8011aca:	2e0a      	cmp	r6, #10
 8011acc:	d104      	bne.n	8011ad8 <__swbuf_r+0x64>
 8011ace:	4621      	mov	r1, r4
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	f000 fe93 	bl	80127fc <_fflush_r>
 8011ad6:	b938      	cbnz	r0, 8011ae8 <__swbuf_r+0x74>
 8011ad8:	4638      	mov	r0, r7
 8011ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011adc:	4621      	mov	r1, r4
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f000 f806 	bl	8011af0 <__swsetup_r>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d0d5      	beq.n	8011a94 <__swbuf_r+0x20>
 8011ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8011aec:	e7f4      	b.n	8011ad8 <__swbuf_r+0x64>
	...

08011af0 <__swsetup_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	4b2a      	ldr	r3, [pc, #168]	; (8011b9c <__swsetup_r+0xac>)
 8011af4:	4605      	mov	r5, r0
 8011af6:	6818      	ldr	r0, [r3, #0]
 8011af8:	460c      	mov	r4, r1
 8011afa:	b118      	cbz	r0, 8011b04 <__swsetup_r+0x14>
 8011afc:	6a03      	ldr	r3, [r0, #32]
 8011afe:	b90b      	cbnz	r3, 8011b04 <__swsetup_r+0x14>
 8011b00:	f7ff feb0 	bl	8011864 <__sinit>
 8011b04:	89a3      	ldrh	r3, [r4, #12]
 8011b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b0a:	0718      	lsls	r0, r3, #28
 8011b0c:	d422      	bmi.n	8011b54 <__swsetup_r+0x64>
 8011b0e:	06d9      	lsls	r1, r3, #27
 8011b10:	d407      	bmi.n	8011b22 <__swsetup_r+0x32>
 8011b12:	2309      	movs	r3, #9
 8011b14:	602b      	str	r3, [r5, #0]
 8011b16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b20:	e034      	b.n	8011b8c <__swsetup_r+0x9c>
 8011b22:	0758      	lsls	r0, r3, #29
 8011b24:	d512      	bpl.n	8011b4c <__swsetup_r+0x5c>
 8011b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b28:	b141      	cbz	r1, 8011b3c <__swsetup_r+0x4c>
 8011b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b2e:	4299      	cmp	r1, r3
 8011b30:	d002      	beq.n	8011b38 <__swsetup_r+0x48>
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 f964 	bl	8011e00 <_free_r>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	6363      	str	r3, [r4, #52]	; 0x34
 8011b3c:	89a3      	ldrh	r3, [r4, #12]
 8011b3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b42:	81a3      	strh	r3, [r4, #12]
 8011b44:	2300      	movs	r3, #0
 8011b46:	6063      	str	r3, [r4, #4]
 8011b48:	6923      	ldr	r3, [r4, #16]
 8011b4a:	6023      	str	r3, [r4, #0]
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	f043 0308 	orr.w	r3, r3, #8
 8011b52:	81a3      	strh	r3, [r4, #12]
 8011b54:	6923      	ldr	r3, [r4, #16]
 8011b56:	b94b      	cbnz	r3, 8011b6c <__swsetup_r+0x7c>
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b62:	d003      	beq.n	8011b6c <__swsetup_r+0x7c>
 8011b64:	4621      	mov	r1, r4
 8011b66:	4628      	mov	r0, r5
 8011b68:	f000 fe96 	bl	8012898 <__smakebuf_r>
 8011b6c:	89a0      	ldrh	r0, [r4, #12]
 8011b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b72:	f010 0301 	ands.w	r3, r0, #1
 8011b76:	d00a      	beq.n	8011b8e <__swsetup_r+0x9e>
 8011b78:	2300      	movs	r3, #0
 8011b7a:	60a3      	str	r3, [r4, #8]
 8011b7c:	6963      	ldr	r3, [r4, #20]
 8011b7e:	425b      	negs	r3, r3
 8011b80:	61a3      	str	r3, [r4, #24]
 8011b82:	6923      	ldr	r3, [r4, #16]
 8011b84:	b943      	cbnz	r3, 8011b98 <__swsetup_r+0xa8>
 8011b86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b8a:	d1c4      	bne.n	8011b16 <__swsetup_r+0x26>
 8011b8c:	bd38      	pop	{r3, r4, r5, pc}
 8011b8e:	0781      	lsls	r1, r0, #30
 8011b90:	bf58      	it	pl
 8011b92:	6963      	ldrpl	r3, [r4, #20]
 8011b94:	60a3      	str	r3, [r4, #8]
 8011b96:	e7f4      	b.n	8011b82 <__swsetup_r+0x92>
 8011b98:	2000      	movs	r0, #0
 8011b9a:	e7f7      	b.n	8011b8c <__swsetup_r+0x9c>
 8011b9c:	20000100 	.word	0x20000100

08011ba0 <memmove>:
 8011ba0:	4288      	cmp	r0, r1
 8011ba2:	b510      	push	{r4, lr}
 8011ba4:	eb01 0402 	add.w	r4, r1, r2
 8011ba8:	d902      	bls.n	8011bb0 <memmove+0x10>
 8011baa:	4284      	cmp	r4, r0
 8011bac:	4623      	mov	r3, r4
 8011bae:	d807      	bhi.n	8011bc0 <memmove+0x20>
 8011bb0:	1e43      	subs	r3, r0, #1
 8011bb2:	42a1      	cmp	r1, r4
 8011bb4:	d008      	beq.n	8011bc8 <memmove+0x28>
 8011bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bbe:	e7f8      	b.n	8011bb2 <memmove+0x12>
 8011bc0:	4402      	add	r2, r0
 8011bc2:	4601      	mov	r1, r0
 8011bc4:	428a      	cmp	r2, r1
 8011bc6:	d100      	bne.n	8011bca <memmove+0x2a>
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bd2:	e7f7      	b.n	8011bc4 <memmove+0x24>

08011bd4 <memset>:
 8011bd4:	4402      	add	r2, r0
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d100      	bne.n	8011bde <memset+0xa>
 8011bdc:	4770      	bx	lr
 8011bde:	f803 1b01 	strb.w	r1, [r3], #1
 8011be2:	e7f9      	b.n	8011bd8 <memset+0x4>

08011be4 <strchr>:
 8011be4:	b2c9      	uxtb	r1, r1
 8011be6:	4603      	mov	r3, r0
 8011be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bec:	b11a      	cbz	r2, 8011bf6 <strchr+0x12>
 8011bee:	428a      	cmp	r2, r1
 8011bf0:	d1f9      	bne.n	8011be6 <strchr+0x2>
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	4770      	bx	lr
 8011bf6:	2900      	cmp	r1, #0
 8011bf8:	bf18      	it	ne
 8011bfa:	2300      	movne	r3, #0
 8011bfc:	e7f9      	b.n	8011bf2 <strchr+0xe>

08011bfe <strncmp>:
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	b16a      	cbz	r2, 8011c1e <strncmp+0x20>
 8011c02:	3901      	subs	r1, #1
 8011c04:	1884      	adds	r4, r0, r2
 8011c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d103      	bne.n	8011c1a <strncmp+0x1c>
 8011c12:	42a0      	cmp	r0, r4
 8011c14:	d001      	beq.n	8011c1a <strncmp+0x1c>
 8011c16:	2a00      	cmp	r2, #0
 8011c18:	d1f5      	bne.n	8011c06 <strncmp+0x8>
 8011c1a:	1ad0      	subs	r0, r2, r3
 8011c1c:	bd10      	pop	{r4, pc}
 8011c1e:	4610      	mov	r0, r2
 8011c20:	e7fc      	b.n	8011c1c <strncmp+0x1e>

08011c22 <strncpy>:
 8011c22:	b510      	push	{r4, lr}
 8011c24:	3901      	subs	r1, #1
 8011c26:	4603      	mov	r3, r0
 8011c28:	b132      	cbz	r2, 8011c38 <strncpy+0x16>
 8011c2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011c2e:	f803 4b01 	strb.w	r4, [r3], #1
 8011c32:	3a01      	subs	r2, #1
 8011c34:	2c00      	cmp	r4, #0
 8011c36:	d1f7      	bne.n	8011c28 <strncpy+0x6>
 8011c38:	441a      	add	r2, r3
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	d100      	bne.n	8011c42 <strncpy+0x20>
 8011c40:	bd10      	pop	{r4, pc}
 8011c42:	f803 1b01 	strb.w	r1, [r3], #1
 8011c46:	e7f9      	b.n	8011c3c <strncpy+0x1a>

08011c48 <_raise_r>:
 8011c48:	291f      	cmp	r1, #31
 8011c4a:	b538      	push	{r3, r4, r5, lr}
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	460d      	mov	r5, r1
 8011c50:	d904      	bls.n	8011c5c <_raise_r+0x14>
 8011c52:	2316      	movs	r3, #22
 8011c54:	6003      	str	r3, [r0, #0]
 8011c56:	f04f 30ff 	mov.w	r0, #4294967295
 8011c5a:	bd38      	pop	{r3, r4, r5, pc}
 8011c5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011c5e:	b112      	cbz	r2, 8011c66 <_raise_r+0x1e>
 8011c60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c64:	b94b      	cbnz	r3, 8011c7a <_raise_r+0x32>
 8011c66:	4620      	mov	r0, r4
 8011c68:	f000 f864 	bl	8011d34 <_getpid_r>
 8011c6c:	462a      	mov	r2, r5
 8011c6e:	4601      	mov	r1, r0
 8011c70:	4620      	mov	r0, r4
 8011c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c76:	f000 b84b 	b.w	8011d10 <_kill_r>
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d00a      	beq.n	8011c94 <_raise_r+0x4c>
 8011c7e:	1c59      	adds	r1, r3, #1
 8011c80:	d103      	bne.n	8011c8a <_raise_r+0x42>
 8011c82:	2316      	movs	r3, #22
 8011c84:	6003      	str	r3, [r0, #0]
 8011c86:	2001      	movs	r0, #1
 8011c88:	e7e7      	b.n	8011c5a <_raise_r+0x12>
 8011c8a:	2400      	movs	r4, #0
 8011c8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011c90:	4628      	mov	r0, r5
 8011c92:	4798      	blx	r3
 8011c94:	2000      	movs	r0, #0
 8011c96:	e7e0      	b.n	8011c5a <_raise_r+0x12>

08011c98 <raise>:
 8011c98:	4b02      	ldr	r3, [pc, #8]	; (8011ca4 <raise+0xc>)
 8011c9a:	4601      	mov	r1, r0
 8011c9c:	6818      	ldr	r0, [r3, #0]
 8011c9e:	f7ff bfd3 	b.w	8011c48 <_raise_r>
 8011ca2:	bf00      	nop
 8011ca4:	20000100 	.word	0x20000100

08011ca8 <_close_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d06      	ldr	r5, [pc, #24]	; (8011cc4 <_close_r+0x1c>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	f7ff fa2b 	bl	801110e <_close>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_close_r+0x1a>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_close_r+0x1a>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20008740 	.word	0x20008740

08011cc8 <_lseek_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	4d07      	ldr	r5, [pc, #28]	; (8011ce8 <_lseek_r+0x20>)
 8011ccc:	4604      	mov	r4, r0
 8011cce:	4608      	mov	r0, r1
 8011cd0:	4611      	mov	r1, r2
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	602a      	str	r2, [r5, #0]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f7ff fa40 	bl	801115c <_lseek>
 8011cdc:	1c43      	adds	r3, r0, #1
 8011cde:	d102      	bne.n	8011ce6 <_lseek_r+0x1e>
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	b103      	cbz	r3, 8011ce6 <_lseek_r+0x1e>
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	20008740 	.word	0x20008740

08011cec <_read_r>:
 8011cec:	b538      	push	{r3, r4, r5, lr}
 8011cee:	4d07      	ldr	r5, [pc, #28]	; (8011d0c <_read_r+0x20>)
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	4608      	mov	r0, r1
 8011cf4:	4611      	mov	r1, r2
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	602a      	str	r2, [r5, #0]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	f7ff f9ce 	bl	801109c <_read>
 8011d00:	1c43      	adds	r3, r0, #1
 8011d02:	d102      	bne.n	8011d0a <_read_r+0x1e>
 8011d04:	682b      	ldr	r3, [r5, #0]
 8011d06:	b103      	cbz	r3, 8011d0a <_read_r+0x1e>
 8011d08:	6023      	str	r3, [r4, #0]
 8011d0a:	bd38      	pop	{r3, r4, r5, pc}
 8011d0c:	20008740 	.word	0x20008740

08011d10 <_kill_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4d07      	ldr	r5, [pc, #28]	; (8011d30 <_kill_r+0x20>)
 8011d14:	2300      	movs	r3, #0
 8011d16:	4604      	mov	r4, r0
 8011d18:	4608      	mov	r0, r1
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	602b      	str	r3, [r5, #0]
 8011d1e:	f7ff f9a3 	bl	8011068 <_kill>
 8011d22:	1c43      	adds	r3, r0, #1
 8011d24:	d102      	bne.n	8011d2c <_kill_r+0x1c>
 8011d26:	682b      	ldr	r3, [r5, #0]
 8011d28:	b103      	cbz	r3, 8011d2c <_kill_r+0x1c>
 8011d2a:	6023      	str	r3, [r4, #0]
 8011d2c:	bd38      	pop	{r3, r4, r5, pc}
 8011d2e:	bf00      	nop
 8011d30:	20008740 	.word	0x20008740

08011d34 <_getpid_r>:
 8011d34:	f7ff b990 	b.w	8011058 <_getpid>

08011d38 <_sbrk_r>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	4d06      	ldr	r5, [pc, #24]	; (8011d54 <_sbrk_r+0x1c>)
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	4604      	mov	r4, r0
 8011d40:	4608      	mov	r0, r1
 8011d42:	602b      	str	r3, [r5, #0]
 8011d44:	f7ff fa18 	bl	8011178 <_sbrk>
 8011d48:	1c43      	adds	r3, r0, #1
 8011d4a:	d102      	bne.n	8011d52 <_sbrk_r+0x1a>
 8011d4c:	682b      	ldr	r3, [r5, #0]
 8011d4e:	b103      	cbz	r3, 8011d52 <_sbrk_r+0x1a>
 8011d50:	6023      	str	r3, [r4, #0]
 8011d52:	bd38      	pop	{r3, r4, r5, pc}
 8011d54:	20008740 	.word	0x20008740

08011d58 <_write_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d07      	ldr	r5, [pc, #28]	; (8011d78 <_write_r+0x20>)
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	4608      	mov	r0, r1
 8011d60:	4611      	mov	r1, r2
 8011d62:	2200      	movs	r2, #0
 8011d64:	602a      	str	r2, [r5, #0]
 8011d66:	461a      	mov	r2, r3
 8011d68:	f7ff f9b5 	bl	80110d6 <_write>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	d102      	bne.n	8011d76 <_write_r+0x1e>
 8011d70:	682b      	ldr	r3, [r5, #0]
 8011d72:	b103      	cbz	r3, 8011d76 <_write_r+0x1e>
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	20008740 	.word	0x20008740

08011d7c <__errno>:
 8011d7c:	4b01      	ldr	r3, [pc, #4]	; (8011d84 <__errno+0x8>)
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	20000100 	.word	0x20000100

08011d88 <__libc_init_array>:
 8011d88:	b570      	push	{r4, r5, r6, lr}
 8011d8a:	4d0d      	ldr	r5, [pc, #52]	; (8011dc0 <__libc_init_array+0x38>)
 8011d8c:	4c0d      	ldr	r4, [pc, #52]	; (8011dc4 <__libc_init_array+0x3c>)
 8011d8e:	1b64      	subs	r4, r4, r5
 8011d90:	10a4      	asrs	r4, r4, #2
 8011d92:	2600      	movs	r6, #0
 8011d94:	42a6      	cmp	r6, r4
 8011d96:	d109      	bne.n	8011dac <__libc_init_array+0x24>
 8011d98:	4d0b      	ldr	r5, [pc, #44]	; (8011dc8 <__libc_init_array+0x40>)
 8011d9a:	4c0c      	ldr	r4, [pc, #48]	; (8011dcc <__libc_init_array+0x44>)
 8011d9c:	f000 fe12 	bl	80129c4 <_init>
 8011da0:	1b64      	subs	r4, r4, r5
 8011da2:	10a4      	asrs	r4, r4, #2
 8011da4:	2600      	movs	r6, #0
 8011da6:	42a6      	cmp	r6, r4
 8011da8:	d105      	bne.n	8011db6 <__libc_init_array+0x2e>
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
 8011dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8011db0:	4798      	blx	r3
 8011db2:	3601      	adds	r6, #1
 8011db4:	e7ee      	b.n	8011d94 <__libc_init_array+0xc>
 8011db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dba:	4798      	blx	r3
 8011dbc:	3601      	adds	r6, #1
 8011dbe:	e7f2      	b.n	8011da6 <__libc_init_array+0x1e>
 8011dc0:	0801481c 	.word	0x0801481c
 8011dc4:	0801481c 	.word	0x0801481c
 8011dc8:	0801481c 	.word	0x0801481c
 8011dcc:	08014820 	.word	0x08014820

08011dd0 <__retarget_lock_acquire_recursive>:
 8011dd0:	4770      	bx	lr

08011dd2 <__retarget_lock_release_recursive>:
 8011dd2:	4770      	bx	lr

08011dd4 <strcpy>:
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dda:	f803 2b01 	strb.w	r2, [r3], #1
 8011dde:	2a00      	cmp	r2, #0
 8011de0:	d1f9      	bne.n	8011dd6 <strcpy+0x2>
 8011de2:	4770      	bx	lr

08011de4 <memcpy>:
 8011de4:	440a      	add	r2, r1
 8011de6:	4291      	cmp	r1, r2
 8011de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dec:	d100      	bne.n	8011df0 <memcpy+0xc>
 8011dee:	4770      	bx	lr
 8011df0:	b510      	push	{r4, lr}
 8011df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011dfa:	4291      	cmp	r1, r2
 8011dfc:	d1f9      	bne.n	8011df2 <memcpy+0xe>
 8011dfe:	bd10      	pop	{r4, pc}

08011e00 <_free_r>:
 8011e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e02:	2900      	cmp	r1, #0
 8011e04:	d044      	beq.n	8011e90 <_free_r+0x90>
 8011e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e0a:	9001      	str	r0, [sp, #4]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8011e12:	bfb8      	it	lt
 8011e14:	18e4      	addlt	r4, r4, r3
 8011e16:	f7ff fc9f 	bl	8011758 <__malloc_lock>
 8011e1a:	4a1e      	ldr	r2, [pc, #120]	; (8011e94 <_free_r+0x94>)
 8011e1c:	9801      	ldr	r0, [sp, #4]
 8011e1e:	6813      	ldr	r3, [r2, #0]
 8011e20:	b933      	cbnz	r3, 8011e30 <_free_r+0x30>
 8011e22:	6063      	str	r3, [r4, #4]
 8011e24:	6014      	str	r4, [r2, #0]
 8011e26:	b003      	add	sp, #12
 8011e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e2c:	f7ff bc9a 	b.w	8011764 <__malloc_unlock>
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d908      	bls.n	8011e46 <_free_r+0x46>
 8011e34:	6825      	ldr	r5, [r4, #0]
 8011e36:	1961      	adds	r1, r4, r5
 8011e38:	428b      	cmp	r3, r1
 8011e3a:	bf01      	itttt	eq
 8011e3c:	6819      	ldreq	r1, [r3, #0]
 8011e3e:	685b      	ldreq	r3, [r3, #4]
 8011e40:	1949      	addeq	r1, r1, r5
 8011e42:	6021      	streq	r1, [r4, #0]
 8011e44:	e7ed      	b.n	8011e22 <_free_r+0x22>
 8011e46:	461a      	mov	r2, r3
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	b10b      	cbz	r3, 8011e50 <_free_r+0x50>
 8011e4c:	42a3      	cmp	r3, r4
 8011e4e:	d9fa      	bls.n	8011e46 <_free_r+0x46>
 8011e50:	6811      	ldr	r1, [r2, #0]
 8011e52:	1855      	adds	r5, r2, r1
 8011e54:	42a5      	cmp	r5, r4
 8011e56:	d10b      	bne.n	8011e70 <_free_r+0x70>
 8011e58:	6824      	ldr	r4, [r4, #0]
 8011e5a:	4421      	add	r1, r4
 8011e5c:	1854      	adds	r4, r2, r1
 8011e5e:	42a3      	cmp	r3, r4
 8011e60:	6011      	str	r1, [r2, #0]
 8011e62:	d1e0      	bne.n	8011e26 <_free_r+0x26>
 8011e64:	681c      	ldr	r4, [r3, #0]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	6053      	str	r3, [r2, #4]
 8011e6a:	440c      	add	r4, r1
 8011e6c:	6014      	str	r4, [r2, #0]
 8011e6e:	e7da      	b.n	8011e26 <_free_r+0x26>
 8011e70:	d902      	bls.n	8011e78 <_free_r+0x78>
 8011e72:	230c      	movs	r3, #12
 8011e74:	6003      	str	r3, [r0, #0]
 8011e76:	e7d6      	b.n	8011e26 <_free_r+0x26>
 8011e78:	6825      	ldr	r5, [r4, #0]
 8011e7a:	1961      	adds	r1, r4, r5
 8011e7c:	428b      	cmp	r3, r1
 8011e7e:	bf04      	itt	eq
 8011e80:	6819      	ldreq	r1, [r3, #0]
 8011e82:	685b      	ldreq	r3, [r3, #4]
 8011e84:	6063      	str	r3, [r4, #4]
 8011e86:	bf04      	itt	eq
 8011e88:	1949      	addeq	r1, r1, r5
 8011e8a:	6021      	streq	r1, [r4, #0]
 8011e8c:	6054      	str	r4, [r2, #4]
 8011e8e:	e7ca      	b.n	8011e26 <_free_r+0x26>
 8011e90:	b003      	add	sp, #12
 8011e92:	bd30      	pop	{r4, r5, pc}
 8011e94:	200085fc 	.word	0x200085fc

08011e98 <__ssputs_r>:
 8011e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e9c:	688e      	ldr	r6, [r1, #8]
 8011e9e:	461f      	mov	r7, r3
 8011ea0:	42be      	cmp	r6, r7
 8011ea2:	680b      	ldr	r3, [r1, #0]
 8011ea4:	4682      	mov	sl, r0
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	4690      	mov	r8, r2
 8011eaa:	d82c      	bhi.n	8011f06 <__ssputs_r+0x6e>
 8011eac:	898a      	ldrh	r2, [r1, #12]
 8011eae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011eb2:	d026      	beq.n	8011f02 <__ssputs_r+0x6a>
 8011eb4:	6965      	ldr	r5, [r4, #20]
 8011eb6:	6909      	ldr	r1, [r1, #16]
 8011eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ebc:	eba3 0901 	sub.w	r9, r3, r1
 8011ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ec4:	1c7b      	adds	r3, r7, #1
 8011ec6:	444b      	add	r3, r9
 8011ec8:	106d      	asrs	r5, r5, #1
 8011eca:	429d      	cmp	r5, r3
 8011ecc:	bf38      	it	cc
 8011ece:	461d      	movcc	r5, r3
 8011ed0:	0553      	lsls	r3, r2, #21
 8011ed2:	d527      	bpl.n	8011f24 <__ssputs_r+0x8c>
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	f7ff fbbf 	bl	8011658 <_malloc_r>
 8011eda:	4606      	mov	r6, r0
 8011edc:	b360      	cbz	r0, 8011f38 <__ssputs_r+0xa0>
 8011ede:	6921      	ldr	r1, [r4, #16]
 8011ee0:	464a      	mov	r2, r9
 8011ee2:	f7ff ff7f 	bl	8011de4 <memcpy>
 8011ee6:	89a3      	ldrh	r3, [r4, #12]
 8011ee8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef0:	81a3      	strh	r3, [r4, #12]
 8011ef2:	6126      	str	r6, [r4, #16]
 8011ef4:	6165      	str	r5, [r4, #20]
 8011ef6:	444e      	add	r6, r9
 8011ef8:	eba5 0509 	sub.w	r5, r5, r9
 8011efc:	6026      	str	r6, [r4, #0]
 8011efe:	60a5      	str	r5, [r4, #8]
 8011f00:	463e      	mov	r6, r7
 8011f02:	42be      	cmp	r6, r7
 8011f04:	d900      	bls.n	8011f08 <__ssputs_r+0x70>
 8011f06:	463e      	mov	r6, r7
 8011f08:	6820      	ldr	r0, [r4, #0]
 8011f0a:	4632      	mov	r2, r6
 8011f0c:	4641      	mov	r1, r8
 8011f0e:	f7ff fe47 	bl	8011ba0 <memmove>
 8011f12:	68a3      	ldr	r3, [r4, #8]
 8011f14:	1b9b      	subs	r3, r3, r6
 8011f16:	60a3      	str	r3, [r4, #8]
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	4433      	add	r3, r6
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	2000      	movs	r0, #0
 8011f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f24:	462a      	mov	r2, r5
 8011f26:	f000 fd15 	bl	8012954 <_realloc_r>
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d1e0      	bne.n	8011ef2 <__ssputs_r+0x5a>
 8011f30:	6921      	ldr	r1, [r4, #16]
 8011f32:	4650      	mov	r0, sl
 8011f34:	f7ff ff64 	bl	8011e00 <_free_r>
 8011f38:	230c      	movs	r3, #12
 8011f3a:	f8ca 3000 	str.w	r3, [sl]
 8011f3e:	89a3      	ldrh	r3, [r4, #12]
 8011f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f44:	81a3      	strh	r3, [r4, #12]
 8011f46:	f04f 30ff 	mov.w	r0, #4294967295
 8011f4a:	e7e9      	b.n	8011f20 <__ssputs_r+0x88>

08011f4c <_svfiprintf_r>:
 8011f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f50:	4698      	mov	r8, r3
 8011f52:	898b      	ldrh	r3, [r1, #12]
 8011f54:	061b      	lsls	r3, r3, #24
 8011f56:	b09d      	sub	sp, #116	; 0x74
 8011f58:	4607      	mov	r7, r0
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	4614      	mov	r4, r2
 8011f5e:	d50e      	bpl.n	8011f7e <_svfiprintf_r+0x32>
 8011f60:	690b      	ldr	r3, [r1, #16]
 8011f62:	b963      	cbnz	r3, 8011f7e <_svfiprintf_r+0x32>
 8011f64:	2140      	movs	r1, #64	; 0x40
 8011f66:	f7ff fb77 	bl	8011658 <_malloc_r>
 8011f6a:	6028      	str	r0, [r5, #0]
 8011f6c:	6128      	str	r0, [r5, #16]
 8011f6e:	b920      	cbnz	r0, 8011f7a <_svfiprintf_r+0x2e>
 8011f70:	230c      	movs	r3, #12
 8011f72:	603b      	str	r3, [r7, #0]
 8011f74:	f04f 30ff 	mov.w	r0, #4294967295
 8011f78:	e0d0      	b.n	801211c <_svfiprintf_r+0x1d0>
 8011f7a:	2340      	movs	r3, #64	; 0x40
 8011f7c:	616b      	str	r3, [r5, #20]
 8011f7e:	2300      	movs	r3, #0
 8011f80:	9309      	str	r3, [sp, #36]	; 0x24
 8011f82:	2320      	movs	r3, #32
 8011f84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f8c:	2330      	movs	r3, #48	; 0x30
 8011f8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012134 <_svfiprintf_r+0x1e8>
 8011f92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f96:	f04f 0901 	mov.w	r9, #1
 8011f9a:	4623      	mov	r3, r4
 8011f9c:	469a      	mov	sl, r3
 8011f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fa2:	b10a      	cbz	r2, 8011fa8 <_svfiprintf_r+0x5c>
 8011fa4:	2a25      	cmp	r2, #37	; 0x25
 8011fa6:	d1f9      	bne.n	8011f9c <_svfiprintf_r+0x50>
 8011fa8:	ebba 0b04 	subs.w	fp, sl, r4
 8011fac:	d00b      	beq.n	8011fc6 <_svfiprintf_r+0x7a>
 8011fae:	465b      	mov	r3, fp
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	4638      	mov	r0, r7
 8011fb6:	f7ff ff6f 	bl	8011e98 <__ssputs_r>
 8011fba:	3001      	adds	r0, #1
 8011fbc:	f000 80a9 	beq.w	8012112 <_svfiprintf_r+0x1c6>
 8011fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fc2:	445a      	add	r2, fp
 8011fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8011fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 80a1 	beq.w	8012112 <_svfiprintf_r+0x1c6>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fda:	f10a 0a01 	add.w	sl, sl, #1
 8011fde:	9304      	str	r3, [sp, #16]
 8011fe0:	9307      	str	r3, [sp, #28]
 8011fe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fe6:	931a      	str	r3, [sp, #104]	; 0x68
 8011fe8:	4654      	mov	r4, sl
 8011fea:	2205      	movs	r2, #5
 8011fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ff0:	4850      	ldr	r0, [pc, #320]	; (8012134 <_svfiprintf_r+0x1e8>)
 8011ff2:	f7ee f8fd 	bl	80001f0 <memchr>
 8011ff6:	9a04      	ldr	r2, [sp, #16]
 8011ff8:	b9d8      	cbnz	r0, 8012032 <_svfiprintf_r+0xe6>
 8011ffa:	06d0      	lsls	r0, r2, #27
 8011ffc:	bf44      	itt	mi
 8011ffe:	2320      	movmi	r3, #32
 8012000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012004:	0711      	lsls	r1, r2, #28
 8012006:	bf44      	itt	mi
 8012008:	232b      	movmi	r3, #43	; 0x2b
 801200a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801200e:	f89a 3000 	ldrb.w	r3, [sl]
 8012012:	2b2a      	cmp	r3, #42	; 0x2a
 8012014:	d015      	beq.n	8012042 <_svfiprintf_r+0xf6>
 8012016:	9a07      	ldr	r2, [sp, #28]
 8012018:	4654      	mov	r4, sl
 801201a:	2000      	movs	r0, #0
 801201c:	f04f 0c0a 	mov.w	ip, #10
 8012020:	4621      	mov	r1, r4
 8012022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012026:	3b30      	subs	r3, #48	; 0x30
 8012028:	2b09      	cmp	r3, #9
 801202a:	d94d      	bls.n	80120c8 <_svfiprintf_r+0x17c>
 801202c:	b1b0      	cbz	r0, 801205c <_svfiprintf_r+0x110>
 801202e:	9207      	str	r2, [sp, #28]
 8012030:	e014      	b.n	801205c <_svfiprintf_r+0x110>
 8012032:	eba0 0308 	sub.w	r3, r0, r8
 8012036:	fa09 f303 	lsl.w	r3, r9, r3
 801203a:	4313      	orrs	r3, r2
 801203c:	9304      	str	r3, [sp, #16]
 801203e:	46a2      	mov	sl, r4
 8012040:	e7d2      	b.n	8011fe8 <_svfiprintf_r+0x9c>
 8012042:	9b03      	ldr	r3, [sp, #12]
 8012044:	1d19      	adds	r1, r3, #4
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	9103      	str	r1, [sp, #12]
 801204a:	2b00      	cmp	r3, #0
 801204c:	bfbb      	ittet	lt
 801204e:	425b      	neglt	r3, r3
 8012050:	f042 0202 	orrlt.w	r2, r2, #2
 8012054:	9307      	strge	r3, [sp, #28]
 8012056:	9307      	strlt	r3, [sp, #28]
 8012058:	bfb8      	it	lt
 801205a:	9204      	strlt	r2, [sp, #16]
 801205c:	7823      	ldrb	r3, [r4, #0]
 801205e:	2b2e      	cmp	r3, #46	; 0x2e
 8012060:	d10c      	bne.n	801207c <_svfiprintf_r+0x130>
 8012062:	7863      	ldrb	r3, [r4, #1]
 8012064:	2b2a      	cmp	r3, #42	; 0x2a
 8012066:	d134      	bne.n	80120d2 <_svfiprintf_r+0x186>
 8012068:	9b03      	ldr	r3, [sp, #12]
 801206a:	1d1a      	adds	r2, r3, #4
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	9203      	str	r2, [sp, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	bfb8      	it	lt
 8012074:	f04f 33ff 	movlt.w	r3, #4294967295
 8012078:	3402      	adds	r4, #2
 801207a:	9305      	str	r3, [sp, #20]
 801207c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012144 <_svfiprintf_r+0x1f8>
 8012080:	7821      	ldrb	r1, [r4, #0]
 8012082:	2203      	movs	r2, #3
 8012084:	4650      	mov	r0, sl
 8012086:	f7ee f8b3 	bl	80001f0 <memchr>
 801208a:	b138      	cbz	r0, 801209c <_svfiprintf_r+0x150>
 801208c:	9b04      	ldr	r3, [sp, #16]
 801208e:	eba0 000a 	sub.w	r0, r0, sl
 8012092:	2240      	movs	r2, #64	; 0x40
 8012094:	4082      	lsls	r2, r0
 8012096:	4313      	orrs	r3, r2
 8012098:	3401      	adds	r4, #1
 801209a:	9304      	str	r3, [sp, #16]
 801209c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120a0:	4825      	ldr	r0, [pc, #148]	; (8012138 <_svfiprintf_r+0x1ec>)
 80120a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120a6:	2206      	movs	r2, #6
 80120a8:	f7ee f8a2 	bl	80001f0 <memchr>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d038      	beq.n	8012122 <_svfiprintf_r+0x1d6>
 80120b0:	4b22      	ldr	r3, [pc, #136]	; (801213c <_svfiprintf_r+0x1f0>)
 80120b2:	bb1b      	cbnz	r3, 80120fc <_svfiprintf_r+0x1b0>
 80120b4:	9b03      	ldr	r3, [sp, #12]
 80120b6:	3307      	adds	r3, #7
 80120b8:	f023 0307 	bic.w	r3, r3, #7
 80120bc:	3308      	adds	r3, #8
 80120be:	9303      	str	r3, [sp, #12]
 80120c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c2:	4433      	add	r3, r6
 80120c4:	9309      	str	r3, [sp, #36]	; 0x24
 80120c6:	e768      	b.n	8011f9a <_svfiprintf_r+0x4e>
 80120c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80120cc:	460c      	mov	r4, r1
 80120ce:	2001      	movs	r0, #1
 80120d0:	e7a6      	b.n	8012020 <_svfiprintf_r+0xd4>
 80120d2:	2300      	movs	r3, #0
 80120d4:	3401      	adds	r4, #1
 80120d6:	9305      	str	r3, [sp, #20]
 80120d8:	4619      	mov	r1, r3
 80120da:	f04f 0c0a 	mov.w	ip, #10
 80120de:	4620      	mov	r0, r4
 80120e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120e4:	3a30      	subs	r2, #48	; 0x30
 80120e6:	2a09      	cmp	r2, #9
 80120e8:	d903      	bls.n	80120f2 <_svfiprintf_r+0x1a6>
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d0c6      	beq.n	801207c <_svfiprintf_r+0x130>
 80120ee:	9105      	str	r1, [sp, #20]
 80120f0:	e7c4      	b.n	801207c <_svfiprintf_r+0x130>
 80120f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80120f6:	4604      	mov	r4, r0
 80120f8:	2301      	movs	r3, #1
 80120fa:	e7f0      	b.n	80120de <_svfiprintf_r+0x192>
 80120fc:	ab03      	add	r3, sp, #12
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	462a      	mov	r2, r5
 8012102:	4b0f      	ldr	r3, [pc, #60]	; (8012140 <_svfiprintf_r+0x1f4>)
 8012104:	a904      	add	r1, sp, #16
 8012106:	4638      	mov	r0, r7
 8012108:	f3af 8000 	nop.w
 801210c:	1c42      	adds	r2, r0, #1
 801210e:	4606      	mov	r6, r0
 8012110:	d1d6      	bne.n	80120c0 <_svfiprintf_r+0x174>
 8012112:	89ab      	ldrh	r3, [r5, #12]
 8012114:	065b      	lsls	r3, r3, #25
 8012116:	f53f af2d 	bmi.w	8011f74 <_svfiprintf_r+0x28>
 801211a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801211c:	b01d      	add	sp, #116	; 0x74
 801211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012122:	ab03      	add	r3, sp, #12
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	462a      	mov	r2, r5
 8012128:	4b05      	ldr	r3, [pc, #20]	; (8012140 <_svfiprintf_r+0x1f4>)
 801212a:	a904      	add	r1, sp, #16
 801212c:	4638      	mov	r0, r7
 801212e:	f000 f9bd 	bl	80124ac <_printf_i>
 8012132:	e7eb      	b.n	801210c <_svfiprintf_r+0x1c0>
 8012134:	080147df 	.word	0x080147df
 8012138:	080147e9 	.word	0x080147e9
 801213c:	00000000 	.word	0x00000000
 8012140:	08011e99 	.word	0x08011e99
 8012144:	080147e5 	.word	0x080147e5

08012148 <__sfputc_r>:
 8012148:	6893      	ldr	r3, [r2, #8]
 801214a:	3b01      	subs	r3, #1
 801214c:	2b00      	cmp	r3, #0
 801214e:	b410      	push	{r4}
 8012150:	6093      	str	r3, [r2, #8]
 8012152:	da08      	bge.n	8012166 <__sfputc_r+0x1e>
 8012154:	6994      	ldr	r4, [r2, #24]
 8012156:	42a3      	cmp	r3, r4
 8012158:	db01      	blt.n	801215e <__sfputc_r+0x16>
 801215a:	290a      	cmp	r1, #10
 801215c:	d103      	bne.n	8012166 <__sfputc_r+0x1e>
 801215e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012162:	f7ff bc87 	b.w	8011a74 <__swbuf_r>
 8012166:	6813      	ldr	r3, [r2, #0]
 8012168:	1c58      	adds	r0, r3, #1
 801216a:	6010      	str	r0, [r2, #0]
 801216c:	7019      	strb	r1, [r3, #0]
 801216e:	4608      	mov	r0, r1
 8012170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012174:	4770      	bx	lr

08012176 <__sfputs_r>:
 8012176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012178:	4606      	mov	r6, r0
 801217a:	460f      	mov	r7, r1
 801217c:	4614      	mov	r4, r2
 801217e:	18d5      	adds	r5, r2, r3
 8012180:	42ac      	cmp	r4, r5
 8012182:	d101      	bne.n	8012188 <__sfputs_r+0x12>
 8012184:	2000      	movs	r0, #0
 8012186:	e007      	b.n	8012198 <__sfputs_r+0x22>
 8012188:	f814 1b01 	ldrb.w	r1, [r4], #1
 801218c:	463a      	mov	r2, r7
 801218e:	4630      	mov	r0, r6
 8012190:	f7ff ffda 	bl	8012148 <__sfputc_r>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	d1f3      	bne.n	8012180 <__sfputs_r+0xa>
 8012198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801219c <_vfiprintf_r>:
 801219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121a0:	460d      	mov	r5, r1
 80121a2:	b09d      	sub	sp, #116	; 0x74
 80121a4:	4614      	mov	r4, r2
 80121a6:	4698      	mov	r8, r3
 80121a8:	4606      	mov	r6, r0
 80121aa:	b118      	cbz	r0, 80121b4 <_vfiprintf_r+0x18>
 80121ac:	6a03      	ldr	r3, [r0, #32]
 80121ae:	b90b      	cbnz	r3, 80121b4 <_vfiprintf_r+0x18>
 80121b0:	f7ff fb58 	bl	8011864 <__sinit>
 80121b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121b6:	07d9      	lsls	r1, r3, #31
 80121b8:	d405      	bmi.n	80121c6 <_vfiprintf_r+0x2a>
 80121ba:	89ab      	ldrh	r3, [r5, #12]
 80121bc:	059a      	lsls	r2, r3, #22
 80121be:	d402      	bmi.n	80121c6 <_vfiprintf_r+0x2a>
 80121c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121c2:	f7ff fe05 	bl	8011dd0 <__retarget_lock_acquire_recursive>
 80121c6:	89ab      	ldrh	r3, [r5, #12]
 80121c8:	071b      	lsls	r3, r3, #28
 80121ca:	d501      	bpl.n	80121d0 <_vfiprintf_r+0x34>
 80121cc:	692b      	ldr	r3, [r5, #16]
 80121ce:	b99b      	cbnz	r3, 80121f8 <_vfiprintf_r+0x5c>
 80121d0:	4629      	mov	r1, r5
 80121d2:	4630      	mov	r0, r6
 80121d4:	f7ff fc8c 	bl	8011af0 <__swsetup_r>
 80121d8:	b170      	cbz	r0, 80121f8 <_vfiprintf_r+0x5c>
 80121da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121dc:	07dc      	lsls	r4, r3, #31
 80121de:	d504      	bpl.n	80121ea <_vfiprintf_r+0x4e>
 80121e0:	f04f 30ff 	mov.w	r0, #4294967295
 80121e4:	b01d      	add	sp, #116	; 0x74
 80121e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ea:	89ab      	ldrh	r3, [r5, #12]
 80121ec:	0598      	lsls	r0, r3, #22
 80121ee:	d4f7      	bmi.n	80121e0 <_vfiprintf_r+0x44>
 80121f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121f2:	f7ff fdee 	bl	8011dd2 <__retarget_lock_release_recursive>
 80121f6:	e7f3      	b.n	80121e0 <_vfiprintf_r+0x44>
 80121f8:	2300      	movs	r3, #0
 80121fa:	9309      	str	r3, [sp, #36]	; 0x24
 80121fc:	2320      	movs	r3, #32
 80121fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012202:	f8cd 800c 	str.w	r8, [sp, #12]
 8012206:	2330      	movs	r3, #48	; 0x30
 8012208:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80123bc <_vfiprintf_r+0x220>
 801220c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012210:	f04f 0901 	mov.w	r9, #1
 8012214:	4623      	mov	r3, r4
 8012216:	469a      	mov	sl, r3
 8012218:	f813 2b01 	ldrb.w	r2, [r3], #1
 801221c:	b10a      	cbz	r2, 8012222 <_vfiprintf_r+0x86>
 801221e:	2a25      	cmp	r2, #37	; 0x25
 8012220:	d1f9      	bne.n	8012216 <_vfiprintf_r+0x7a>
 8012222:	ebba 0b04 	subs.w	fp, sl, r4
 8012226:	d00b      	beq.n	8012240 <_vfiprintf_r+0xa4>
 8012228:	465b      	mov	r3, fp
 801222a:	4622      	mov	r2, r4
 801222c:	4629      	mov	r1, r5
 801222e:	4630      	mov	r0, r6
 8012230:	f7ff ffa1 	bl	8012176 <__sfputs_r>
 8012234:	3001      	adds	r0, #1
 8012236:	f000 80a9 	beq.w	801238c <_vfiprintf_r+0x1f0>
 801223a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801223c:	445a      	add	r2, fp
 801223e:	9209      	str	r2, [sp, #36]	; 0x24
 8012240:	f89a 3000 	ldrb.w	r3, [sl]
 8012244:	2b00      	cmp	r3, #0
 8012246:	f000 80a1 	beq.w	801238c <_vfiprintf_r+0x1f0>
 801224a:	2300      	movs	r3, #0
 801224c:	f04f 32ff 	mov.w	r2, #4294967295
 8012250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012254:	f10a 0a01 	add.w	sl, sl, #1
 8012258:	9304      	str	r3, [sp, #16]
 801225a:	9307      	str	r3, [sp, #28]
 801225c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012260:	931a      	str	r3, [sp, #104]	; 0x68
 8012262:	4654      	mov	r4, sl
 8012264:	2205      	movs	r2, #5
 8012266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801226a:	4854      	ldr	r0, [pc, #336]	; (80123bc <_vfiprintf_r+0x220>)
 801226c:	f7ed ffc0 	bl	80001f0 <memchr>
 8012270:	9a04      	ldr	r2, [sp, #16]
 8012272:	b9d8      	cbnz	r0, 80122ac <_vfiprintf_r+0x110>
 8012274:	06d1      	lsls	r1, r2, #27
 8012276:	bf44      	itt	mi
 8012278:	2320      	movmi	r3, #32
 801227a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801227e:	0713      	lsls	r3, r2, #28
 8012280:	bf44      	itt	mi
 8012282:	232b      	movmi	r3, #43	; 0x2b
 8012284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012288:	f89a 3000 	ldrb.w	r3, [sl]
 801228c:	2b2a      	cmp	r3, #42	; 0x2a
 801228e:	d015      	beq.n	80122bc <_vfiprintf_r+0x120>
 8012290:	9a07      	ldr	r2, [sp, #28]
 8012292:	4654      	mov	r4, sl
 8012294:	2000      	movs	r0, #0
 8012296:	f04f 0c0a 	mov.w	ip, #10
 801229a:	4621      	mov	r1, r4
 801229c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122a0:	3b30      	subs	r3, #48	; 0x30
 80122a2:	2b09      	cmp	r3, #9
 80122a4:	d94d      	bls.n	8012342 <_vfiprintf_r+0x1a6>
 80122a6:	b1b0      	cbz	r0, 80122d6 <_vfiprintf_r+0x13a>
 80122a8:	9207      	str	r2, [sp, #28]
 80122aa:	e014      	b.n	80122d6 <_vfiprintf_r+0x13a>
 80122ac:	eba0 0308 	sub.w	r3, r0, r8
 80122b0:	fa09 f303 	lsl.w	r3, r9, r3
 80122b4:	4313      	orrs	r3, r2
 80122b6:	9304      	str	r3, [sp, #16]
 80122b8:	46a2      	mov	sl, r4
 80122ba:	e7d2      	b.n	8012262 <_vfiprintf_r+0xc6>
 80122bc:	9b03      	ldr	r3, [sp, #12]
 80122be:	1d19      	adds	r1, r3, #4
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	9103      	str	r1, [sp, #12]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	bfbb      	ittet	lt
 80122c8:	425b      	neglt	r3, r3
 80122ca:	f042 0202 	orrlt.w	r2, r2, #2
 80122ce:	9307      	strge	r3, [sp, #28]
 80122d0:	9307      	strlt	r3, [sp, #28]
 80122d2:	bfb8      	it	lt
 80122d4:	9204      	strlt	r2, [sp, #16]
 80122d6:	7823      	ldrb	r3, [r4, #0]
 80122d8:	2b2e      	cmp	r3, #46	; 0x2e
 80122da:	d10c      	bne.n	80122f6 <_vfiprintf_r+0x15a>
 80122dc:	7863      	ldrb	r3, [r4, #1]
 80122de:	2b2a      	cmp	r3, #42	; 0x2a
 80122e0:	d134      	bne.n	801234c <_vfiprintf_r+0x1b0>
 80122e2:	9b03      	ldr	r3, [sp, #12]
 80122e4:	1d1a      	adds	r2, r3, #4
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	9203      	str	r2, [sp, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	bfb8      	it	lt
 80122ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80122f2:	3402      	adds	r4, #2
 80122f4:	9305      	str	r3, [sp, #20]
 80122f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80123cc <_vfiprintf_r+0x230>
 80122fa:	7821      	ldrb	r1, [r4, #0]
 80122fc:	2203      	movs	r2, #3
 80122fe:	4650      	mov	r0, sl
 8012300:	f7ed ff76 	bl	80001f0 <memchr>
 8012304:	b138      	cbz	r0, 8012316 <_vfiprintf_r+0x17a>
 8012306:	9b04      	ldr	r3, [sp, #16]
 8012308:	eba0 000a 	sub.w	r0, r0, sl
 801230c:	2240      	movs	r2, #64	; 0x40
 801230e:	4082      	lsls	r2, r0
 8012310:	4313      	orrs	r3, r2
 8012312:	3401      	adds	r4, #1
 8012314:	9304      	str	r3, [sp, #16]
 8012316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231a:	4829      	ldr	r0, [pc, #164]	; (80123c0 <_vfiprintf_r+0x224>)
 801231c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012320:	2206      	movs	r2, #6
 8012322:	f7ed ff65 	bl	80001f0 <memchr>
 8012326:	2800      	cmp	r0, #0
 8012328:	d03f      	beq.n	80123aa <_vfiprintf_r+0x20e>
 801232a:	4b26      	ldr	r3, [pc, #152]	; (80123c4 <_vfiprintf_r+0x228>)
 801232c:	bb1b      	cbnz	r3, 8012376 <_vfiprintf_r+0x1da>
 801232e:	9b03      	ldr	r3, [sp, #12]
 8012330:	3307      	adds	r3, #7
 8012332:	f023 0307 	bic.w	r3, r3, #7
 8012336:	3308      	adds	r3, #8
 8012338:	9303      	str	r3, [sp, #12]
 801233a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801233c:	443b      	add	r3, r7
 801233e:	9309      	str	r3, [sp, #36]	; 0x24
 8012340:	e768      	b.n	8012214 <_vfiprintf_r+0x78>
 8012342:	fb0c 3202 	mla	r2, ip, r2, r3
 8012346:	460c      	mov	r4, r1
 8012348:	2001      	movs	r0, #1
 801234a:	e7a6      	b.n	801229a <_vfiprintf_r+0xfe>
 801234c:	2300      	movs	r3, #0
 801234e:	3401      	adds	r4, #1
 8012350:	9305      	str	r3, [sp, #20]
 8012352:	4619      	mov	r1, r3
 8012354:	f04f 0c0a 	mov.w	ip, #10
 8012358:	4620      	mov	r0, r4
 801235a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801235e:	3a30      	subs	r2, #48	; 0x30
 8012360:	2a09      	cmp	r2, #9
 8012362:	d903      	bls.n	801236c <_vfiprintf_r+0x1d0>
 8012364:	2b00      	cmp	r3, #0
 8012366:	d0c6      	beq.n	80122f6 <_vfiprintf_r+0x15a>
 8012368:	9105      	str	r1, [sp, #20]
 801236a:	e7c4      	b.n	80122f6 <_vfiprintf_r+0x15a>
 801236c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012370:	4604      	mov	r4, r0
 8012372:	2301      	movs	r3, #1
 8012374:	e7f0      	b.n	8012358 <_vfiprintf_r+0x1bc>
 8012376:	ab03      	add	r3, sp, #12
 8012378:	9300      	str	r3, [sp, #0]
 801237a:	462a      	mov	r2, r5
 801237c:	4b12      	ldr	r3, [pc, #72]	; (80123c8 <_vfiprintf_r+0x22c>)
 801237e:	a904      	add	r1, sp, #16
 8012380:	4630      	mov	r0, r6
 8012382:	f3af 8000 	nop.w
 8012386:	4607      	mov	r7, r0
 8012388:	1c78      	adds	r0, r7, #1
 801238a:	d1d6      	bne.n	801233a <_vfiprintf_r+0x19e>
 801238c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801238e:	07d9      	lsls	r1, r3, #31
 8012390:	d405      	bmi.n	801239e <_vfiprintf_r+0x202>
 8012392:	89ab      	ldrh	r3, [r5, #12]
 8012394:	059a      	lsls	r2, r3, #22
 8012396:	d402      	bmi.n	801239e <_vfiprintf_r+0x202>
 8012398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801239a:	f7ff fd1a 	bl	8011dd2 <__retarget_lock_release_recursive>
 801239e:	89ab      	ldrh	r3, [r5, #12]
 80123a0:	065b      	lsls	r3, r3, #25
 80123a2:	f53f af1d 	bmi.w	80121e0 <_vfiprintf_r+0x44>
 80123a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123a8:	e71c      	b.n	80121e4 <_vfiprintf_r+0x48>
 80123aa:	ab03      	add	r3, sp, #12
 80123ac:	9300      	str	r3, [sp, #0]
 80123ae:	462a      	mov	r2, r5
 80123b0:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <_vfiprintf_r+0x22c>)
 80123b2:	a904      	add	r1, sp, #16
 80123b4:	4630      	mov	r0, r6
 80123b6:	f000 f879 	bl	80124ac <_printf_i>
 80123ba:	e7e4      	b.n	8012386 <_vfiprintf_r+0x1ea>
 80123bc:	080147df 	.word	0x080147df
 80123c0:	080147e9 	.word	0x080147e9
 80123c4:	00000000 	.word	0x00000000
 80123c8:	08012177 	.word	0x08012177
 80123cc:	080147e5 	.word	0x080147e5

080123d0 <_printf_common>:
 80123d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123d4:	4616      	mov	r6, r2
 80123d6:	4699      	mov	r9, r3
 80123d8:	688a      	ldr	r2, [r1, #8]
 80123da:	690b      	ldr	r3, [r1, #16]
 80123dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80123e0:	4293      	cmp	r3, r2
 80123e2:	bfb8      	it	lt
 80123e4:	4613      	movlt	r3, r2
 80123e6:	6033      	str	r3, [r6, #0]
 80123e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123ec:	4607      	mov	r7, r0
 80123ee:	460c      	mov	r4, r1
 80123f0:	b10a      	cbz	r2, 80123f6 <_printf_common+0x26>
 80123f2:	3301      	adds	r3, #1
 80123f4:	6033      	str	r3, [r6, #0]
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	0699      	lsls	r1, r3, #26
 80123fa:	bf42      	ittt	mi
 80123fc:	6833      	ldrmi	r3, [r6, #0]
 80123fe:	3302      	addmi	r3, #2
 8012400:	6033      	strmi	r3, [r6, #0]
 8012402:	6825      	ldr	r5, [r4, #0]
 8012404:	f015 0506 	ands.w	r5, r5, #6
 8012408:	d106      	bne.n	8012418 <_printf_common+0x48>
 801240a:	f104 0a19 	add.w	sl, r4, #25
 801240e:	68e3      	ldr	r3, [r4, #12]
 8012410:	6832      	ldr	r2, [r6, #0]
 8012412:	1a9b      	subs	r3, r3, r2
 8012414:	42ab      	cmp	r3, r5
 8012416:	dc26      	bgt.n	8012466 <_printf_common+0x96>
 8012418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801241c:	1e13      	subs	r3, r2, #0
 801241e:	6822      	ldr	r2, [r4, #0]
 8012420:	bf18      	it	ne
 8012422:	2301      	movne	r3, #1
 8012424:	0692      	lsls	r2, r2, #26
 8012426:	d42b      	bmi.n	8012480 <_printf_common+0xb0>
 8012428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801242c:	4649      	mov	r1, r9
 801242e:	4638      	mov	r0, r7
 8012430:	47c0      	blx	r8
 8012432:	3001      	adds	r0, #1
 8012434:	d01e      	beq.n	8012474 <_printf_common+0xa4>
 8012436:	6823      	ldr	r3, [r4, #0]
 8012438:	6922      	ldr	r2, [r4, #16]
 801243a:	f003 0306 	and.w	r3, r3, #6
 801243e:	2b04      	cmp	r3, #4
 8012440:	bf02      	ittt	eq
 8012442:	68e5      	ldreq	r5, [r4, #12]
 8012444:	6833      	ldreq	r3, [r6, #0]
 8012446:	1aed      	subeq	r5, r5, r3
 8012448:	68a3      	ldr	r3, [r4, #8]
 801244a:	bf0c      	ite	eq
 801244c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012450:	2500      	movne	r5, #0
 8012452:	4293      	cmp	r3, r2
 8012454:	bfc4      	itt	gt
 8012456:	1a9b      	subgt	r3, r3, r2
 8012458:	18ed      	addgt	r5, r5, r3
 801245a:	2600      	movs	r6, #0
 801245c:	341a      	adds	r4, #26
 801245e:	42b5      	cmp	r5, r6
 8012460:	d11a      	bne.n	8012498 <_printf_common+0xc8>
 8012462:	2000      	movs	r0, #0
 8012464:	e008      	b.n	8012478 <_printf_common+0xa8>
 8012466:	2301      	movs	r3, #1
 8012468:	4652      	mov	r2, sl
 801246a:	4649      	mov	r1, r9
 801246c:	4638      	mov	r0, r7
 801246e:	47c0      	blx	r8
 8012470:	3001      	adds	r0, #1
 8012472:	d103      	bne.n	801247c <_printf_common+0xac>
 8012474:	f04f 30ff 	mov.w	r0, #4294967295
 8012478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247c:	3501      	adds	r5, #1
 801247e:	e7c6      	b.n	801240e <_printf_common+0x3e>
 8012480:	18e1      	adds	r1, r4, r3
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	2030      	movs	r0, #48	; 0x30
 8012486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801248a:	4422      	add	r2, r4
 801248c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012494:	3302      	adds	r3, #2
 8012496:	e7c7      	b.n	8012428 <_printf_common+0x58>
 8012498:	2301      	movs	r3, #1
 801249a:	4622      	mov	r2, r4
 801249c:	4649      	mov	r1, r9
 801249e:	4638      	mov	r0, r7
 80124a0:	47c0      	blx	r8
 80124a2:	3001      	adds	r0, #1
 80124a4:	d0e6      	beq.n	8012474 <_printf_common+0xa4>
 80124a6:	3601      	adds	r6, #1
 80124a8:	e7d9      	b.n	801245e <_printf_common+0x8e>
	...

080124ac <_printf_i>:
 80124ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124b0:	7e0f      	ldrb	r7, [r1, #24]
 80124b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80124b4:	2f78      	cmp	r7, #120	; 0x78
 80124b6:	4691      	mov	r9, r2
 80124b8:	4680      	mov	r8, r0
 80124ba:	460c      	mov	r4, r1
 80124bc:	469a      	mov	sl, r3
 80124be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80124c2:	d807      	bhi.n	80124d4 <_printf_i+0x28>
 80124c4:	2f62      	cmp	r7, #98	; 0x62
 80124c6:	d80a      	bhi.n	80124de <_printf_i+0x32>
 80124c8:	2f00      	cmp	r7, #0
 80124ca:	f000 80d4 	beq.w	8012676 <_printf_i+0x1ca>
 80124ce:	2f58      	cmp	r7, #88	; 0x58
 80124d0:	f000 80c0 	beq.w	8012654 <_printf_i+0x1a8>
 80124d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80124dc:	e03a      	b.n	8012554 <_printf_i+0xa8>
 80124de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80124e2:	2b15      	cmp	r3, #21
 80124e4:	d8f6      	bhi.n	80124d4 <_printf_i+0x28>
 80124e6:	a101      	add	r1, pc, #4	; (adr r1, 80124ec <_printf_i+0x40>)
 80124e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124ec:	08012545 	.word	0x08012545
 80124f0:	08012559 	.word	0x08012559
 80124f4:	080124d5 	.word	0x080124d5
 80124f8:	080124d5 	.word	0x080124d5
 80124fc:	080124d5 	.word	0x080124d5
 8012500:	080124d5 	.word	0x080124d5
 8012504:	08012559 	.word	0x08012559
 8012508:	080124d5 	.word	0x080124d5
 801250c:	080124d5 	.word	0x080124d5
 8012510:	080124d5 	.word	0x080124d5
 8012514:	080124d5 	.word	0x080124d5
 8012518:	0801265d 	.word	0x0801265d
 801251c:	08012585 	.word	0x08012585
 8012520:	08012617 	.word	0x08012617
 8012524:	080124d5 	.word	0x080124d5
 8012528:	080124d5 	.word	0x080124d5
 801252c:	0801267f 	.word	0x0801267f
 8012530:	080124d5 	.word	0x080124d5
 8012534:	08012585 	.word	0x08012585
 8012538:	080124d5 	.word	0x080124d5
 801253c:	080124d5 	.word	0x080124d5
 8012540:	0801261f 	.word	0x0801261f
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	1d1a      	adds	r2, r3, #4
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	602a      	str	r2, [r5, #0]
 801254c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012554:	2301      	movs	r3, #1
 8012556:	e09f      	b.n	8012698 <_printf_i+0x1ec>
 8012558:	6820      	ldr	r0, [r4, #0]
 801255a:	682b      	ldr	r3, [r5, #0]
 801255c:	0607      	lsls	r7, r0, #24
 801255e:	f103 0104 	add.w	r1, r3, #4
 8012562:	6029      	str	r1, [r5, #0]
 8012564:	d501      	bpl.n	801256a <_printf_i+0xbe>
 8012566:	681e      	ldr	r6, [r3, #0]
 8012568:	e003      	b.n	8012572 <_printf_i+0xc6>
 801256a:	0646      	lsls	r6, r0, #25
 801256c:	d5fb      	bpl.n	8012566 <_printf_i+0xba>
 801256e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012572:	2e00      	cmp	r6, #0
 8012574:	da03      	bge.n	801257e <_printf_i+0xd2>
 8012576:	232d      	movs	r3, #45	; 0x2d
 8012578:	4276      	negs	r6, r6
 801257a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801257e:	485a      	ldr	r0, [pc, #360]	; (80126e8 <_printf_i+0x23c>)
 8012580:	230a      	movs	r3, #10
 8012582:	e012      	b.n	80125aa <_printf_i+0xfe>
 8012584:	682b      	ldr	r3, [r5, #0]
 8012586:	6820      	ldr	r0, [r4, #0]
 8012588:	1d19      	adds	r1, r3, #4
 801258a:	6029      	str	r1, [r5, #0]
 801258c:	0605      	lsls	r5, r0, #24
 801258e:	d501      	bpl.n	8012594 <_printf_i+0xe8>
 8012590:	681e      	ldr	r6, [r3, #0]
 8012592:	e002      	b.n	801259a <_printf_i+0xee>
 8012594:	0641      	lsls	r1, r0, #25
 8012596:	d5fb      	bpl.n	8012590 <_printf_i+0xe4>
 8012598:	881e      	ldrh	r6, [r3, #0]
 801259a:	4853      	ldr	r0, [pc, #332]	; (80126e8 <_printf_i+0x23c>)
 801259c:	2f6f      	cmp	r7, #111	; 0x6f
 801259e:	bf0c      	ite	eq
 80125a0:	2308      	moveq	r3, #8
 80125a2:	230a      	movne	r3, #10
 80125a4:	2100      	movs	r1, #0
 80125a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125aa:	6865      	ldr	r5, [r4, #4]
 80125ac:	60a5      	str	r5, [r4, #8]
 80125ae:	2d00      	cmp	r5, #0
 80125b0:	bfa2      	ittt	ge
 80125b2:	6821      	ldrge	r1, [r4, #0]
 80125b4:	f021 0104 	bicge.w	r1, r1, #4
 80125b8:	6021      	strge	r1, [r4, #0]
 80125ba:	b90e      	cbnz	r6, 80125c0 <_printf_i+0x114>
 80125bc:	2d00      	cmp	r5, #0
 80125be:	d04b      	beq.n	8012658 <_printf_i+0x1ac>
 80125c0:	4615      	mov	r5, r2
 80125c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80125c6:	fb03 6711 	mls	r7, r3, r1, r6
 80125ca:	5dc7      	ldrb	r7, [r0, r7]
 80125cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80125d0:	4637      	mov	r7, r6
 80125d2:	42bb      	cmp	r3, r7
 80125d4:	460e      	mov	r6, r1
 80125d6:	d9f4      	bls.n	80125c2 <_printf_i+0x116>
 80125d8:	2b08      	cmp	r3, #8
 80125da:	d10b      	bne.n	80125f4 <_printf_i+0x148>
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	07de      	lsls	r6, r3, #31
 80125e0:	d508      	bpl.n	80125f4 <_printf_i+0x148>
 80125e2:	6923      	ldr	r3, [r4, #16]
 80125e4:	6861      	ldr	r1, [r4, #4]
 80125e6:	4299      	cmp	r1, r3
 80125e8:	bfde      	ittt	le
 80125ea:	2330      	movle	r3, #48	; 0x30
 80125ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80125f4:	1b52      	subs	r2, r2, r5
 80125f6:	6122      	str	r2, [r4, #16]
 80125f8:	f8cd a000 	str.w	sl, [sp]
 80125fc:	464b      	mov	r3, r9
 80125fe:	aa03      	add	r2, sp, #12
 8012600:	4621      	mov	r1, r4
 8012602:	4640      	mov	r0, r8
 8012604:	f7ff fee4 	bl	80123d0 <_printf_common>
 8012608:	3001      	adds	r0, #1
 801260a:	d14a      	bne.n	80126a2 <_printf_i+0x1f6>
 801260c:	f04f 30ff 	mov.w	r0, #4294967295
 8012610:	b004      	add	sp, #16
 8012612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	f043 0320 	orr.w	r3, r3, #32
 801261c:	6023      	str	r3, [r4, #0]
 801261e:	4833      	ldr	r0, [pc, #204]	; (80126ec <_printf_i+0x240>)
 8012620:	2778      	movs	r7, #120	; 0x78
 8012622:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	6829      	ldr	r1, [r5, #0]
 801262a:	061f      	lsls	r7, r3, #24
 801262c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012630:	d402      	bmi.n	8012638 <_printf_i+0x18c>
 8012632:	065f      	lsls	r7, r3, #25
 8012634:	bf48      	it	mi
 8012636:	b2b6      	uxthmi	r6, r6
 8012638:	07df      	lsls	r7, r3, #31
 801263a:	bf48      	it	mi
 801263c:	f043 0320 	orrmi.w	r3, r3, #32
 8012640:	6029      	str	r1, [r5, #0]
 8012642:	bf48      	it	mi
 8012644:	6023      	strmi	r3, [r4, #0]
 8012646:	b91e      	cbnz	r6, 8012650 <_printf_i+0x1a4>
 8012648:	6823      	ldr	r3, [r4, #0]
 801264a:	f023 0320 	bic.w	r3, r3, #32
 801264e:	6023      	str	r3, [r4, #0]
 8012650:	2310      	movs	r3, #16
 8012652:	e7a7      	b.n	80125a4 <_printf_i+0xf8>
 8012654:	4824      	ldr	r0, [pc, #144]	; (80126e8 <_printf_i+0x23c>)
 8012656:	e7e4      	b.n	8012622 <_printf_i+0x176>
 8012658:	4615      	mov	r5, r2
 801265a:	e7bd      	b.n	80125d8 <_printf_i+0x12c>
 801265c:	682b      	ldr	r3, [r5, #0]
 801265e:	6826      	ldr	r6, [r4, #0]
 8012660:	6961      	ldr	r1, [r4, #20]
 8012662:	1d18      	adds	r0, r3, #4
 8012664:	6028      	str	r0, [r5, #0]
 8012666:	0635      	lsls	r5, r6, #24
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	d501      	bpl.n	8012670 <_printf_i+0x1c4>
 801266c:	6019      	str	r1, [r3, #0]
 801266e:	e002      	b.n	8012676 <_printf_i+0x1ca>
 8012670:	0670      	lsls	r0, r6, #25
 8012672:	d5fb      	bpl.n	801266c <_printf_i+0x1c0>
 8012674:	8019      	strh	r1, [r3, #0]
 8012676:	2300      	movs	r3, #0
 8012678:	6123      	str	r3, [r4, #16]
 801267a:	4615      	mov	r5, r2
 801267c:	e7bc      	b.n	80125f8 <_printf_i+0x14c>
 801267e:	682b      	ldr	r3, [r5, #0]
 8012680:	1d1a      	adds	r2, r3, #4
 8012682:	602a      	str	r2, [r5, #0]
 8012684:	681d      	ldr	r5, [r3, #0]
 8012686:	6862      	ldr	r2, [r4, #4]
 8012688:	2100      	movs	r1, #0
 801268a:	4628      	mov	r0, r5
 801268c:	f7ed fdb0 	bl	80001f0 <memchr>
 8012690:	b108      	cbz	r0, 8012696 <_printf_i+0x1ea>
 8012692:	1b40      	subs	r0, r0, r5
 8012694:	6060      	str	r0, [r4, #4]
 8012696:	6863      	ldr	r3, [r4, #4]
 8012698:	6123      	str	r3, [r4, #16]
 801269a:	2300      	movs	r3, #0
 801269c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126a0:	e7aa      	b.n	80125f8 <_printf_i+0x14c>
 80126a2:	6923      	ldr	r3, [r4, #16]
 80126a4:	462a      	mov	r2, r5
 80126a6:	4649      	mov	r1, r9
 80126a8:	4640      	mov	r0, r8
 80126aa:	47d0      	blx	sl
 80126ac:	3001      	adds	r0, #1
 80126ae:	d0ad      	beq.n	801260c <_printf_i+0x160>
 80126b0:	6823      	ldr	r3, [r4, #0]
 80126b2:	079b      	lsls	r3, r3, #30
 80126b4:	d413      	bmi.n	80126de <_printf_i+0x232>
 80126b6:	68e0      	ldr	r0, [r4, #12]
 80126b8:	9b03      	ldr	r3, [sp, #12]
 80126ba:	4298      	cmp	r0, r3
 80126bc:	bfb8      	it	lt
 80126be:	4618      	movlt	r0, r3
 80126c0:	e7a6      	b.n	8012610 <_printf_i+0x164>
 80126c2:	2301      	movs	r3, #1
 80126c4:	4632      	mov	r2, r6
 80126c6:	4649      	mov	r1, r9
 80126c8:	4640      	mov	r0, r8
 80126ca:	47d0      	blx	sl
 80126cc:	3001      	adds	r0, #1
 80126ce:	d09d      	beq.n	801260c <_printf_i+0x160>
 80126d0:	3501      	adds	r5, #1
 80126d2:	68e3      	ldr	r3, [r4, #12]
 80126d4:	9903      	ldr	r1, [sp, #12]
 80126d6:	1a5b      	subs	r3, r3, r1
 80126d8:	42ab      	cmp	r3, r5
 80126da:	dcf2      	bgt.n	80126c2 <_printf_i+0x216>
 80126dc:	e7eb      	b.n	80126b6 <_printf_i+0x20a>
 80126de:	2500      	movs	r5, #0
 80126e0:	f104 0619 	add.w	r6, r4, #25
 80126e4:	e7f5      	b.n	80126d2 <_printf_i+0x226>
 80126e6:	bf00      	nop
 80126e8:	080147f0 	.word	0x080147f0
 80126ec:	08014801 	.word	0x08014801

080126f0 <__sflush_r>:
 80126f0:	898a      	ldrh	r2, [r1, #12]
 80126f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126f6:	4605      	mov	r5, r0
 80126f8:	0710      	lsls	r0, r2, #28
 80126fa:	460c      	mov	r4, r1
 80126fc:	d458      	bmi.n	80127b0 <__sflush_r+0xc0>
 80126fe:	684b      	ldr	r3, [r1, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	dc05      	bgt.n	8012710 <__sflush_r+0x20>
 8012704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012706:	2b00      	cmp	r3, #0
 8012708:	dc02      	bgt.n	8012710 <__sflush_r+0x20>
 801270a:	2000      	movs	r0, #0
 801270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012712:	2e00      	cmp	r6, #0
 8012714:	d0f9      	beq.n	801270a <__sflush_r+0x1a>
 8012716:	2300      	movs	r3, #0
 8012718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801271c:	682f      	ldr	r7, [r5, #0]
 801271e:	6a21      	ldr	r1, [r4, #32]
 8012720:	602b      	str	r3, [r5, #0]
 8012722:	d032      	beq.n	801278a <__sflush_r+0x9a>
 8012724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012726:	89a3      	ldrh	r3, [r4, #12]
 8012728:	075a      	lsls	r2, r3, #29
 801272a:	d505      	bpl.n	8012738 <__sflush_r+0x48>
 801272c:	6863      	ldr	r3, [r4, #4]
 801272e:	1ac0      	subs	r0, r0, r3
 8012730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012732:	b10b      	cbz	r3, 8012738 <__sflush_r+0x48>
 8012734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012736:	1ac0      	subs	r0, r0, r3
 8012738:	2300      	movs	r3, #0
 801273a:	4602      	mov	r2, r0
 801273c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801273e:	6a21      	ldr	r1, [r4, #32]
 8012740:	4628      	mov	r0, r5
 8012742:	47b0      	blx	r6
 8012744:	1c43      	adds	r3, r0, #1
 8012746:	89a3      	ldrh	r3, [r4, #12]
 8012748:	d106      	bne.n	8012758 <__sflush_r+0x68>
 801274a:	6829      	ldr	r1, [r5, #0]
 801274c:	291d      	cmp	r1, #29
 801274e:	d82b      	bhi.n	80127a8 <__sflush_r+0xb8>
 8012750:	4a29      	ldr	r2, [pc, #164]	; (80127f8 <__sflush_r+0x108>)
 8012752:	410a      	asrs	r2, r1
 8012754:	07d6      	lsls	r6, r2, #31
 8012756:	d427      	bmi.n	80127a8 <__sflush_r+0xb8>
 8012758:	2200      	movs	r2, #0
 801275a:	6062      	str	r2, [r4, #4]
 801275c:	04d9      	lsls	r1, r3, #19
 801275e:	6922      	ldr	r2, [r4, #16]
 8012760:	6022      	str	r2, [r4, #0]
 8012762:	d504      	bpl.n	801276e <__sflush_r+0x7e>
 8012764:	1c42      	adds	r2, r0, #1
 8012766:	d101      	bne.n	801276c <__sflush_r+0x7c>
 8012768:	682b      	ldr	r3, [r5, #0]
 801276a:	b903      	cbnz	r3, 801276e <__sflush_r+0x7e>
 801276c:	6560      	str	r0, [r4, #84]	; 0x54
 801276e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012770:	602f      	str	r7, [r5, #0]
 8012772:	2900      	cmp	r1, #0
 8012774:	d0c9      	beq.n	801270a <__sflush_r+0x1a>
 8012776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801277a:	4299      	cmp	r1, r3
 801277c:	d002      	beq.n	8012784 <__sflush_r+0x94>
 801277e:	4628      	mov	r0, r5
 8012780:	f7ff fb3e 	bl	8011e00 <_free_r>
 8012784:	2000      	movs	r0, #0
 8012786:	6360      	str	r0, [r4, #52]	; 0x34
 8012788:	e7c0      	b.n	801270c <__sflush_r+0x1c>
 801278a:	2301      	movs	r3, #1
 801278c:	4628      	mov	r0, r5
 801278e:	47b0      	blx	r6
 8012790:	1c41      	adds	r1, r0, #1
 8012792:	d1c8      	bne.n	8012726 <__sflush_r+0x36>
 8012794:	682b      	ldr	r3, [r5, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d0c5      	beq.n	8012726 <__sflush_r+0x36>
 801279a:	2b1d      	cmp	r3, #29
 801279c:	d001      	beq.n	80127a2 <__sflush_r+0xb2>
 801279e:	2b16      	cmp	r3, #22
 80127a0:	d101      	bne.n	80127a6 <__sflush_r+0xb6>
 80127a2:	602f      	str	r7, [r5, #0]
 80127a4:	e7b1      	b.n	801270a <__sflush_r+0x1a>
 80127a6:	89a3      	ldrh	r3, [r4, #12]
 80127a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127ac:	81a3      	strh	r3, [r4, #12]
 80127ae:	e7ad      	b.n	801270c <__sflush_r+0x1c>
 80127b0:	690f      	ldr	r7, [r1, #16]
 80127b2:	2f00      	cmp	r7, #0
 80127b4:	d0a9      	beq.n	801270a <__sflush_r+0x1a>
 80127b6:	0793      	lsls	r3, r2, #30
 80127b8:	680e      	ldr	r6, [r1, #0]
 80127ba:	bf08      	it	eq
 80127bc:	694b      	ldreq	r3, [r1, #20]
 80127be:	600f      	str	r7, [r1, #0]
 80127c0:	bf18      	it	ne
 80127c2:	2300      	movne	r3, #0
 80127c4:	eba6 0807 	sub.w	r8, r6, r7
 80127c8:	608b      	str	r3, [r1, #8]
 80127ca:	f1b8 0f00 	cmp.w	r8, #0
 80127ce:	dd9c      	ble.n	801270a <__sflush_r+0x1a>
 80127d0:	6a21      	ldr	r1, [r4, #32]
 80127d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127d4:	4643      	mov	r3, r8
 80127d6:	463a      	mov	r2, r7
 80127d8:	4628      	mov	r0, r5
 80127da:	47b0      	blx	r6
 80127dc:	2800      	cmp	r0, #0
 80127de:	dc06      	bgt.n	80127ee <__sflush_r+0xfe>
 80127e0:	89a3      	ldrh	r3, [r4, #12]
 80127e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127e6:	81a3      	strh	r3, [r4, #12]
 80127e8:	f04f 30ff 	mov.w	r0, #4294967295
 80127ec:	e78e      	b.n	801270c <__sflush_r+0x1c>
 80127ee:	4407      	add	r7, r0
 80127f0:	eba8 0800 	sub.w	r8, r8, r0
 80127f4:	e7e9      	b.n	80127ca <__sflush_r+0xda>
 80127f6:	bf00      	nop
 80127f8:	dfbffffe 	.word	0xdfbffffe

080127fc <_fflush_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	690b      	ldr	r3, [r1, #16]
 8012800:	4605      	mov	r5, r0
 8012802:	460c      	mov	r4, r1
 8012804:	b913      	cbnz	r3, 801280c <_fflush_r+0x10>
 8012806:	2500      	movs	r5, #0
 8012808:	4628      	mov	r0, r5
 801280a:	bd38      	pop	{r3, r4, r5, pc}
 801280c:	b118      	cbz	r0, 8012816 <_fflush_r+0x1a>
 801280e:	6a03      	ldr	r3, [r0, #32]
 8012810:	b90b      	cbnz	r3, 8012816 <_fflush_r+0x1a>
 8012812:	f7ff f827 	bl	8011864 <__sinit>
 8012816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d0f3      	beq.n	8012806 <_fflush_r+0xa>
 801281e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012820:	07d0      	lsls	r0, r2, #31
 8012822:	d404      	bmi.n	801282e <_fflush_r+0x32>
 8012824:	0599      	lsls	r1, r3, #22
 8012826:	d402      	bmi.n	801282e <_fflush_r+0x32>
 8012828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801282a:	f7ff fad1 	bl	8011dd0 <__retarget_lock_acquire_recursive>
 801282e:	4628      	mov	r0, r5
 8012830:	4621      	mov	r1, r4
 8012832:	f7ff ff5d 	bl	80126f0 <__sflush_r>
 8012836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012838:	07da      	lsls	r2, r3, #31
 801283a:	4605      	mov	r5, r0
 801283c:	d4e4      	bmi.n	8012808 <_fflush_r+0xc>
 801283e:	89a3      	ldrh	r3, [r4, #12]
 8012840:	059b      	lsls	r3, r3, #22
 8012842:	d4e1      	bmi.n	8012808 <_fflush_r+0xc>
 8012844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012846:	f7ff fac4 	bl	8011dd2 <__retarget_lock_release_recursive>
 801284a:	e7dd      	b.n	8012808 <_fflush_r+0xc>

0801284c <__swhatbuf_r>:
 801284c:	b570      	push	{r4, r5, r6, lr}
 801284e:	460c      	mov	r4, r1
 8012850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012854:	2900      	cmp	r1, #0
 8012856:	b096      	sub	sp, #88	; 0x58
 8012858:	4615      	mov	r5, r2
 801285a:	461e      	mov	r6, r3
 801285c:	da0d      	bge.n	801287a <__swhatbuf_r+0x2e>
 801285e:	89a3      	ldrh	r3, [r4, #12]
 8012860:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012864:	f04f 0100 	mov.w	r1, #0
 8012868:	bf0c      	ite	eq
 801286a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801286e:	2340      	movne	r3, #64	; 0x40
 8012870:	2000      	movs	r0, #0
 8012872:	6031      	str	r1, [r6, #0]
 8012874:	602b      	str	r3, [r5, #0]
 8012876:	b016      	add	sp, #88	; 0x58
 8012878:	bd70      	pop	{r4, r5, r6, pc}
 801287a:	466a      	mov	r2, sp
 801287c:	f000 f848 	bl	8012910 <_fstat_r>
 8012880:	2800      	cmp	r0, #0
 8012882:	dbec      	blt.n	801285e <__swhatbuf_r+0x12>
 8012884:	9901      	ldr	r1, [sp, #4]
 8012886:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801288a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801288e:	4259      	negs	r1, r3
 8012890:	4159      	adcs	r1, r3
 8012892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012896:	e7eb      	b.n	8012870 <__swhatbuf_r+0x24>

08012898 <__smakebuf_r>:
 8012898:	898b      	ldrh	r3, [r1, #12]
 801289a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801289c:	079d      	lsls	r5, r3, #30
 801289e:	4606      	mov	r6, r0
 80128a0:	460c      	mov	r4, r1
 80128a2:	d507      	bpl.n	80128b4 <__smakebuf_r+0x1c>
 80128a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	6123      	str	r3, [r4, #16]
 80128ac:	2301      	movs	r3, #1
 80128ae:	6163      	str	r3, [r4, #20]
 80128b0:	b002      	add	sp, #8
 80128b2:	bd70      	pop	{r4, r5, r6, pc}
 80128b4:	ab01      	add	r3, sp, #4
 80128b6:	466a      	mov	r2, sp
 80128b8:	f7ff ffc8 	bl	801284c <__swhatbuf_r>
 80128bc:	9900      	ldr	r1, [sp, #0]
 80128be:	4605      	mov	r5, r0
 80128c0:	4630      	mov	r0, r6
 80128c2:	f7fe fec9 	bl	8011658 <_malloc_r>
 80128c6:	b948      	cbnz	r0, 80128dc <__smakebuf_r+0x44>
 80128c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128cc:	059a      	lsls	r2, r3, #22
 80128ce:	d4ef      	bmi.n	80128b0 <__smakebuf_r+0x18>
 80128d0:	f023 0303 	bic.w	r3, r3, #3
 80128d4:	f043 0302 	orr.w	r3, r3, #2
 80128d8:	81a3      	strh	r3, [r4, #12]
 80128da:	e7e3      	b.n	80128a4 <__smakebuf_r+0xc>
 80128dc:	89a3      	ldrh	r3, [r4, #12]
 80128de:	6020      	str	r0, [r4, #0]
 80128e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128e4:	81a3      	strh	r3, [r4, #12]
 80128e6:	9b00      	ldr	r3, [sp, #0]
 80128e8:	6163      	str	r3, [r4, #20]
 80128ea:	9b01      	ldr	r3, [sp, #4]
 80128ec:	6120      	str	r0, [r4, #16]
 80128ee:	b15b      	cbz	r3, 8012908 <__smakebuf_r+0x70>
 80128f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128f4:	4630      	mov	r0, r6
 80128f6:	f000 f81d 	bl	8012934 <_isatty_r>
 80128fa:	b128      	cbz	r0, 8012908 <__smakebuf_r+0x70>
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	f023 0303 	bic.w	r3, r3, #3
 8012902:	f043 0301 	orr.w	r3, r3, #1
 8012906:	81a3      	strh	r3, [r4, #12]
 8012908:	89a3      	ldrh	r3, [r4, #12]
 801290a:	431d      	orrs	r5, r3
 801290c:	81a5      	strh	r5, [r4, #12]
 801290e:	e7cf      	b.n	80128b0 <__smakebuf_r+0x18>

08012910 <_fstat_r>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	4d07      	ldr	r5, [pc, #28]	; (8012930 <_fstat_r+0x20>)
 8012914:	2300      	movs	r3, #0
 8012916:	4604      	mov	r4, r0
 8012918:	4608      	mov	r0, r1
 801291a:	4611      	mov	r1, r2
 801291c:	602b      	str	r3, [r5, #0]
 801291e:	f7fe fc02 	bl	8011126 <_fstat>
 8012922:	1c43      	adds	r3, r0, #1
 8012924:	d102      	bne.n	801292c <_fstat_r+0x1c>
 8012926:	682b      	ldr	r3, [r5, #0]
 8012928:	b103      	cbz	r3, 801292c <_fstat_r+0x1c>
 801292a:	6023      	str	r3, [r4, #0]
 801292c:	bd38      	pop	{r3, r4, r5, pc}
 801292e:	bf00      	nop
 8012930:	20008740 	.word	0x20008740

08012934 <_isatty_r>:
 8012934:	b538      	push	{r3, r4, r5, lr}
 8012936:	4d06      	ldr	r5, [pc, #24]	; (8012950 <_isatty_r+0x1c>)
 8012938:	2300      	movs	r3, #0
 801293a:	4604      	mov	r4, r0
 801293c:	4608      	mov	r0, r1
 801293e:	602b      	str	r3, [r5, #0]
 8012940:	f7fe fc01 	bl	8011146 <_isatty>
 8012944:	1c43      	adds	r3, r0, #1
 8012946:	d102      	bne.n	801294e <_isatty_r+0x1a>
 8012948:	682b      	ldr	r3, [r5, #0]
 801294a:	b103      	cbz	r3, 801294e <_isatty_r+0x1a>
 801294c:	6023      	str	r3, [r4, #0]
 801294e:	bd38      	pop	{r3, r4, r5, pc}
 8012950:	20008740 	.word	0x20008740

08012954 <_realloc_r>:
 8012954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012958:	4680      	mov	r8, r0
 801295a:	4614      	mov	r4, r2
 801295c:	460e      	mov	r6, r1
 801295e:	b921      	cbnz	r1, 801296a <_realloc_r+0x16>
 8012960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012964:	4611      	mov	r1, r2
 8012966:	f7fe be77 	b.w	8011658 <_malloc_r>
 801296a:	b92a      	cbnz	r2, 8012978 <_realloc_r+0x24>
 801296c:	f7ff fa48 	bl	8011e00 <_free_r>
 8012970:	4625      	mov	r5, r4
 8012972:	4628      	mov	r0, r5
 8012974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012978:	f000 f81b 	bl	80129b2 <_malloc_usable_size_r>
 801297c:	4284      	cmp	r4, r0
 801297e:	4607      	mov	r7, r0
 8012980:	d802      	bhi.n	8012988 <_realloc_r+0x34>
 8012982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012986:	d812      	bhi.n	80129ae <_realloc_r+0x5a>
 8012988:	4621      	mov	r1, r4
 801298a:	4640      	mov	r0, r8
 801298c:	f7fe fe64 	bl	8011658 <_malloc_r>
 8012990:	4605      	mov	r5, r0
 8012992:	2800      	cmp	r0, #0
 8012994:	d0ed      	beq.n	8012972 <_realloc_r+0x1e>
 8012996:	42bc      	cmp	r4, r7
 8012998:	4622      	mov	r2, r4
 801299a:	4631      	mov	r1, r6
 801299c:	bf28      	it	cs
 801299e:	463a      	movcs	r2, r7
 80129a0:	f7ff fa20 	bl	8011de4 <memcpy>
 80129a4:	4631      	mov	r1, r6
 80129a6:	4640      	mov	r0, r8
 80129a8:	f7ff fa2a 	bl	8011e00 <_free_r>
 80129ac:	e7e1      	b.n	8012972 <_realloc_r+0x1e>
 80129ae:	4635      	mov	r5, r6
 80129b0:	e7df      	b.n	8012972 <_realloc_r+0x1e>

080129b2 <_malloc_usable_size_r>:
 80129b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129b6:	1f18      	subs	r0, r3, #4
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	bfbc      	itt	lt
 80129bc:	580b      	ldrlt	r3, [r1, r0]
 80129be:	18c0      	addlt	r0, r0, r3
 80129c0:	4770      	bx	lr
	...

080129c4 <_init>:
 80129c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c6:	bf00      	nop
 80129c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ca:	bc08      	pop	{r3}
 80129cc:	469e      	mov	lr, r3
 80129ce:	4770      	bx	lr

080129d0 <_fini>:
 80129d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d2:	bf00      	nop
 80129d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129d6:	bc08      	pop	{r3}
 80129d8:	469e      	mov	lr, r3
 80129da:	4770      	bx	lr
