/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*Includes ------------------------------------------------*/
#include <stdint.h>
#include "Config.h"
#include "wizchip_conf.h"
/*Defines -------------------------------------------------*/
#define SPI1_SCK		A, 5
#define SPI1_MOSI		A, 7
#define SPI1_MISO		A, 6
#define SPI1_NSS		B, 6
#define ETH_RST			C, 7

/*Global variables ----------------------------------------*/

/*Function prototype --------------------------------------*/
void SPI1_Init(void);

/*Main ----------------------------------------------------*/
int main(void)
{
	//spi init
	SPI1_Init();
	//pinout
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(ETH_RST) | GPIOX_CLOCK(BUTTON);
	GPIOX_MODER(MODE_OUT, ETH_RST);
	GPIOX_MODER(MODE_OUT, LED);
	GPIOX_MODER(MODE_DIGITAL_INPUT, BUTTON);

	//Ethernet W5100

    /* Loop forever */
	for(;;);
}


/*Function definition -------------------------------------*/
void SPI1_Init(void){
	//PINOUT
	RCC->AHB1ENR |= GPIOX_CLOCK(SPI1_SCK) | GPIOX_CLOCK(SPI1_MISO) | GPIOX_CLOCK(SPI1_MOSI) |\
			GPIOX_CLOCK(SPI1_NSS);
	GPIOX_MODER(MODE_ALTER, SPI1_SCK);
	GPIOX_AFR(5, SPI1_SCK);

	GPIOX_MODER(MODE_ALTER, SPI1_MISO);
	GPIOX_AFR(5, SPI1_MISO);

	GPIOX_MODER(MODE_ALTER, SPI1_MOSI);
	GPIOX_AFR(5, SPI1_MOSI);

	GPIOX_MODER(MODE_OUT, SPI1_NSS);

	//SPI1
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;

	//1. configurar el baudrate
	SPI1->CR1 &=~ SPI_CR1_BR;
	SPI1->CR1 |= SPI_CR1_BR_0;		//Fpclk / 4 = 4MHZ

	//2. Configurar la polaridad y la fase del reloj (SPI MODO 0)
	//CPOL
	SPI1->CR1 &=~ SPI_CR1_CPOL;    //CPOL = 0
	//CPHA
	SPI1->CR1 &=~ SPI_CR1_CPHA;    //CPHA = 0

	//3. configurar la longitud de la trama
	SPI1->CR1 &=~ SPI_CR1_DFF;     //8bits

	//4. configurar el LSP o MSB firts
	SPI1->CR1 &=~ SPI_CR1_LSBFIRST;//MSB first

	//5. Configurar el maneno del pin NSS
	SPI1->CR1 |= SPI_CR1_SSM;       //Software managment
	SPI1->CR1 |= SPI_CR1_SSI;

	//6. configurar el modo TI si fuera necesario

	//7. habilitar el modo maestro
	SPI1->CR1 |= SPI_CR1_MSTR;

	//8. Habilitar el spi
	SPI1->CR1 |= SPI_CR1_SPE;

	return;
}
