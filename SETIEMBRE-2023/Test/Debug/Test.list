
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080020b0  080020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002128  08002128  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002128  08002128  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002128  08002128  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800213c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800213c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000baa1  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d10  00000000  00000000  0002bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079c  00000000  00000000  0002e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000130ff  00000000  00000000  0002e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e863  00000000  00000000  00041a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00074839  00000000  00000000  000502ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021c4  00000000  00000000  000c4b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c6cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002098 	.word	0x08002098

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002098 	.word	0x08002098

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f001 ff05 	bl	8002040 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b33      	ldr	r3, [pc, #204]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800023a:	4b32      	ldr	r3, [pc, #200]	; (8000304 <MX_GPIO_Init+0xe4>)
 800023c:	2104      	movs	r1, #4
 800023e:	430a      	orrs	r2, r1
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
 8000242:	4b30      	ldr	r3, [pc, #192]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000246:	2204      	movs	r2, #4
 8000248:	4013      	ands	r3, r2
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000252:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000254:	2120      	movs	r1, #32
 8000256:	430a      	orrs	r2, r1
 8000258:	635a      	str	r2, [r3, #52]	; 0x34
 800025a:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MX_GPIO_Init+0xe4>)
 800025c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800025e:	2220      	movs	r2, #32
 8000260:	4013      	ands	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <MX_GPIO_Init+0xe4>)
 800026c:	2101      	movs	r1, #1
 800026e:	430a      	orrs	r2, r1
 8000270:	635a      	str	r2, [r3, #52]	; 0x34
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000276:	2201      	movs	r2, #1
 8000278:	4013      	ands	r3, r2
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <MX_GPIO_Init+0xe4>)
 8000284:	2102      	movs	r1, #2
 8000286:	430a      	orrs	r2, r1
 8000288:	635a      	str	r2, [r3, #52]	; 0x34
 800028a:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <MX_GPIO_Init+0xe4>)
 800028c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800028e:	2202      	movs	r2, #2
 8000290:	4013      	ands	r3, r2
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8000296:	23a0      	movs	r3, #160	; 0xa0
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2120      	movs	r1, #32
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fcf4 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	0192      	lsls	r2, r2, #6
 80002aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	4a16      	ldr	r2, [pc, #88]	; (8000308 <MX_GPIO_Init+0xe8>)
 80002b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	4a14      	ldr	r2, [pc, #80]	; (800030c <MX_GPIO_Init+0xec>)
 80002bc:	0019      	movs	r1, r3
 80002be:	0010      	movs	r0, r2
 80002c0:	f000 fb72 	bl	80009a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 80002c4:	0021      	movs	r1, r4
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2220      	movs	r2, #32
 80002ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2201      	movs	r2, #1
 80002d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2203      	movs	r2, #3
 80002dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80002de:	187a      	adds	r2, r7, r1
 80002e0:	23a0      	movs	r3, #160	; 0xa0
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	0011      	movs	r1, r2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fb5e 	bl	80009a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	2007      	movs	r0, #7
 80002f2:	f000 fb27 	bl	8000944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80002f6:	2007      	movs	r0, #7
 80002f8:	f000 fb39 	bl	800096e <HAL_NVIC_EnableIRQ>

}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b00b      	add	sp, #44	; 0x2c
 8000302:	bd90      	pop	{r4, r7, pc}
 8000304:	40021000 	.word	0x40021000
 8000308:	10110000 	.word	0x10110000
 800030c:	50000800 	.word	0x50000800

08000310 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_I2C1_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <MX_I2C1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_I2C1_Init+0x74>)
 800031c:	4a1b      	ldr	r2, [pc, #108]	; (800038c <MX_I2C1_Init+0x7c>)
 800031e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_I2C1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_I2C1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_I2C1_Init+0x74>)
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fcf9 	bl	8000d44 <HAL_I2C_Init>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000356:	f000 f8cd 	bl	80004f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_I2C1_Init+0x74>)
 800035c:	2100      	movs	r1, #0
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fd96 	bl	8000e90 <HAL_I2CEx_ConfigAnalogFilter>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 f8c4 	bl	80004f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_I2C1_Init+0x74>)
 800036e:	2100      	movs	r1, #0
 8000370:	0018      	movs	r0, r3
 8000372:	f000 fdd9 	bl	8000f28 <HAL_I2CEx_ConfigDigitalFilter>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 f8bb 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000028 	.word	0x20000028
 8000388:	40005400 	.word	0x40005400
 800038c:	20303e5d 	.word	0x20303e5d

08000390 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b091      	sub	sp, #68	; 0x44
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	232c      	movs	r3, #44	; 0x2c
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	0018      	movs	r0, r3
 800039e:	2314      	movs	r3, #20
 80003a0:	001a      	movs	r2, r3
 80003a2:	2100      	movs	r1, #0
 80003a4:	f001 fe4c 	bl	8002040 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	2410      	movs	r4, #16
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	0018      	movs	r0, r3
 80003ae:	231c      	movs	r3, #28
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f001 fe44 	bl	8002040 <memset>
  if(i2cHandle->Instance==I2C1)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a22      	ldr	r2, [pc, #136]	; (8000448 <HAL_I2C_MspInit+0xb8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d13e      	bne.n	8000440 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	2240      	movs	r2, #64	; 0x40
 80003c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f945 	bl	8001660 <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80003da:	f000 f88b 	bl	80004f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <HAL_I2C_MspInit+0xbc>)
 80003e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <HAL_I2C_MspInit+0xbc>)
 80003e4:	2102      	movs	r1, #2
 80003e6:	430a      	orrs	r2, r1
 80003e8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ea:	4b18      	ldr	r3, [pc, #96]	; (800044c <HAL_I2C_MspInit+0xbc>)
 80003ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ee:	2202      	movs	r2, #2
 80003f0:	4013      	ands	r3, r2
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80003f6:	212c      	movs	r1, #44	; 0x2c
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	22c0      	movs	r2, #192	; 0xc0
 80003fc:	0092      	lsls	r2, r2, #2
 80003fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2212      	movs	r2, #18
 8000404:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2206      	movs	r2, #6
 8000416:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	187b      	adds	r3, r7, r1
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <HAL_I2C_MspInit+0xc0>)
 800041c:	0019      	movs	r1, r3
 800041e:	0010      	movs	r0, r2
 8000420:	f000 fac2 	bl	80009a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_I2C_MspInit+0xbc>)
 8000426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <HAL_I2C_MspInit+0xbc>)
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	0389      	lsls	r1, r1, #14
 800042e:	430a      	orrs	r2, r1
 8000430:	63da      	str	r2, [r3, #60]	; 0x3c
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_I2C_MspInit+0xbc>)
 8000434:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	039b      	lsls	r3, r3, #14
 800043a:	4013      	ands	r3, r2
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b011      	add	sp, #68	; 0x44
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	40005400 	.word	0x40005400
 800044c:	40021000 	.word	0x40021000
 8000450:	50000400 	.word	0x50000400

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 f94b 	bl	80006f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f807 	bl	800046e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff fede 	bl	8000220 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000464:	f7ff ff54 	bl	8000310 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000468:	f000 f89c 	bl	80005a4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046c:	e7fe      	b.n	800046c <main+0x18>

0800046e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046e:	b590      	push	{r4, r7, lr}
 8000470:	b08d      	sub	sp, #52	; 0x34
 8000472:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000474:	2414      	movs	r4, #20
 8000476:	193b      	adds	r3, r7, r4
 8000478:	0018      	movs	r0, r3
 800047a:	231c      	movs	r3, #28
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f001 fdde 	bl	8002040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	003b      	movs	r3, r7
 8000486:	0018      	movs	r0, r3
 8000488:	2314      	movs	r3, #20
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f001 fdd7 	bl	8002040 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	0052      	lsls	r2, r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2240      	movs	r2, #64	; 0x40
 80004aa:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fd86 	bl	8000fc0 <HAL_RCC_OscConfig>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80004b8:	f000 f81c 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	003b      	movs	r3, r7
 80004be:	2207      	movs	r2, #7
 80004c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c2:	003b      	movs	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004ce:	003b      	movs	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004da:	003b      	movs	r3, r7
 80004dc:	2101      	movs	r1, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 ff52 	bl	8001388 <HAL_RCC_ClockConfig>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80004e8:	f000 f804 	bl	80004f4 <Error_Handler>
  }
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b00d      	add	sp, #52	; 0x34
 80004f2:	bd90      	pop	{r4, r7, pc}

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x44>)
 8000508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_MspInit+0x44>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	641a      	str	r2, [r3, #64]	; 0x40
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x44>)
 8000514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_MspInit+0x44>)
 8000520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_MspInit+0x44>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0549      	lsls	r1, r1, #21
 8000528:	430a      	orrs	r2, r1
 800052a:	63da      	str	r2, [r3, #60]	; 0x3c
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_MspInit+0x44>)
 800052e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	055b      	lsls	r3, r3, #21
 8000534:	4013      	ands	r3, r2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b002      	add	sp, #8
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056c:	f000 f922 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fba2 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <SystemInit+0x14>)
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0512      	lsls	r2, r2, #20
 8000596:	609a      	str	r2, [r3, #8]
#endif
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MX_USART2_UART_Init+0x64>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005b0:	22e1      	movs	r2, #225	; 0xe1
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_USART2_UART_Init+0x60>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 f924 	bl	800183c <HAL_UART_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005f8:	f7ff ff7c 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	2000007c 	.word	0x2000007c
 8000608:	40004400 	.word	0x40004400

0800060c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	; 0x2c
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	2414      	movs	r4, #20
 8000616:	193b      	adds	r3, r7, r4
 8000618:	0018      	movs	r0, r3
 800061a:	2314      	movs	r3, #20
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f001 fd0e 	bl	8002040 <memset>
  if(uartHandle->Instance==USART2)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <HAL_UART_MspInit+0x8c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d130      	bne.n	8000690 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <HAL_UART_MspInit+0x90>)
 8000630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <HAL_UART_MspInit+0x90>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0289      	lsls	r1, r1, #10
 8000638:	430a      	orrs	r2, r1
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_UART_MspInit+0x90>)
 800063e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	029b      	lsls	r3, r3, #10
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <HAL_UART_MspInit+0x90>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <HAL_UART_MspInit+0x90>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_UART_MspInit+0x90>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000662:	0021      	movs	r1, r4
 8000664:	187b      	adds	r3, r7, r1
 8000666:	220c      	movs	r2, #12
 8000668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2201      	movs	r2, #1
 8000680:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	187a      	adds	r2, r7, r1
 8000684:	23a0      	movs	r3, #160	; 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f000 f98c 	bl	80009a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b00b      	add	sp, #44	; 0x2c
 8000696:	bd90      	pop	{r4, r7, pc}
 8000698:	40004400 	.word	0x40004400
 800069c:	40021000 	.word	0x40021000

080006a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f7ff ff72 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006aa:	e003      	b.n	80006b4 <LoopCopyDataInit>

080006ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80006ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006b2:	3104      	adds	r1, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <LoopForever+0xa>)
  ldr r3, =_edata
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <LoopForever+0xe>)
  adds r2, r0, r1
 80006b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006bc:	d3f6      	bcc.n	80006ac <CopyDataInit>
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
  b LoopFillZerobss
 80006c0:	e002      	b.n	80006c8 <LoopFillZerobss>

080006c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80006c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c6:	3204      	adds	r2, #4

080006c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <LoopForever+0x16>)
  cmp r2, r3
 80006ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006cc:	d3f9      	bcc.n	80006c2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80006ce:	f001 fcbf 	bl	8002050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff febf 	bl	8000454 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   r0, =_estack
 80006d8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80006dc:	08002130 	.word	0x08002130
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006ec:	20000114 	.word	0x20000114

080006f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_IRQHandler>

080006f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006fe:	2003      	movs	r0, #3
 8000700:	f000 f80e 	bl	8000720 <HAL_InitTick>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d003      	beq.n	8000710 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	e001      	b.n	8000714 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000710:	f7ff fef6 	bl	8000500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000714:	1dfb      	adds	r3, r7, #7
 8000716:	781b      	ldrb	r3, [r3, #0]
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <HAL_InitTick+0x88>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02b      	beq.n	8000790 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <HAL_InitTick+0x8c>)
 800073a:	681c      	ldr	r4, [r3, #0]
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <HAL_InitTick+0x88>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	0019      	movs	r1, r3
 8000742:	23fa      	movs	r3, #250	; 0xfa
 8000744:	0098      	lsls	r0, r3, #2
 8000746:	f7ff fcdf 	bl	8000108 <__udivsi3>
 800074a:	0003      	movs	r3, r0
 800074c:	0019      	movs	r1, r3
 800074e:	0020      	movs	r0, r4
 8000750:	f7ff fcda 	bl	8000108 <__udivsi3>
 8000754:	0003      	movs	r3, r0
 8000756:	0018      	movs	r0, r3
 8000758:	f000 f919 	bl	800098e <HAL_SYSTICK_Config>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d112      	bne.n	8000786 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d80a      	bhi.n	800077c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	2301      	movs	r3, #1
 800076a:	425b      	negs	r3, r3
 800076c:	2200      	movs	r2, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f8e8 	bl	8000944 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_InitTick+0x90>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e00d      	b.n	8000798 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800077c:	230f      	movs	r3, #15
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e008      	b.n	8000798 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000786:	230f      	movs	r3, #15
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e003      	b.n	8000798 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000790:	230f      	movs	r3, #15
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	781b      	ldrb	r3, [r3, #0]
}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b005      	add	sp, #20
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x20>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	18d2      	adds	r2, r2, r3
 80007c4:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <HAL_IncTick+0x20>)
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000110 	.word	0x20000110

080007d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <HAL_GetTick+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	0018      	movs	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000110 	.word	0x20000110

080007ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	0002      	movs	r2, r0
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b7f      	cmp	r3, #127	; 0x7f
 80007fe:	d809      	bhi.n	8000814 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	231f      	movs	r3, #31
 8000808:	401a      	ands	r2, r3
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <__NVIC_EnableIRQ+0x30>)
 800080c:	2101      	movs	r1, #1
 800080e:	4091      	lsls	r1, r2
 8000810:	000a      	movs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}
 800081c:	e000e100 	.word	0xe000e100

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	0002      	movs	r2, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b7f      	cmp	r3, #127	; 0x7f
 8000834:	d828      	bhi.n	8000888 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <__NVIC_SetPriority+0xd4>)
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b25b      	sxtb	r3, r3
 800083e:	089b      	lsrs	r3, r3, #2
 8000840:	33c0      	adds	r3, #192	; 0xc0
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	589b      	ldr	r3, [r3, r2]
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	0011      	movs	r1, r2
 800084c:	2203      	movs	r2, #3
 800084e:	400a      	ands	r2, r1
 8000850:	00d2      	lsls	r2, r2, #3
 8000852:	21ff      	movs	r1, #255	; 0xff
 8000854:	4091      	lsls	r1, r2
 8000856:	000a      	movs	r2, r1
 8000858:	43d2      	mvns	r2, r2
 800085a:	401a      	ands	r2, r3
 800085c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	019b      	lsls	r3, r3, #6
 8000862:	22ff      	movs	r2, #255	; 0xff
 8000864:	401a      	ands	r2, r3
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	0018      	movs	r0, r3
 800086c:	2303      	movs	r3, #3
 800086e:	4003      	ands	r3, r0
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	481f      	ldr	r0, [pc, #124]	; (80008f4 <__NVIC_SetPriority+0xd4>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b25b      	sxtb	r3, r3
 800087c:	089b      	lsrs	r3, r3, #2
 800087e:	430a      	orrs	r2, r1
 8000880:	33c0      	adds	r3, #192	; 0xc0
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000886:	e031      	b.n	80008ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	0019      	movs	r1, r3
 8000890:	230f      	movs	r3, #15
 8000892:	400b      	ands	r3, r1
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	3306      	adds	r3, #6
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	3304      	adds	r3, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1dfa      	adds	r2, r7, #7
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	0011      	movs	r1, r2
 80008a8:	2203      	movs	r2, #3
 80008aa:	400a      	ands	r2, r1
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	401a      	ands	r2, r3
 80008b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	401a      	ands	r2, r3
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	2303      	movs	r3, #3
 80008ca:	4003      	ands	r3, r0
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <__NVIC_SetPriority+0xd8>)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	001c      	movs	r4, r3
 80008d8:	230f      	movs	r3, #15
 80008da:	4023      	ands	r3, r4
 80008dc:	3b08      	subs	r3, #8
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	430a      	orrs	r2, r1
 80008e2:	3306      	adds	r3, #6
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	18c3      	adds	r3, r0, r3
 80008e8:	3304      	adds	r3, #4
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1e5a      	subs	r2, r3, #1
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	045b      	lsls	r3, r3, #17
 800090c:	429a      	cmp	r2, r3
 800090e:	d301      	bcc.n	8000914 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000910:	2301      	movs	r3, #1
 8000912:	e010      	b.n	8000936 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <SysTick_Config+0x44>)
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	3a01      	subs	r2, #1
 800091a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091c:	2301      	movs	r3, #1
 800091e:	425b      	negs	r3, r3
 8000920:	2103      	movs	r1, #3
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff ff7c 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x44>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x44>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	210f      	movs	r1, #15
 8000950:	187b      	adds	r3, r7, r1
 8000952:	1c02      	adds	r2, r0, #0
 8000954:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff5d 	bl	8000820 <__NVIC_SetPriority>
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b004      	add	sp, #16
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	0002      	movs	r2, r0
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ff33 	bl	80007ec <__NVIC_EnableIRQ>
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ffaf 	bl	80008fc <SysTick_Config>
 800099e:	0003      	movs	r3, r0
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80009b6:	e153      	b.n	8000c60 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4091      	lsls	r1, r2
 80009c2:	000a      	movs	r2, r1
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d100      	bne.n	80009d0 <HAL_GPIO_Init+0x28>
 80009ce:	e144      	b.n	8000c5a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x38>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b12      	cmp	r3, #18
 80009de:	d125      	bne.n	8000a2c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	08da      	lsrs	r2, r3, #3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3208      	adds	r2, #8
 80009e8:	0092      	lsls	r2, r2, #2
 80009ea:	58d3      	ldr	r3, [r2, r3]
 80009ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	2207      	movs	r2, #7
 80009f2:	4013      	ands	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	220f      	movs	r2, #15
 80009f8:	409a      	lsls	r2, r3
 80009fa:	0013      	movs	r3, r2
 80009fc:	43da      	mvns	r2, r3
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4013      	ands	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	220f      	movs	r2, #15
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	2107      	movs	r1, #7
 8000a10:	400b      	ands	r3, r1
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	08da      	lsrs	r2, r3, #3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3208      	adds	r2, #8
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	6979      	ldr	r1, [r7, #20]
 8000a2a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	0013      	movs	r3, r2
 8000a3c:	43da      	mvns	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	4013      	ands	r3, r2
 8000a42:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2203      	movs	r2, #3
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	409a      	lsls	r2, r3
 8000a52:	0013      	movs	r3, r2
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d00b      	beq.n	8000a80 <HAL_GPIO_Init+0xd8>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d007      	beq.n	8000a80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a74:	2b11      	cmp	r3, #17
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b12      	cmp	r3, #18
 8000a7e:	d130      	bne.n	8000ae2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	0013      	movs	r3, r2
 8000a90:	43da      	mvns	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4013      	ands	r3, r2
 8000a96:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	2201      	movs	r2, #1
 8000ace:	401a      	ands	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d017      	beq.n	8000b1a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	4013      	ands	r3, r2
 8000b00:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	055b      	lsls	r3, r3, #21
 8000b22:	4013      	ands	r3, r2
 8000b24:	d100      	bne.n	8000b28 <HAL_GPIO_Init+0x180>
 8000b26:	e098      	b.n	8000c5a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b28:	4a53      	ldr	r2, [pc, #332]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3318      	adds	r3, #24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	589b      	ldr	r3, [r3, r2]
 8000b34:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	220f      	movs	r2, #15
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d019      	beq.n	8000b8a <HAL_GPIO_Init+0x1e2>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a48      	ldr	r2, [pc, #288]	; (8000c7c <HAL_GPIO_Init+0x2d4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x1de>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <HAL_GPIO_Init+0x2d8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x1da>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_GPIO_Init+0x2dc>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x1d6>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a45      	ldr	r2, [pc, #276]	; (8000c88 <HAL_GPIO_Init+0x2e0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x1d2>
 8000b76:	2305      	movs	r3, #5
 8000b78:	e008      	b.n	8000b8c <HAL_GPIO_Init+0x1e4>
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x1e4>
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e004      	b.n	8000b8c <HAL_GPIO_Init+0x1e4>
 8000b82:	2302      	movs	r3, #2
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_Init+0x1e4>
 8000b86:	2301      	movs	r3, #1
 8000b88:	e000      	b.n	8000b8c <HAL_GPIO_Init+0x1e4>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	2103      	movs	r1, #3
 8000b90:	400a      	ands	r2, r1
 8000b92:	00d2      	lsls	r2, r2, #3
 8000b94:	4093      	lsls	r3, r2
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b9c:	4936      	ldr	r1, [pc, #216]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43da      	mvns	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	025b      	lsls	r3, r3, #9
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000bd0:	4929      	ldr	r1, [pc, #164]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000bd8:	4a27      	ldr	r2, [pc, #156]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000bda:	2384      	movs	r3, #132	; 0x84
 8000bdc:	58d3      	ldr	r3, [r2, r3]
 8000bde:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43da      	mvns	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4013      	ands	r3, r2
 8000be8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	029b      	lsls	r3, r3, #10
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000bfe:	491e      	ldr	r1, [pc, #120]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000c00:	2284      	movs	r2, #132	; 0x84
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	4013      	ands	r3, r2
 8000c14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	035b      	lsls	r3, r3, #13
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	039b      	lsls	r3, r3, #14
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_GPIO_Init+0x2d0>)
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	40da      	lsrs	r2, r3
 8000c68:	1e13      	subs	r3, r2, #0
 8000c6a:	d000      	beq.n	8000c6e <HAL_GPIO_Init+0x2c6>
 8000c6c:	e6a4      	b.n	80009b8 <HAL_GPIO_Init+0x10>
  }
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b006      	add	sp, #24
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	50000400 	.word	0x50000400
 8000c80:	50000800 	.word	0x50000800
 8000c84:	50000c00 	.word	0x50000c00
 8000c88:	50001400 	.word	0x50001400

08000c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	0008      	movs	r0, r1
 8000c96:	0011      	movs	r1, r2
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	1c7b      	adds	r3, r7, #1
 8000ca0:	1c0a      	adds	r2, r1, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca4:	1c7b      	adds	r3, r7, #1
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d004      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cac:	1cbb      	adds	r3, r7, #2
 8000cae:	881a      	ldrh	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e003      	b.n	8000cbe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb6:	1cbb      	adds	r3, r7, #2
 8000cb8:	881a      	ldrh	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dbb      	adds	r3, r7, #6
 8000cd2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	1dba      	adds	r2, r7, #6
 8000cda:	8812      	ldrh	r2, [r2, #0]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d008      	beq.n	8000cf2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000ce2:	1dba      	adds	r2, r7, #6
 8000ce4:	8812      	ldrh	r2, [r2, #0]
 8000ce6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000ce8:	1dbb      	adds	r3, r7, #6
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 f815 	bl	8000d1c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	1dba      	adds	r2, r7, #6
 8000cf8:	8812      	ldrh	r2, [r2, #0]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d008      	beq.n	8000d10 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d00:	1dba      	adds	r2, r7, #6
 8000d02:	8812      	ldrh	r2, [r2, #0]
 8000d04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000d06:	1dbb      	adds	r3, r7, #6
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f810 	bl	8000d30 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021800 	.word	0x40021800

08000d1c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	1dbb      	adds	r3, r7, #6
 8000d3a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e08f      	b.n	8000e76 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2241      	movs	r2, #65	; 0x41
 8000d5a:	5c9b      	ldrb	r3, [r3, r2]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d107      	bne.n	8000d72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	2100      	movs	r1, #0
 8000d68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fb0f 	bl	8000390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2241      	movs	r2, #65	; 0x41
 8000d76:	2124      	movs	r1, #36	; 0x24
 8000d78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	438a      	bics	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	493b      	ldr	r1, [pc, #236]	; (8000e80 <HAL_I2C_Init+0x13c>)
 8000d94:	400a      	ands	r2, r1
 8000d96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4938      	ldr	r1, [pc, #224]	; (8000e84 <HAL_I2C_Init+0x140>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	0209      	lsls	r1, r1, #8
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	e007      	b.n	8000dd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2184      	movs	r1, #132	; 0x84
 8000dcc:	0209      	lsls	r1, r1, #8
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d109      	bne.n	8000dee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0109      	lsls	r1, r1, #4
 8000de8:	430a      	orrs	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	e007      	b.n	8000dfe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4923      	ldr	r1, [pc, #140]	; (8000e88 <HAL_I2C_Init+0x144>)
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4920      	ldr	r1, [pc, #128]	; (8000e8c <HAL_I2C_Init+0x148>)
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	491a      	ldr	r1, [pc, #104]	; (8000e84 <HAL_I2C_Init+0x140>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69d9      	ldr	r1, [r3, #28]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1a      	ldr	r2, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2101      	movs	r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2241      	movs	r2, #65	; 0x41
 8000e62:	2120      	movs	r1, #32
 8000e64:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2242      	movs	r2, #66	; 0x42
 8000e70:	2100      	movs	r1, #0
 8000e72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	f0ffffff 	.word	0xf0ffffff
 8000e84:	ffff7fff 	.word	0xffff7fff
 8000e88:	fffff7ff 	.word	0xfffff7ff
 8000e8c:	02008000 	.word	0x02008000

08000e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2241      	movs	r2, #65	; 0x41
 8000e9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d138      	bne.n	8000f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2240      	movs	r2, #64	; 0x40
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e032      	b.n	8000f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2240      	movs	r2, #64	; 0x40
 8000eb8:	2101      	movs	r1, #1
 8000eba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2241      	movs	r2, #65	; 0x41
 8000ec0:	2124      	movs	r1, #36	; 0x24
 8000ec2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2101      	movs	r1, #1
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4911      	ldr	r1, [pc, #68]	; (8000f24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	683a      	ldr	r2, [r7, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2241      	movs	r2, #65	; 0x41
 8000f08:	2120      	movs	r1, #32
 8000f0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	2100      	movs	r1, #0
 8000f12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e000      	b.n	8000f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f18:	2302      	movs	r3, #2
  }
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	ffffefff 	.word	0xffffefff

08000f28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2241      	movs	r2, #65	; 0x41
 8000f36:	5c9b      	ldrb	r3, [r3, r2]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d139      	bne.n	8000fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	5c9b      	ldrb	r3, [r3, r2]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d101      	bne.n	8000f4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e033      	b.n	8000fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2240      	movs	r2, #64	; 0x40
 8000f50:	2101      	movs	r1, #1
 8000f52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2241      	movs	r2, #65	; 0x41
 8000f58:	2124      	movs	r1, #36	; 0x24
 8000f5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2101      	movs	r1, #1
 8000f68:	438a      	bics	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2241      	movs	r2, #65	; 0x41
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2240      	movs	r2, #64	; 0x40
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000fb2:	2302      	movs	r3, #2
  }
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	fffff0ff 	.word	0xfffff0ff

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e1d0      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d100      	bne.n	8000fde <HAL_RCC_OscConfig+0x1e>
 8000fdc:	e069      	b.n	80010b2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fde:	4bc8      	ldr	r3, [pc, #800]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2238      	movs	r2, #56	; 0x38
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d105      	bne.n	8000ffa <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d15d      	bne.n	80010b2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e1bc      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	429a      	cmp	r2, r3
 8001004:	d107      	bne.n	8001016 <HAL_RCC_OscConfig+0x56>
 8001006:	4bbe      	ldr	r3, [pc, #760]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4bbd      	ldr	r3, [pc, #756]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0249      	lsls	r1, r1, #9
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e020      	b.n	8001058 <HAL_RCC_OscConfig+0x98>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	02db      	lsls	r3, r3, #11
 800101e:	429a      	cmp	r2, r3
 8001020:	d10e      	bne.n	8001040 <HAL_RCC_OscConfig+0x80>
 8001022:	4bb7      	ldr	r3, [pc, #732]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4bb6      	ldr	r3, [pc, #728]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	02c9      	lsls	r1, r1, #11
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	4bb3      	ldr	r3, [pc, #716]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4bb2      	ldr	r3, [pc, #712]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0249      	lsls	r1, r1, #9
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0x98>
 8001040:	4baf      	ldr	r3, [pc, #700]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4bae      	ldr	r3, [pc, #696]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001046:	49af      	ldr	r1, [pc, #700]	; (8001304 <HAL_RCC_OscConfig+0x344>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4bac      	ldr	r3, [pc, #688]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4bab      	ldr	r3, [pc, #684]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001052:	49ad      	ldr	r1, [pc, #692]	; (8001308 <HAL_RCC_OscConfig+0x348>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d014      	beq.n	800108a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fbba 	bl	80007d8 <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800106a:	f7ff fbb5 	bl	80007d8 <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e17b      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800107c:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	029b      	lsls	r3, r3, #10
 8001084:	4013      	ands	r3, r2
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0xaa>
 8001088:	e013      	b.n	80010b2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108a:	f7ff fba5 	bl	80007d8 <HAL_GetTick>
 800108e:	0003      	movs	r3, r0
 8001090:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001094:	f7ff fba0 	bl	80007d8 <HAL_GetTick>
 8001098:	0002      	movs	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e166      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010a6:	4b96      	ldr	r3, [pc, #600]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	029b      	lsls	r3, r3, #10
 80010ae:	4013      	ands	r3, r2
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d100      	bne.n	80010be <HAL_RCC_OscConfig+0xfe>
 80010bc:	e086      	b.n	80011cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010be:	4b90      	ldr	r3, [pc, #576]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2238      	movs	r2, #56	; 0x38
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d12f      	bne.n	800112e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e14c      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b89      	ldr	r3, [pc, #548]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	4a8b      	ldr	r2, [pc, #556]	; (800130c <HAL_RCC_OscConfig+0x34c>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	021a      	lsls	r2, r3, #8
 80010ea:	4b85      	ldr	r3, [pc, #532]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010f6:	4b82      	ldr	r3, [pc, #520]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a85      	ldr	r2, [pc, #532]	; (8001310 <HAL_RCC_OscConfig+0x350>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	4b7e      	ldr	r3, [pc, #504]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0adb      	lsrs	r3, r3, #11
 8001110:	2207      	movs	r2, #7
 8001112:	4013      	ands	r3, r2
 8001114:	4a7f      	ldr	r2, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x354>)
 8001116:	40da      	lsrs	r2, r3
 8001118:	4b7f      	ldr	r3, [pc, #508]	; (8001318 <HAL_RCC_OscConfig+0x358>)
 800111a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800111c:	4b7f      	ldr	r3, [pc, #508]	; (800131c <HAL_RCC_OscConfig+0x35c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff fafd 	bl	8000720 <HAL_InitTick>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d050      	beq.n	80011cc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e122      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d030      	beq.n	8001198 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001136:	4b72      	ldr	r3, [pc, #456]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a75      	ldr	r2, [pc, #468]	; (8001310 <HAL_RCC_OscConfig+0x350>)
 800113c:	4013      	ands	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800114a:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0049      	lsls	r1, r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fb3e 	bl	80007d8 <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001162:	f7ff fb39 	bl	80007d8 <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e0ff      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001174:	4b62      	ldr	r3, [pc, #392]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4013      	ands	r3, r2
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a61      	ldr	r2, [pc, #388]	; (800130c <HAL_RCC_OscConfig+0x34c>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	021a      	lsls	r2, r3, #8
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	e019      	b.n	80011cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001198:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800119e:	4960      	ldr	r1, [pc, #384]	; (8001320 <HAL_RCC_OscConfig+0x360>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fb18 	bl	80007d8 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fb13 	bl	80007d8 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0d9      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	d1f0      	bne.n	80011ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2208      	movs	r2, #8
 80011d2:	4013      	ands	r3, r2
 80011d4:	d042      	beq.n	800125c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2238      	movs	r2, #56	; 0x38
 80011dc:	4013      	ands	r3, r2
 80011de:	2b18      	cmp	r3, #24
 80011e0:	d105      	bne.n	80011ee <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d138      	bne.n	800125c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0c2      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80011f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	430a      	orrs	r2, r1
 8001200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff fae9 	bl	80007d8 <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800120c:	f7ff fae4 	bl	80007d8 <HAL_GetTick>
 8001210:	0002      	movs	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e0aa      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d0f1      	beq.n	800120c <HAL_RCC_OscConfig+0x24c>
 8001228:	e018      	b.n	800125c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 800122c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff facf 	bl	80007d8 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001240:	f7ff faca 	bl	80007d8 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e090      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d1f1      	bne.n	8001240 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2204      	movs	r2, #4
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_RCC_OscConfig+0x2a8>
 8001266:	e084      	b.n	8001372 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2238      	movs	r2, #56	; 0x38
 8001276:	4013      	ands	r3, r2
 8001278:	2b20      	cmp	r3, #32
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d000      	beq.n	8001286 <HAL_RCC_OscConfig+0x2c6>
 8001284:	e075      	b.n	8001372 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e074      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x2e0>
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001294:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 8001298:	2101      	movs	r1, #1
 800129a:	430a      	orrs	r2, r1
 800129c:	65da      	str	r2, [r3, #92]	; 0x5c
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x31a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x302>
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012ae:	2104      	movs	r1, #4
 80012b0:	430a      	orrs	r2, r1
 80012b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	65da      	str	r2, [r3, #92]	; 0x5c
 80012c0:	e00b      	b.n	80012da <HAL_RCC_OscConfig+0x31a>
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_RCC_OscConfig+0x340>)
 80012d4:	2104      	movs	r1, #4
 80012d6:	438a      	bics	r2, r1
 80012d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d028      	beq.n	8001334 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff fa79 	bl	80007d8 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ec:	f7ff fa74 	bl	80007d8 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_RCC_OscConfig+0x364>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d915      	bls.n	8001328 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e039      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
 8001300:	40021000 	.word	0x40021000
 8001304:	fffeffff 	.word	0xfffeffff
 8001308:	fffbffff 	.word	0xfffbffff
 800130c:	ffff80ff 	.word	0xffff80ff
 8001310:	ffffc7ff 	.word	0xffffc7ff
 8001314:	02dc6c00 	.word	0x02dc6c00
 8001318:	20000000 	.word	0x20000000
 800131c:	20000004 	.word	0x20000004
 8001320:	fffffeff 	.word	0xfffffeff
 8001324:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_RCC_OscConfig+0x3bc>)
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d0dc      	beq.n	80012ec <HAL_RCC_OscConfig+0x32c>
 8001332:	e013      	b.n	800135c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fa50 	bl	80007d8 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800133c:	e009      	b.n	8001352 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff fa4b 	bl	80007d8 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_RCC_OscConfig+0x3c0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e010      	b.n	8001374 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_RCC_OscConfig+0x3bc>)
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800135c:	230f      	movs	r3, #15
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_OscConfig+0x3bc>)
 8001368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_RCC_OscConfig+0x3bc>)
 800136c:	4905      	ldr	r1, [pc, #20]	; (8001384 <HAL_RCC_OscConfig+0x3c4>)
 800136e:	400a      	ands	r2, r1
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	b006      	add	sp, #24
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	00001388 	.word	0x00001388
 8001384:	efffffff 	.word	0xefffffff

08001388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0e9      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2207      	movs	r2, #7
 80013a2:	4013      	ands	r3, r2
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d91e      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2207      	movs	r2, #7
 80013b0:	4393      	bics	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	4b70      	ldr	r3, [pc, #448]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013bc:	f7ff fa0c 	bl	80007d8 <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c4:	e009      	b.n	80013da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013c6:	f7ff fa07 	bl	80007d8 <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	4a6a      	ldr	r2, [pc, #424]	; (800157c <HAL_RCC_ClockConfig+0x1f4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e0ca      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2207      	movs	r2, #7
 80013e0:	4013      	ands	r3, r2
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1ee      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	4013      	ands	r3, r2
 80013f0:	d017      	beq.n	8001422 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2204      	movs	r2, #4
 80013f8:	4013      	ands	r3, r2
 80013fa:	d008      	beq.n	800140e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013fc:	4b60      	ldr	r3, [pc, #384]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a60      	ldr	r2, [pc, #384]	; (8001584 <HAL_RCC_ClockConfig+0x1fc>)
 8001402:	401a      	ands	r2, r3
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	21b0      	movs	r1, #176	; 0xb0
 8001408:	0109      	lsls	r1, r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	4a5d      	ldr	r2, [pc, #372]	; (8001588 <HAL_RCC_ClockConfig+0x200>)
 8001414:	4013      	ands	r3, r2
 8001416:	0019      	movs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	d055      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800142c:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	221c      	movs	r2, #28
 8001432:	4393      	bics	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d107      	bne.n	8001458 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001448:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	4013      	ands	r3, r2
 8001452:	d11f      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e08b      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4013      	ands	r3, r2
 800146a:	d113      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e07f      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d106      	bne.n	8001486 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800147a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d108      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e074      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e06d      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001494:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2207      	movs	r2, #7
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014a8:	f7ff f996 	bl	80007d8 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7ff f991 	bl	80007d8 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a2f      	ldr	r2, [pc, #188]	; (800157c <HAL_RCC_ClockConfig+0x1f4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e054      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2238      	movs	r2, #56	; 0x38
 80014cc:	401a      	ands	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1ec      	bne.n	80014b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2207      	movs	r2, #7
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d21e      	bcs.n	8001524 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2207      	movs	r2, #7
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014f8:	f7ff f96e 	bl	80007d8 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001500:	e009      	b.n	8001516 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001502:	f7ff f969 	bl	80007d8 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_RCC_ClockConfig+0x1f4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e02c      	b.n	8001570 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_RCC_ClockConfig+0x1f0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2207      	movs	r2, #7
 800151c:	4013      	ands	r3, r2
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d1ee      	bne.n	8001502 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	4013      	ands	r3, r2
 800152c:	d009      	beq.n	8001542 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	4a16      	ldr	r2, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x204>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001542:	f000 f82b 	bl	800159c <HAL_RCC_GetSysClockFreq>
 8001546:	0001      	movs	r1, r0
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_RCC_ClockConfig+0x1f8>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	220f      	movs	r2, #15
 8001550:	401a      	ands	r2, r3
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_RCC_ClockConfig+0x208>)
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	58d3      	ldr	r3, [r2, r3]
 8001558:	221f      	movs	r2, #31
 800155a:	4013      	ands	r3, r2
 800155c:	000a      	movs	r2, r1
 800155e:	40da      	lsrs	r2, r3
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_RCC_ClockConfig+0x20c>)
 8001562:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_RCC_ClockConfig+0x210>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff f8d9 	bl	8000720 <HAL_InitTick>
 800156e:	0003      	movs	r3, r0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000
 800157c:	00001388 	.word	0x00001388
 8001580:	40021000 	.word	0x40021000
 8001584:	ffff84ff 	.word	0xffff84ff
 8001588:	fffff0ff 	.word	0xfffff0ff
 800158c:	ffff8fff 	.word	0xffff8fff
 8001590:	080020b0 	.word	0x080020b0
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_RCC_GetSysClockFreq+0x78>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2238      	movs	r2, #56	; 0x38
 80015a8:	4013      	ands	r3, r2
 80015aa:	d10f      	bne.n	80015cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_GetSysClockFreq+0x78>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0adb      	lsrs	r3, r3, #11
 80015b2:	2207      	movs	r2, #7
 80015b4:	4013      	ands	r3, r2
 80015b6:	2201      	movs	r2, #1
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	4815      	ldr	r0, [pc, #84]	; (8001618 <HAL_RCC_GetSysClockFreq+0x7c>)
 80015c2:	f7fe fda1 	bl	8000108 <__udivsi3>
 80015c6:	0003      	movs	r3, r0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	e01e      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_RCC_GetSysClockFreq+0x78>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2238      	movs	r2, #56	; 0x38
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d102      	bne.n	80015de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_RCC_GetSysClockFreq+0x7c>)
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	e015      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_RCC_GetSysClockFreq+0x78>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2238      	movs	r2, #56	; 0x38
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d103      	bne.n	80015f2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	e00b      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_RCC_GetSysClockFreq+0x78>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b18      	cmp	r3, #24
 80015fc:	d103      	bne.n	8001606 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80015fe:	23fa      	movs	r3, #250	; 0xfa
 8001600:	01db      	lsls	r3, r3, #7
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800160a:	687b      	ldr	r3, [r7, #4]
}
 800160c:	0018      	movs	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	02dc6c00 	.word	0x02dc6c00

0800161c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_RCC_GetHCLKFreq+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001634:	f7ff fff2 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8001638:	0001      	movs	r1, r0
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x28>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0b1b      	lsrs	r3, r3, #12
 8001640:	2207      	movs	r2, #7
 8001642:	401a      	ands	r2, r3
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	58d3      	ldr	r3, [r2, r3]
 800164a:	221f      	movs	r2, #31
 800164c:	4013      	ands	r3, r2
 800164e:	40d9      	lsrs	r1, r3
 8001650:	000b      	movs	r3, r1
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	080020f0 	.word	0x080020f0

08001660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001668:	2313      	movs	r3, #19
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001670:	2312      	movs	r3, #18
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001684:	e079      	b.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001686:	2011      	movs	r0, #17
 8001688:	183b      	adds	r3, r7, r0
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	055b      	lsls	r3, r3, #21
 8001696:	4013      	ands	r3, r2
 8001698:	d110      	bne.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b61      	ldr	r3, [pc, #388]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800169c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0549      	lsls	r1, r1, #21
 80016a4:	430a      	orrs	r2, r1
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016a8:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	055b      	lsls	r3, r3, #21
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80016bc:	4b58      	ldr	r3, [pc, #352]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c0:	23c0      	movs	r3, #192	; 0xc0
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d019      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d014      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80016d8:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016de:	4013      	ands	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016e2:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	0249      	lsls	r1, r1, #9
 80016ec:	430a      	orrs	r2, r1
 80016ee:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016f0:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f4:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016f6:	494c      	ldr	r1, [pc, #304]	; (8001828 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80016fc:	4b48      	ldr	r3, [pc, #288]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d016      	beq.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff f865 	bl	80007d8 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001712:	e00c      	b.n	800172e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff f860 	bl	80007d8 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4a43      	ldr	r2, [pc, #268]	; (800182c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d904      	bls.n	800172e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001724:	2313      	movs	r3, #19
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2203      	movs	r2, #3
 800172a:	701a      	strb	r2, [r3, #0]
          break;
 800172c:	e004      	b.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0ed      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001738:	2313      	movs	r3, #19
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	4a37      	ldr	r2, [pc, #220]	; (8001824 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001748:	4013      	ands	r3, r2
 800174a:	0019      	movs	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001752:	430a      	orrs	r2, r1
 8001754:	65da      	str	r2, [r3, #92]	; 0x5c
 8001756:	e005      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001758:	2312      	movs	r3, #18
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	2213      	movs	r2, #19
 800175e:	18ba      	adds	r2, r7, r2
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001764:	2311      	movs	r3, #17
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001770:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001774:	492e      	ldr	r1, [pc, #184]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001776:	400a      	ands	r2, r1
 8001778:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d009      	beq.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	2203      	movs	r2, #3
 800178a:	4393      	bics	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001794:	430a      	orrs	r2, r1
 8001796:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2240      	movs	r2, #64	; 0x40
 800179e:	4013      	ands	r3, r2
 80017a0:	d009      	beq.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a6:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	0019      	movs	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017b2:	430a      	orrs	r2, r1
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	4013      	ands	r3, r2
 80017c0:	d008      	beq.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	0899      	lsrs	r1, r3, #2
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4013      	ands	r3, r2
 80017de:	d009      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da09      	bge.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	22e0      	movs	r2, #224	; 0xe0
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001810:	2312      	movs	r3, #18
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b006      	add	sp, #24
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	40021000 	.word	0x40021000
 8001824:	fffffcff 	.word	0xfffffcff
 8001828:	fffeffff 	.word	0xfffeffff
 800182c:	00001388 	.word	0x00001388
 8001830:	efffffff 	.word	0xefffffff
 8001834:	ffffcfff 	.word	0xffffcfff
 8001838:	ffff3fff 	.word	0xffff3fff

0800183c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e046      	b.n	80018dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2288      	movs	r2, #136	; 0x88
 8001852:	589b      	ldr	r3, [r3, r2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2284      	movs	r2, #132	; 0x84
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	0018      	movs	r0, r3
 8001864:	f7fe fed2 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2288      	movs	r2, #136	; 0x88
 800186c:	2124      	movs	r1, #36	; 0x24
 800186e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2101      	movs	r1, #1
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	0018      	movs	r0, r3
 800188c:	f000 f9aa 	bl	8001be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0018      	movs	r0, r3
 8001894:	f000 f828 	bl	80018e8 <UART_SetConfig>
 8001898:	0003      	movs	r3, r0
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e01c      	b.n	80018dc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	490d      	ldr	r1, [pc, #52]	; (80018e4 <HAL_UART_Init+0xa8>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	212a      	movs	r1, #42	; 0x2a
 80018be:	438a      	bics	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 fa39 	bl	8001d4c <UART_CheckIdleState>
 80018da:	0003      	movs	r3, r0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	ffffb7ff 	.word	0xffffb7ff

080018e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80018f0:	231e      	movs	r3, #30
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4aab      	ldr	r2, [pc, #684]	; (8001bc4 <UART_SetConfig+0x2dc>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4aa6      	ldr	r2, [pc, #664]	; (8001bc8 <UART_SetConfig+0x2e0>)
 800192e:	4013      	ands	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a9d      	ldr	r2, [pc, #628]	; (8001bcc <UART_SetConfig+0x2e4>)
 8001956:	4013      	ands	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	430a      	orrs	r2, r1
 8001962:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	220f      	movs	r2, #15
 800196c:	4393      	bics	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a93      	ldr	r2, [pc, #588]	; (8001bd0 <UART_SetConfig+0x2e8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d127      	bne.n	80019d6 <UART_SetConfig+0xee>
 8001986:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <UART_SetConfig+0x2ec>)
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b03      	cmp	r3, #3
 8001990:	d017      	beq.n	80019c2 <UART_SetConfig+0xda>
 8001992:	d81b      	bhi.n	80019cc <UART_SetConfig+0xe4>
 8001994:	2b02      	cmp	r3, #2
 8001996:	d00a      	beq.n	80019ae <UART_SetConfig+0xc6>
 8001998:	d818      	bhi.n	80019cc <UART_SetConfig+0xe4>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <UART_SetConfig+0xbc>
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d00a      	beq.n	80019b8 <UART_SetConfig+0xd0>
 80019a2:	e013      	b.n	80019cc <UART_SetConfig+0xe4>
 80019a4:	231f      	movs	r3, #31
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	e021      	b.n	80019f2 <UART_SetConfig+0x10a>
 80019ae:	231f      	movs	r3, #31
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e01c      	b.n	80019f2 <UART_SetConfig+0x10a>
 80019b8:	231f      	movs	r3, #31
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2204      	movs	r2, #4
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e017      	b.n	80019f2 <UART_SetConfig+0x10a>
 80019c2:	231f      	movs	r3, #31
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2208      	movs	r2, #8
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e012      	b.n	80019f2 <UART_SetConfig+0x10a>
 80019cc:	231f      	movs	r3, #31
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2210      	movs	r2, #16
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e00d      	b.n	80019f2 <UART_SetConfig+0x10a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7f      	ldr	r2, [pc, #508]	; (8001bd8 <UART_SetConfig+0x2f0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d104      	bne.n	80019ea <UART_SetConfig+0x102>
 80019e0:	231f      	movs	r3, #31
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e003      	b.n	80019f2 <UART_SetConfig+0x10a>
 80019ea:	231f      	movs	r3, #31
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	2210      	movs	r2, #16
 80019f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d000      	beq.n	8001a00 <UART_SetConfig+0x118>
 80019fe:	e06f      	b.n	8001ae0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8001a00:	231f      	movs	r3, #31
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d01f      	beq.n	8001a4a <UART_SetConfig+0x162>
 8001a0a:	dc22      	bgt.n	8001a52 <UART_SetConfig+0x16a>
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d017      	beq.n	8001a40 <UART_SetConfig+0x158>
 8001a10:	dc1f      	bgt.n	8001a52 <UART_SetConfig+0x16a>
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <UART_SetConfig+0x134>
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d005      	beq.n	8001a26 <UART_SetConfig+0x13e>
 8001a1a:	e01a      	b.n	8001a52 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a1c:	f7ff fe08 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8001a20:	0003      	movs	r3, r0
 8001a22:	61bb      	str	r3, [r7, #24]
        break;
 8001a24:	e01c      	b.n	8001a60 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001a26:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <UART_SetConfig+0x2ec>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	4013      	ands	r3, r2
 8001a30:	3301      	adds	r3, #1
 8001a32:	0019      	movs	r1, r3
 8001a34:	4869      	ldr	r0, [pc, #420]	; (8001bdc <UART_SetConfig+0x2f4>)
 8001a36:	f7fe fb67 	bl	8000108 <__udivsi3>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
        break;
 8001a3e:	e00f      	b.n	8001a60 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a40:	f7ff fdac 	bl	800159c <HAL_RCC_GetSysClockFreq>
 8001a44:	0003      	movs	r3, r0
 8001a46:	61bb      	str	r3, [r7, #24]
        break;
 8001a48:	e00a      	b.n	8001a60 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	61bb      	str	r3, [r7, #24]
        break;
 8001a50:	e006      	b.n	8001a60 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a56:	231e      	movs	r3, #30
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
        break;
 8001a5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d100      	bne.n	8001a68 <UART_SetConfig+0x180>
 8001a66:	e097      	b.n	8001b98 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6c:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <UART_SetConfig+0x2f8>)
 8001a6e:	0052      	lsls	r2, r2, #1
 8001a70:	5ad3      	ldrh	r3, [r2, r3]
 8001a72:	0019      	movs	r1, r3
 8001a74:	69b8      	ldr	r0, [r7, #24]
 8001a76:	f7fe fb47 	bl	8000108 <__udivsi3>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	005a      	lsls	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	18d2      	adds	r2, r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	f7fe fb3b 	bl	8000108 <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d91c      	bls.n	8001ad6 <UART_SetConfig+0x1ee>
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	025b      	lsls	r3, r3, #9
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d217      	bcs.n	8001ad6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	200e      	movs	r0, #14
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	210f      	movs	r1, #15
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	183a      	adds	r2, r7, r0
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	183a      	adds	r2, r7, r0
 8001ad0:	8812      	ldrh	r2, [r2, #0]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	e060      	b.n	8001b98 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001ad6:	231e      	movs	r3, #30
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e05b      	b.n	8001b98 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ae0:	231f      	movs	r3, #31
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d01f      	beq.n	8001b2a <UART_SetConfig+0x242>
 8001aea:	dc22      	bgt.n	8001b32 <UART_SetConfig+0x24a>
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d017      	beq.n	8001b20 <UART_SetConfig+0x238>
 8001af0:	dc1f      	bgt.n	8001b32 <UART_SetConfig+0x24a>
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <UART_SetConfig+0x214>
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d005      	beq.n	8001b06 <UART_SetConfig+0x21e>
 8001afa:	e01a      	b.n	8001b32 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001afc:	f7ff fd98 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8001b00:	0003      	movs	r3, r0
 8001b02:	61bb      	str	r3, [r7, #24]
        break;
 8001b04:	e01c      	b.n	8001b40 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001b06:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <UART_SetConfig+0x2ec>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4013      	ands	r3, r2
 8001b10:	3301      	adds	r3, #1
 8001b12:	0019      	movs	r1, r3
 8001b14:	4831      	ldr	r0, [pc, #196]	; (8001bdc <UART_SetConfig+0x2f4>)
 8001b16:	f7fe faf7 	bl	8000108 <__udivsi3>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
        break;
 8001b1e:	e00f      	b.n	8001b40 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b20:	f7ff fd3c 	bl	800159c <HAL_RCC_GetSysClockFreq>
 8001b24:	0003      	movs	r3, r0
 8001b26:	61bb      	str	r3, [r7, #24]
        break;
 8001b28:	e00a      	b.n	8001b40 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	61bb      	str	r3, [r7, #24]
        break;
 8001b30:	e006      	b.n	8001b40 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b36:	231e      	movs	r3, #30
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
        break;
 8001b3e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d028      	beq.n	8001b98 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <UART_SetConfig+0x2f8>)
 8001b4c:	0052      	lsls	r2, r2, #1
 8001b4e:	5ad3      	ldrh	r3, [r2, r3]
 8001b50:	0019      	movs	r1, r3
 8001b52:	69b8      	ldr	r0, [r7, #24]
 8001b54:	f7fe fad8 	bl	8000108 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	18d2      	adds	r2, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0019      	movs	r1, r3
 8001b6a:	0010      	movs	r0, r2
 8001b6c:	f7fe facc 	bl	8000108 <__udivsi3>
 8001b70:	0003      	movs	r3, r0
 8001b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	d90a      	bls.n	8001b90 <UART_SetConfig+0x2a8>
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d205      	bcs.n	8001b90 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	e003      	b.n	8001b98 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001b90:	231e      	movs	r3, #30
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	226a      	movs	r2, #106	; 0x6a
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2268      	movs	r2, #104	; 0x68
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001bb4:	231e      	movs	r3, #30
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b008      	add	sp, #32
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	cfff69f3 	.word	0xcfff69f3
 8001bc8:	ffffcfff 	.word	0xffffcfff
 8001bcc:	11fff4ff 	.word	0x11fff4ff
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	02dc6c00 	.word	0x02dc6c00
 8001be0:	08002110 	.word	0x08002110

08001be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00b      	beq.n	8001c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <UART_AdvFeatureConfig+0x144>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	2201      	movs	r2, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	d00b      	beq.n	8001c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a43      	ldr	r2, [pc, #268]	; (8001d2c <UART_AdvFeatureConfig+0x148>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d00b      	beq.n	8001c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <UART_AdvFeatureConfig+0x14c>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d00b      	beq.n	8001c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a34      	ldr	r2, [pc, #208]	; (8001d34 <UART_AdvFeatureConfig+0x150>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	2210      	movs	r2, #16
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d00b      	beq.n	8001c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <UART_AdvFeatureConfig+0x154>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d00b      	beq.n	8001cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <UART_AdvFeatureConfig+0x158>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d01d      	beq.n	8001cfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <UART_AdvFeatureConfig+0x15c>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	035b      	lsls	r3, r3, #13
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d10b      	bne.n	8001cfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <UART_AdvFeatureConfig+0x160>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	2280      	movs	r2, #128	; 0x80
 8001d04:	4013      	ands	r3, r2
 8001d06:	d00b      	beq.n	8001d20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <UART_AdvFeatureConfig+0x164>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
  }
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	ffff7fff 	.word	0xffff7fff
 8001d2c:	fffdffff 	.word	0xfffdffff
 8001d30:	fffeffff 	.word	0xfffeffff
 8001d34:	fffbffff 	.word	0xfffbffff
 8001d38:	ffffefff 	.word	0xffffefff
 8001d3c:	ffffdfff 	.word	0xffffdfff
 8001d40:	ffefffff 	.word	0xffefffff
 8001d44:	ff9fffff 	.word	0xff9fffff
 8001d48:	fff7ffff 	.word	0xfff7ffff

08001d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b092      	sub	sp, #72	; 0x48
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2290      	movs	r2, #144	; 0x90
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001d5c:	f7fe fd3c 	bl	80007d8 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d12d      	bne.n	8001dce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	0391      	lsls	r1, r2, #14
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <UART_CheckIdleState+0x14c>)
 8001d7c:	9200      	str	r2, [sp, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f000 f88e 	bl	8001ea0 <UART_WaitOnFlagUntilTimeout>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d022      	beq.n	8001dce <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d88:	f3ef 8310 	mrs	r3, PRIMASK
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d92:	2301      	movs	r3, #1
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	f383 8810 	msr	PRIMASK, r3
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	438a      	bics	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	f383 8810 	msr	PRIMASK, r3
}
 8001db8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2288      	movs	r2, #136	; 0x88
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2284      	movs	r2, #132	; 0x84
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e060      	b.n	8001e90 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d146      	bne.n	8001e6a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dde:	2280      	movs	r2, #128	; 0x80
 8001de0:	03d1      	lsls	r1, r2, #15
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <UART_CheckIdleState+0x14c>)
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f000 f859 	bl	8001ea0 <UART_WaitOnFlagUntilTimeout>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d03b      	beq.n	8001e6a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001df2:	f3ef 8310 	mrs	r3, PRIMASK
 8001df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8001df8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f383 8810 	msr	PRIMASK, r3
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4922      	ldr	r1, [pc, #136]	; (8001e9c <UART_CheckIdleState+0x150>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f383 8810 	msr	PRIMASK, r3
}
 8001e22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e24:	f3ef 8310 	mrs	r3, PRIMASK
 8001e28:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e2a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f383 8810 	msr	PRIMASK, r3
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	438a      	bics	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f383 8810 	msr	PRIMASK, r3
}
 8001e54:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	228c      	movs	r2, #140	; 0x8c
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2284      	movs	r2, #132	; 0x84
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e012      	b.n	8001e90 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2288      	movs	r2, #136	; 0x88
 8001e6e:	2120      	movs	r1, #32
 8001e70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	228c      	movs	r2, #140	; 0x8c
 8001e76:	2120      	movs	r1, #32
 8001e78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2284      	movs	r2, #132	; 0x84
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b010      	add	sp, #64	; 0x40
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	01ffffff 	.word	0x01ffffff
 8001e9c:	fffffedf 	.word	0xfffffedf

08001ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb0:	e04b      	b.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	d048      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb8:	f7fe fc8e 	bl	80007d8 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <UART_WaitOnFlagUntilTimeout+0x2e>
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e04b      	b.n	8001f6a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	4013      	ands	r3, r2
 8001edc:	d035      	beq.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d111      	bne.n	8001f10 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f83c 	bl	8001f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2290      	movs	r2, #144	; 0x90
 8001f00:	2108      	movs	r1, #8
 8001f02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2284      	movs	r2, #132	; 0x84
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e02c      	b.n	8001f6a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d112      	bne.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f000 f81f 	bl	8001f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2290      	movs	r2, #144	; 0x90
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2284      	movs	r2, #132	; 0x84
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e00f      	b.n	8001f6a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	425a      	negs	r2, r3
 8001f5a:	4153      	adcs	r3, r2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	001a      	movs	r2, r3
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d0a4      	beq.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b004      	add	sp, #16
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f80:	617b      	str	r3, [r7, #20]
  return(result);
 8001f82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
 8001f86:	2301      	movs	r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f383 8810 	msr	PRIMASK, r3
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4926      	ldr	r1, [pc, #152]	; (8002038 <UART_EndRxTransfer+0xc4>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f383 8810 	msr	PRIMASK, r3
}
 8001fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001fae:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb2:	623b      	str	r3, [r7, #32]
  return(result);
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb8:	2301      	movs	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f383 8810 	msr	PRIMASK, r3
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	491b      	ldr	r1, [pc, #108]	; (800203c <UART_EndRxTransfer+0xc8>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	f383 8810 	msr	PRIMASK, r3
}
 8001fde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d118      	bne.n	800201a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8001fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f383 8810 	msr	PRIMASK, r3
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2110      	movs	r1, #16
 800200a:	438a      	bics	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f383 8810 	msr	PRIMASK, r3
}
 8002018:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	228c      	movs	r2, #140	; 0x8c
 800201e:	2120      	movs	r1, #32
 8002020:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b00e      	add	sp, #56	; 0x38
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	fffffedf 	.word	0xfffffedf
 800203c:	effffffe 	.word	0xeffffffe

08002040 <memset>:
 8002040:	0003      	movs	r3, r0
 8002042:	1882      	adds	r2, r0, r2
 8002044:	4293      	cmp	r3, r2
 8002046:	d100      	bne.n	800204a <memset+0xa>
 8002048:	4770      	bx	lr
 800204a:	7019      	strb	r1, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	e7f9      	b.n	8002044 <memset+0x4>

08002050 <__libc_init_array>:
 8002050:	b570      	push	{r4, r5, r6, lr}
 8002052:	2600      	movs	r6, #0
 8002054:	4c0c      	ldr	r4, [pc, #48]	; (8002088 <__libc_init_array+0x38>)
 8002056:	4d0d      	ldr	r5, [pc, #52]	; (800208c <__libc_init_array+0x3c>)
 8002058:	1b64      	subs	r4, r4, r5
 800205a:	10a4      	asrs	r4, r4, #2
 800205c:	42a6      	cmp	r6, r4
 800205e:	d109      	bne.n	8002074 <__libc_init_array+0x24>
 8002060:	2600      	movs	r6, #0
 8002062:	f000 f819 	bl	8002098 <_init>
 8002066:	4c0a      	ldr	r4, [pc, #40]	; (8002090 <__libc_init_array+0x40>)
 8002068:	4d0a      	ldr	r5, [pc, #40]	; (8002094 <__libc_init_array+0x44>)
 800206a:	1b64      	subs	r4, r4, r5
 800206c:	10a4      	asrs	r4, r4, #2
 800206e:	42a6      	cmp	r6, r4
 8002070:	d105      	bne.n	800207e <__libc_init_array+0x2e>
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	00b3      	lsls	r3, r6, #2
 8002076:	58eb      	ldr	r3, [r5, r3]
 8002078:	4798      	blx	r3
 800207a:	3601      	adds	r6, #1
 800207c:	e7ee      	b.n	800205c <__libc_init_array+0xc>
 800207e:	00b3      	lsls	r3, r6, #2
 8002080:	58eb      	ldr	r3, [r5, r3]
 8002082:	4798      	blx	r3
 8002084:	3601      	adds	r6, #1
 8002086:	e7f2      	b.n	800206e <__libc_init_array+0x1e>
 8002088:	08002128 	.word	0x08002128
 800208c:	08002128 	.word	0x08002128
 8002090:	0800212c 	.word	0x0800212c
 8002094:	08002128 	.word	0x08002128

08002098 <_init>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr

080020a4 <_fini>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr
