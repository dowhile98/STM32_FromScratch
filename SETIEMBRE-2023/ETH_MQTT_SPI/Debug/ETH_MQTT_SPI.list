
ETH_MQTT_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800cc08  0800cc08  0001cc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d00c  0800d00c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d014  0800d014  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d014  0800d014  0001d014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d018  0800d018  0001d018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800d01c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00001c54  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d54  20001d54  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001820f  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ea6  00000000  00000000  00038382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001000  00000000  00000000  0003b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c78  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f147  00000000  00000000  0003cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000103b9  00000000  00000000  0005bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ae74d  00000000  00000000  0006c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063c8  00000000  00000000  0011aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00120eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cbf0 	.word	0x0800cbf0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800cbf0 	.word	0x0800cbf0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__gedf2>:
 800086c:	f04f 3cff 	mov.w	ip, #4294967295
 8000870:	e006      	b.n	8000880 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__ledf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	e002      	b.n	8000880 <__cmpdf2+0x4>
 800087a:	bf00      	nop

0800087c <__cmpdf2>:
 800087c:	f04f 0c01 	mov.w	ip, #1
 8000880:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800088c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000896:	d01b      	beq.n	80008d0 <__cmpdf2+0x54>
 8000898:	b001      	add	sp, #4
 800089a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800089e:	bf0c      	ite	eq
 80008a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008a4:	ea91 0f03 	teqne	r1, r3
 80008a8:	bf02      	ittt	eq
 80008aa:	ea90 0f02 	teqeq	r0, r2
 80008ae:	2000      	moveq	r0, #0
 80008b0:	4770      	bxeq	lr
 80008b2:	f110 0f00 	cmn.w	r0, #0
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf58      	it	pl
 80008bc:	4299      	cmppl	r1, r3
 80008be:	bf08      	it	eq
 80008c0:	4290      	cmpeq	r0, r2
 80008c2:	bf2c      	ite	cs
 80008c4:	17d8      	asrcs	r0, r3, #31
 80008c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	4770      	bx	lr
 80008d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d102      	bne.n	80008e0 <__cmpdf2+0x64>
 80008da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008de:	d107      	bne.n	80008f0 <__cmpdf2+0x74>
 80008e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d1d6      	bne.n	8000898 <__cmpdf2+0x1c>
 80008ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ee:	d0d3      	beq.n	8000898 <__cmpdf2+0x1c>
 80008f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdrcmple>:
 80008f8:	4684      	mov	ip, r0
 80008fa:	4610      	mov	r0, r2
 80008fc:	4662      	mov	r2, ip
 80008fe:	468c      	mov	ip, r1
 8000900:	4619      	mov	r1, r3
 8000902:	4663      	mov	r3, ip
 8000904:	e000      	b.n	8000908 <__aeabi_cdcmpeq>
 8000906:	bf00      	nop

08000908 <__aeabi_cdcmpeq>:
 8000908:	b501      	push	{r0, lr}
 800090a:	f7ff ffb7 	bl	800087c <__cmpdf2>
 800090e:	2800      	cmp	r0, #0
 8000910:	bf48      	it	mi
 8000912:	f110 0f00 	cmnmi.w	r0, #0
 8000916:	bd01      	pop	{r0, pc}

08000918 <__aeabi_dcmpeq>:
 8000918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800091c:	f7ff fff4 	bl	8000908 <__aeabi_cdcmpeq>
 8000920:	bf0c      	ite	eq
 8000922:	2001      	moveq	r0, #1
 8000924:	2000      	movne	r0, #0
 8000926:	f85d fb08 	ldr.w	pc, [sp], #8
 800092a:	bf00      	nop

0800092c <__aeabi_dcmplt>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff ffea 	bl	8000908 <__aeabi_cdcmpeq>
 8000934:	bf34      	ite	cc
 8000936:	2001      	movcc	r0, #1
 8000938:	2000      	movcs	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmple>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffe0 	bl	8000908 <__aeabi_cdcmpeq>
 8000948:	bf94      	ite	ls
 800094a:	2001      	movls	r0, #1
 800094c:	2000      	movhi	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmpge>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffce 	bl	80008f8 <__aeabi_cdrcmple>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpgt>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffc4 	bl	80008f8 <__aeabi_cdrcmple>
 8000970:	bf34      	ite	cc
 8000972:	2001      	movcc	r0, #1
 8000974:	2000      	movcs	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5100 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	20f0      	movs	r0, #240	; 0xf0
 8000d76:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	0a12      	lsrs	r2, r2, #8
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	4610      	mov	r0, r2
 8000d84:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	78fa      	ldrb	r2, [r7, #3]
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000da2:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <WIZCHIP_WRITE+0x58>)
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	4798      	blx	r3
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000004 	.word	0x20000004

08000db4 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	200f      	movs	r0, #15
 8000dce:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	0a12      	lsrs	r2, r2, #8
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	4610      	mov	r0, r2
 8000de8:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4798      	blx	r3
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <WIZCHIP_READ+0x58>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	4798      	blx	r3
   return ret;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000004 	.word	0x20000004

08000e10 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	82fb      	strh	r3, [r7, #22]
 8000e32:	e02a      	b.n	8000e8a <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000e34:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	20f0      	movs	r0, #240	; 0xf0
 8000e40:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	b291      	uxth	r1, r2
 8000e4a:	8afa      	ldrh	r2, [r7, #22]
 8000e4c:	440a      	add	r2, r1
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	0a12      	lsrs	r2, r2, #8
 8000e52:	b292      	uxth	r2, r2
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	4610      	mov	r0, r2
 8000e58:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	b2d1      	uxtb	r1, r2
 8000e62:	8afa      	ldrh	r2, [r7, #22]
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	440a      	add	r2, r1
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	8afa      	ldrh	r2, [r7, #22]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	440a      	add	r2, r1
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4798      	blx	r3
  for(i = 0; i < len; i++)
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	3301      	adds	r3, #1
 8000e88:	82fb      	strh	r3, [r7, #22]
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3d0      	bcc.n	8000e34 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <WIZCHIP_WRITE_BUF+0x98>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	4798      	blx	r3
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000004 	.word	0x20000004

08000eac <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	82fb      	strh	r3, [r7, #22]
 8000ece:	e02a      	b.n	8000f26 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	200f      	movs	r0, #15
 8000edc:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	b291      	uxth	r1, r2
 8000ee6:	8afa      	ldrh	r2, [r7, #22]
 8000ee8:	440a      	add	r2, r1
 8000eea:	b292      	uxth	r2, r2
 8000eec:	0a12      	lsrs	r2, r2, #8
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	b2d1      	uxtb	r1, r2
 8000efe:	8afa      	ldrh	r2, [r7, #22]
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440a      	add	r2, r1
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	4610      	mov	r0, r2
 8000f08:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	8afa      	ldrh	r2, [r7, #22]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	188c      	adds	r4, r1, r2
 8000f14:	4798      	blx	r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000f20:	8afb      	ldrh	r3, [r7, #22]
 8000f22:	3301      	adds	r3, #1
 8000f24:	82fb      	strh	r3, [r7, #22]
 8000f26:	8afa      	ldrh	r2, [r7, #22]
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3d0      	bcc.n	8000ed0 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <WIZCHIP_READ_BUF+0x98>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	4798      	blx	r3
}
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000004 	.word	0x20000004

08000f48 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	2300      	movs	r3, #0
 8000f58:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	3320      	adds	r3, #32
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff26 	bl	8000db4 <WIZCHIP_READ>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f6c:	89bb      	ldrh	r3, [r7, #12]
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b29c      	uxth	r4, r3
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3304      	adds	r3, #4
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	3321      	adds	r3, #33	; 0x21
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff1a 	bl	8000db4 <WIZCHIP_READ>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4423      	add	r3, r4
 8000f86:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d016      	beq.n	8000fbc <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	3304      	adds	r3, #4
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	3320      	adds	r3, #32
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff0c 	bl	8000db4 <WIZCHIP_READ>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b29c      	uxth	r4, r3
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	3321      	adds	r3, #33	; 0x21
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff00 	bl	8000db4 <WIZCHIP_READ>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4423      	add	r3, r4
 8000fba:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000fbc:	89fa      	ldrh	r2, [r7, #14]
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d1ca      	bne.n	8000f5a <getSn_TX_FSR+0x12>
   return val;
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}

08000fce <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000fce:	b590      	push	{r4, r7, lr}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81fb      	strh	r3, [r7, #14]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	3326      	adds	r3, #38	; 0x26
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fee3 	bl	8000db4 <WIZCHIP_READ>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000ff2:	89bb      	ldrh	r3, [r7, #12]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b29c      	uxth	r4, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	3327      	adds	r3, #39	; 0x27
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fed7 	bl	8000db4 <WIZCHIP_READ>
 8001006:	4603      	mov	r3, r0
 8001008:	b29b      	uxth	r3, r3
 800100a:	4423      	add	r3, r4
 800100c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d016      	beq.n	8001042 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3304      	adds	r3, #4
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	3326      	adds	r3, #38	; 0x26
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fec9 	bl	8000db4 <WIZCHIP_READ>
 8001022:	4603      	mov	r3, r0
 8001024:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001026:	89fb      	ldrh	r3, [r7, #14]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b29c      	uxth	r4, r3
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3304      	adds	r3, #4
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	3327      	adds	r3, #39	; 0x27
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff febd 	bl	8000db4 <WIZCHIP_READ>
 800103a:	4603      	mov	r3, r0
 800103c:	b29b      	uxth	r3, r3
 800103e:	4423      	add	r3, r4
 8001040:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	89bb      	ldrh	r3, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d1ca      	bne.n	8000fe0 <getSn_RX_RSR+0x12>
   return val;
 800104a:	89fb      	ldrh	r3, [r7, #14]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 800105e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001062:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e020      	b.n	80010ac <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 800106a:	201a      	movs	r0, #26
 800106c:	f7ff fea2 	bl	8000db4 <WIZCHIP_READ>
 8001070:	4603      	mov	r3, r0
 8001072:	4619      	mov	r1, r3
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	ea01 0203 	and.w	r2, r1, r3
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa42 f303 	asr.w	r3, r2, r3
 800108e:	2201      	movs	r2, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	461a      	mov	r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbd9      	blt.n	800106a <getSn_RxBASE+0x16>

   return rxbase;
 80010b6:	68bb      	ldr	r3, [r7, #8]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 80010ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ce:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e020      	b.n	8001118 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 80010d6:	201b      	movs	r0, #27
 80010d8:	f7ff fe6c 	bl	8000db4 <WIZCHIP_READ>
 80010dc:	4603      	mov	r3, r0
 80010de:	4619      	mov	r1, r3
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	ea01 0203 	and.w	r2, r1, r3
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa42 f303 	asr.w	r3, r2, r3
 80010fa:	2201      	movs	r2, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	461a      	mov	r2, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 800110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3301      	adds	r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbd9      	blt.n	80010d6 <getSn_TxBASE+0x16>
   return txbase;
 8001122:	68bb      	ldr	r3, [r7, #8]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	3304      	adds	r3, #4
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	3324      	adds	r3, #36	; 0x24
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe35 	bl	8000db4 <WIZCHIP_READ>
 800114a:	4603      	mov	r3, r0
 800114c:	b29b      	uxth	r3, r3
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b29c      	uxth	r4, r3
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	3304      	adds	r3, #4
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	3325      	adds	r3, #37	; 0x25
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fe2a 	bl	8000db4 <WIZCHIP_READ>
 8001160:	4603      	mov	r3, r0
 8001162:	b29b      	uxth	r3, r3
 8001164:	4423      	add	r3, r4
 8001166:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8001168:	201b      	movs	r0, #27
 800116a:	f7ff fe23 	bl	8000db4 <WIZCHIP_READ>
 800116e:	4603      	mov	r3, r0
 8001170:	4619      	mov	r1, r3
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	ea01 0203 	and.w	r2, r1, r3
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa42 f303 	asr.w	r3, r2, r3
 8001188:	2201      	movs	r2, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	029b      	lsls	r3, r3, #10
 8001192:	b29b      	uxth	r3, r3
 8001194:	3b01      	subs	r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	b21a      	sxth	r2, r3
 800119a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800119e:	4013      	ands	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff8a 	bl	80010c0 <getSn_TxBASE>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 80011b6:	89ba      	ldrh	r2, [r7, #12]
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	18d4      	adds	r4, r2, r3
 80011bc:	201b      	movs	r0, #27
 80011be:	f7ff fdf9 	bl	8000db4 <WIZCHIP_READ>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	ea01 0203 	and.w	r2, r1, r3
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa42 f303 	asr.w	r3, r2, r3
 80011dc:	2201      	movs	r2, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	029b      	lsls	r3, r3, #10
 80011e6:	429c      	cmp	r4, r3
 80011e8:	dd33      	ble.n	8001252 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 80011ea:	201b      	movs	r0, #27
 80011ec:	f7ff fde2 	bl	8000db4 <WIZCHIP_READ>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4619      	mov	r1, r3
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	ea01 0203 	and.w	r2, r1, r3
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa42 f303 	asr.w	r3, r2, r3
 800120a:	2201      	movs	r2, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	b29b      	uxth	r3, r3
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	b29a      	uxth	r2, r3
 8001216:	89bb      	ldrh	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	893a      	ldrh	r2, [r7, #8]
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdf4 	bl	8000e10 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8001228:	893b      	ldrh	r3, [r7, #8]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8001230:	88ba      	ldrh	r2, [r7, #4]
 8001232:	893b      	ldrh	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff40 	bl	80010c0 <getSn_TxBASE>
 8001240:	4603      	mov	r3, r0
 8001242:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	893a      	ldrh	r2, [r7, #8]
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fde0 	bl	8000e10 <WIZCHIP_WRITE_BUF>
 8001250:	e005      	b.n	800125e <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	88ba      	ldrh	r2, [r7, #4]
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fdd9 	bl	8000e10 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 800125e:	89fa      	ldrh	r2, [r7, #14]
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	3304      	adds	r3, #4
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	3324      	adds	r3, #36	; 0x24
 800126e:	461a      	mov	r2, r3
 8001270:	89fb      	ldrh	r3, [r7, #14]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	b29b      	uxth	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fd6c 	bl	8000d58 <WIZCHIP_WRITE>
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	3304      	adds	r3, #4
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	3325      	adds	r3, #37	; 0x25
 8001288:	461a      	mov	r2, r3
 800128a:	89fb      	ldrh	r3, [r7, #14]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	4610      	mov	r0, r2
 8001292:	f7ff fd61 	bl	8000d58 <WIZCHIP_WRITE>
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}

0800129e <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	6039      	str	r1, [r7, #0]
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	4613      	mov	r3, r2
 80012ac:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	3304      	adds	r3, #4
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	3328      	adds	r3, #40	; 0x28
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd7c 	bl	8000db4 <WIZCHIP_READ>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29b      	uxth	r3, r3
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b29c      	uxth	r4, r3
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	3304      	adds	r3, #4
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	3329      	adds	r3, #41	; 0x29
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd71 	bl	8000db4 <WIZCHIP_READ>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4423      	add	r3, r4
 80012d8:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 80012da:	201a      	movs	r0, #26
 80012dc:	f7ff fd6a 	bl	8000db4 <WIZCHIP_READ>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4619      	mov	r1, r3
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	ea01 0203 	and.w	r2, r1, r3
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa42 f303 	asr.w	r3, r2, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	b29b      	uxth	r3, r3
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	b29b      	uxth	r3, r3
 8001306:	3b01      	subs	r3, #1
 8001308:	b29a      	uxth	r2, r3
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4013      	ands	r3, r2
 800130e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe9e 	bl	8001054 <getSn_RxBASE>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	89bb      	ldrh	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8001322:	89ba      	ldrh	r2, [r7, #12]
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	18d4      	adds	r4, r2, r3
 8001328:	201a      	movs	r0, #26
 800132a:	f7ff fd43 	bl	8000db4 <WIZCHIP_READ>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	ea01 0203 	and.w	r2, r1, r3
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa42 f303 	asr.w	r3, r2, r3
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	029b      	lsls	r3, r3, #10
 8001352:	429c      	cmp	r4, r3
 8001354:	dd33      	ble.n	80013be <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8001356:	201a      	movs	r0, #26
 8001358:	f7ff fd2c 	bl	8000db4 <WIZCHIP_READ>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	ea01 0203 	and.w	r2, r1, r3
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa42 f303 	asr.w	r3, r2, r3
 8001376:	2201      	movs	r2, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	b29a      	uxth	r2, r3
 8001382:	89bb      	ldrh	r3, [r7, #12]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 8001388:	897b      	ldrh	r3, [r7, #10]
 800138a:	893a      	ldrh	r2, [r7, #8]
 800138c:	6839      	ldr	r1, [r7, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fd8c 	bl	8000eac <WIZCHIP_READ_BUF>
    wizdata += size;
 8001394:	893b      	ldrh	r3, [r7, #8]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	603b      	str	r3, [r7, #0]
    size = len - size;
 800139c:	88ba      	ldrh	r2, [r7, #4]
 800139e:	893b      	ldrh	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fe54 	bl	8001054 <getSn_RxBASE>
 80013ac:	4603      	mov	r3, r0
 80013ae:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 80013b0:	897b      	ldrh	r3, [r7, #10]
 80013b2:	893a      	ldrh	r2, [r7, #8]
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd78 	bl	8000eac <WIZCHIP_READ_BUF>
 80013bc:	e005      	b.n	80013ca <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 80013be:	897b      	ldrh	r3, [r7, #10]
 80013c0:	88ba      	ldrh	r2, [r7, #4]
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd71 	bl	8000eac <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 80013ca:	89fa      	ldrh	r2, [r7, #14]
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3304      	adds	r3, #4
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	3328      	adds	r3, #40	; 0x28
 80013da:	461a      	mov	r2, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff fcb6 	bl	8000d58 <WIZCHIP_WRITE>
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	3304      	adds	r3, #4
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	3329      	adds	r3, #41	; 0x29
 80013f4:	461a      	mov	r2, r3
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f7ff fcab 	bl	8000d58 <WIZCHIP_WRITE>
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}

0800140a <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800140a:	b590      	push	{r4, r7, lr}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	460a      	mov	r2, r1
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	4613      	mov	r3, r2
 8001418:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	3304      	adds	r3, #4
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	3328      	adds	r3, #40	; 0x28
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fcc6 	bl	8000db4 <WIZCHIP_READ>
 8001428:	4603      	mov	r3, r0
 800142a:	b29b      	uxth	r3, r3
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b29c      	uxth	r4, r3
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	3304      	adds	r3, #4
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	3329      	adds	r3, #41	; 0x29
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fcbb 	bl	8000db4 <WIZCHIP_READ>
 800143e:	4603      	mov	r3, r0
 8001440:	b29b      	uxth	r3, r3
 8001442:	4423      	add	r3, r4
 8001444:	81fb      	strh	r3, [r7, #14]
  
  ptr += len;
 8001446:	89fa      	ldrh	r2, [r7, #14]
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	81fb      	strh	r3, [r7, #14]
  setSn_RX_RD(sn,ptr);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	3304      	adds	r3, #4
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	3328      	adds	r3, #40	; 0x28
 8001456:	461a      	mov	r2, r3
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fc78 	bl	8000d58 <WIZCHIP_WRITE>
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3304      	adds	r3, #4
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	3329      	adds	r3, #41	; 0x29
 8001470:	461a      	mov	r2, r3
 8001472:	89fb      	ldrh	r3, [r7, #14]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f7ff fc6d 	bl	8000d58 <WIZCHIP_WRITE>
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
	...

08001488 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	461a      	mov	r2, r3
 8001496:	4623      	mov	r3, r4
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	4603      	mov	r3, r0
 800149c:	71bb      	strb	r3, [r7, #6]
 800149e:	460b      	mov	r3, r1
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d902      	bls.n	80014b2 <socket+0x2a>
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
 80014b0:	e0de      	b.n	8001670 <socket+0x1e8>
	switch(protocol)
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d019      	beq.n	80014ec <socket+0x64>
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	dc14      	bgt.n	80014e6 <socket+0x5e>
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d005      	beq.n	80014cc <socket+0x44>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd10      	ble.n	80014e6 <socket+0x5e>
 80014c4:	3b02      	subs	r3, #2
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d80d      	bhi.n	80014e6 <socket+0x5e>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80014ca:	e012      	b.n	80014f2 <socket+0x6a>
            getSIPR((uint8_t*)&taddr);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2204      	movs	r2, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	200f      	movs	r0, #15
 80014d6:	f7ff fce9 	bl	8000eac <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <socket+0x68>
 80014e0:	f06f 0302 	mvn.w	r3, #2
 80014e4:	e0c4      	b.n	8001670 <socket+0x1e8>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80014e6:	f06f 0304 	mvn.w	r3, #4
 80014ea:	e0c1      	b.n	8001670 <socket+0x1e8>
         break;
 80014ec:	bf00      	nop
 80014ee:	e000      	b.n	80014f2 <socket+0x6a>
	    break;
 80014f0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <socket+0x7a>
 80014fc:	f06f 0305 	mvn.w	r3, #5
 8001500:	e0b6      	b.n	8001670 <socket+0x1e8>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01c      	beq.n	8001542 <socket+0xba>
	{
   	switch(protocol)
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d002      	beq.n	8001514 <socket+0x8c>
 800150e:	2b02      	cmp	r3, #2
 8001510:	d008      	beq.n	8001524 <socket+0x9c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001512:	e016      	b.n	8001542 <socket+0xba>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <socket+0xb4>
 800151e:	f06f 0305 	mvn.w	r3, #5
 8001522:	e0a5      	b.n	8001670 <socket+0x1e8>
   	      if(flag & SF_IGMP_VER2)
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <socket+0xb8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800152e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db04      	blt.n	8001540 <socket+0xb8>
 8001536:	f06f 0305 	mvn.w	r3, #5
 800153a:	e099      	b.n	8001670 <socket+0x1e8>
   	      break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <socket+0xba>
   	      break;
 8001540:	bf00      	nop
   	}
   }
	close(sn);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f8a1 	bl	800168c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3304      	adds	r3, #4
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	4618      	mov	r0, r3
 8001552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001556:	f023 030f 	bic.w	r3, r3, #15
 800155a:	b25a      	sxtb	r2, r3
 800155c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001560:	4313      	orrs	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fbf6 	bl	8000d58 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d110      	bne.n	8001594 <socket+0x10c>
	{
	   port = sock_any_port++;
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <socket+0x1f0>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	b291      	uxth	r1, r2
 800157a:	4a3f      	ldr	r2, [pc, #252]	; (8001678 <socket+0x1f0>)
 800157c:	8011      	strh	r1, [r2, #0]
 800157e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <socket+0x1f0>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001588:	4293      	cmp	r3, r2
 800158a:	d103      	bne.n	8001594 <socket+0x10c>
 800158c:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <socket+0x1f0>)
 800158e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001592:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	3304      	adds	r3, #4
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	3304      	adds	r3, #4
 800159c:	461a      	mov	r2, r3
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	4610      	mov	r0, r2
 80015aa:	f7ff fbd5 	bl	8000d58 <WIZCHIP_WRITE>
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3304      	adds	r3, #4
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	3305      	adds	r3, #5
 80015b6:	461a      	mov	r2, r3
 80015b8:	88bb      	ldrh	r3, [r7, #4]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fbca 	bl	8000d58 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3304      	adds	r3, #4
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	3301      	adds	r3, #1
 80015cc:	2101      	movs	r1, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fbc2 	bl	8000d58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80015d4:	bf00      	nop
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	3304      	adds	r3, #4
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	3301      	adds	r3, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fbe8 	bl	8000db4 <WIZCHIP_READ>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f5      	bne.n	80015d6 <socket+0x14e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2201      	movs	r2, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <socket+0x1f4>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4013      	ands	r3, r2
 8001600:	b21b      	sxth	r3, r3
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <socket+0x1f4>)
 8001606:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 0201 	and.w	r2, r3, #1
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <socket+0x1f4>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <socket+0x1f4>)
 8001624:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2201      	movs	r2, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	b21b      	sxth	r3, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <socket+0x1f8>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4013      	ands	r3, r2
 800163c:	b21b      	sxth	r3, r3
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <socket+0x1f8>)
 8001642:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <socket+0x1fc>)
 8001648:	2100      	movs	r1, #0
 800164a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <socket+0x200>)
 8001652:	2100      	movs	r1, #0
 8001654:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001656:	bf00      	nop
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3304      	adds	r3, #4
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	3303      	adds	r3, #3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fba7 	bl	8000db4 <WIZCHIP_READ>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f5      	beq.n	8001658 <socket+0x1d0>
   return (int8_t)sn;
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	2000011c 	.word	0x2000011c
 8001680:	2000011e 	.word	0x2000011e
 8001684:	20000120 	.word	0x20000120
 8001688:	20000128 	.word	0x20000128

0800168c <close>:

int8_t close(uint8_t sn)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d902      	bls.n	80016a2 <close+0x16>
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	e04d      	b.n	800173e <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	3304      	adds	r3, #4
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	3301      	adds	r3, #1
 80016aa:	2110      	movs	r1, #16
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fb53 	bl	8000d58 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80016b2:	bf00      	nop
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3304      	adds	r3, #4
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	3301      	adds	r3, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb79 	bl	8000db4 <WIZCHIP_READ>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f5      	bne.n	80016b4 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	3304      	adds	r3, #4
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	3302      	adds	r3, #2
 80016d0:	21ff      	movs	r1, #255	; 0xff
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb40 	bl	8000d58 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	2201      	movs	r2, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <close+0xbc>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <close+0xbc>)
 80016f4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2201      	movs	r2, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	b21b      	sxth	r3, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <close+0xc0>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b21b      	sxth	r3, r3
 800170a:	4013      	ands	r3, r2
 800170c:	b21b      	sxth	r3, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <close+0xc0>)
 8001712:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <close+0xc4>)
 8001718:	2100      	movs	r1, #0
 800171a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <close+0xc8>)
 8001722:	2100      	movs	r1, #0
 8001724:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001726:	bf00      	nop
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	3304      	adds	r3, #4
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	3303      	adds	r3, #3
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fb3f 	bl	8000db4 <WIZCHIP_READ>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f5      	bne.n	8001728 <close+0x9c>
	return SOCK_OK;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000011c 	.word	0x2000011c
 800174c:	2000011e 	.word	0x2000011e
 8001750:	20000120 	.word	0x20000120
 8001754:	20000128 	.word	0x20000128

08001758 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d902      	bls.n	8001774 <connect+0x1c>
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e0b1      	b.n	80018d8 <connect+0x180>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	3304      	adds	r3, #4
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fb1a 	bl	8000db4 <WIZCHIP_READ>
 8001780:	4603      	mov	r3, r0
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	2b01      	cmp	r3, #1
 8001788:	d002      	beq.n	8001790 <connect+0x38>
 800178a:	f06f 0304 	mvn.w	r3, #4
 800178e:	e0a3      	b.n	80018d8 <connect+0x180>
   CHECK_SOCKINIT();
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	3304      	adds	r3, #4
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	3303      	adds	r3, #3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fb0b 	bl	8000db4 <WIZCHIP_READ>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b13      	cmp	r3, #19
 80017a2:	d002      	beq.n	80017aa <connect+0x52>
 80017a4:	f06f 0302 	mvn.w	r3, #2
 80017a8:	e096      	b.n	80018d8 <connect+0x180>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	3201      	adds	r2, #1
 80017b8:	7812      	ldrb	r2, [r2, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	3202      	adds	r2, #2
 80017c6:	7812      	ldrb	r2, [r2, #0]
 80017c8:	4413      	add	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	3203      	adds	r2, #3
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d002      	beq.n	80017e8 <connect+0x90>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <connect+0x96>
 80017e8:	f06f 030b 	mvn.w	r3, #11
 80017ec:	e074      	b.n	80018d8 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <connect+0xa2>
 80017f4:	f06f 030a 	mvn.w	r3, #10
 80017f8:	e06e      	b.n	80018d8 <connect+0x180>
	setSn_DIPR(sn,addr);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	3304      	adds	r3, #4
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	330c      	adds	r3, #12
 8001802:	2204      	movs	r2, #4
 8001804:	6839      	ldr	r1, [r7, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fb02 	bl	8000e10 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3304      	adds	r3, #4
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	3310      	adds	r3, #16
 8001814:	461a      	mov	r2, r3
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b29b      	uxth	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f7ff fa99 	bl	8000d58 <WIZCHIP_WRITE>
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	3304      	adds	r3, #4
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	3311      	adds	r3, #17
 800182e:	461a      	mov	r2, r3
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f7ff fa8e 	bl	8000d58 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	3304      	adds	r3, #4
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	3301      	adds	r3, #1
 8001844:	2104      	movs	r1, #4
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa86 	bl	8000d58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800184c:	bf00      	nop
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	3304      	adds	r3, #4
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	3301      	adds	r3, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff faac 	bl	8000db4 <WIZCHIP_READ>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f5      	bne.n	800184e <connect+0xf6>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <connect+0x188>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	fa42 f303 	asr.w	r3, r2, r3
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d025      	beq.n	80018c2 <connect+0x16a>
 8001876:	2300      	movs	r3, #0
 8001878:	e02e      	b.n	80018d8 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	3304      	adds	r3, #4
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	3302      	adds	r3, #2
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa96 	bl	8000db4 <WIZCHIP_READ>
 8001888:	4603      	mov	r3, r0
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <connect+0x150>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	3304      	adds	r3, #4
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	3302      	adds	r3, #2
 800189a:	2108      	movs	r1, #8
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fa5b 	bl	8000d58 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80018a2:	f06f 030c 	mvn.w	r3, #12
 80018a6:	e017      	b.n	80018d8 <connect+0x180>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	3304      	adds	r3, #4
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	3303      	adds	r3, #3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa7f 	bl	8000db4 <WIZCHIP_READ>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <connect+0x16a>
		{
			return SOCKERR_SOCKCLOSED;
 80018bc:	f06f 0303 	mvn.w	r3, #3
 80018c0:	e00a      	b.n	80018d8 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	3304      	adds	r3, #4
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	3303      	adds	r3, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fa72 	bl	8000db4 <WIZCHIP_READ>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b17      	cmp	r3, #23
 80018d4:	d1d1      	bne.n	800187a <connect+0x122>
		}
	}
   
   return SOCK_OK;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000011c 	.word	0x2000011c

080018e4 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d902      	bls.n	80018fa <disconnect+0x16>
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	e059      	b.n	80019ae <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	3304      	adds	r3, #4
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fa57 	bl	8000db4 <WIZCHIP_READ>
 8001906:	4603      	mov	r3, r0
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	2b01      	cmp	r3, #1
 800190e:	d002      	beq.n	8001916 <disconnect+0x32>
 8001910:	f06f 0304 	mvn.w	r3, #4
 8001914:	e04b      	b.n	80019ae <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3304      	adds	r3, #4
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	3301      	adds	r3, #1
 800191e:	2108      	movs	r1, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fa19 	bl	8000d58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001926:	bf00      	nop
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	3304      	adds	r3, #4
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	3301      	adds	r3, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa3f 	bl	8000db4 <WIZCHIP_READ>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f5      	bne.n	8001928 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2201      	movs	r2, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	b21b      	sxth	r3, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <disconnect+0xd4>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4013      	ands	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <disconnect+0xd4>)
 8001958:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <disconnect+0xd8>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	fa42 f303 	asr.w	r3, r2, r3
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d014      	beq.n	8001998 <disconnect+0xb4>
 800196e:	2300      	movs	r3, #0
 8001970:	e01d      	b.n	80019ae <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3304      	adds	r3, #4
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	3302      	adds	r3, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fa1a 	bl	8000db4 <WIZCHIP_READ>
 8001980:	4603      	mov	r3, r0
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <disconnect+0xb4>
	   {
	      close(sn);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe7d 	bl	800168c <close>
	      return SOCKERR_TIMEOUT;
 8001992:	f06f 030c 	mvn.w	r3, #12
 8001996:	e00a      	b.n	80019ae <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	3304      	adds	r3, #4
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	3303      	adds	r3, #3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa07 	bl	8000db4 <WIZCHIP_READ>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e2      	bne.n	8001972 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000011e 	.word	0x2000011e
 80019bc:	2000011c 	.word	0x2000011c

080019c0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	4613      	mov	r3, r2
 80019ce:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d902      	bls.n	80019e4 <send+0x24>
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e0d8      	b.n	8001b96 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3304      	adds	r3, #4
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f9e2 	bl	8000db4 <WIZCHIP_READ>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d002      	beq.n	8001a00 <send+0x40>
 80019fa:	f06f 0304 	mvn.w	r3, #4
 80019fe:	e0ca      	b.n	8001b96 <send+0x1d6>
   CHECK_SOCKDATA();
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <send+0x4c>
 8001a06:	f06f 030d 	mvn.w	r3, #13
 8001a0a:	e0c4      	b.n	8001b96 <send+0x1d6>
   tmp = getSn_SR(sn);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	3303      	adds	r3, #3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f9cd 	bl	8000db4 <WIZCHIP_READ>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	2b17      	cmp	r3, #23
 8001a22:	d005      	beq.n	8001a30 <send+0x70>
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b1c      	cmp	r3, #28
 8001a28:	d002      	beq.n	8001a30 <send+0x70>
 8001a2a:	f06f 0306 	mvn.w	r3, #6
 8001a2e:	e0b2      	b.n	8001b96 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 8001a30:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <send+0x1e0>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	fa42 f303 	asr.w	r3, r2, r3
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d033      	beq.n	8001aac <send+0xec>
   {
      tmp = getSn_IR(sn);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	3304      	adds	r3, #4
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9b1 	bl	8000db4 <WIZCHIP_READ>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d017      	beq.n	8001a90 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	3304      	adds	r3, #4
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	3302      	adds	r3, #2
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f974 	bl	8000d58 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2201      	movs	r2, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <send+0x1e0>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <send+0x1e0>)
 8001a8c:	801a      	strh	r2, [r3, #0]
 8001a8e:	e00d      	b.n	8001aac <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <send+0xe8>
      {
         close(sn);
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fdf5 	bl	800168c <close>
         return SOCKERR_TIMEOUT;
 8001aa2:	f06f 030c 	mvn.w	r3, #12
 8001aa6:	e076      	b.n	8001b96 <send+0x1d6>
      }
      else return SOCK_BUSY;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e074      	b.n	8001b96 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 8001aac:	201b      	movs	r0, #27
 8001aae:	f7ff f981 	bl	8000db4 <WIZCHIP_READ>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	ea01 0203 	and.w	r2, r1, r3
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa42 f303 	asr.w	r3, r2, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	029b      	lsls	r3, r3, #10
 8001ad6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001ad8:	88ba      	ldrh	r2, [r7, #4]
 8001ada:	89bb      	ldrh	r3, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d901      	bls.n	8001ae4 <send+0x124>
 8001ae0:	89bb      	ldrh	r3, [r7, #12]
 8001ae2:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fa2e 	bl	8000f48 <getSn_TX_FSR>
 8001aec:	4603      	mov	r3, r0
 8001aee:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	3304      	adds	r3, #4
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	3303      	adds	r3, #3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f95b 	bl	8000db4 <WIZCHIP_READ>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	2b17      	cmp	r3, #23
 8001b06:	d009      	beq.n	8001b1c <send+0x15c>
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b1c      	cmp	r3, #28
 8001b0c:	d006      	beq.n	8001b1c <send+0x15c>
      {
         close(sn);
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fdbb 	bl	800168c <close>
         return SOCKERR_SOCKSTATUS;
 8001b16:	f06f 0306 	mvn.w	r3, #6
 8001b1a:	e03c      	b.n	8001b96 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <send+0x1e4>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	fa42 f303 	asr.w	r3, r2, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <send+0x17c>
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	89bb      	ldrh	r3, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d901      	bls.n	8001b3c <send+0x17c>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e02c      	b.n	8001b96 <send+0x1d6>
      if(len <= freesize) break;
 8001b3c:	88ba      	ldrh	r2, [r7, #4]
 8001b3e:	89bb      	ldrh	r3, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d900      	bls.n	8001b46 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 8001b44:	e7ce      	b.n	8001ae4 <send+0x124>
      if(len <= freesize) break;
 8001b46:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001b48:	88ba      	ldrh	r2, [r7, #4]
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff faec 	bl	800112c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3304      	adds	r3, #4
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	2120      	movs	r1, #32
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8fa 	bl	8000d58 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001b64:	bf00      	nop
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f920 	bl	8000db4 <WIZCHIP_READ>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f5      	bne.n	8001b66 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <send+0x1e0>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <send+0x1e0>)
 8001b92:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001b94:	88bb      	ldrh	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000011e 	.word	0x2000011e
 8001ba4:	2000011c 	.word	0x2000011c

08001ba8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d902      	bls.n	8001bcc <recv+0x24>
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e0a8      	b.n	8001d1e <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f8ee 	bl	8000db4 <WIZCHIP_READ>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d002      	beq.n	8001be8 <recv+0x40>
 8001be2:	f06f 0304 	mvn.w	r3, #4
 8001be6:	e09a      	b.n	8001d1e <recv+0x176>
   CHECK_SOCKDATA();
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <recv+0x4c>
 8001bee:	f06f 030d 	mvn.w	r3, #13
 8001bf2:	e094      	b.n	8001d1e <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 8001bf4:	201a      	movs	r0, #26
 8001bf6:	f7ff f8dd 	bl	8000db4 <WIZCHIP_READ>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	ea01 0203 	and.w	r2, r1, r3
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa42 f303 	asr.w	r3, r2, r3
 8001c14:	2201      	movs	r2, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001c20:	89ba      	ldrh	r2, [r7, #12]
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d201      	bcs.n	8001c2c <recv+0x84>
 8001c28:	89bb      	ldrh	r3, [r7, #12]
 8001c2a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f9cd 	bl	8000fce <getSn_RX_RSR>
 8001c34:	4603      	mov	r3, r0
 8001c36:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	3303      	adds	r3, #3
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f8b7 	bl	8000db4 <WIZCHIP_READ>
 8001c46:	4603      	mov	r3, r0
 8001c48:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	2b17      	cmp	r3, #23
 8001c4e:	d030      	beq.n	8001cb2 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b1c      	cmp	r3, #28
 8001c54:	d126      	bne.n	8001ca4 <recv+0xfc>
            {
               if(recvsize != 0) break;
 8001c56:	89bb      	ldrh	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d13d      	bne.n	8001cd8 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f972 	bl	8000f48 <getSn_TX_FSR>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461c      	mov	r4, r3
 8001c68:	201b      	movs	r0, #27
 8001c6a:	f7ff f8a3 	bl	8000db4 <WIZCHIP_READ>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4619      	mov	r1, r3
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	ea01 0203 	and.w	r2, r1, r3
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa42 f303 	asr.w	r3, r2, r3
 8001c88:	2201      	movs	r2, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d10d      	bne.n	8001cb2 <recv+0x10a>
               {
                  close(sn);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fcf7 	bl	800168c <close>
                  return SOCKERR_SOCKSTATUS;
 8001c9e:	f06f 0306 	mvn.w	r3, #6
 8001ca2:	e03c      	b.n	8001d1e <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fcf0 	bl	800168c <close>
               return SOCKERR_SOCKSTATUS;
 8001cac:	f06f 0306 	mvn.w	r3, #6
 8001cb0:	e035      	b.n	8001d1e <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <recv+0x180>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	fa42 f303 	asr.w	r3, r2, r3
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <recv+0x128>
 8001cc6:	89bb      	ldrh	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <recv+0x128>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e026      	b.n	8001d1e <recv+0x176>
         if(recvsize != 0) break;
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8001cd6:	e7a9      	b.n	8001c2c <recv+0x84>
               if(recvsize != 0) break;
 8001cd8:	bf00      	nop
 8001cda:	e000      	b.n	8001cde <recv+0x136>
         if(recvsize != 0) break;
 8001cdc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001cde:	89ba      	ldrh	r2, [r7, #12]
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d201      	bcs.n	8001cea <recv+0x142>
 8001ce6:	89bb      	ldrh	r3, [r7, #12]
 8001ce8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001cea:	88ba      	ldrh	r2, [r7, #4]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fad4 	bl	800129e <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f829 	bl	8000d58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001d06:	bf00      	nop
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f84f 	bl	8000db4 <WIZCHIP_READ>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f5      	bne.n	8001d08 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001d1c:	88bb      	ldrh	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000011c 	.word	0x2000011c

08001d2c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d902      	bls.n	8001d52 <sendto+0x26>
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	e139      	b.n	8001fc6 <sendto+0x29a>
   switch(getSn_MR(sn) & 0x0F)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3304      	adds	r3, #4
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f82b 	bl	8000db4 <WIZCHIP_READ>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	3b02      	subs	r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d902      	bls.n	8001d70 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001d6a:	f06f 0304 	mvn.w	r3, #4
 8001d6e:	e12a      	b.n	8001fc6 <sendto+0x29a>
         break;
 8001d70:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001d72:	89bb      	ldrh	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <sendto+0x52>
 8001d78:	f06f 030d 	mvn.w	r3, #13
 8001d7c:	e123      	b.n	8001fc6 <sendto+0x29a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	3201      	adds	r2, #1
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	3202      	adds	r2, #2
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	3203      	adds	r2, #3
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <sendto+0xa4>
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3304      	adds	r3, #4
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fffa 	bl	8000db4 <WIZCHIP_READ>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d002      	beq.n	8001dd0 <sendto+0xa4>
 8001dca:	f06f 030b 	mvn.w	r3, #11
 8001dce:	e0fa      	b.n	8001fc6 <sendto+0x29a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001dd0:	8c3b      	ldrh	r3, [r7, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <sendto+0xc6>
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffe9 	bl	8000db4 <WIZCHIP_READ>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d002      	beq.n	8001df2 <sendto+0xc6>
 8001dec:	f06f 030a 	mvn.w	r3, #10
 8001df0:	e0e9      	b.n	8001fc6 <sendto+0x29a>
   tmp = getSn_SR(sn);
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3304      	adds	r3, #4
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	3303      	adds	r3, #3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ffda 	bl	8000db4 <WIZCHIP_READ>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b42      	cmp	r3, #66	; 0x42
 8001e08:	d008      	beq.n	8001e1c <sendto+0xf0>
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	2b22      	cmp	r3, #34	; 0x22
 8001e0e:	d005      	beq.n	8001e1c <sendto+0xf0>
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b32      	cmp	r3, #50	; 0x32
 8001e14:	d002      	beq.n	8001e1c <sendto+0xf0>
 8001e16:	f06f 0306 	mvn.w	r3, #6
 8001e1a:	e0d4      	b.n	8001fc6 <sendto+0x29a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	330c      	adds	r3, #12
 8001e24:	2204      	movs	r2, #4
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fff1 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3304      	adds	r3, #4
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	3310      	adds	r3, #16
 8001e36:	461a      	mov	r2, r3
 8001e38:	8c3b      	ldrh	r3, [r7, #32]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f7fe ff88 	bl	8000d58 <WIZCHIP_WRITE>
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	3311      	adds	r3, #17
 8001e50:	461a      	mov	r2, r3
 8001e52:	8c3b      	ldrh	r3, [r7, #32]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f7fe ff7d 	bl	8000d58 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001e5e:	201b      	movs	r0, #27
 8001e60:	f7fe ffa8 	bl	8000db4 <WIZCHIP_READ>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	ea01 0203 	and.w	r2, r1, r3
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa42 f303 	asr.w	r3, r2, r3
 8001e7e:	2201      	movs	r2, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001e8a:	89ba      	ldrh	r2, [r7, #12]
 8001e8c:	8abb      	ldrh	r3, [r7, #20]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d901      	bls.n	8001e96 <sendto+0x16a>
 8001e92:	8abb      	ldrh	r3, [r7, #20]
 8001e94:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f855 	bl	8000f48 <getSn_TX_FSR>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff82 	bl	8000db4 <WIZCHIP_READ>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <sendto+0x190>
 8001eb6:	f06f 0303 	mvn.w	r3, #3
 8001eba:	e084      	b.n	8001fc6 <sendto+0x29a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001ebc:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <sendto+0x2a4>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	fa42 f303 	asr.w	r3, r2, r3
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <sendto+0x1b0>
 8001ed0:	89ba      	ldrh	r2, [r7, #12]
 8001ed2:	8abb      	ldrh	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d901      	bls.n	8001edc <sendto+0x1b0>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e074      	b.n	8001fc6 <sendto+0x29a>
      if(len <= freesize) break;
 8001edc:	89ba      	ldrh	r2, [r7, #12]
 8001ede:	8abb      	ldrh	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d900      	bls.n	8001ee6 <sendto+0x1ba>
      freesize = getSn_TX_FSR(sn);
 8001ee4:	e7d7      	b.n	8001e96 <sendto+0x16a>
      if(len <= freesize) break;
 8001ee6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001ee8:	89ba      	ldrh	r2, [r7, #12]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f91c 	bl	800112c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	200f      	movs	r0, #15
 8001efe:	f7fe ffd5 	bl	8000eac <WIZCHIP_READ_BUF>
      if(taddr == 0)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <sendto+0x1f6>
      {
         getSUBR((uint8_t*)&taddr);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	2005      	movs	r0, #5
 8001f12:	f7fe ffcb 	bl	8000eac <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8001f16:	2204      	movs	r2, #4
 8001f18:	492e      	ldr	r1, [pc, #184]	; (8001fd4 <sendto+0x2a8>)
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f7fe ff78 	bl	8000e10 <WIZCHIP_WRITE_BUF>
 8001f20:	e001      	b.n	8001f26 <sendto+0x1fa>
      }
      else taddr = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	2120      	movs	r1, #32
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe ff11 	bl	8000d58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001f36:	bf00      	nop
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	3301      	adds	r3, #1
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe ff37 	bl	8000db4 <WIZCHIP_READ>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f5      	bne.n	8001f38 <sendto+0x20c>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	3302      	adds	r3, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ff2d 	bl	8000db4 <WIZCHIP_READ>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00c      	beq.n	8001f82 <sendto+0x256>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	3302      	adds	r3, #2
 8001f70:	2110      	movs	r1, #16
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fef0 	bl	8000d58 <WIZCHIP_WRITE>
         break;
 8001f78:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d021      	beq.n	8001fc4 <sendto+0x298>
 8001f80:	e019      	b.n	8001fb6 <sendto+0x28a>
      else if(tmp & Sn_IR_TIMEOUT)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0df      	beq.n	8001f4c <sendto+0x220>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	3304      	adds	r3, #4
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	3302      	adds	r3, #2
 8001f94:	2108      	movs	r1, #8
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fede 	bl	8000d58 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <sendto+0x284>
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2005      	movs	r0, #5
 8001fac:	f7fe ff30 	bl	8000e10 <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 8001fb0:	f06f 030c 	mvn.w	r3, #12
 8001fb4:	e007      	b.n	8001fc6 <sendto+0x29a>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2005      	movs	r0, #5
 8001fc0:	f7fe ff26 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001fc4:	89bb      	ldrh	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000011c 	.word	0x2000011c
 8001fd4:	0800cc08 	.word	0x0800cc08

08001fd8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d902      	bls.n	8001ffa <recvfrom+0x22>
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	e1c6      	b.n	8002388 <recvfrom+0x3b0>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fed7 	bl	8000db4 <WIZCHIP_READ>
 8002006:	4603      	mov	r3, r0
 8002008:	777b      	strb	r3, [r7, #29]
 800200a:	7f7b      	ldrb	r3, [r7, #29]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	2b04      	cmp	r3, #4
 8002012:	dc02      	bgt.n	800201a <recvfrom+0x42>
 8002014:	2b02      	cmp	r3, #2
 8002016:	da05      	bge.n	8002024 <recvfrom+0x4c>
 8002018:	e001      	b.n	800201e <recvfrom+0x46>
 800201a:	2b05      	cmp	r3, #5
 800201c:	d004      	beq.n	8002028 <recvfrom+0x50>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800201e:	f06f 0304 	mvn.w	r3, #4
 8002022:	e1b1      	b.n	8002388 <recvfrom+0x3b0>
         break;
 8002024:	bf00      	nop
 8002026:	e000      	b.n	800202a <recvfrom+0x52>
         break;
 8002028:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800202a:	89bb      	ldrh	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <recvfrom+0x5e>
 8002030:	f06f 030d 	mvn.w	r3, #13
 8002034:	e1a8      	b.n	8002388 <recvfrom+0x3b0>
   if(sock_remained_size[sn] == 0)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	4a82      	ldr	r2, [pc, #520]	; (8002244 <recvfrom+0x26c>)
 800203a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d126      	bne.n	8002090 <recvfrom+0xb8>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe ffc2 	bl	8000fce <getSn_RX_RSR>
 800204a:	4603      	mov	r3, r0
 800204c:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	3304      	adds	r3, #4
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	3303      	adds	r3, #3
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe feac 	bl	8000db4 <WIZCHIP_READ>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <recvfrom+0x90>
 8002062:	f06f 0303 	mvn.w	r3, #3
 8002066:	e18f      	b.n	8002388 <recvfrom+0x3b0>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002068:	4b77      	ldr	r3, [pc, #476]	; (8002248 <recvfrom+0x270>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	fa42 f303 	asr.w	r3, r2, r3
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <recvfrom+0xae>
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <recvfrom+0xae>
 8002082:	2300      	movs	r3, #0
 8002084:	e180      	b.n	8002388 <recvfrom+0x3b0>
         if(pack_len != 0) break;
 8002086:	8bfb      	ldrh	r3, [r7, #30]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d100      	bne.n	800208e <recvfrom+0xb6>
         pack_len = getSn_RX_RSR(sn);
 800208c:	e7d9      	b.n	8002042 <recvfrom+0x6a>
         if(pack_len != 0) break;
 800208e:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002090:	7f7b      	ldrb	r3, [r7, #29]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	d075      	beq.n	8002186 <recvfrom+0x1ae>
 800209a:	2b04      	cmp	r3, #4
 800209c:	f300 8135 	bgt.w	800230a <recvfrom+0x332>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d003      	beq.n	80020ac <recvfrom+0xd4>
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	f000 80d3 	beq.w	8002250 <recvfrom+0x278>
 80020aa:	e12e      	b.n	800230a <recvfrom+0x332>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	4a65      	ldr	r2, [pc, #404]	; (8002244 <recvfrom+0x26c>)
 80020b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d14e      	bne.n	8002156 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 80020b8:	f107 0114 	add.w	r1, r7, #20
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2208      	movs	r2, #8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f8ec 	bl	800129e <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	3304      	adds	r3, #4
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	3301      	adds	r3, #1
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fe41 	bl	8000d58 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80020d6:	bf00      	nop
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	3304      	adds	r3, #4
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	3301      	adds	r3, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fe67 	bl	8000db4 <WIZCHIP_READ>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f5      	bne.n	80020d8 <recvfrom+0x100>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80020ec:	7d3a      	ldrb	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3301      	adds	r3, #1
 80020f6:	7d7a      	ldrb	r2, [r7, #21]
 80020f8:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3302      	adds	r3, #2
 80020fe:	7dba      	ldrb	r2, [r7, #22]
 8002100:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3303      	adds	r3, #3
 8002106:	7dfa      	ldrb	r2, [r7, #23]
 8002108:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800210a:	7e3b      	ldrb	r3, [r7, #24]
 800210c:	b29a      	uxth	r2, r3
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b29a      	uxth	r2, r3
 800211a:	7e7b      	ldrb	r3, [r7, #25]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	b29a      	uxth	r2, r3
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002126:	7eba      	ldrb	r2, [r7, #26]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	b291      	uxth	r1, r2
 800212c:	4a45      	ldr	r2, [pc, #276]	; (8002244 <recvfrom+0x26c>)
 800212e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4a43      	ldr	r2, [pc, #268]	; (8002244 <recvfrom+0x26c>)
 8002136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b299      	uxth	r1, r3
 800213e:	7efb      	ldrb	r3, [r7, #27]
 8002140:	b29a      	uxth	r2, r3
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	440a      	add	r2, r1
 8002146:	b291      	uxth	r1, r2
 8002148:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <recvfrom+0x26c>)
 800214a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	4a3e      	ldr	r2, [pc, #248]	; (800224c <recvfrom+0x274>)
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <recvfrom+0x26c>)
 800215a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215e:	89ba      	ldrh	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d202      	bcs.n	800216a <recvfrom+0x192>
 8002164:	89bb      	ldrh	r3, [r7, #12]
 8002166:	83fb      	strh	r3, [r7, #30]
 8002168:	e004      	b.n	8002174 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	4a35      	ldr	r2, [pc, #212]	; (8002244 <recvfrom+0x26c>)
 800216e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002172:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8002174:	8bfb      	ldrh	r3, [r7, #30]
 8002176:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002178:	8bfa      	ldrh	r2, [r7, #30]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f88d 	bl	800129e <wiz_recv_data>
			break;
 8002184:	e0cd      	b.n	8002322 <recvfrom+0x34a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <recvfrom+0x26c>)
 800218a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d142      	bne.n	8002218 <recvfrom+0x240>
	      {
   			wiz_recv_data(sn, head, 2);
 8002192:	f107 0114 	add.w	r1, r7, #20
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2202      	movs	r2, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f87f 	bl	800129e <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3304      	adds	r3, #4
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	3301      	adds	r3, #1
 80021a8:	2140      	movs	r1, #64	; 0x40
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fdd4 	bl	8000d58 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80021b0:	bf00      	nop
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	3304      	adds	r3, #4
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	3301      	adds	r3, #1
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fdfa 	bl	8000db4 <WIZCHIP_READ>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f5      	bne.n	80021b2 <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80021c6:	7d3a      	ldrb	r2, [r7, #20]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	b291      	uxth	r1, r2
 80021cc:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <recvfrom+0x26c>)
 80021ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <recvfrom+0x26c>)
 80021d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b29a      	uxth	r2, r3
 80021de:	7d7b      	ldrb	r3, [r7, #21]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	3a02      	subs	r2, #2
 80021ea:	b291      	uxth	r1, r2
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <recvfrom+0x26c>)
 80021ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	4a13      	ldr	r2, [pc, #76]	; (8002244 <recvfrom+0x26c>)
 80021f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021fa:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80021fe:	4293      	cmp	r3, r2
 8002200:	d906      	bls.n	8002210 <recvfrom+0x238>
   			{
   			   close(sn);
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fa41 	bl	800168c <close>
   			   return SOCKFATAL_PACKLEN;
 800220a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800220e:	e0bb      	b.n	8002388 <recvfrom+0x3b0>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <recvfrom+0x274>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <recvfrom+0x26c>)
 800221c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002220:	89ba      	ldrh	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	d202      	bcs.n	800222c <recvfrom+0x254>
 8002226:	89bb      	ldrh	r3, [r7, #12]
 8002228:	83fb      	strh	r3, [r7, #30]
 800222a:	e004      	b.n	8002236 <recvfrom+0x25e>
			else pack_len = sock_remained_size[sn];
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <recvfrom+0x26c>)
 8002230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002234:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002236:	8bfa      	ldrh	r2, [r7, #30]
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f82e 	bl	800129e <wiz_recv_data>
		   break;
 8002242:	e06e      	b.n	8002322 <recvfrom+0x34a>
 8002244:	20000120 	.word	0x20000120
 8002248:	2000011c 	.word	0x2000011c
 800224c:	20000128 	.word	0x20000128
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	4a4f      	ldr	r2, [pc, #316]	; (8002390 <recvfrom+0x3b8>)
 8002254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d140      	bne.n	80022de <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 800225c:	f107 0114 	add.w	r1, r7, #20
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2206      	movs	r2, #6
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff f81a 	bl	800129e <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	3304      	adds	r3, #4
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	3301      	adds	r3, #1
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fd6f 	bl	8000d58 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800227a:	bf00      	nop
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3304      	adds	r3, #4
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	3301      	adds	r3, #1
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fd95 	bl	8000db4 <WIZCHIP_READ>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f5      	bne.n	800227c <recvfrom+0x2a4>
   			addr[0] = head[0];
 8002290:	7d3a      	ldrb	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	7d7a      	ldrb	r2, [r7, #21]
 800229c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3302      	adds	r3, #2
 80022a2:	7dba      	ldrb	r2, [r7, #22]
 80022a4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3303      	adds	r3, #3
 80022aa:	7dfa      	ldrb	r2, [r7, #23]
 80022ac:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80022ae:	7e3a      	ldrb	r2, [r7, #24]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	b291      	uxth	r1, r2
 80022b4:	4a36      	ldr	r2, [pc, #216]	; (8002390 <recvfrom+0x3b8>)
 80022b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	4a34      	ldr	r2, [pc, #208]	; (8002390 <recvfrom+0x3b8>)
 80022be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b299      	uxth	r1, r3
 80022c6:	7e7b      	ldrb	r3, [r7, #25]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	440a      	add	r2, r1
 80022ce:	b291      	uxth	r1, r2
 80022d0:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <recvfrom+0x3b8>)
 80022d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	; (8002394 <recvfrom+0x3bc>)
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <recvfrom+0x3b8>)
 80022e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e6:	89ba      	ldrh	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d202      	bcs.n	80022f2 <recvfrom+0x31a>
 80022ec:	89bb      	ldrh	r3, [r7, #12]
 80022ee:	83fb      	strh	r3, [r7, #30]
 80022f0:	e004      	b.n	80022fc <recvfrom+0x324>
			else pack_len = sock_remained_size[sn];
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <recvfrom+0x3b8>)
 80022f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80022fc:	8bfa      	ldrh	r2, [r7, #30]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe ffcb 	bl	800129e <wiz_recv_data>
			break;
 8002308:	e00b      	b.n	8002322 <recvfrom+0x34a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800230a:	8bfa      	ldrh	r2, [r7, #30]
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f87a 	bl	800140a <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	491d      	ldr	r1, [pc, #116]	; (8002390 <recvfrom+0x3b8>)
 800231a:	8bfa      	ldrh	r2, [r7, #30]
 800231c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002320:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3304      	adds	r3, #4
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	3301      	adds	r3, #1
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fd13 	bl	8000d58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002332:	bf00      	nop
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3304      	adds	r3, #4
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	3301      	adds	r3, #1
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fd39 	bl	8000db4 <WIZCHIP_READ>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f5      	bne.n	8002334 <recvfrom+0x35c>
	sock_remained_size[sn] -= pack_len;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <recvfrom+0x3b8>)
 800234c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	8bfa      	ldrh	r2, [r7, #30]
 8002354:	1a8a      	subs	r2, r1, r2
 8002356:	b291      	uxth	r1, r2
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <recvfrom+0x3b8>)
 800235a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <recvfrom+0x3b8>)
 8002362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <recvfrom+0x3a6>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	4a09      	ldr	r2, [pc, #36]	; (8002394 <recvfrom+0x3bc>)
 800236e:	5cd2      	ldrb	r2, [r2, r3]
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	b2d1      	uxtb	r1, r2
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <recvfrom+0x3bc>)
 800237a:	54d1      	strb	r1, [r2, r3]
 800237c:	e003      	b.n	8002386 <recvfrom+0x3ae>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <recvfrom+0x3bc>)
 8002382:	2100      	movs	r1, #0
 8002384:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8002386:	8bfb      	ldrh	r3, [r7, #30]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000120 	.word	0x20000120
 8002394:	20000128 	.word	0x20000128

08002398 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
 800240c:	2300      	movs	r3, #0
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <reg_wizchip_cris_cbfunc+0x16>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <reg_wizchip_cris_cbfunc+0x40>)
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <reg_wizchip_cris_cbfunc+0x44>)
 800244a:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <reg_wizchip_cris_cbfunc+0x40>)
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <reg_wizchip_cris_cbfunc+0x48>)
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e006      	b.n	8002462 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <reg_wizchip_cris_cbfunc+0x40>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <reg_wizchip_cris_cbfunc+0x40>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6113      	str	r3, [r2, #16]
   }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000004 	.word	0x20000004
 8002474:	08002399 	.word	0x08002399
 8002478:	080023a7 	.word	0x080023a7

0800247c <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <reg_wizchip_cs_cbfunc+0x16>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <reg_wizchip_cs_cbfunc+0x40>)
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <reg_wizchip_cs_cbfunc+0x44>)
 8002496:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <reg_wizchip_cs_cbfunc+0x40>)
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <reg_wizchip_cs_cbfunc+0x48>)
 800249c:	619a      	str	r2, [r3, #24]
 800249e:	e006      	b.n	80024ae <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <reg_wizchip_cs_cbfunc+0x40>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <reg_wizchip_cs_cbfunc+0x40>)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6193      	str	r3, [r2, #24]
   }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000004 	.word	0x20000004
 80024c0:	080023b5 	.word	0x080023b5
 80024c4:	080023c3 	.word	0x080023c3

080024c8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80024d2:	bf00      	nop
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <reg_wizchip_spi_cbfunc+0x4c>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f9      	beq.n	80024d4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <reg_wizchip_spi_cbfunc+0x24>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <reg_wizchip_spi_cbfunc+0x4c>)
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <reg_wizchip_spi_cbfunc+0x50>)
 80024f0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <reg_wizchip_spi_cbfunc+0x4c>)
 80024f4:	4a09      	ldr	r2, [pc, #36]	; (800251c <reg_wizchip_spi_cbfunc+0x54>)
 80024f6:	621a      	str	r2, [r3, #32]
 80024f8:	e006      	b.n	8002508 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80024fa:	4a06      	ldr	r2, [pc, #24]	; (8002514 <reg_wizchip_spi_cbfunc+0x4c>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <reg_wizchip_spi_cbfunc+0x4c>)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6213      	str	r3, [r2, #32]
   }
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000004 	.word	0x20000004
 8002518:	08002409 	.word	0x08002409
 800251c:	08002419 	.word	0x08002419

08002520 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2b08      	cmp	r3, #8
 8002538:	d863      	bhi.n	8002602 <ctlwizchip+0xe2>
 800253a:	a201      	add	r2, pc, #4	; (adr r2, 8002540 <ctlwizchip+0x20>)
 800253c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002540:	08002565 	.word	0x08002565
 8002544:	0800256b 	.word	0x0800256b
 8002548:	08002597 	.word	0x08002597
 800254c:	0800258b 	.word	0x0800258b
 8002550:	080025a5 	.word	0x080025a5
 8002554:	080025b1 	.word	0x080025b1
 8002558:	08002603 	.word	0x08002603
 800255c:	08002603 	.word	0x08002603
 8002560:	080025bf 	.word	0x080025bf
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002564:	f000 f858 	bl	8002618 <wizchip_sw_reset>
         break;
 8002568:	e04e      	b.n	8002608 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3304      	adds	r3, #4
 8002578:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f88d 	bl	80026a0 <wizchip_init>
 8002586:	4603      	mov	r3, r0
 8002588:	e03f      	b.n	800260a <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f968 	bl	8002864 <wizchip_clrinterrupt>
         break;
 8002594:	e038      	b.n	8002608 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002596:	f000 f988 	bl	80028aa <wizchip_getinterrupt>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	801a      	strh	r2, [r3, #0]
         break;
 80025a2:	e031      	b.n	8002608 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f9a4 	bl	80028f6 <wizchip_setinterruptmask>
         break;         
 80025ae:	e02b      	b.n	8002608 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80025b0:	f000 f9c1 	bl	8002936 <wizchip_getinterruptmask>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	801a      	strh	r2, [r3, #0]
         break;
 80025bc:	e024      	b.n	8002608 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <ctlwizchip+0xf4>)
 80025c0:	789a      	ldrb	r2, [r3, #2]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <ctlwizchip+0xf4>)
 80025cc:	78d2      	ldrb	r2, [r2, #3]
 80025ce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	3302      	adds	r3, #2
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <ctlwizchip+0xf4>)
 80025d6:	7912      	ldrb	r2, [r2, #4]
 80025d8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3303      	adds	r3, #3
 80025de:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <ctlwizchip+0xf4>)
 80025e0:	7952      	ldrb	r2, [r2, #5]
 80025e2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <ctlwizchip+0xf4>)
 80025ea:	7992      	ldrb	r2, [r2, #6]
 80025ec:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3305      	adds	r3, #5
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <ctlwizchip+0xf4>)
 80025f4:	79d2      	ldrb	r2, [r2, #7]
 80025f6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3306      	adds	r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
         break;
 8002600:	e002      	b.n	8002608 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e000      	b.n	800260a <ctlwizchip+0xea>
   }
   return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000004 	.word	0x20000004

08002618 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2206      	movs	r2, #6
 8002622:	4619      	mov	r1, r3
 8002624:	2009      	movs	r0, #9
 8002626:	f7fe fc41 	bl	8000eac <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	2204      	movs	r2, #4
 8002630:	4619      	mov	r1, r3
 8002632:	2001      	movs	r0, #1
 8002634:	f7fe fc3a 	bl	8000eac <WIZCHIP_READ_BUF>
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	2204      	movs	r2, #4
 800263e:	4619      	mov	r1, r3
 8002640:	2005      	movs	r0, #5
 8002642:	f7fe fc33 	bl	8000eac <WIZCHIP_READ_BUF>
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	2204      	movs	r2, #4
 800264c:	4619      	mov	r1, r3
 800264e:	200f      	movs	r0, #15
 8002650:	f7fe fc2c 	bl	8000eac <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe fb7e 	bl	8000d58 <WIZCHIP_WRITE>
   getMR(); // for delay
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fba9 	bl	8000db4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2206      	movs	r2, #6
 8002666:	4619      	mov	r1, r3
 8002668:	2009      	movs	r0, #9
 800266a:	f7fe fbd1 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	2204      	movs	r2, #4
 8002674:	4619      	mov	r1, r3
 8002676:	2001      	movs	r0, #1
 8002678:	f7fe fbca 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	2204      	movs	r2, #4
 8002682:	4619      	mov	r1, r3
 8002684:	2005      	movs	r0, #5
 8002686:	f7fe fbc3 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	2204      	movs	r2, #4
 8002690:	4619      	mov	r1, r3
 8002692:	200f      	movs	r0, #15
 8002694:	f7fe fbbc 	bl	8000e10 <WIZCHIP_WRITE_BUF>
}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 80026ae:	f7ff ffb3 	bl	8002618 <wizchip_sw_reset>
   if(txsize)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d066      	beq.n	8002786 <wizchip_init+0xe6>
   {
      tmp = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e015      	b.n	80026ee <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80026c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	7b7b      	ldrb	r3, [r7, #13]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	737b      	strb	r3, [r7, #13]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 80026d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	dd02      	ble.n	80026e2 <wizchip_init+0x42>
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
 80026e0:	e0bc      	b.n	800285c <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	dde5      	ble.n	80026c2 <wizchip_init+0x22>
		#else
			if(tmp > 16) return -1;
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e040      	b.n	800277e <wizchip_init+0xde>
		{
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8002700:	e005      	b.n	800270e <wizchip_init+0x6e>
 8002702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	73bb      	strb	r3, [r7, #14]
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800271e:	fa42 f303 	asr.w	r3, r2, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d006      	beq.n	8002734 <wizchip_init+0x94>
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e6      	bne.n	8002702 <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8002734:	201b      	movs	r0, #27
 8002736:	f7fe fb3d 	bl	8000db4 <WIZCHIP_READ>
 800273a:	4603      	mov	r3, r0
 800273c:	b25a      	sxtb	r2, r3
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2103      	movs	r1, #3
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	b25b      	sxtb	r3, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	b25b      	sxtb	r3, r3
 8002750:	4013      	ands	r3, r2
 8002752:	b25a      	sxtb	r2, r3
 8002754:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8002758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	b25b      	sxtb	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b25b      	sxtb	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	201b      	movs	r0, #27
 800276e:	f7fe faf3 	bl	8000d58 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3301      	adds	r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	2b03      	cmp	r3, #3
 8002784:	ddba      	ble.n	80026fc <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d066      	beq.n	800285a <wizchip_init+0x1ba>
   {
      tmp = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e015      	b.n	80027c2 <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 8002796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	7b7b      	ldrb	r3, [r7, #13]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	737b      	strb	r3, [r7, #13]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 80027a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	dd02      	ble.n	80027b6 <wizchip_init+0x116>
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	e052      	b.n	800285c <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	dde5      	ble.n	8002796 <wizchip_init+0xf6>
		#else
			if(tmp > 16) return -1;
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e040      	b.n	8002852 <wizchip_init+0x1b2>
		{
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 80027d4:	e005      	b.n	80027e2 <wizchip_init+0x142>
 80027d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	73bb      	strb	r3, [r7, #14]
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027f2:	fa42 f303 	asr.w	r3, r2, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d006      	beq.n	8002808 <wizchip_init+0x168>
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e6      	bne.n	80027d6 <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8002808:	201a      	movs	r0, #26
 800280a:	f7fe fad3 	bl	8000db4 <WIZCHIP_READ>
 800280e:	4603      	mov	r3, r0
 8002810:	b25a      	sxtb	r2, r3
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2103      	movs	r1, #3
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	b25b      	sxtb	r3, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	b25b      	sxtb	r3, r3
 8002824:	4013      	ands	r3, r2
 8002826:	b25a      	sxtb	r2, r3
 8002828:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	b25b      	sxtb	r3, r3
 8002838:	4313      	orrs	r3, r2
 800283a:	b25b      	sxtb	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	201a      	movs	r0, #26
 8002842:	f7fe fa89 	bl	8000d58 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	2b03      	cmp	r3, #3
 8002858:	ddba      	ble.n	80027d0 <wizchip_init+0x130>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	b29b      	uxth	r3, r3
 8002878:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	f043 0310 	orr.w	r3, r3, #16
 8002880:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 8002882:	7bbb      	ldrb	r3, [r7, #14]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	7bbb      	ldrb	r3, [r7, #14]
 800288e:	4313      	orrs	r3, r2
 8002890:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4619      	mov	r1, r3
 800289c:	2015      	movs	r0, #21
 800289e:	f7fe fa5b 	bl	8000d58 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 80028bc:	2015      	movs	r0, #21
 80028be:	f7fe fa79 	bl	8000db4 <WIZCHIP_READ>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 80028c8:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f023 0310 	bic.w	r3, r3, #16
 80028d8:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80028da:	79bb      	ldrb	r3, [r7, #6]
 80028dc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80028ec:	88bb      	ldrh	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29b      	uxth	r3, r3
 800290a:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	f023 0310 	bic.w	r3, r3, #16
 8002912:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	7bbb      	ldrb	r3, [r7, #14]
 8002920:	4313      	orrs	r3, r2
 8002922:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	4619      	mov	r1, r3
 8002928:	2016      	movs	r0, #22
 800292a:	f7fe fa15 	bl	8000d58 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 8002948:	2016      	movs	r0, #22
 800294a:	f7fe fa33 	bl	8000db4 <WIZCHIP_READ>
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f023 0310 	bic.w	r3, r3, #16
 8002960:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002966:	88bb      	ldrh	r3, [r7, #4]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	b29a      	uxth	r2, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	b29b      	uxth	r3, r3
 8002970:	4413      	add	r3, r2
 8002972:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002974:	88bb      	ldrh	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2206      	movs	r2, #6
 800298c:	4619      	mov	r1, r3
 800298e:	2009      	movs	r0, #9
 8002990:	f7fe fa3e 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	330e      	adds	r3, #14
 8002998:	2204      	movs	r2, #4
 800299a:	4619      	mov	r1, r3
 800299c:	2001      	movs	r0, #1
 800299e:	f7fe fa37 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	330a      	adds	r3, #10
 80029a6:	2204      	movs	r2, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	2005      	movs	r0, #5
 80029ac:	f7fe fa30 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3306      	adds	r3, #6
 80029b4:	2204      	movs	r2, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	200f      	movs	r0, #15
 80029ba:	f7fe fa29 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7c9a      	ldrb	r2, [r3, #18]
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <wizchip_setnetinfo+0x70>)
 80029c4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7cda      	ldrb	r2, [r3, #19]
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <wizchip_setnetinfo+0x70>)
 80029cc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7d1a      	ldrb	r2, [r3, #20]
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <wizchip_setnetinfo+0x70>)
 80029d4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7d5a      	ldrb	r2, [r3, #21]
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <wizchip_setnetinfo+0x70>)
 80029dc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7d9a      	ldrb	r2, [r3, #22]
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <wizchip_setnetinfo+0x74>)
 80029e4:	701a      	strb	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000012c 	.word	0x2000012c
 80029f4:	20000130 	.word	0x20000130

080029f8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2206      	movs	r2, #6
 8002a04:	4619      	mov	r1, r3
 8002a06:	2009      	movs	r0, #9
 8002a08:	f7fe fa50 	bl	8000eac <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	330e      	adds	r3, #14
 8002a10:	2204      	movs	r2, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7fe fa49 	bl	8000eac <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	330a      	adds	r3, #10
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	2005      	movs	r0, #5
 8002a24:	f7fe fa42 	bl	8000eac <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3306      	adds	r3, #6
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	200f      	movs	r0, #15
 8002a32:	f7fe fa3b 	bl	8000eac <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <wizchip_getnetinfo+0x70>)
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <wizchip_getnetinfo+0x70>)
 8002a40:	785a      	ldrb	r2, [r3, #1]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <wizchip_getnetinfo+0x70>)
 8002a48:	789a      	ldrb	r2, [r3, #2]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <wizchip_getnetinfo+0x70>)
 8002a50:	78da      	ldrb	r2, [r3, #3]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <wizchip_getnetinfo+0x74>)
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	759a      	strb	r2, [r3, #22]
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000012c 	.word	0x2000012c
 8002a6c:	20000130 	.word	0x20000130

08002a70 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8002a74:	2204      	movs	r2, #4
 8002a76:	4908      	ldr	r1, [pc, #32]	; (8002a98 <default_ip_assign+0x28>)
 8002a78:	200f      	movs	r0, #15
 8002a7a:	f7fe f9c9 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <default_ip_assign+0x2c>)
 8002a82:	2005      	movs	r0, #5
 8002a84:	f7fe f9c4 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002a88:	2204      	movs	r2, #4
 8002a8a:	4905      	ldr	r1, [pc, #20]	; (8002aa0 <default_ip_assign+0x30>)
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f7fe f9bf 	bl	8000e10 <WIZCHIP_WRITE_BUF>
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000140 	.word	0x20000140
 8002a9c:	20000148 	.word	0x20000148
 8002aa0:	20000144 	.word	0x20000144

08002aa4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe f954 	bl	8000d58 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fe f97f 	bl	8000db4 <WIZCHIP_READ>
   default_ip_assign();
 8002ab6:	f7ff ffdb 	bl	8002a70 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002aba:	2206      	movs	r2, #6
 8002abc:	4902      	ldr	r1, [pc, #8]	; (8002ac8 <default_ip_update+0x24>)
 8002abe:	2009      	movs	r0, #9
 8002ac0:	f7fe f9a6 	bl	8000e10 <WIZCHIP_WRITE_BUF>
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000160 	.word	0x20000160

08002acc <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fe f940 	bl	8000d58 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f96b 	bl	8000db4 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002ade:	2206      	movs	r2, #6
 8002ae0:	4902      	ldr	r1, [pc, #8]	; (8002aec <default_ip_conflict+0x20>)
 8002ae2:	2009      	movs	r0, #9
 8002ae4:	f7fe f994 	bl	8000e10 <WIZCHIP_WRITE_BUF>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000160 	.word	0x20000160

08002af0 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002af6:	463b      	mov	r3, r7
 8002af8:	2206      	movs	r2, #6
 8002afa:	4619      	mov	r1, r3
 8002afc:	2009      	movs	r0, #9
 8002afe:	f7fe f9d5 	bl	8000eac <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002b02:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002b0a:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002b12:	4b6e      	ldr	r3, [pc, #440]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2206      	movs	r2, #6
 8002b18:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3304      	adds	r3, #4
 8002b28:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002b2a:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <makeDHCPMSG+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0e1b      	lsrs	r3, r3, #24
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002b36:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <makeDHCPMSG+0x1e0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0c1a      	lsrs	r2, r3, #16
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002b44:	4b62      	ldr	r3, [pc, #392]	; (8002cd0 <makeDHCPMSG+0x1e0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0a1a      	lsrs	r2, r3, #8
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <makeDHCPMSG+0x1e0>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3303      	adds	r3, #3
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002b66:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	330a      	adds	r3, #10
 8002b6c:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3301      	adds	r3, #1
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002b84:	4b51      	ldr	r3, [pc, #324]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002b8c:	4b4f      	ldr	r3, [pc, #316]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002b94:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002ba4:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002bac:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002bb4:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002bbc:	4b43      	ldr	r3, [pc, #268]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002bc4:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002bd4:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2200      	movs	r2, #0
 8002be2:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002bf4:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <makeDHCPMSG+0x1e4>)
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a32      	ldr	r2, [pc, #200]	; (8002cd4 <makeDHCPMSG+0x1e4>)
 8002c0c:	7852      	ldrb	r2, [r2, #1]
 8002c0e:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <makeDHCPMSG+0x1e4>)
 8002c16:	7892      	ldrb	r2, [r2, #2]
 8002c18:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <makeDHCPMSG+0x1e4>)
 8002c20:	78d2      	ldrb	r2, [r2, #3]
 8002c22:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <makeDHCPMSG+0x1e4>)
 8002c2a:	7912      	ldrb	r2, [r2, #4]
 8002c2c:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <makeDHCPMSG+0x1e4>)
 8002c36:	7952      	ldrb	r2, [r2, #5]
 8002c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002c3c:	2306      	movs	r3, #6
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e008      	b.n	8002c54 <makeDHCPMSG+0x164>
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	4413      	add	r3, r2
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	771a      	strb	r2, [r3, #28]
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	d9f3      	bls.n	8002c42 <makeDHCPMSG+0x152>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e009      	b.n	8002c74 <makeDHCPMSG+0x184>
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	4413      	add	r3, r2
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3301      	adds	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b3f      	cmp	r3, #63	; 0x3f
 8002c78:	d9f2      	bls.n	8002c60 <makeDHCPMSG+0x170>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e009      	b.n	8002c94 <makeDHCPMSG+0x1a4>
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	4413      	add	r3, r2
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	3301      	adds	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	daf1      	bge.n	8002c80 <makeDHCPMSG+0x190>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2263      	movs	r2, #99	; 0x63
 8002ca2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2282      	movs	r2, #130	; 0x82
 8002cac:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2253      	movs	r2, #83	; 0x53
 8002cb6:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <makeDHCPMSG+0x1dc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2263      	movs	r2, #99	; 0x63
 8002cc0:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	2000015c 	.word	0x2000015c
 8002cd0:	20000158 	.word	0x20000158
 8002cd4:	20000160 	.word	0x20000160

08002cd8 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002ce2:	f7ff ff05 	bl	8002af0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002ce6:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <send_DHCP_DISCOVER+0x168>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002cec:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <send_DHCP_DISCOVER+0x168>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002cf2:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <send_DHCP_DISCOVER+0x168>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002cf8:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <send_DHCP_DISCOVER+0x168>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <send_DHCP_DISCOVER+0x16c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <send_DHCP_DISCOVER+0x16c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8002d0a:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <send_DHCP_DISCOVER+0x16c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002d10:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <send_DHCP_DISCOVER+0x16c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002d16:	2304      	movs	r3, #4
 8002d18:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	88bb      	ldrh	r3, [r7, #4]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	80b9      	strh	r1, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	2235      	movs	r2, #53	; 0x35
 8002d28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	80b9      	strh	r1, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8002d3e:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	88bb      	ldrh	r3, [r7, #4]
 8002d44:	1c59      	adds	r1, r3, #1
 8002d46:	80b9      	strh	r1, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002d50:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	88bb      	ldrh	r3, [r7, #4]
 8002d56:	1c59      	adds	r1, r3, #1
 8002d58:	80b9      	strh	r1, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	223d      	movs	r2, #61	; 0x3d
 8002d5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	88bb      	ldrh	r3, [r7, #4]
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	80b9      	strh	r1, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	2207      	movs	r2, #7
 8002d70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	88bb      	ldrh	r3, [r7, #4]
 8002d7a:	1c59      	adds	r1, r3, #1
 8002d7c:	80b9      	strh	r1, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	88bb      	ldrh	r3, [r7, #4]
 8002d8c:	1c59      	adds	r1, r3, #1
 8002d8e:	80b9      	strh	r1, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	4b2e      	ldr	r3, [pc, #184]	; (8002e4c <send_DHCP_DISCOVER+0x174>)
 8002d94:	7819      	ldrb	r1, [r3, #0]
 8002d96:	1813      	adds	r3, r2, r0
 8002d98:	460a      	mov	r2, r1
 8002d9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	88bb      	ldrh	r3, [r7, #4]
 8002da4:	1c59      	adds	r1, r3, #1
 8002da6:	80b9      	strh	r1, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <send_DHCP_DISCOVER+0x174>)
 8002dac:	7859      	ldrb	r1, [r3, #1]
 8002dae:	1813      	adds	r3, r2, r0
 8002db0:	460a      	mov	r2, r1
 8002db2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	80b9      	strh	r1, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <send_DHCP_DISCOVER+0x174>)
 8002dc4:	7899      	ldrb	r1, [r3, #2]
 8002dc6:	1813      	adds	r3, r2, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	88bb      	ldrh	r3, [r7, #4]
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	80b9      	strh	r1, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <send_DHCP_DISCOVER+0x174>)
 8002ddc:	78d9      	ldrb	r1, [r3, #3]
 8002dde:	1813      	adds	r3, r2, r0
 8002de0:	460a      	mov	r2, r1
 8002de2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002de6:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	88bb      	ldrh	r3, [r7, #4]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	80b9      	strh	r1, [r7, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <send_DHCP_DISCOVER+0x174>)
 8002df4:	7919      	ldrb	r1, [r3, #4]
 8002df6:	1813      	adds	r3, r2, r0
 8002df8:	460a      	mov	r2, r1
 8002dfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	88bb      	ldrh	r3, [r7, #4]
 8002e04:	1c59      	adds	r1, r3, #1
 8002e06:	80b9      	strh	r1, [r7, #4]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <send_DHCP_DISCOVER+0x174>)
 8002e0c:	7959      	ldrb	r1, [r3, #5]
 8002e0e:	1813      	adds	r3, r2, r0
 8002e10:	460a      	mov	r2, r1
 8002e12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	88bb      	ldrh	r3, [r7, #4]
 8002e1c:	1c59      	adds	r1, r3, #1
 8002e1e:	80b9      	strh	r1, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	220c      	movs	r2, #12
 8002e24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <send_DHCP_DISCOVER+0x170>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	1c59      	adds	r1, r3, #1
 8002e30:	80b9      	strh	r1, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	e017      	b.n	8002e70 <send_DHCP_DISCOVER+0x198>
 8002e40:	20000134 	.word	0x20000134
 8002e44:	20000138 	.word	0x20000138
 8002e48:	2000015c 	.word	0x2000015c
 8002e4c:	20000160 	.word	0x20000160
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002e50:	88f9      	ldrh	r1, [r7, #6]
 8002e52:	4b80      	ldr	r3, [pc, #512]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	1c58      	adds	r0, r3, #1
 8002e5a:	80b8      	strh	r0, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4b7e      	ldr	r3, [pc, #504]	; (8003058 <send_DHCP_DISCOVER+0x380>)
 8002e60:	5c59      	ldrb	r1, [r3, r1]
 8002e62:	1813      	adds	r3, r2, r0
 8002e64:	460a      	mov	r2, r1
 8002e66:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	80fb      	strh	r3, [r7, #6]
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	4a79      	ldr	r2, [pc, #484]	; (8003058 <send_DHCP_DISCOVER+0x380>)
 8002e74:	5cd3      	ldrb	r3, [r2, r3]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ea      	bne.n	8002e50 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002e7a:	4b78      	ldr	r3, [pc, #480]	; (800305c <send_DHCP_DISCOVER+0x384>)
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4b74      	ldr	r3, [pc, #464]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002e84:	681c      	ldr	r4, [r3, #0]
 8002e86:	88bb      	ldrh	r3, [r7, #4]
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	80b9      	strh	r1, [r7, #4]
 8002e8c:	461d      	mov	r5, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f001 f94c 	bl	800412c <NibbleToHex>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	1963      	adds	r3, r4, r5
 8002e9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <send_DHCP_DISCOVER+0x384>)
 8002ea0:	78da      	ldrb	r2, [r3, #3]
 8002ea2:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002ea4:	681c      	ldr	r4, [r3, #0]
 8002ea6:	88bb      	ldrh	r3, [r7, #4]
 8002ea8:	1c59      	adds	r1, r3, #1
 8002eaa:	80b9      	strh	r1, [r7, #4]
 8002eac:	461d      	mov	r5, r3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	f001 f93c 	bl	800412c <NibbleToHex>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	1963      	adds	r3, r4, r5
 8002eba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <send_DHCP_DISCOVER+0x384>)
 8002ec0:	791b      	ldrb	r3, [r3, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b63      	ldr	r3, [pc, #396]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002ec8:	681c      	ldr	r4, [r3, #0]
 8002eca:	88bb      	ldrh	r3, [r7, #4]
 8002ecc:	1c59      	adds	r1, r3, #1
 8002ece:	80b9      	strh	r1, [r7, #4]
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f001 f92a 	bl	800412c <NibbleToHex>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	1963      	adds	r3, r4, r5
 8002ede:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	; (800305c <send_DHCP_DISCOVER+0x384>)
 8002ee4:	791a      	ldrb	r2, [r3, #4]
 8002ee6:	4b5b      	ldr	r3, [pc, #364]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002ee8:	681c      	ldr	r4, [r3, #0]
 8002eea:	88bb      	ldrh	r3, [r7, #4]
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	80b9      	strh	r1, [r7, #4]
 8002ef0:	461d      	mov	r5, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f001 f91a 	bl	800412c <NibbleToHex>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	1963      	adds	r3, r4, r5
 8002efe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <send_DHCP_DISCOVER+0x384>)
 8002f04:	795b      	ldrb	r3, [r3, #5]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b52      	ldr	r3, [pc, #328]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f0c:	681c      	ldr	r4, [r3, #0]
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	80b9      	strh	r1, [r7, #4]
 8002f14:	461d      	mov	r5, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f001 f908 	bl	800412c <NibbleToHex>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	1963      	adds	r3, r4, r5
 8002f22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002f26:	4b4d      	ldr	r3, [pc, #308]	; (800305c <send_DHCP_DISCOVER+0x384>)
 8002f28:	795a      	ldrb	r2, [r3, #5]
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f2c:	681c      	ldr	r4, [r3, #0]
 8002f2e:	88bb      	ldrh	r3, [r7, #4]
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	80b9      	strh	r1, [r7, #4]
 8002f34:	461d      	mov	r5, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f001 f8f8 	bl	800412c <NibbleToHex>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	1963      	adds	r3, r4, r5
 8002f42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	b2d9      	uxtb	r1, r3
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	88b8      	ldrh	r0, [r7, #4]
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	3307      	adds	r3, #7
 8002f54:	1ac3      	subs	r3, r0, r3
 8002f56:	3106      	adds	r1, #6
 8002f58:	b2c9      	uxtb	r1, r1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	460a      	mov	r2, r1
 8002f5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002f62:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	88bb      	ldrh	r3, [r7, #4]
 8002f68:	1c59      	adds	r1, r3, #1
 8002f6a:	80b9      	strh	r1, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	2237      	movs	r2, #55	; 0x37
 8002f70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8002f74:	4b37      	ldr	r3, [pc, #220]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	80b9      	strh	r1, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	2206      	movs	r2, #6
 8002f82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002f86:	4b33      	ldr	r3, [pc, #204]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	88bb      	ldrh	r3, [r7, #4]
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	80b9      	strh	r1, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	88bb      	ldrh	r3, [r7, #4]
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	80b9      	strh	r1, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	88bb      	ldrh	r3, [r7, #4]
 8002fb0:	1c59      	adds	r1, r3, #1
 8002fb2:	80b9      	strh	r1, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	2206      	movs	r2, #6
 8002fb8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	88bb      	ldrh	r3, [r7, #4]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	80b9      	strh	r1, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002fce:	4b21      	ldr	r3, [pc, #132]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	88bb      	ldrh	r3, [r7, #4]
 8002fd4:	1c59      	adds	r1, r3, #1
 8002fd6:	80b9      	strh	r1, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	223a      	movs	r2, #58	; 0x3a
 8002fdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	88bb      	ldrh	r3, [r7, #4]
 8002fe6:	1c59      	adds	r1, r3, #1
 8002fe8:	80b9      	strh	r1, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	223b      	movs	r2, #59	; 0x3b
 8002fee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	1c59      	adds	r1, r3, #1
 8002ffa:	80b9      	strh	r1, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003004:	88bb      	ldrh	r3, [r7, #4]
 8003006:	80fb      	strh	r3, [r7, #6]
 8003008:	e009      	b.n	800301e <send_DHCP_DISCOVER+0x346>
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4413      	add	r3, r2
 8003012:	2200      	movs	r2, #0
 8003014:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	3301      	adds	r3, #1
 800301c:	80fb      	strh	r3, [r7, #6]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003024:	d3f1      	bcc.n	800300a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8003026:	23ff      	movs	r3, #255	; 0xff
 8003028:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800302a:	23ff      	movs	r3, #255	; 0xff
 800302c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800302e:	23ff      	movs	r3, #255	; 0xff
 8003030:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8003032:	23ff      	movs	r3, #255	; 0xff
 8003034:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <send_DHCP_DISCOVER+0x388>)
 8003038:	7818      	ldrb	r0, [r3, #0]
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <send_DHCP_DISCOVER+0x37c>)
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	463b      	mov	r3, r7
 8003040:	2243      	movs	r2, #67	; 0x43
 8003042:	9200      	str	r2, [sp, #0]
 8003044:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003048:	f7fe fe70 	bl	8001d2c <sendto>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bdb0      	pop	{r4, r5, r7, pc}
 8003054:	2000015c 	.word	0x2000015c
 8003058:	20000038 	.word	0x20000038
 800305c:	20000160 	.word	0x20000160
 8003060:	20000131 	.word	0x20000131

08003064 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800306e:	f7ff fd3f 	bl	8002af0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <send_DHCP_REQUEST+0x7c>)
 8003074:	f993 3000 	ldrsb.w	r3, [r3]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d004      	beq.n	8003086 <send_DHCP_REQUEST+0x22>
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <send_DHCP_REQUEST+0x7c>)
 800307e:	f993 3000 	ldrsb.w	r3, [r3]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d134      	bne.n	80030f0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <send_DHCP_REQUEST+0x80>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330a      	adds	r3, #10
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <send_DHCP_REQUEST+0x80>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330a      	adds	r3, #10
 8003096:	3301      	adds	r3, #1
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <send_DHCP_REQUEST+0x80>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a11      	ldr	r2, [pc, #68]	; (80030e8 <send_DHCP_REQUEST+0x84>)
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <send_DHCP_REQUEST+0x80>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <send_DHCP_REQUEST+0x84>)
 80030ac:	7852      	ldrb	r2, [r2, #1]
 80030ae:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <send_DHCP_REQUEST+0x80>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <send_DHCP_REQUEST+0x84>)
 80030b6:	7892      	ldrb	r2, [r2, #2]
 80030b8:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <send_DHCP_REQUEST+0x80>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <send_DHCP_REQUEST+0x84>)
 80030c0:	78d2      	ldrb	r2, [r2, #3]
 80030c2:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <send_DHCP_REQUEST+0x88>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <send_DHCP_REQUEST+0x88>)
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <send_DHCP_REQUEST+0x88>)
 80030d2:	789b      	ldrb	r3, [r3, #2]
 80030d4:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <send_DHCP_REQUEST+0x88>)
 80030d8:	78db      	ldrb	r3, [r3, #3]
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	e010      	b.n	8003100 <send_DHCP_REQUEST+0x9c>
 80030de:	bf00      	nop
 80030e0:	20000150 	.word	0x20000150
 80030e4:	2000015c 	.word	0x2000015c
 80030e8:	20000140 	.word	0x20000140
 80030ec:	20000134 	.word	0x20000134
   }
   else
   {
   	ip[0] = 255;
 80030f0:	23ff      	movs	r3, #255	; 0xff
 80030f2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80030f4:	23ff      	movs	r3, #255	; 0xff
 80030f6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80030f8:	23ff      	movs	r3, #255	; 0xff
 80030fa:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80030fc:	23ff      	movs	r3, #255	; 0xff
 80030fe:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003100:	2304      	movs	r3, #4
 8003102:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003104:	4b8d      	ldr	r3, [pc, #564]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	897b      	ldrh	r3, [r7, #10]
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	8179      	strh	r1, [r7, #10]
 800310e:	4413      	add	r3, r2
 8003110:	2235      	movs	r2, #53	; 0x35
 8003112:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003116:	4b89      	ldr	r3, [pc, #548]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	1c59      	adds	r1, r3, #1
 800311e:	8179      	strh	r1, [r7, #10]
 8003120:	4413      	add	r3, r2
 8003122:	2201      	movs	r2, #1
 8003124:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003128:	4b84      	ldr	r3, [pc, #528]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	897b      	ldrh	r3, [r7, #10]
 800312e:	1c59      	adds	r1, r3, #1
 8003130:	8179      	strh	r1, [r7, #10]
 8003132:	4413      	add	r3, r2
 8003134:	2203      	movs	r2, #3
 8003136:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800313a:	4b80      	ldr	r3, [pc, #512]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	1c59      	adds	r1, r3, #1
 8003142:	8179      	strh	r1, [r7, #10]
 8003144:	4413      	add	r3, r2
 8003146:	223d      	movs	r2, #61	; 0x3d
 8003148:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800314c:	4b7b      	ldr	r3, [pc, #492]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	897b      	ldrh	r3, [r7, #10]
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	8179      	strh	r1, [r7, #10]
 8003156:	4413      	add	r3, r2
 8003158:	2207      	movs	r2, #7
 800315a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800315e:	4b77      	ldr	r3, [pc, #476]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	1c59      	adds	r1, r3, #1
 8003166:	8179      	strh	r1, [r7, #10]
 8003168:	4413      	add	r3, r2
 800316a:	2201      	movs	r2, #1
 800316c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003170:	4b72      	ldr	r3, [pc, #456]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	897b      	ldrh	r3, [r7, #10]
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	8179      	strh	r1, [r7, #10]
 800317a:	4618      	mov	r0, r3
 800317c:	4b70      	ldr	r3, [pc, #448]	; (8003340 <send_DHCP_REQUEST+0x2dc>)
 800317e:	7819      	ldrb	r1, [r3, #0]
 8003180:	1813      	adds	r3, r2, r0
 8003182:	460a      	mov	r2, r1
 8003184:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003188:	4b6c      	ldr	r3, [pc, #432]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	897b      	ldrh	r3, [r7, #10]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	8179      	strh	r1, [r7, #10]
 8003192:	4618      	mov	r0, r3
 8003194:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <send_DHCP_REQUEST+0x2dc>)
 8003196:	7859      	ldrb	r1, [r3, #1]
 8003198:	1813      	adds	r3, r2, r0
 800319a:	460a      	mov	r2, r1
 800319c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	897b      	ldrh	r3, [r7, #10]
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	8179      	strh	r1, [r7, #10]
 80031aa:	4618      	mov	r0, r3
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <send_DHCP_REQUEST+0x2dc>)
 80031ae:	7899      	ldrb	r1, [r3, #2]
 80031b0:	1813      	adds	r3, r2, r0
 80031b2:	460a      	mov	r2, r1
 80031b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80031b8:	4b60      	ldr	r3, [pc, #384]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	897b      	ldrh	r3, [r7, #10]
 80031be:	1c59      	adds	r1, r3, #1
 80031c0:	8179      	strh	r1, [r7, #10]
 80031c2:	4618      	mov	r0, r3
 80031c4:	4b5e      	ldr	r3, [pc, #376]	; (8003340 <send_DHCP_REQUEST+0x2dc>)
 80031c6:	78d9      	ldrb	r1, [r3, #3]
 80031c8:	1813      	adds	r3, r2, r0
 80031ca:	460a      	mov	r2, r1
 80031cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80031d0:	4b5a      	ldr	r3, [pc, #360]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	897b      	ldrh	r3, [r7, #10]
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	8179      	strh	r1, [r7, #10]
 80031da:	4618      	mov	r0, r3
 80031dc:	4b58      	ldr	r3, [pc, #352]	; (8003340 <send_DHCP_REQUEST+0x2dc>)
 80031de:	7919      	ldrb	r1, [r3, #4]
 80031e0:	1813      	adds	r3, r2, r0
 80031e2:	460a      	mov	r2, r1
 80031e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80031e8:	4b54      	ldr	r3, [pc, #336]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	1c59      	adds	r1, r3, #1
 80031f0:	8179      	strh	r1, [r7, #10]
 80031f2:	4618      	mov	r0, r3
 80031f4:	4b52      	ldr	r3, [pc, #328]	; (8003340 <send_DHCP_REQUEST+0x2dc>)
 80031f6:	7959      	ldrb	r1, [r3, #5]
 80031f8:	1813      	adds	r3, r2, r0
 80031fa:	460a      	mov	r2, r1
 80031fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2bff      	cmp	r3, #255	; 0xff
 8003204:	f040 8084 	bne.w	8003310 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	897b      	ldrh	r3, [r7, #10]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	8179      	strh	r1, [r7, #10]
 8003212:	4413      	add	r3, r2
 8003214:	2232      	movs	r2, #50	; 0x32
 8003216:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800321a:	4b48      	ldr	r3, [pc, #288]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	1c59      	adds	r1, r3, #1
 8003222:	8179      	strh	r1, [r7, #10]
 8003224:	4413      	add	r3, r2
 8003226:	2204      	movs	r2, #4
 8003228:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	8179      	strh	r1, [r7, #10]
 8003236:	4618      	mov	r0, r3
 8003238:	4b42      	ldr	r3, [pc, #264]	; (8003344 <send_DHCP_REQUEST+0x2e0>)
 800323a:	7819      	ldrb	r1, [r3, #0]
 800323c:	1813      	adds	r3, r2, r0
 800323e:	460a      	mov	r2, r1
 8003240:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003244:	4b3d      	ldr	r3, [pc, #244]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	897b      	ldrh	r3, [r7, #10]
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	8179      	strh	r1, [r7, #10]
 800324e:	4618      	mov	r0, r3
 8003250:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <send_DHCP_REQUEST+0x2e0>)
 8003252:	7859      	ldrb	r1, [r3, #1]
 8003254:	1813      	adds	r3, r2, r0
 8003256:	460a      	mov	r2, r1
 8003258:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800325c:	4b37      	ldr	r3, [pc, #220]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	1c59      	adds	r1, r3, #1
 8003264:	8179      	strh	r1, [r7, #10]
 8003266:	4618      	mov	r0, r3
 8003268:	4b36      	ldr	r3, [pc, #216]	; (8003344 <send_DHCP_REQUEST+0x2e0>)
 800326a:	7899      	ldrb	r1, [r3, #2]
 800326c:	1813      	adds	r3, r2, r0
 800326e:	460a      	mov	r2, r1
 8003270:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003274:	4b31      	ldr	r3, [pc, #196]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	1c59      	adds	r1, r3, #1
 800327c:	8179      	strh	r1, [r7, #10]
 800327e:	4618      	mov	r0, r3
 8003280:	4b30      	ldr	r3, [pc, #192]	; (8003344 <send_DHCP_REQUEST+0x2e0>)
 8003282:	78d9      	ldrb	r1, [r3, #3]
 8003284:	1813      	adds	r3, r2, r0
 8003286:	460a      	mov	r2, r1
 8003288:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	897b      	ldrh	r3, [r7, #10]
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	8179      	strh	r1, [r7, #10]
 8003296:	4413      	add	r3, r2
 8003298:	2236      	movs	r2, #54	; 0x36
 800329a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	1c59      	adds	r1, r3, #1
 80032a6:	8179      	strh	r1, [r7, #10]
 80032a8:	4413      	add	r3, r2
 80032aa:	2204      	movs	r2, #4
 80032ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	897b      	ldrh	r3, [r7, #10]
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	8179      	strh	r1, [r7, #10]
 80032ba:	4618      	mov	r0, r3
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <send_DHCP_REQUEST+0x2e4>)
 80032be:	7819      	ldrb	r1, [r3, #0]
 80032c0:	1813      	adds	r3, r2, r0
 80032c2:	460a      	mov	r2, r1
 80032c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	897b      	ldrh	r3, [r7, #10]
 80032ce:	1c59      	adds	r1, r3, #1
 80032d0:	8179      	strh	r1, [r7, #10]
 80032d2:	4618      	mov	r0, r3
 80032d4:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <send_DHCP_REQUEST+0x2e4>)
 80032d6:	7859      	ldrb	r1, [r3, #1]
 80032d8:	1813      	adds	r3, r2, r0
 80032da:	460a      	mov	r2, r1
 80032dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80032e0:	4b16      	ldr	r3, [pc, #88]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	897b      	ldrh	r3, [r7, #10]
 80032e6:	1c59      	adds	r1, r3, #1
 80032e8:	8179      	strh	r1, [r7, #10]
 80032ea:	4618      	mov	r0, r3
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <send_DHCP_REQUEST+0x2e4>)
 80032ee:	7899      	ldrb	r1, [r3, #2]
 80032f0:	1813      	adds	r3, r2, r0
 80032f2:	460a      	mov	r2, r1
 80032f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	897b      	ldrh	r3, [r7, #10]
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	8179      	strh	r1, [r7, #10]
 8003302:	4618      	mov	r0, r3
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <send_DHCP_REQUEST+0x2e4>)
 8003306:	78d9      	ldrb	r1, [r3, #3]
 8003308:	1813      	adds	r3, r2, r0
 800330a:	460a      	mov	r2, r1
 800330c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	8179      	strh	r1, [r7, #10]
 800331a:	4413      	add	r3, r2
 800331c:	220c      	movs	r2, #12
 800331e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <send_DHCP_REQUEST+0x2d8>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	1c59      	adds	r1, r3, #1
 800332a:	8179      	strh	r1, [r7, #10]
 800332c:	4413      	add	r3, r2
 800332e:	2200      	movs	r2, #0
 8003330:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e019      	b.n	800336e <send_DHCP_REQUEST+0x30a>
 800333a:	bf00      	nop
 800333c:	2000015c 	.word	0x2000015c
 8003340:	20000160 	.word	0x20000160
 8003344:	20000140 	.word	0x20000140
 8003348:	20000134 	.word	0x20000134
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800334c:	4b86      	ldr	r3, [pc, #536]	; (8003568 <send_DHCP_REQUEST+0x504>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	897b      	ldrh	r3, [r7, #10]
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	8179      	strh	r1, [r7, #10]
 8003356:	4618      	mov	r0, r3
 8003358:	4984      	ldr	r1, [pc, #528]	; (800356c <send_DHCP_REQUEST+0x508>)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	440b      	add	r3, r1
 800335e:	7819      	ldrb	r1, [r3, #0]
 8003360:	1813      	adds	r3, r2, r0
 8003362:	460a      	mov	r2, r1
 8003364:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	4a7f      	ldr	r2, [pc, #508]	; (800356c <send_DHCP_REQUEST+0x508>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e8      	bne.n	800334c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800337a:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <send_DHCP_REQUEST+0x50c>)
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4b79      	ldr	r3, [pc, #484]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003384:	681c      	ldr	r4, [r3, #0]
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	1c59      	adds	r1, r3, #1
 800338a:	8179      	strh	r1, [r7, #10]
 800338c:	461d      	mov	r5, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fecc 	bl	800412c <NibbleToHex>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	1963      	adds	r3, r4, r5
 800339a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800339e:	4b74      	ldr	r3, [pc, #464]	; (8003570 <send_DHCP_REQUEST+0x50c>)
 80033a0:	78da      	ldrb	r2, [r3, #3]
 80033a2:	4b71      	ldr	r3, [pc, #452]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80033a4:	681c      	ldr	r4, [r3, #0]
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	1c59      	adds	r1, r3, #1
 80033aa:	8179      	strh	r1, [r7, #10]
 80033ac:	461d      	mov	r5, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 febc 	bl	800412c <NibbleToHex>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	1963      	adds	r3, r4, r5
 80033ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <send_DHCP_REQUEST+0x50c>)
 80033c0:	791b      	ldrb	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b68      	ldr	r3, [pc, #416]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80033c8:	681c      	ldr	r4, [r3, #0]
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	1c59      	adds	r1, r3, #1
 80033ce:	8179      	strh	r1, [r7, #10]
 80033d0:	461d      	mov	r5, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 feaa 	bl	800412c <NibbleToHex>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	1963      	adds	r3, r4, r5
 80033de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80033e2:	4b63      	ldr	r3, [pc, #396]	; (8003570 <send_DHCP_REQUEST+0x50c>)
 80033e4:	791a      	ldrb	r2, [r3, #4]
 80033e6:	4b60      	ldr	r3, [pc, #384]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80033e8:	681c      	ldr	r4, [r3, #0]
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	8179      	strh	r1, [r7, #10]
 80033f0:	461d      	mov	r5, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f000 fe9a 	bl	800412c <NibbleToHex>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	1963      	adds	r3, r4, r5
 80033fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003402:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <send_DHCP_REQUEST+0x50c>)
 8003404:	795b      	ldrb	r3, [r3, #5]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b57      	ldr	r3, [pc, #348]	; (8003568 <send_DHCP_REQUEST+0x504>)
 800340c:	681c      	ldr	r4, [r3, #0]
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	8179      	strh	r1, [r7, #10]
 8003414:	461d      	mov	r5, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 fe88 	bl	800412c <NibbleToHex>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	1963      	adds	r3, r4, r5
 8003422:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003426:	4b52      	ldr	r3, [pc, #328]	; (8003570 <send_DHCP_REQUEST+0x50c>)
 8003428:	795a      	ldrb	r2, [r3, #5]
 800342a:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <send_DHCP_REQUEST+0x504>)
 800342c:	681c      	ldr	r4, [r3, #0]
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	1c59      	adds	r1, r3, #1
 8003432:	8179      	strh	r1, [r7, #10]
 8003434:	461d      	mov	r5, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f000 fe78 	bl	800412c <NibbleToHex>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	1963      	adds	r3, r4, r5
 8003442:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	b2d9      	uxtb	r1, r3
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <send_DHCP_REQUEST+0x504>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	8978      	ldrh	r0, [r7, #10]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3307      	adds	r3, #7
 8003454:	1ac3      	subs	r3, r0, r3
 8003456:	3106      	adds	r1, #6
 8003458:	b2c9      	uxtb	r1, r1
 800345a:	4413      	add	r3, r2
 800345c:	460a      	mov	r2, r1
 800345e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	1c59      	adds	r1, r3, #1
 800346a:	8179      	strh	r1, [r7, #10]
 800346c:	4413      	add	r3, r2
 800346e:	2237      	movs	r2, #55	; 0x37
 8003470:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8003474:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	8179      	strh	r1, [r7, #10]
 800347e:	4413      	add	r3, r2
 8003480:	2208      	movs	r2, #8
 8003482:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	1c59      	adds	r1, r3, #1
 800348e:	8179      	strh	r1, [r7, #10]
 8003490:	4413      	add	r3, r2
 8003492:	2201      	movs	r2, #1
 8003494:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <send_DHCP_REQUEST+0x504>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	8179      	strh	r1, [r7, #10]
 80034a2:	4413      	add	r3, r2
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	1c59      	adds	r1, r3, #1
 80034b2:	8179      	strh	r1, [r7, #10]
 80034b4:	4413      	add	r3, r2
 80034b6:	2206      	movs	r2, #6
 80034b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	897b      	ldrh	r3, [r7, #10]
 80034c2:	1c59      	adds	r1, r3, #1
 80034c4:	8179      	strh	r1, [r7, #10]
 80034c6:	4413      	add	r3, r2
 80034c8:	220f      	movs	r2, #15
 80034ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	897b      	ldrh	r3, [r7, #10]
 80034d4:	1c59      	adds	r1, r3, #1
 80034d6:	8179      	strh	r1, [r7, #10]
 80034d8:	4413      	add	r3, r2
 80034da:	223a      	movs	r2, #58	; 0x3a
 80034dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	897b      	ldrh	r3, [r7, #10]
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	8179      	strh	r1, [r7, #10]
 80034ea:	4413      	add	r3, r2
 80034ec:	223b      	movs	r2, #59	; 0x3b
 80034ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <send_DHCP_REQUEST+0x504>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	897b      	ldrh	r3, [r7, #10]
 80034f8:	1c59      	adds	r1, r3, #1
 80034fa:	8179      	strh	r1, [r7, #10]
 80034fc:	4413      	add	r3, r2
 80034fe:	221f      	movs	r2, #31
 8003500:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	1c59      	adds	r1, r3, #1
 800350c:	8179      	strh	r1, [r7, #10]
 800350e:	4413      	add	r3, r2
 8003510:	2221      	movs	r2, #33	; 0x21
 8003512:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	1c59      	adds	r1, r3, #1
 800351e:	8179      	strh	r1, [r7, #10]
 8003520:	4413      	add	r3, r2
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e009      	b.n	8003542 <send_DHCP_REQUEST+0x4de>
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	33ec      	adds	r3, #236	; 0xec
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003548:	dbf1      	blt.n	800352e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <send_DHCP_REQUEST+0x510>)
 800354c:	7818      	ldrb	r0, [r3, #0]
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <send_DHCP_REQUEST+0x504>)
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	2243      	movs	r2, #67	; 0x43
 8003556:	9200      	str	r2, [sp, #0]
 8003558:	f44f 7209 	mov.w	r2, #548	; 0x224
 800355c:	f7fe fbe6 	bl	8001d2c <sendto>

}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bdb0      	pop	{r4, r5, r7, pc}
 8003568:	2000015c 	.word	0x2000015c
 800356c:	20000038 	.word	0x20000038
 8003570:	20000160 	.word	0x20000160
 8003574:	20000131 	.word	0x20000131

08003578 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003582:	f7ff fab5 	bl	8002af0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003586:	2304      	movs	r3, #4
 8003588:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800358a:	4b9f      	ldr	r3, [pc, #636]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330a      	adds	r3, #10
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003594:	4b9c      	ldr	r3, [pc, #624]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330a      	adds	r3, #10
 800359a:	3301      	adds	r3, #1
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80035a0:	4b99      	ldr	r3, [pc, #612]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	8179      	strh	r1, [r7, #10]
 80035aa:	4413      	add	r3, r2
 80035ac:	2235      	movs	r2, #53	; 0x35
 80035ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80035b2:	4b95      	ldr	r3, [pc, #596]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	1c59      	adds	r1, r3, #1
 80035ba:	8179      	strh	r1, [r7, #10]
 80035bc:	4413      	add	r3, r2
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80035c4:	4b90      	ldr	r3, [pc, #576]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	8179      	strh	r1, [r7, #10]
 80035ce:	4413      	add	r3, r2
 80035d0:	2204      	movs	r2, #4
 80035d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80035d6:	4b8c      	ldr	r3, [pc, #560]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	1c59      	adds	r1, r3, #1
 80035de:	8179      	strh	r1, [r7, #10]
 80035e0:	4413      	add	r3, r2
 80035e2:	223d      	movs	r2, #61	; 0x3d
 80035e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80035e8:	4b87      	ldr	r3, [pc, #540]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	897b      	ldrh	r3, [r7, #10]
 80035ee:	1c59      	adds	r1, r3, #1
 80035f0:	8179      	strh	r1, [r7, #10]
 80035f2:	4413      	add	r3, r2
 80035f4:	2207      	movs	r2, #7
 80035f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80035fa:	4b83      	ldr	r3, [pc, #524]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	8179      	strh	r1, [r7, #10]
 8003604:	4413      	add	r3, r2
 8003606:	2201      	movs	r2, #1
 8003608:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800360c:	4b7e      	ldr	r3, [pc, #504]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	897b      	ldrh	r3, [r7, #10]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	8179      	strh	r1, [r7, #10]
 8003616:	4618      	mov	r0, r3
 8003618:	4b7c      	ldr	r3, [pc, #496]	; (800380c <send_DHCP_DECLINE+0x294>)
 800361a:	7819      	ldrb	r1, [r3, #0]
 800361c:	1813      	adds	r3, r2, r0
 800361e:	460a      	mov	r2, r1
 8003620:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003624:	4b78      	ldr	r3, [pc, #480]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	8179      	strh	r1, [r7, #10]
 800362e:	4618      	mov	r0, r3
 8003630:	4b76      	ldr	r3, [pc, #472]	; (800380c <send_DHCP_DECLINE+0x294>)
 8003632:	7859      	ldrb	r1, [r3, #1]
 8003634:	1813      	adds	r3, r2, r0
 8003636:	460a      	mov	r2, r1
 8003638:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800363c:	4b72      	ldr	r3, [pc, #456]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	8179      	strh	r1, [r7, #10]
 8003646:	4618      	mov	r0, r3
 8003648:	4b70      	ldr	r3, [pc, #448]	; (800380c <send_DHCP_DECLINE+0x294>)
 800364a:	7899      	ldrb	r1, [r3, #2]
 800364c:	1813      	adds	r3, r2, r0
 800364e:	460a      	mov	r2, r1
 8003650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	897b      	ldrh	r3, [r7, #10]
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	8179      	strh	r1, [r7, #10]
 800365e:	4618      	mov	r0, r3
 8003660:	4b6a      	ldr	r3, [pc, #424]	; (800380c <send_DHCP_DECLINE+0x294>)
 8003662:	78d9      	ldrb	r1, [r3, #3]
 8003664:	1813      	adds	r3, r2, r0
 8003666:	460a      	mov	r2, r1
 8003668:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800366c:	4b66      	ldr	r3, [pc, #408]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	897b      	ldrh	r3, [r7, #10]
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	8179      	strh	r1, [r7, #10]
 8003676:	4618      	mov	r0, r3
 8003678:	4b64      	ldr	r3, [pc, #400]	; (800380c <send_DHCP_DECLINE+0x294>)
 800367a:	7919      	ldrb	r1, [r3, #4]
 800367c:	1813      	adds	r3, r2, r0
 800367e:	460a      	mov	r2, r1
 8003680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003684:	4b60      	ldr	r3, [pc, #384]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	897b      	ldrh	r3, [r7, #10]
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	8179      	strh	r1, [r7, #10]
 800368e:	4618      	mov	r0, r3
 8003690:	4b5e      	ldr	r3, [pc, #376]	; (800380c <send_DHCP_DECLINE+0x294>)
 8003692:	7959      	ldrb	r1, [r3, #5]
 8003694:	1813      	adds	r3, r2, r0
 8003696:	460a      	mov	r2, r1
 8003698:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800369c:	4b5a      	ldr	r3, [pc, #360]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	8179      	strh	r1, [r7, #10]
 80036a6:	4413      	add	r3, r2
 80036a8:	2232      	movs	r2, #50	; 0x32
 80036aa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	8179      	strh	r1, [r7, #10]
 80036b8:	4413      	add	r3, r2
 80036ba:	2204      	movs	r2, #4
 80036bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80036c0:	4b51      	ldr	r3, [pc, #324]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	897b      	ldrh	r3, [r7, #10]
 80036c6:	1c59      	adds	r1, r3, #1
 80036c8:	8179      	strh	r1, [r7, #10]
 80036ca:	4618      	mov	r0, r3
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <send_DHCP_DECLINE+0x298>)
 80036ce:	7819      	ldrb	r1, [r3, #0]
 80036d0:	1813      	adds	r3, r2, r0
 80036d2:	460a      	mov	r2, r1
 80036d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80036d8:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	1c59      	adds	r1, r3, #1
 80036e0:	8179      	strh	r1, [r7, #10]
 80036e2:	4618      	mov	r0, r3
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <send_DHCP_DECLINE+0x298>)
 80036e6:	7859      	ldrb	r1, [r3, #1]
 80036e8:	1813      	adds	r3, r2, r0
 80036ea:	460a      	mov	r2, r1
 80036ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80036f0:	4b45      	ldr	r3, [pc, #276]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	897b      	ldrh	r3, [r7, #10]
 80036f6:	1c59      	adds	r1, r3, #1
 80036f8:	8179      	strh	r1, [r7, #10]
 80036fa:	4618      	mov	r0, r3
 80036fc:	4b44      	ldr	r3, [pc, #272]	; (8003810 <send_DHCP_DECLINE+0x298>)
 80036fe:	7899      	ldrb	r1, [r3, #2]
 8003700:	1813      	adds	r3, r2, r0
 8003702:	460a      	mov	r2, r1
 8003704:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003708:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	8179      	strh	r1, [r7, #10]
 8003712:	4618      	mov	r0, r3
 8003714:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <send_DHCP_DECLINE+0x298>)
 8003716:	78d9      	ldrb	r1, [r3, #3]
 8003718:	1813      	adds	r3, r2, r0
 800371a:	460a      	mov	r2, r1
 800371c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	897b      	ldrh	r3, [r7, #10]
 8003726:	1c59      	adds	r1, r3, #1
 8003728:	8179      	strh	r1, [r7, #10]
 800372a:	4413      	add	r3, r2
 800372c:	2236      	movs	r2, #54	; 0x36
 800372e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003732:	4b35      	ldr	r3, [pc, #212]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	1c59      	adds	r1, r3, #1
 800373a:	8179      	strh	r1, [r7, #10]
 800373c:	4413      	add	r3, r2
 800373e:	2204      	movs	r2, #4
 8003740:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003744:	4b30      	ldr	r3, [pc, #192]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	8179      	strh	r1, [r7, #10]
 800374e:	4618      	mov	r0, r3
 8003750:	4b30      	ldr	r3, [pc, #192]	; (8003814 <send_DHCP_DECLINE+0x29c>)
 8003752:	7819      	ldrb	r1, [r3, #0]
 8003754:	1813      	adds	r3, r2, r0
 8003756:	460a      	mov	r2, r1
 8003758:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800375c:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	1c59      	adds	r1, r3, #1
 8003764:	8179      	strh	r1, [r7, #10]
 8003766:	4618      	mov	r0, r3
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <send_DHCP_DECLINE+0x29c>)
 800376a:	7859      	ldrb	r1, [r3, #1]
 800376c:	1813      	adds	r3, r2, r0
 800376e:	460a      	mov	r2, r1
 8003770:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <send_DHCP_DECLINE+0x290>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	8179      	strh	r1, [r7, #10]
 800377e:	4618      	mov	r0, r3
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <send_DHCP_DECLINE+0x29c>)
 8003782:	7899      	ldrb	r1, [r3, #2]
 8003784:	1813      	adds	r3, r2, r0
 8003786:	460a      	mov	r2, r1
 8003788:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <send_DHCP_DECLINE+0x290>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	897b      	ldrh	r3, [r7, #10]
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	8179      	strh	r1, [r7, #10]
 8003796:	4618      	mov	r0, r3
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <send_DHCP_DECLINE+0x29c>)
 800379a:	78d9      	ldrb	r1, [r3, #3]
 800379c:	1813      	adds	r3, r2, r0
 800379e:	460a      	mov	r2, r1
 80037a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	8179      	strh	r1, [r7, #10]
 80037ae:	4413      	add	r3, r2
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e009      	b.n	80037d0 <send_DHCP_DECLINE+0x258>
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	33ec      	adds	r3, #236	; 0xec
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80037d6:	dbf1      	blt.n	80037bc <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80037d8:	23ff      	movs	r3, #255	; 0xff
 80037da:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80037dc:	23ff      	movs	r3, #255	; 0xff
 80037de:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80037e0:	23ff      	movs	r3, #255	; 0xff
 80037e2:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80037e4:	23ff      	movs	r3, #255	; 0xff
 80037e6:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <send_DHCP_DECLINE+0x2a0>)
 80037ea:	7818      	ldrb	r0, [r3, #0]
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <send_DHCP_DECLINE+0x290>)
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	2243      	movs	r2, #67	; 0x43
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	f44f 7209 	mov.w	r2, #548	; 0x224
 80037fa:	f7fe fa97 	bl	8001d2c <sendto>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000015c 	.word	0x2000015c
 800380c:	20000160 	.word	0x20000160
 8003810:	20000140 	.word	0x20000140
 8003814:	20000134 	.word	0x20000134
 8003818:	20000131 	.word	0x20000131

0800381c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003826:	4ba1      	ldr	r3, [pc, #644]	; (8003aac <parseDHCPMSG+0x290>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fbcf 	bl	8000fce <getSn_RX_RSR>
 8003830:	4603      	mov	r3, r0
 8003832:	823b      	strh	r3, [r7, #16]
 8003834:	8a3b      	ldrh	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d011      	beq.n	800385e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800383a:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <parseDHCPMSG+0x290>)
 800383c:	7818      	ldrb	r0, [r3, #0]
 800383e:	4b9c      	ldr	r3, [pc, #624]	; (8003ab0 <parseDHCPMSG+0x294>)
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	1d3c      	adds	r4, r7, #4
 8003844:	8a3a      	ldrh	r2, [r7, #16]
 8003846:	1cbb      	adds	r3, r7, #2
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4623      	mov	r3, r4
 800384c:	f7fe fbc4 	bl	8001fd8 <recvfrom>
 8003850:	4603      	mov	r3, r0
 8003852:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	2b43      	cmp	r3, #67	; 0x43
 8003858:	f040 81ed 	bne.w	8003c36 <parseDHCPMSG+0x41a>
 800385c:	e001      	b.n	8003862 <parseDHCPMSG+0x46>
   else return 0;
 800385e:	2300      	movs	r3, #0
 8003860:	e1eb      	b.n	8003c3a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003862:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <parseDHCPMSG+0x294>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	7f1a      	ldrb	r2, [r3, #28]
 8003868:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <parseDHCPMSG+0x298>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d124      	bne.n	80038ba <parseDHCPMSG+0x9e>
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <parseDHCPMSG+0x294>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	7f5a      	ldrb	r2, [r3, #29]
 8003876:	4b8f      	ldr	r3, [pc, #572]	; (8003ab4 <parseDHCPMSG+0x298>)
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	429a      	cmp	r2, r3
 800387c:	d11d      	bne.n	80038ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800387e:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <parseDHCPMSG+0x294>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	7f9a      	ldrb	r2, [r3, #30]
 8003884:	4b8b      	ldr	r3, [pc, #556]	; (8003ab4 <parseDHCPMSG+0x298>)
 8003886:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d116      	bne.n	80038ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800388c:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <parseDHCPMSG+0x294>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	7fda      	ldrb	r2, [r3, #31]
 8003892:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <parseDHCPMSG+0x298>)
 8003894:	78db      	ldrb	r3, [r3, #3]
 8003896:	429a      	cmp	r2, r3
 8003898:	d10f      	bne.n	80038ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800389a:	4b85      	ldr	r3, [pc, #532]	; (8003ab0 <parseDHCPMSG+0x294>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f893 2020 	ldrb.w	r2, [r3, #32]
 80038a2:	4b84      	ldr	r3, [pc, #528]	; (8003ab4 <parseDHCPMSG+0x298>)
 80038a4:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d107      	bne.n	80038ba <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80038aa:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <parseDHCPMSG+0x294>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80038b2:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <parseDHCPMSG+0x298>)
 80038b4:	795b      	ldrb	r3, [r3, #5]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e1bd      	b.n	8003c3a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80038be:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <parseDHCPMSG+0xc2>
 80038c6:	4b7c      	ldr	r3, [pc, #496]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <parseDHCPMSG+0xc2>
 80038ce:	4b7a      	ldr	r3, [pc, #488]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038d0:	789b      	ldrb	r3, [r3, #2]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <parseDHCPMSG+0xc2>
 80038d6:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038d8:	78db      	ldrb	r3, [r3, #3]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d029      	beq.n	8003932 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 80038de:	793a      	ldrb	r2, [r7, #4]
 80038e0:	4b75      	ldr	r3, [pc, #468]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d10e      	bne.n	8003906 <parseDHCPMSG+0xea>
 80038e8:	797a      	ldrb	r2, [r7, #5]
 80038ea:	4b73      	ldr	r3, [pc, #460]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d109      	bne.n	8003906 <parseDHCPMSG+0xea>
 80038f2:	79ba      	ldrb	r2, [r7, #6]
 80038f4:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <parseDHCPMSG+0x29c>)
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d104      	bne.n	8003906 <parseDHCPMSG+0xea>
 80038fc:	79fa      	ldrb	r2, [r7, #7]
 80038fe:	4b6e      	ldr	r3, [pc, #440]	; (8003ab8 <parseDHCPMSG+0x29c>)
 8003900:	78db      	ldrb	r3, [r3, #3]
 8003902:	429a      	cmp	r2, r3
 8003904:	d015      	beq.n	8003932 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003906:	793a      	ldrb	r2, [r7, #4]
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <parseDHCPMSG+0x2a0>)
 800390a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800390c:	429a      	cmp	r2, r3
 800390e:	d10e      	bne.n	800392e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003910:	797a      	ldrb	r2, [r7, #5]
 8003912:	4b6a      	ldr	r3, [pc, #424]	; (8003abc <parseDHCPMSG+0x2a0>)
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	429a      	cmp	r2, r3
 8003918:	d109      	bne.n	800392e <parseDHCPMSG+0x112>
 800391a:	79ba      	ldrb	r2, [r7, #6]
 800391c:	4b67      	ldr	r3, [pc, #412]	; (8003abc <parseDHCPMSG+0x2a0>)
 800391e:	789b      	ldrb	r3, [r3, #2]
 8003920:	429a      	cmp	r2, r3
 8003922:	d104      	bne.n	800392e <parseDHCPMSG+0x112>
 8003924:	79fa      	ldrb	r2, [r7, #7]
 8003926:	4b65      	ldr	r3, [pc, #404]	; (8003abc <parseDHCPMSG+0x2a0>)
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	429a      	cmp	r2, r3
 800392c:	d001      	beq.n	8003932 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800392e:	2300      	movs	r3, #0
 8003930:	e183      	b.n	8003c3a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003932:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <parseDHCPMSG+0x294>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	33f0      	adds	r3, #240	; 0xf0
 800393c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800393e:	8a3b      	ldrh	r3, [r7, #16]
 8003940:	3bf0      	subs	r3, #240	; 0xf0
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003948:	e170      	b.n	8003c2c <parseDHCPMSG+0x410>

			switch ( *p ) {
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b36      	cmp	r3, #54	; 0x36
 8003950:	dc76      	bgt.n	8003a40 <parseDHCPMSG+0x224>
 8003952:	2b00      	cmp	r3, #0
 8003954:	f2c0 815d 	blt.w	8003c12 <parseDHCPMSG+0x3f6>
 8003958:	2b36      	cmp	r3, #54	; 0x36
 800395a:	f200 815a 	bhi.w	8003c12 <parseDHCPMSG+0x3f6>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <parseDHCPMSG+0x148>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003a4d 	.word	0x08003a4d
 8003968:	08003a6d 	.word	0x08003a6d
 800396c:	08003c13 	.word	0x08003c13
 8003970:	08003ac5 	.word	0x08003ac5
 8003974:	08003c13 	.word	0x08003c13
 8003978:	08003c13 	.word	0x08003c13
 800397c:	08003b11 	.word	0x08003b11
 8003980:	08003c13 	.word	0x08003c13
 8003984:	08003c13 	.word	0x08003c13
 8003988:	08003c13 	.word	0x08003c13
 800398c:	08003c13 	.word	0x08003c13
 8003990:	08003c13 	.word	0x08003c13
 8003994:	08003c13 	.word	0x08003c13
 8003998:	08003c13 	.word	0x08003c13
 800399c:	08003c13 	.word	0x08003c13
 80039a0:	08003c13 	.word	0x08003c13
 80039a4:	08003c13 	.word	0x08003c13
 80039a8:	08003c13 	.word	0x08003c13
 80039ac:	08003c13 	.word	0x08003c13
 80039b0:	08003c13 	.word	0x08003c13
 80039b4:	08003c13 	.word	0x08003c13
 80039b8:	08003c13 	.word	0x08003c13
 80039bc:	08003c13 	.word	0x08003c13
 80039c0:	08003c13 	.word	0x08003c13
 80039c4:	08003c13 	.word	0x08003c13
 80039c8:	08003c13 	.word	0x08003c13
 80039cc:	08003c13 	.word	0x08003c13
 80039d0:	08003c13 	.word	0x08003c13
 80039d4:	08003c13 	.word	0x08003c13
 80039d8:	08003c13 	.word	0x08003c13
 80039dc:	08003c13 	.word	0x08003c13
 80039e0:	08003c13 	.word	0x08003c13
 80039e4:	08003c13 	.word	0x08003c13
 80039e8:	08003c13 	.word	0x08003c13
 80039ec:	08003c13 	.word	0x08003c13
 80039f0:	08003c13 	.word	0x08003c13
 80039f4:	08003c13 	.word	0x08003c13
 80039f8:	08003c13 	.word	0x08003c13
 80039fc:	08003c13 	.word	0x08003c13
 8003a00:	08003c13 	.word	0x08003c13
 8003a04:	08003c13 	.word	0x08003c13
 8003a08:	08003c13 	.word	0x08003c13
 8003a0c:	08003c13 	.word	0x08003c13
 8003a10:	08003c13 	.word	0x08003c13
 8003a14:	08003c13 	.word	0x08003c13
 8003a18:	08003c13 	.word	0x08003c13
 8003a1c:	08003c13 	.word	0x08003c13
 8003a20:	08003c13 	.word	0x08003c13
 8003a24:	08003c13 	.word	0x08003c13
 8003a28:	08003c13 	.word	0x08003c13
 8003a2c:	08003c13 	.word	0x08003c13
 8003a30:	08003b5d 	.word	0x08003b5d
 8003a34:	08003c13 	.word	0x08003c13
 8003a38:	08003a55 	.word	0x08003a55
 8003a3c:	08003bb9 	.word	0x08003bb9
 8003a40:	2bff      	cmp	r3, #255	; 0xff
 8003a42:	f040 80e6 	bne.w	8003c12 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	617b      	str	r3, [r7, #20]
   				break;
 8003a4a:	e0ef      	b.n	8003c2c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
   				break;
 8003a52:	e0eb      	b.n	8003c2c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3301      	adds	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
   				p++;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	617a      	str	r2, [r7, #20]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	74fb      	strb	r3, [r7, #19]
   				break;
 8003a6a:	e0df      	b.n	8003c2c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
   				p++;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	617a      	str	r2, [r7, #20]
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <parseDHCPMSG+0x2a4>)
 8003a82:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	617a      	str	r2, [r7, #20]
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <parseDHCPMSG+0x2a4>)
 8003a8e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	617a      	str	r2, [r7, #20]
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <parseDHCPMSG+0x2a4>)
 8003a9a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	617a      	str	r2, [r7, #20]
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <parseDHCPMSG+0x2a4>)
 8003aa6:	70da      	strb	r2, [r3, #3]
   				break;
 8003aa8:	e0c0      	b.n	8003c2c <parseDHCPMSG+0x410>
 8003aaa:	bf00      	nop
 8003aac:	20000131 	.word	0x20000131
 8003ab0:	2000015c 	.word	0x2000015c
 8003ab4:	20000160 	.word	0x20000160
 8003ab8:	20000134 	.word	0x20000134
 8003abc:	20000138 	.word	0x20000138
 8003ac0:	20000148 	.word	0x20000148
   			case routersOnSubnet :
   				p++;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	617a      	str	r2, [r7, #20]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	617a      	str	r2, [r7, #20]
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <parseDHCPMSG+0x428>)
 8003ade:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	617a      	str	r2, [r7, #20]
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <parseDHCPMSG+0x428>)
 8003aea:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	617a      	str	r2, [r7, #20]
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <parseDHCPMSG+0x428>)
 8003af6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	617a      	str	r2, [r7, #20]
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <parseDHCPMSG+0x428>)
 8003b02:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003b04:	7afb      	ldrb	r3, [r7, #11]
 8003b06:	3b04      	subs	r3, #4
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
   				break;
 8003b0e:	e08d      	b.n	8003c2c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3301      	adds	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	617a      	str	r2, [r7, #20]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	617a      	str	r2, [r7, #20]
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <parseDHCPMSG+0x42c>)
 8003b2a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	617a      	str	r2, [r7, #20]
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <parseDHCPMSG+0x42c>)
 8003b36:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	617a      	str	r2, [r7, #20]
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <parseDHCPMSG+0x42c>)
 8003b42:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	617a      	str	r2, [r7, #20]
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <parseDHCPMSG+0x42c>)
 8003b4e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003b50:	7afb      	ldrb	r3, [r7, #11]
 8003b52:	3b04      	subs	r3, #4
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4413      	add	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
   				break;
 8003b5a:	e067      	b.n	8003c2c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	617a      	str	r2, [r7, #20]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	617a      	str	r2, [r7, #20]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b35      	ldr	r3, [pc, #212]	; (8003c4c <parseDHCPMSG+0x430>)
 8003b78:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <parseDHCPMSG+0x430>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1c59      	adds	r1, r3, #1
 8003b84:	6179      	str	r1, [r7, #20]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <parseDHCPMSG+0x430>)
 8003b8c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <parseDHCPMSG+0x430>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1c59      	adds	r1, r3, #1
 8003b98:	6179      	str	r1, [r7, #20]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <parseDHCPMSG+0x430>)
 8003ba0:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <parseDHCPMSG+0x430>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1c59      	adds	r1, r3, #1
 8003bac:	6179      	str	r1, [r7, #20]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <parseDHCPMSG+0x430>)
 8003bb4:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003bb6:	e039      	b.n	8003c2c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	617a      	str	r2, [r7, #20]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	617a      	str	r2, [r7, #20]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <parseDHCPMSG+0x434>)
 8003bd2:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	617a      	str	r2, [r7, #20]
 8003bda:	781a      	ldrb	r2, [r3, #0]
 8003bdc:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <parseDHCPMSG+0x434>)
 8003bde:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	617a      	str	r2, [r7, #20]
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <parseDHCPMSG+0x434>)
 8003bea:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	617a      	str	r2, [r7, #20]
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <parseDHCPMSG+0x434>)
 8003bf6:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003bf8:	793a      	ldrb	r2, [r7, #4]
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <parseDHCPMSG+0x438>)
 8003bfc:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003bfe:	797a      	ldrb	r2, [r7, #5]
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <parseDHCPMSG+0x438>)
 8003c02:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003c04:	79ba      	ldrb	r2, [r7, #6]
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <parseDHCPMSG+0x438>)
 8003c08:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003c0a:	79fa      	ldrb	r2, [r7, #7]
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <parseDHCPMSG+0x438>)
 8003c0e:	70da      	strb	r2, [r3, #3]
   				break;
 8003c10:	e00c      	b.n	8003c2c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	3301      	adds	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	617a      	str	r2, [r7, #20]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
   				break;
 8003c2a:	bf00      	nop
		while ( p < e ) {
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f4ff ae8a 	bcc.w	800394a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003c36:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd90      	pop	{r4, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000144 	.word	0x20000144
 8003c48:	2000014c 	.word	0x2000014c
 8003c4c:	20000030 	.word	0x20000030
 8003c50:	20000134 	.word	0x20000134
 8003c54:	20000138 	.word	0x20000138

08003c58 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003c5e:	4b7e      	ldr	r3, [pc, #504]	; (8003e58 <DHCP_run+0x200>)
 8003c60:	f993 3000 	ldrsb.w	r3, [r3]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d101      	bne.n	8003c6c <DHCP_run+0x14>
 8003c68:	2305      	movs	r3, #5
 8003c6a:	e0f1      	b.n	8003e50 <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003c6c:	4b7b      	ldr	r3, [pc, #492]	; (8003e5c <DHCP_run+0x204>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	3304      	adds	r3, #4
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	3303      	adds	r3, #3
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd f89c 	bl	8000db4 <WIZCHIP_READ>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b22      	cmp	r3, #34	; 0x22
 8003c80:	d006      	beq.n	8003c90 <DHCP_run+0x38>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <DHCP_run+0x204>)
 8003c84:	7818      	ldrb	r0, [r3, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	2244      	movs	r2, #68	; 0x44
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	f7fd fbfc 	bl	8001488 <socket>

	ret = DHCP_RUNNING;
 8003c90:	2301      	movs	r3, #1
 8003c92:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003c94:	f7ff fdc2 	bl	800381c <parseDHCPMSG>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003c9c:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <DHCP_run+0x200>)
 8003c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	f200 80d0 	bhi.w	8003e48 <DHCP_run+0x1f0>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <DHCP_run+0x58>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc5 	.word	0x08003cc5
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003d2d 	.word	0x08003d2d
 8003cbc:	08003d7d 	.word	0x08003d7d
 8003cc0:	08003dd7 	.word	0x08003dd7
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003cc4:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <DHCP_run+0x208>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003cca:	4b65      	ldr	r3, [pc, #404]	; (8003e60 <DHCP_run+0x208>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003cd0:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <DHCP_run+0x208>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <DHCP_run+0x208>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003cdc:	f7fe fffc 	bl	8002cd8 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003ce0:	4b5d      	ldr	r3, [pc, #372]	; (8003e58 <DHCP_run+0x200>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
   		break;
 8003ce6:	e0b2      	b.n	8003e4e <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003ce8:	79bb      	ldrb	r3, [r7, #6]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d119      	bne.n	8003d22 <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003cee:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <DHCP_run+0x20c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	7c1a      	ldrb	r2, [r3, #16]
 8003cf4:	4b5a      	ldr	r3, [pc, #360]	; (8003e60 <DHCP_run+0x208>)
 8003cf6:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <DHCP_run+0x20c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	7c5a      	ldrb	r2, [r3, #17]
 8003cfe:	4b58      	ldr	r3, [pc, #352]	; (8003e60 <DHCP_run+0x208>)
 8003d00:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003d02:	4b58      	ldr	r3, [pc, #352]	; (8003e64 <DHCP_run+0x20c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	7c9a      	ldrb	r2, [r3, #18]
 8003d08:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <DHCP_run+0x208>)
 8003d0a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003d0c:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <DHCP_run+0x20c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	7cda      	ldrb	r2, [r3, #19]
 8003d12:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <DHCP_run+0x208>)
 8003d14:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8003d16:	f7ff f9a5 	bl	8003064 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <DHCP_run+0x200>)
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8003d20:	e095      	b.n	8003e4e <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003d22:	f000 f8c1 	bl	8003ea8 <check_DHCP_timeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
         break;
 8003d2a:	e090      	b.n	8003e4e <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8003d2c:	79bb      	ldrb	r3, [r7, #6]
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d116      	bne.n	8003d60 <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8003d32:	f000 f919 	bl	8003f68 <check_DHCP_leasedIP>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8003d3c:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <DHCP_run+0x210>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4798      	blx	r3
					reset_DHCP_timeout();
 8003d42:	f000 f9dd 	bl	8004100 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <DHCP_run+0x200>)
 8003d48:	2203      	movs	r2, #3
 8003d4a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003d4c:	e07f      	b.n	8003e4e <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 8003d4e:	f000 f9d7 	bl	8004100 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8003d52:	4b46      	ldr	r3, [pc, #280]	; (8003e6c <DHCP_run+0x214>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <DHCP_run+0x200>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
		break;
 8003d5e:	e076      	b.n	8003e4e <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8003d60:	79bb      	ldrb	r3, [r7, #6]
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d105      	bne.n	8003d72 <DHCP_run+0x11a>
				reset_DHCP_timeout();
 8003d66:	f000 f9cb 	bl	8004100 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <DHCP_run+0x200>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
		break;
 8003d70:	e06d      	b.n	8003e4e <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003d72:	f000 f899 	bl	8003ea8 <check_DHCP_timeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
		break;
 8003d7a:	e068      	b.n	8003e4e <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <DHCP_run+0x218>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d060      	beq.n	8003e4c <DHCP_run+0x1f4>
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <DHCP_run+0x218>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	085a      	lsrs	r2, r3, #1
 8003d90:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <DHCP_run+0x21c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d259      	bcs.n	8003e4c <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <DHCP_run+0x208>)
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <DHCP_run+0x220>)
 8003da2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8003da4:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <DHCP_run+0x208>)
 8003da6:	785a      	ldrb	r2, [r3, #1]
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <DHCP_run+0x220>)
 8003daa:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003dac:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <DHCP_run+0x208>)
 8003dae:	789a      	ldrb	r2, [r3, #2]
 8003db0:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <DHCP_run+0x220>)
 8003db2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8003db4:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <DHCP_run+0x208>)
 8003db6:	78da      	ldrb	r2, [r3, #3]
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <DHCP_run+0x220>)
 8003dba:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003dbc:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <DHCP_run+0x224>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a2e      	ldr	r2, [pc, #184]	; (8003e7c <DHCP_run+0x224>)
 8003dc4:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8003dc6:	f7ff f94d 	bl	8003064 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003dca:	f000 f999 	bl	8004100 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003dce:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <DHCP_run+0x200>)
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003dd4:	e03a      	b.n	8003e4c <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8003dda:	79bb      	ldrb	r3, [r7, #6]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d125      	bne.n	8003e2c <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <DHCP_run+0x228>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <DHCP_run+0x220>)
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <DHCP_run+0x208>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d111      	bne.n	8003e16 <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003df2:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <DHCP_run+0x220>)
 8003df4:	785a      	ldrb	r2, [r3, #1]
 8003df6:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <DHCP_run+0x208>)
 8003df8:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d10b      	bne.n	8003e16 <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <DHCP_run+0x220>)
 8003e00:	789a      	ldrb	r2, [r3, #2]
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <DHCP_run+0x208>)
 8003e04:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d105      	bne.n	8003e16 <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <DHCP_run+0x220>)
 8003e0c:	78da      	ldrb	r2, [r3, #3]
 8003e0e:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <DHCP_run+0x208>)
 8003e10:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d004      	beq.n	8003e20 <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 8003e16:	2303      	movs	r3, #3
 8003e18:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <DHCP_run+0x22c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8003e20:	f000 f96e 	bl	8004100 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <DHCP_run+0x200>)
 8003e26:	2203      	movs	r2, #3
 8003e28:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8003e2a:	e010      	b.n	8003e4e <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8003e2c:	79bb      	ldrb	r3, [r7, #6]
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d105      	bne.n	8003e3e <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 8003e32:	f000 f965 	bl	8004100 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <DHCP_run+0x200>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
	   	break;
 8003e3c:	e007      	b.n	8003e4e <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003e3e:	f000 f833 	bl	8003ea8 <check_DHCP_timeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
	   	break;
 8003e46:	e002      	b.n	8003e4e <DHCP_run+0x1f6>
		default :
   		break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <DHCP_run+0x1f6>
		break;
 8003e4c:	bf00      	nop
	}

	return ret;
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000150 	.word	0x20000150
 8003e5c:	20000131 	.word	0x20000131
 8003e60:	20000140 	.word	0x20000140
 8003e64:	2000015c 	.word	0x2000015c
 8003e68:	20000040 	.word	0x20000040
 8003e6c:	20000048 	.word	0x20000048
 8003e70:	20000030 	.word	0x20000030
 8003e74:	20000154 	.word	0x20000154
 8003e78:	2000013c 	.word	0x2000013c
 8003e7c:	20000158 	.word	0x20000158
 8003e80:	20000151 	.word	0x20000151
 8003e84:	20000044 	.word	0x20000044

08003e88 <DHCP_stop>:

void    DHCP_stop(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <DHCP_stop+0x18>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd fbfb 	bl	800168c <close>
   dhcp_state = STATE_DHCP_STOP;
 8003e96:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <DHCP_stop+0x1c>)
 8003e98:	2206      	movs	r2, #6
 8003e9a:	701a      	strb	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000131 	.word	0x20000131
 8003ea4:	20000150 	.word	0x20000150

08003ea8 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <check_DHCP_timeout+0xb0>)
 8003eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	dc2d      	bgt.n	8003f18 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003ebc:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <check_DHCP_timeout+0xb4>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <check_DHCP_timeout+0xb8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d242      	bcs.n	8003f4e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <check_DHCP_timeout+0xbc>)
 8003eca:	f993 3000 	ldrsb.w	r3, [r3]
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d00c      	beq.n	8003eec <check_DHCP_timeout+0x44>
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	dc0d      	bgt.n	8003ef2 <check_DHCP_timeout+0x4a>
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d002      	beq.n	8003ee0 <check_DHCP_timeout+0x38>
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8003ede:	e008      	b.n	8003ef2 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8003ee0:	f7fe fefa 	bl	8002cd8 <send_DHCP_DISCOVER>
				break;
 8003ee4:	e006      	b.n	8003ef4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003ee6:	f7ff f8bd 	bl	8003064 <send_DHCP_REQUEST>
				break;
 8003eea:	e003      	b.n	8003ef4 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003eec:	f7ff f8ba 	bl	8003064 <send_DHCP_REQUEST>
				break;
 8003ef0:	e000      	b.n	8003ef4 <check_DHCP_timeout+0x4c>
				break;
 8003ef2:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <check_DHCP_timeout+0xb8>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8003efa:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <check_DHCP_timeout+0xb8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330a      	adds	r3, #10
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <check_DHCP_timeout+0xb4>)
 8003f02:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <check_DHCP_timeout+0xb0>)
 8003f06:	f993 3000 	ldrsb.w	r3, [r3]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	b25a      	sxtb	r2, r3
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <check_DHCP_timeout+0xb0>)
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e01a      	b.n	8003f4e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <check_DHCP_timeout+0xbc>)
 8003f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d00c      	beq.n	8003f3c <check_DHCP_timeout+0x94>
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	dc10      	bgt.n	8003f48 <check_DHCP_timeout+0xa0>
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d002      	beq.n	8003f30 <check_DHCP_timeout+0x88>
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d006      	beq.n	8003f3c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8003f2e:	e00b      	b.n	8003f48 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <check_DHCP_timeout+0xbc>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8003f36:	2300      	movs	r3, #0
 8003f38:	71fb      	strb	r3, [r7, #7]
				break;
 8003f3a:	e006      	b.n	8003f4a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8003f3c:	f7fe fecc 	bl	8002cd8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <check_DHCP_timeout+0xbc>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
				break;
 8003f46:	e000      	b.n	8003f4a <check_DHCP_timeout+0xa2>
				break;
 8003f48:	bf00      	nop
		}
		reset_DHCP_timeout();
 8003f4a:	f000 f8d9 	bl	8004100 <reset_DHCP_timeout>
	}
	return ret;
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000151 	.word	0x20000151
 8003f5c:	20000034 	.word	0x20000034
 8003f60:	20000154 	.word	0x20000154
 8003f64:	20000150 	.word	0x20000150

08003f68 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8003f6e:	2019      	movs	r0, #25
 8003f70:	f7fc ff20 	bl	8000db4 <WIZCHIP_READ>
 8003f74:	4603      	mov	r3, r0
 8003f76:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8003f78:	2103      	movs	r1, #3
 8003f7a:	2019      	movs	r0, #25
 8003f7c:	f7fc feec 	bl	8000d58 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <check_DHCP_leasedIP+0x68>)
 8003f82:	7818      	ldrb	r0, [r3, #0]
 8003f84:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <check_DHCP_leasedIP+0x6c>)
 8003f8c:	2211      	movs	r2, #17
 8003f8e:	4912      	ldr	r1, [pc, #72]	; (8003fd8 <check_DHCP_leasedIP+0x70>)
 8003f90:	f7fd fecc 	bl	8001d2c <sendto>
 8003f94:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	2019      	movs	r0, #25
 8003f9c:	f7fc fedc 	bl	8000d58 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f113 0f0d 	cmn.w	r3, #13
 8003fa6:	d101      	bne.n	8003fac <check_DHCP_leasedIP+0x44>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e00c      	b.n	8003fc6 <check_DHCP_leasedIP+0x5e>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8003fac:	f7ff fae4 	bl	8003578 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <check_DHCP_leasedIP+0x74>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8003fb6:	bf00      	nop
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <check_DHCP_leasedIP+0x74>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d9f9      	bls.n	8003fb8 <check_DHCP_leasedIP+0x50>

		return 0;
 8003fc4:	2300      	movs	r3, #0
	}
}	
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000131 	.word	0x20000131
 8003fd4:	20000140 	.word	0x20000140
 8003fd8:	0800cc10 	.word	0x0800cc10
 8003fdc:	20000154 	.word	0x20000154

08003fe0 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	6039      	str	r1, [r7, #0]
 8003fea:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	493d      	ldr	r1, [pc, #244]	; (80040e8 <DHCP_init+0x108>)
 8003ff4:	2009      	movs	r0, #9
 8003ff6:	f7fc ff59 	bl	8000eac <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <DHCP_init+0x108>)
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <DHCP_init+0x108>)
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	4313      	orrs	r3, r2
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <DHCP_init+0x108>)
 8004008:	789b      	ldrb	r3, [r3, #2]
 800400a:	4313      	orrs	r3, r2
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <DHCP_init+0x108>)
 8004010:	78db      	ldrb	r3, [r3, #3]
 8004012:	4313      	orrs	r3, r2
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <DHCP_init+0x108>)
 8004018:	791b      	ldrb	r3, [r3, #4]
 800401a:	4313      	orrs	r3, r2
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <DHCP_init+0x108>)
 8004020:	795b      	ldrb	r3, [r3, #5]
 8004022:	4313      	orrs	r3, r2
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <DHCP_init+0x78>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <DHCP_init+0x108>)
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8004030:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <DHCP_init+0x108>)
 8004032:	2208      	movs	r2, #8
 8004034:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <DHCP_init+0x108>)
 8004038:	22dc      	movs	r2, #220	; 0xdc
 800403a:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <DHCP_init+0x108>)
 800403e:	2200      	movs	r2, #0
 8004040:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <DHCP_init+0x108>)
 8004044:	2200      	movs	r2, #0
 8004046:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <DHCP_init+0x108>)
 800404a:	2200      	movs	r2, #0
 800404c:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800404e:	2206      	movs	r2, #6
 8004050:	4925      	ldr	r1, [pc, #148]	; (80040e8 <DHCP_init+0x108>)
 8004052:	2009      	movs	r0, #9
 8004054:	f7fc fedc 	bl	8000e10 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <DHCP_init+0x10c>)
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800405e:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <DHCP_init+0x110>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <DHCP_init+0x114>)
 8004066:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <DHCP_init+0x118>)
 8004068:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800406a:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <DHCP_init+0x108>)
 800406c:	78db      	ldrb	r3, [r3, #3]
 800406e:	461a      	mov	r2, r3
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <DHCP_init+0x114>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4413      	add	r3, r2
 8004076:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <DHCP_init+0x114>)
 8004078:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800407a:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <DHCP_init+0x108>)
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <DHCP_init+0x114>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4413      	add	r3, r2
 8004086:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <DHCP_init+0x114>)
 8004088:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <DHCP_init+0x108>)
 800408c:	795b      	ldrb	r3, [r3, #5]
 800408e:	461a      	mov	r2, r3
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <DHCP_init+0x114>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4413      	add	r3, r2
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <DHCP_init+0x114>)
 8004098:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <DHCP_init+0x108>)
 800409c:	78da      	ldrb	r2, [r3, #3]
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <DHCP_init+0x108>)
 80040a0:	791b      	ldrb	r3, [r3, #4]
 80040a2:	4053      	eors	r3, r2
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <DHCP_init+0x108>)
 80040a8:	795b      	ldrb	r3, [r3, #5]
 80040aa:	4053      	eors	r3, r2
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <DHCP_init+0x114>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <DHCP_init+0x114>)
 80040b8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80040ba:	f107 030c 	add.w	r3, r7, #12
 80040be:	2204      	movs	r2, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	200f      	movs	r0, #15
 80040c4:	f7fc fea4 	bl	8000e10 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	2204      	movs	r2, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	2001      	movs	r0, #1
 80040d2:	f7fc fe9d 	bl	8000e10 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80040d6:	f000 f813 	bl	8004100 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <DHCP_init+0x11c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000160 	.word	0x20000160
 80040ec:	20000131 	.word	0x20000131
 80040f0:	2000015c 	.word	0x2000015c
 80040f4:	20000158 	.word	0x20000158
 80040f8:	12345678 	.word	0x12345678
 80040fc:	20000150 	.word	0x20000150

08004100 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <reset_DHCP_timeout+0x20>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <reset_DHCP_timeout+0x24>)
 800410c:	220a      	movs	r2, #10
 800410e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <reset_DHCP_timeout+0x28>)
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	20000154 	.word	0x20000154
 8004124:	20000034 	.word	0x20000034
 8004128:	20000151 	.word	0x20000151

0800412c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2b09      	cmp	r3, #9
 8004142:	d803      	bhi.n	800414c <NibbleToHex+0x20>
    return nibble + '0';
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	3330      	adds	r3, #48	; 0x30
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e002      	b.n	8004152 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	3337      	adds	r3, #55	; 0x37
 8004150:	b2db      	uxtb	r3, r3
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b29a      	uxth	r2, r3
 800417a:	89fb      	ldrh	r3, [r7, #14]
 800417c:	4413      	add	r3, r2
 800417e:	81fb      	strh	r3, [r7, #14]
	return i;
 8004180:	89fb      	ldrh	r3, [r7, #14]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	b299      	uxth	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	b2ca      	uxtb	r2, r1
 80041a8:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	887a      	ldrh	r2, [r7, #2]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
	return s;
 80041b6:	687b      	ldr	r3, [r7, #4]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b08b      	sub	sp, #44	; 0x2c
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	623a      	str	r2, [r7, #32]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <parse_name+0x34>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	3301      	adds	r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 80041f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004200:	d117      	bne.n	8004232 <parse_name+0x6e>
		{
			if (!indirect)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <parse_name+0x4a>
				clen++;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3301      	adds	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800421a:	6a3a      	ldr	r2, [r7, #32]
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	4413      	add	r3, r2
 8004220:	461a      	mov	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	623a      	str	r2, [r7, #32]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02b      	beq.n	8004290 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004238:	887a      	ldrh	r2, [r7, #2]
 800423a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29b      	uxth	r3, r3
 8004244:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8004246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800424a:	2b00      	cmp	r3, #0
 800424c:	da02      	bge.n	8004254 <parse_name+0x90>
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e038      	b.n	80042c6 <parse_name+0x102>

		if (!indirect) clen += slen;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <parse_name+0xb0>
 800425a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8004262:	e007      	b.n	8004274 <parse_name+0xb0>
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	1c53      	adds	r3, r2, #1
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	6079      	str	r1, [r7, #4]
 8004270:	7812      	ldrb	r2, [r2, #0]
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	84fa      	strh	r2, [r7, #38]	; 0x26
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f2      	bne.n	8004264 <parse_name+0xa0>
		*buf++ = '.';
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	222e      	movs	r2, #46	; 0x2e
 8004286:	701a      	strb	r2, [r3, #0]
		nseg++;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800428e:	e7a8      	b.n	80041e2 <parse_name+0x1e>
			break;
 8004290:	bf00      	nop
	}

	if (nseg == 0)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	222e      	movs	r2, #46	; 0x2e
 80042a0:	701a      	strb	r2, [r3, #0]
		len--;
 80042a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
	len--;
 80042b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80042c4:	69fb      	ldr	r3, [r7, #28]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	372c      	adds	r7, #44	; 0x2c
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b0b4      	sub	sp, #208	; 0xd0
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80042dc:	f107 020c 	add.w	r2, r7, #12
 80042e0:	23c0      	movs	r3, #192	; 0xc0
 80042e2:	6839      	ldr	r1, [r7, #0]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff6d 	bl	80041c4 <parse_name>
 80042ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 80042ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d101      	bne.n	80042fc <dns_question+0x2a>
 80042f8:	2300      	movs	r3, #0
 80042fa:	e00b      	b.n	8004314 <dns_question+0x42>

	cp += len;
 80042fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4413      	add	r3, r2
 8004304:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	3302      	adds	r3, #2
 800430a:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3302      	adds	r3, #2
 8004310:	603b      	str	r3, [r7, #0]

	return cp;
 8004312:	683b      	ldr	r3, [r7, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	37d0      	adds	r7, #208	; 0xd0
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0b6      	sub	sp, #216	; 0xd8
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004328:	f107 0210 	add.w	r2, r7, #16
 800432c:	23c0      	movs	r3, #192	; 0xc0
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff ff47 	bl	80041c4 <parse_name>
 8004336:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800433a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d101      	bne.n	8004348 <dns_answer+0x2c>
 8004344:	2300      	movs	r3, #0
 8004346:	e0f9      	b.n	800453c <dns_answer+0x220>

	cp += len;
 8004348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	4413      	add	r3, r2
 8004350:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8004352:	68b8      	ldr	r0, [r7, #8]
 8004354:	f7ff ff03 	bl	800415e <get16>
 8004358:	4603      	mov	r3, r0
 800435a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3302      	adds	r3, #2
 8004362:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3302      	adds	r3, #2
 8004368:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	3304      	adds	r3, #4
 800436e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	3302      	adds	r3, #2
 8004374:	60bb      	str	r3, [r7, #8]


	switch (type)
 8004376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800437a:	2b10      	cmp	r3, #16
 800437c:	f000 80da 	beq.w	8004534 <dns_answer+0x218>
 8004380:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004384:	2b10      	cmp	r3, #16
 8004386:	f300 80d7 	bgt.w	8004538 <dns_answer+0x21c>
 800438a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d07d      	beq.n	800448e <dns_answer+0x172>
 8004392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004396:	2b0f      	cmp	r3, #15
 8004398:	f300 80ce 	bgt.w	8004538 <dns_answer+0x21c>
 800439c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	dc26      	bgt.n	80043f2 <dns_answer+0xd6>
 80043a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f340 80c5 	ble.w	8004538 <dns_answer+0x21c>
 80043ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043b2:	2201      	movs	r2, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	f241 32a4 	movw	r2, #5028	; 0x13a4
 80043bc:	401a      	ands	r2, r3
 80043be:	2a00      	cmp	r2, #0
 80043c0:	bf14      	ite	ne
 80043c2:	2201      	movne	r2, #1
 80043c4:	2200      	moveq	r2, #0
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	d133      	bne.n	8004434 <dns_answer+0x118>
 80043cc:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80043d0:	2a00      	cmp	r2, #0
 80043d2:	bf14      	ite	ne
 80043d4:	2201      	movne	r2, #1
 80043d6:	2200      	moveq	r2, #0
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d170      	bne.n	80044c0 <dns_answer+0x1a4>
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf14      	ite	ne
 80043e6:	2301      	movne	r3, #1
 80043e8:	2300      	moveq	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80043f0:	e0a2      	b.n	8004538 <dns_answer+0x21c>
	switch (type)
 80043f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043f6:	2b0d      	cmp	r3, #13
 80043f8:	d032      	beq.n	8004460 <dns_answer+0x144>
		break;
 80043fa:	e09d      	b.n	8004538 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	60ba      	str	r2, [r7, #8]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	60ba      	str	r2, [r7, #8]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	3201      	adds	r2, #1
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	60ba      	str	r2, [r7, #8]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	3202      	adds	r2, #2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	60ba      	str	r2, [r7, #8]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	3203      	adds	r2, #3
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	7013      	strb	r3, [r2, #0]
		break;
 8004432:	e082      	b.n	800453a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004434:	f107 0210 	add.w	r2, r7, #16
 8004438:	23c0      	movs	r3, #192	; 0xc0
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fec1 	bl	80041c4 <parse_name>
 8004442:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d101      	bne.n	8004454 <dns_answer+0x138>
 8004450:	2300      	movs	r3, #0
 8004452:	e073      	b.n	800453c <dns_answer+0x220>
		cp += len;
 8004454:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	4413      	add	r3, r2
 800445c:	60bb      	str	r3, [r7, #8]
		break;
 800445e:	e06c      	b.n	800453a <dns_answer+0x21e>
		len = *cp++;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	60ba      	str	r2, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800446c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	4413      	add	r3, r2
 8004474:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	60ba      	str	r2, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8004482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
		break;
 800448c:	e055      	b.n	800453a <dns_answer+0x21e>
		cp += 2;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3302      	adds	r3, #2
 8004492:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8004494:	f107 0210 	add.w	r2, r7, #16
 8004498:	23c0      	movs	r3, #192	; 0xc0
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fe91 	bl	80041c4 <parse_name>
 80044a2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80044a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d101      	bne.n	80044b4 <dns_answer+0x198>
 80044b0:	2300      	movs	r3, #0
 80044b2:	e043      	b.n	800453c <dns_answer+0x220>
		cp += len;
 80044b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	4413      	add	r3, r2
 80044bc:	60bb      	str	r3, [r7, #8]
		break;
 80044be:	e03c      	b.n	800453a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80044c0:	f107 0210 	add.w	r2, r7, #16
 80044c4:	23c0      	movs	r3, #192	; 0xc0
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff fe7b 	bl	80041c4 <parse_name>
 80044ce:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80044d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d101      	bne.n	80044e0 <dns_answer+0x1c4>
 80044dc:	2300      	movs	r3, #0
 80044de:	e02d      	b.n	800453c <dns_answer+0x220>
		cp += len;
 80044e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4413      	add	r3, r2
 80044e8:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80044ea:	f107 0210 	add.w	r2, r7, #16
 80044ee:	23c0      	movs	r3, #192	; 0xc0
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff fe66 	bl	80041c4 <parse_name>
 80044f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80044fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d101      	bne.n	800450a <dns_answer+0x1ee>
 8004506:	2300      	movs	r3, #0
 8004508:	e018      	b.n	800453c <dns_answer+0x220>
		cp += len;
 800450a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3304      	adds	r3, #4
 8004518:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3304      	adds	r3, #4
 800451e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3304      	adds	r3, #4
 8004524:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3304      	adds	r3, #4
 800452a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	3304      	adds	r3, #4
 8004530:	60bb      	str	r3, [r7, #8]
		break;
 8004532:	e002      	b.n	800453a <dns_answer+0x21e>
		break;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <dns_answer+0x21e>
		break;
 8004538:	bf00      	nop
	}

	return cp;
 800453a:	68bb      	ldr	r3, [r7, #8]
}
 800453c:	4618      	mov	r0, r3
 800453e:	37d8      	adds	r7, #216	; 0xd8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8004554:	2212      	movs	r2, #18
 8004556:	2100      	movs	r1, #0
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f007 fde1 	bl	800c120 <memset>

	pdhdr->id = get16(&msg[0]);
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff fdfd 	bl	800415e <get16>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3302      	adds	r3, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fdf4 	bl	800415e <get16>
 8004576:	4603      	mov	r3, r0
 8004578:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800457a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800457e:	2b00      	cmp	r3, #0
 8004580:	da02      	bge.n	8004588 <parseDNSMSG+0x44>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8004588:	8a7b      	ldrh	r3, [r7, #18]
 800458a:	0adb      	lsrs	r3, r3, #11
 800458c:	b29b      	uxth	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800459a:	8a7b      	ldrh	r3, [r7, #18]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <parseDNSMSG+0x66>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 80045aa:	8a7b      	ldrh	r3, [r7, #18]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <parseDNSMSG+0x76>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 80045ba:	8a7b      	ldrh	r3, [r7, #18]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <parseDNSMSG+0x86>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 80045ca:	8a7b      	ldrh	r3, [r7, #18]
 80045cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <parseDNSMSG+0x96>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 80045da:	8a7b      	ldrh	r3, [r7, #18]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fdb6 	bl	800415e <get16>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	3306      	adds	r3, #6
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fdad 	bl	800415e <get16>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	3308      	adds	r3, #8
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fda4 	bl	800415e <get16>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	330a      	adds	r3, #10
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fd9b 	bl	800415e <get16>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	330c      	adds	r3, #12
 8004634:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8004636:	2300      	movs	r3, #0
 8004638:	83fb      	strh	r3, [r7, #30]
 800463a:	e00d      	b.n	8004658 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800463c:	69b9      	ldr	r1, [r7, #24]
 800463e:	6978      	ldr	r0, [r7, #20]
 8004640:	f7ff fe47 	bl	80042d2 <dns_question>
 8004644:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <parseDNSMSG+0x10e>
 800464c:	f04f 33ff 	mov.w	r3, #4294967295
 8004650:	e03b      	b.n	80046ca <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8004652:	8bfb      	ldrh	r3, [r7, #30]
 8004654:	3301      	adds	r3, #1
 8004656:	83fb      	strh	r3, [r7, #30]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	895b      	ldrh	r3, [r3, #10]
 800465c:	8bfa      	ldrh	r2, [r7, #30]
 800465e:	429a      	cmp	r2, r3
 8004660:	d3ec      	bcc.n	800463c <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	83fb      	strh	r3, [r7, #30]
 8004666:	e00e      	b.n	8004686 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	69b9      	ldr	r1, [r7, #24]
 800466c:	6978      	ldr	r0, [r7, #20]
 800466e:	f7ff fe55 	bl	800431c <dns_answer>
 8004672:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <parseDNSMSG+0x13c>
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	e024      	b.n	80046ca <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8004680:	8bfb      	ldrh	r3, [r7, #30]
 8004682:	3301      	adds	r3, #1
 8004684:	83fb      	strh	r3, [r7, #30]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	899b      	ldrh	r3, [r3, #12]
 800468a:	8bfa      	ldrh	r2, [r7, #30]
 800468c:	429a      	cmp	r2, r3
 800468e:	d3eb      	bcc.n	8004668 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8004690:	2300      	movs	r3, #0
 8004692:	83fb      	strh	r3, [r7, #30]
 8004694:	e002      	b.n	800469c <parseDNSMSG+0x158>
 8004696:	8bfb      	ldrh	r3, [r7, #30]
 8004698:	3301      	adds	r3, #1
 800469a:	83fb      	strh	r3, [r7, #30]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	89db      	ldrh	r3, [r3, #14]
 80046a0:	8bfa      	ldrh	r2, [r7, #30]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d3f7      	bcc.n	8004696 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 80046a6:	2300      	movs	r3, #0
 80046a8:	83fb      	strh	r3, [r7, #30]
 80046aa:	e002      	b.n	80046b2 <parseDNSMSG+0x16e>
 80046ac:	8bfb      	ldrh	r3, [r7, #30]
 80046ae:	3301      	adds	r3, #1
 80046b0:	83fb      	strh	r3, [r7, #30]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8a1b      	ldrh	r3, [r3, #16]
 80046b6:	8bfa      	ldrh	r2, [r7, #30]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d3f7      	bcc.n	80046ac <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	7a1b      	ldrb	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <parseDNSMSG+0x184>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <parseDNSMSG+0x186>
	else return 0;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b0b8      	sub	sp, #224	; 0xe0
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	461a      	mov	r2, r3
 80046e0:	4603      	mov	r3, r0
 80046e2:	81fb      	strh	r3, [r7, #14]
 80046e4:	4613      	mov	r3, r2
 80046e6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 80046ee:	4b57      	ldr	r3, [pc, #348]	; (800484c <dns_makequery+0x178>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	4b55      	ldr	r3, [pc, #340]	; (800484c <dns_makequery+0x178>)
 80046f8:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80046fa:	4b54      	ldr	r3, [pc, #336]	; (800484c <dns_makequery+0x178>)
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004704:	f7ff fd43 	bl	800418e <put16>
 8004708:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	02db      	lsls	r3, r3, #11
 8004710:	b21b      	sxth	r3, r3
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	b21b      	sxth	r3, r3
 8004718:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 800471c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004720:	4619      	mov	r1, r3
 8004722:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004726:	f7ff fd32 	bl	800418e <put16>
 800472a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 800472e:	2101      	movs	r1, #1
 8004730:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004734:	f7ff fd2b 	bl	800418e <put16>
 8004738:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800473c:	2100      	movs	r1, #0
 800473e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004742:	f7ff fd24 	bl	800418e <put16>
 8004746:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800474a:	2100      	movs	r1, #0
 800474c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004750:	f7ff fd1d 	bl	800418e <put16>
 8004754:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8004758:	2100      	movs	r1, #0
 800475a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800475e:	f7ff fd16 	bl	800418e <put16>
 8004762:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 8004766:	f107 0310 	add.w	r3, r7, #16
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f007 fdd7 	bl	800c320 <strcpy>
	dname = sname;
 8004772:	f107 0310 	add.w	r3, r7, #16
 8004776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 800477a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800477e:	f7fb fd87 	bl	8000290 <strlen>
 8004782:	4603      	mov	r3, r0
 8004784:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8004788:	212e      	movs	r1, #46	; 0x2e
 800478a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800478e:	f007 fccf 	bl	800c130 <strchr>
 8004792:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8004796:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <dns_makequery+0xd8>
 800479e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	81bb      	strh	r3, [r7, #12]
 80047aa:	e002      	b.n	80047b2 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 80047ac:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80047b0:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 80047b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047bc:	89ba      	ldrh	r2, [r7, #12]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 80047c2:	89bb      	ldrh	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d029      	beq.n	800481c <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 80047c8:	89bb      	ldrh	r3, [r7, #12]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80047d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80047d4:	f007 fccb 	bl	800c16e <strncpy>
		cp += len;
 80047d8:	89bb      	ldrh	r3, [r7, #12]
 80047da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80047de:	4413      	add	r3, r2
 80047e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 80047e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80047ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
			break;
 80047fa:	e010      	b.n	800481e <dns_makequery+0x14a>
		}
		dname += len+1;
 80047fc:	89bb      	ldrh	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004804:	4413      	add	r3, r2
 8004806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800480a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800480e:	89bb      	ldrh	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800481a:	e7b5      	b.n	8004788 <dns_makequery+0xb4>
		if (len == 0) break;
 800481c:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800481e:	2101      	movs	r1, #1
 8004820:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004824:	f7ff fcb3 	bl	800418e <put16>
 8004828:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800482c:	2101      	movs	r1, #1
 800482e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004832:	f7ff fcac 	bl	800418e <put16>
 8004836:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800483a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	b21b      	sxth	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	37e0      	adds	r7, #224	; 0xe0
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	2000016e 	.word	0x2000016e

08004850 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <check_DNS_timeout+0x44>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d914      	bls.n	8004886 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 800485c:	4b0d      	ldr	r3, [pc, #52]	; (8004894 <check_DNS_timeout+0x44>)
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <check_DNS_timeout+0x48>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d905      	bls.n	8004876 <check_DNS_timeout+0x26>
			retry_count = 0;
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <check_DNS_timeout+0x48>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	e008      	b.n	8004888 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <check_DNS_timeout+0x48>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	3301      	adds	r3, #1
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <check_DNS_timeout+0x48>)
 8004880:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8004886:	2301      	movs	r3, #1
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000170 	.word	0x20000170
 8004898:	20000174 	.word	0x20000174

0800489c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	6039      	str	r1, [r7, #0]
 80048a6:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 80048a8:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <DNS_init+0x2c>)
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <DNS_init+0x30>)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <DNS_init+0x34>)
 80048b6:	f241 1222 	movw	r2, #4386	; 0x1122
 80048ba:	801a      	strh	r2, [r3, #0]
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	2000016c 	.word	0x2000016c
 80048cc:	20000168 	.word	0x20000168
 80048d0:	2000016e 	.word	0x2000016e

080048d4 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b08f      	sub	sp, #60	; 0x3c
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80048e0:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <DNS_run+0xfc>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <DNS_run+0x100>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80048ec:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <DNS_run+0x104>)
 80048ee:	7818      	ldrb	r0, [r3, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	2200      	movs	r2, #0
 80048f4:	2102      	movs	r1, #2
 80048f6:	f7fc fdc7 	bl	8001488 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <DNS_run+0x108>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	2000      	movs	r0, #0
 8004906:	f7ff fee5 	bl	80046d4 <dns_makequery>
 800490a:	4603      	mov	r3, r0
 800490c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <DNS_run+0x104>)
 8004910:	7818      	ldrb	r0, [r3, #0]
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <DNS_run+0x108>)
 8004914:	6819      	ldr	r1, [r3, #0]
 8004916:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004918:	2335      	movs	r3, #53	; 0x35
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f7fd fa05 	bl	8001d2c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <DNS_run+0x104>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fc fb51 	bl	8000fce <getSn_RX_RSR>
 800492c:	4603      	mov	r3, r0
 800492e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004932:	2b00      	cmp	r3, #0
 8004934:	d029      	beq.n	800498a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8004936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493c:	d902      	bls.n	8004944 <DNS_run+0x70>
 800493e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004942:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <DNS_run+0x104>)
 8004946:	7818      	ldrb	r0, [r3, #0]
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <DNS_run+0x108>)
 800494a:	6819      	ldr	r1, [r3, #0]
 800494c:	f107 0414 	add.w	r4, r7, #20
 8004950:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004952:	f107 0312 	add.w	r3, r7, #18
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	4623      	mov	r3, r4
 800495a:	f7fd fb3d 	bl	8001fd8 <recvfrom>
 800495e:	4603      	mov	r3, r0
 8004960:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <DNS_run+0x108>)
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	f107 0318 	add.w	r3, r7, #24
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fde9 	bl	8004544 <parseDNSMSG>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8004978:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <DNS_run+0x104>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fc fe84 	bl	800168c <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8004984:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004988:	e01e      	b.n	80049c8 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 800498a:	f7ff ff61 	bl	8004850 <check_DNS_timeout>
 800498e:	4603      	mov	r3, r0
 8004990:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8004994:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004998:	2b00      	cmp	r3, #0
 800499a:	da06      	bge.n	80049aa <DNS_run+0xd6>
			close(DNS_SOCKET);
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <DNS_run+0x104>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc fe73 	bl	800168c <close>
			return 0; // timeout occurred
 80049a6:	2300      	movs	r3, #0
 80049a8:	e00e      	b.n	80049c8 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 80049aa:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1b7      	bne.n	8004922 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <DNS_run+0x104>)
 80049b4:	7818      	ldrb	r0, [r3, #0]
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <DNS_run+0x108>)
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049bc:	2335      	movs	r3, #53	; 0x35
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f7fd f9b3 	bl	8001d2c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80049c6:	e7ac      	b.n	8004922 <DNS_run+0x4e>
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3734      	adds	r7, #52	; 0x34
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}
 80049d0:	20000174 	.word	0x20000174
 80049d4:	20000170 	.word	0x20000170
 80049d8:	2000016c 	.word	0x2000016c
 80049dc:	20000168 	.word	0x20000168

080049e0 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <getNextPacketId+0x1c>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e000      	b.n	8004a22 <getNextPacketId+0x1e>
 8004a20:	2301      	movs	r3, #1
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8004a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	617b      	str	r3, [r7, #20]
        sent = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8004a4c:	e018      	b.n	8004a80 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	689c      	ldr	r4, [r3, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	18d6      	adds	r6, r2, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fda7 	bl	80055b4 <TimerLeftMS>
 8004a66:	4603      	mov	r3, r0
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47a0      	blx	r4
 8004a70:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db0e      	blt.n	8004a96 <sendPacket+0x60>
            break;
        sent += rc;
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	da07      	bge.n	8004a98 <sendPacket+0x62>
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fd51 	bl	8005530 <TimerIsExpired>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0dc      	beq.n	8004a4e <sendPacket+0x18>
 8004a94:	e000      	b.n	8004a98 <sendPacket+0x62>
            break;
 8004a96:	bf00      	nop
    }
    if (sent == length)
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d10b      	bne.n	8004ab8 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 fd69 	bl	8005584 <TimerCountdown>
        rc = SUCCESSS;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e002      	b.n	8004abe <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	617b      	str	r3, [r7, #20]
    return rc;
 8004abe:	697b      	ldr	r3, [r7, #20]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ac8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e009      	b.n	8004af6 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	2200      	movs	r2, #0
 8004aee:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	3301      	adds	r3, #1
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	ddf2      	ble.n	8004ae2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b18:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3354      	adds	r3, #84	; 0x54
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fcec 	bl	8005514 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b08b      	sub	sp, #44	; 0x2c
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8004b50:	2301      	movs	r3, #1
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8004b58:	2304      	movs	r3, #4
 8004b5a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	6a3a      	ldr	r2, [r7, #32]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	dd03      	ble.n	8004b7e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	61bb      	str	r3, [r7, #24]
            goto exit;
 8004b7c:	e021      	b.n	8004bc2 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b82:	685c      	ldr	r4, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004b88:	f107 0117 	add.w	r1, r7, #23
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	47a0      	blx	r4
 8004b92:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d112      	bne.n	8004bc0 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	441a      	add	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	01db      	lsls	r3, r3, #7
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dbd1      	blt.n	8004b62 <decodePacket+0x1e>
exit:
 8004bbe:	e000      	b.n	8004bc2 <decodePacket+0x7e>
            goto exit;
 8004bc0:	bf00      	nop
    return len;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	372c      	adds	r7, #44	; 0x2c
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd90      	pop	{r4, r7, pc}

08004bcc <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
    int len = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	685c      	ldr	r4, [r3, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	695e      	ldr	r6, [r3, #20]
 8004bf6:	68b8      	ldr	r0, [r7, #8]
 8004bf8:	f000 fcdc 	bl	80055b4 <TimerLeftMS>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	47a0      	blx	r4
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d13b      	bne.n	8004c84 <readPacket+0xb8>
        goto exit;

    len = 1;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8004c10:	68b8      	ldr	r0, [r7, #8]
 8004c12:	f000 fccf 	bl	80055b4 <TimerLeftMS>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f107 0310 	add.w	r3, r7, #16
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ff90 	bl	8004b44 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f821 	bl	8005c76 <MQTTPacket_encode>
 8004c34:	4602      	mov	r2, r0
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4413      	add	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd16      	ble.n	8004c70 <readPacket+0xa4>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	685c      	ldr	r4, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	18d6      	adds	r6, r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	68b8      	ldr	r0, [r7, #8]
 8004c5a:	f000 fcab 	bl	80055b4 <TimerLeftMS>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47a0      	blx	r4
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d10b      	bne.n	8004c88 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8004c78:	7d3b      	ldrb	r3, [r7, #20]
 8004c7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e002      	b.n	8004c8a <readPacket+0xbe>
        goto exit;
 8004c84:	bf00      	nop
 8004c86:	e000      	b.n	8004c8a <readPacket+0xbe>
        goto exit;
 8004c88:	bf00      	nop
exit:
    return rc;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3724      	adds	r7, #36	; 0x24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c94 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	461a      	mov	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8004cb4:	e039      	b.n	8004d2a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b2f      	cmp	r3, #47	; 0x2f
 8004cbc:	d103      	bne.n	8004cc6 <isTopicMatched+0x32>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b2f      	cmp	r3, #47	; 0x2f
 8004cc4:	d13a      	bne.n	8004d3c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b2b      	cmp	r3, #43	; 0x2b
 8004ccc:	d009      	beq.n	8004ce2 <isTopicMatched+0x4e>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b23      	cmp	r3, #35	; 0x23
 8004cd4:	d005      	beq.n	8004ce2 <isTopicMatched+0x4e>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d12e      	bne.n	8004d40 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b2b      	cmp	r3, #43	; 0x2b
 8004ce8:	d112      	bne.n	8004d10 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8004cf0:	e005      	b.n	8004cfe <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d20b      	bcs.n	8004d1e <isTopicMatched+0x8a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b2f      	cmp	r3, #47	; 0x2f
 8004d0c:	d1f1      	bne.n	8004cf2 <isTopicMatched+0x5e>
 8004d0e:	e006      	b.n	8004d1e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b23      	cmp	r3, #35	; 0x23
 8004d16:	d102      	bne.n	8004d1e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	613b      	str	r3, [r7, #16]
        curf++;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3301      	adds	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
        curn++;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3301      	adds	r3, #1
 8004d28:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <isTopicMatched+0xae>
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3bd      	bcc.n	8004cb6 <isTopicMatched+0x22>
 8004d3a:	e002      	b.n	8004d42 <isTopicMatched+0xae>
            break;
 8004d3c:	bf00      	nop
 8004d3e:	e000      	b.n	8004d42 <isTopicMatched+0xae>
            break;
 8004d40:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d105      	bne.n	8004d56 <isTopicMatched+0xc2>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <isTopicMatched+0xc2>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <isTopicMatched+0xc4>
 8004d56:	2300      	movs	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08a      	sub	sp, #40	; 0x28
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	e03f      	b.n	8004dfe <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	3304      	adds	r3, #4
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d034      	beq.n	8004df8 <deliverMessage+0x92>
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	3304      	adds	r3, #4
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68b8      	ldr	r0, [r7, #8]
 8004d9e:	f001 f939 	bl	8006014 <MQTTPacket_equals>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10c      	bne.n	8004dc2 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	3304      	adds	r3, #4
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff6c 	bl	8004c94 <isTopicMatched>
 8004dbc:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01a      	beq.n	8004df8 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d012      	beq.n	8004df8 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8004dd2:	f107 0318 	add.w	r3, r7, #24
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fe00 	bl	80049e0 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	3304      	adds	r3, #4
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f107 0218 	add.w	r2, r7, #24
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
                rc = SUCCESSS;
 8004df4:	2300      	movs	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	ddbc      	ble.n	8004d7e <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d112      	bne.n	8004e32 <deliverMessage+0xcc>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fddf 	bl	80049e0 <NewMessageData>
        c->defaultMessageHandler(&md);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	f107 0210 	add.w	r2, r7, #16
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4798      	blx	r3
        rc = SUCCESSS;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8004e32:	6a3b      	ldr	r3, [r7, #32]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3728      	adds	r7, #40	; 0x28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <keepalive>:


int keepalive(MQTTClient* c)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8004e44:	f04f 33ff 	mov.w	r3, #4294967295
 8004e48:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
        goto exit;
 8004e56:	e033      	b.n	8004ec0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3354      	adds	r3, #84	; 0x54
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fb67 	bl	8005530 <TimerIsExpired>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02a      	beq.n	8004ebe <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7f1b      	ldrb	r3, [r3, #28]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d126      	bne.n	8004ebe <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fb4d 	bl	8005514 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8004e7a:	f107 0308 	add.w	r3, r7, #8
 8004e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fb6a 	bl	800555c <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 fe23 	bl	8005ade <MQTTSerialize_pingreq>
 8004e98:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dd0f      	ble.n	8004ec0 <keepalive+0x84>
 8004ea0:	f107 0308 	add.w	r3, r7, #8
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fdc4 	bl	8004a36 <sendPacket>
 8004eae:	6178      	str	r0, [r7, #20]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <keepalive+0x84>
                c->ping_outstanding = 1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	771a      	strb	r2, [r3, #28]
 8004ebc:	e000      	b.n	8004ec0 <keepalive+0x84>
        }
    }

exit:
 8004ebe:	bf00      	nop
    return rc;
 8004ec0:	697b      	ldr	r3, [r7, #20]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b095      	sub	sp, #84	; 0x54
 8004ed0:	af06      	add	r7, sp, #24
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fe77 	bl	8004bcc <readPacket>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8004eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eec:	3b02      	subs	r3, #2
 8004eee:	2b0b      	cmp	r3, #11
 8004ef0:	f200 80c0 	bhi.w	8005074 <cycle+0x1a8>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <cycle+0x30>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08005075 	.word	0x08005075
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08005075 	.word	0x08005075
 8004f08:	08004ff5 	.word	0x08004ff5
 8004f0c:	08005075 	.word	0x08005075
 8004f10:	08005075 	.word	0x08005075
 8004f14:	08005075 	.word	0x08005075
 8004f18:	08005075 	.word	0x08005075
 8004f1c:	08005075 	.word	0x08005075
 8004f20:	08005075 	.word	0x08005075
 8004f24:	08005075 	.word	0x08005075
 8004f28:	08005067 	.word	0x08005067
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004f34:	4616      	mov	r6, r2
 8004f36:	f107 0210 	add.w	r2, r7, #16
 8004f3a:	1d15      	adds	r5, r2, #4
 8004f3c:	f107 0210 	add.w	r2, r7, #16
 8004f40:	1c54      	adds	r4, r2, #1
 8004f42:	f107 010c 	add.w	r1, r7, #12
 8004f46:	f107 0210 	add.w	r2, r7, #16
 8004f4a:	1c90      	adds	r0, r2, #2
 8004f4c:	9604      	str	r6, [sp, #16]
 8004f4e:	9303      	str	r3, [sp, #12]
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	330c      	adds	r3, #12
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	f107 0310 	add.w	r3, r7, #16
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	f107 0320 	add.w	r3, r7, #32
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	462b      	mov	r3, r5
 8004f68:	4622      	mov	r2, r4
 8004f6a:	f000 fdc7 	bl	8005afc <MQTTDeserialize_publish>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 8083 	bne.w	800507c <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8004f7c:	f107 0210 	add.w	r2, r7, #16
 8004f80:	f107 0320 	add.w	r3, r7, #32
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff feed 	bl	8004d66 <deliverMessage>
            if (msg.qos != QOS0)
 8004f8c:	7c3b      	ldrb	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d06d      	beq.n	800506e <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8004f92:	7c3b      	ldrb	r3, [r7, #16]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10c      	bne.n	8004fb2 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6918      	ldr	r0, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	8abb      	ldrh	r3, [r7, #20]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2204      	movs	r2, #4
 8004faa:	f001 f900 	bl	80061ae <MQTTSerialize_ack>
 8004fae:	6378      	str	r0, [r7, #52]	; 0x34
 8004fb0:	e00e      	b.n	8004fd0 <cycle+0x104>
                else if (msg.qos == QOS2)
 8004fb2:	7c3b      	ldrb	r3, [r7, #16]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d10b      	bne.n	8004fd0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6918      	ldr	r0, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	8abb      	ldrh	r3, [r7, #20]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2205      	movs	r2, #5
 8004fca:	f001 f8f0 	bl	80061ae <MQTTSerialize_ack>
 8004fce:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8004fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dc03      	bgt.n	8004fde <cycle+0x112>
                    rc = FAILURE;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
 8004fdc:	e005      	b.n	8004fea <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff fd27 	bl	8004a36 <sendPacket>
 8004fe8:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d13d      	bne.n	800506e <cycle+0x1a2>
                    goto exit; // there was a problem
 8004ff2:	e044      	b.n	800507e <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695c      	ldr	r4, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f107 020a 	add.w	r2, r7, #10
 8005000:	f107 0109 	add.w	r1, r7, #9
 8005004:	f107 0008 	add.w	r0, r7, #8
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	4623      	mov	r3, r4
 800500c:	f000 fde8 	bl	8005be0 <MQTTDeserialize_ack>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d003      	beq.n	800501e <cycle+0x152>
                rc = FAILURE;
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	633b      	str	r3, [r7, #48]	; 0x30
 800501c:	e01e      	b.n	800505c <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6918      	ldr	r0, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4619      	mov	r1, r3
 8005028:	897b      	ldrh	r3, [r7, #10]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	2206      	movs	r2, #6
 8005030:	f001 f8bd 	bl	80061ae <MQTTSerialize_ack>
 8005034:	6378      	str	r0, [r7, #52]	; 0x34
 8005036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	dc03      	bgt.n	8005044 <cycle+0x178>
                rc = FAILURE;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
 8005042:	e00b      	b.n	800505c <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fcf4 	bl	8004a36 <sendPacket>
 800504e:	6338      	str	r0, [r7, #48]	; 0x30
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <cycle+0x190>
                rc = FAILURE; // there was a problem
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d106      	bne.n	8005072 <cycle+0x1a6>
                goto exit; // there was a problem
 8005064:	e00b      	b.n	800507e <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
            break;
 800506c:	e002      	b.n	8005074 <cycle+0x1a8>
            break;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <cycle+0x1a8>
            break;
 8005072:	bf00      	nop
    }
    keepalive(c);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fee1 	bl	8004e3c <keepalive>
 800507a:	e000      	b.n	800507e <cycle+0x1b2>
                goto exit;
 800507c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <cycle+0x1bc>
        rc = packet_type;
 8005084:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005086:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800508a:	4618      	mov	r0, r3
 800508c:	373c      	adds	r7, #60	; 0x3c
 800508e:	46bd      	mov	sp, r7
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005092:	bf00      	nop

08005094 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80050a2:	f107 030c 	add.w	r3, r7, #12
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fa34 	bl	8005514 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	f107 030c 	add.w	r3, r7, #12
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fa51 	bl	800555c <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 80050ba:	f107 030c 	add.w	r3, r7, #12
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff03 	bl	8004ecc <cycle>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d102      	bne.n	80050d4 <MQTTYield+0x40>
    {
        rc = FAILURE;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	617b      	str	r3, [r7, #20]
    }

    return rc;
 80050d4:	697b      	ldr	r3, [r7, #20]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fa1d 	bl	8005530 <TimerIsExpired>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fee4 	bl	8004ecc <cycle>
 8005104:	6178      	str	r0, [r7, #20]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	d1f0      	bne.n	80050f0 <waitfor+0x12>
 800510e:	e000      	b.n	8005112 <waitfor+0x34>
            break; // we timed out
 8005110:	bf00      	nop

    return rc;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b09e      	sub	sp, #120	; 0x78
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800512c:	4a3d      	ldr	r2, [pc, #244]	; (8005224 <MQTTConnect+0x108>)
 800512e:	f107 0310 	add.w	r3, r7, #16
 8005132:	4611      	mov	r1, r2
 8005134:	2258      	movs	r2, #88	; 0x58
 8005136:	4618      	mov	r0, r3
 8005138:	f007 f8fa 	bl	800c330 <memcpy>
    int len = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d15d      	bne.n	8005204 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8005148:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f9e1 	bl	8005514 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f9fd 	bl	800555c <TimerCountdownMS>

    if (options == 0)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8005168:	f107 0310 	add.w	r3, r7, #16
 800516c:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	8b1b      	ldrh	r3, [r3, #24]
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 f9fd 	bl	8005584 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6918      	ldr	r0, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	4619      	mov	r1, r3
 8005196:	f000 fb29 	bl	80057ec <MQTTSerialize_connect>
 800519a:	6738      	str	r0, [r7, #112]	; 0x70
 800519c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dd32      	ble.n	8005208 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 80051a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051a6:	461a      	mov	r2, r3
 80051a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff fc43 	bl	8004a36 <sendPacket>
 80051b0:	6778      	str	r0, [r7, #116]	; 0x74
 80051b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d129      	bne.n	800520c <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80051b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051bc:	461a      	mov	r2, r3
 80051be:	2102      	movs	r1, #2
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff ff8c 	bl	80050de <waitfor>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d117      	bne.n	80051fc <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 80051cc:	23ff      	movs	r3, #255	; 0xff
 80051ce:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f107 010f 	add.w	r1, r7, #15
 80051e0:	f107 000e 	add.w	r0, r7, #14
 80051e4:	f000 fbee 	bl	80059c4 <MQTTDeserialize_connack>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <MQTTConnect+0xd8>
            rc = connack_rc;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	677b      	str	r3, [r7, #116]	; 0x74
 80051f2:	e00c      	b.n	800520e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	677b      	str	r3, [r7, #116]	; 0x74
 80051fa:	e008      	b.n	800520e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	677b      	str	r3, [r7, #116]	; 0x74
 8005202:	e004      	b.n	800520e <MQTTConnect+0xf2>
		goto exit;
 8005204:	bf00      	nop
 8005206:	e002      	b.n	800520e <MQTTConnect+0xf2>
        goto exit;
 8005208:	bf00      	nop
 800520a:	e000      	b.n	800520e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800520c:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800520e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <MQTTConnect+0xfe>
        c->isconnected = 1;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800521c:	4618      	mov	r0, r3
 800521e:	3778      	adds	r7, #120	; 0x78
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800cc24 	.word	0x0800cc24

08005228 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b094      	sub	sp, #80	; 0x50
 800522c:	af04      	add	r7, sp, #16
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8005242:	2300      	movs	r3, #0
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	2300      	movs	r3, #0
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
 800524a:	2300      	movs	r3, #0
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8083 	beq.w	8005366 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8005260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005264:	4618      	mov	r0, r3
 8005266:	f000 f955 	bl	8005514 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f971 	bl	800555c <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691c      	ldr	r4, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	461d      	mov	r5, r3
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fbbd 	bl	8004a04 <getNextPacketId>
 800528a:	4603      	mov	r3, r0
 800528c:	b29a      	uxth	r2, r3
 800528e:	f107 031f 	add.w	r3, r7, #31
 8005292:	9302      	str	r3, [sp, #8]
 8005294:	f107 0320 	add.w	r3, r7, #32
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	2301      	movs	r3, #1
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	2200      	movs	r2, #0
 80052a2:	4629      	mov	r1, r5
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 fffe 	bl	80062a6 <MQTTSerialize_subscribe>
 80052aa:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd5b      	ble.n	800536a <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 80052b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b6:	461a      	mov	r2, r3
 80052b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff fbbb 	bl	8004a36 <sendPacket>
 80052c0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d152      	bne.n	800536e <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80052c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052cc:	461a      	mov	r2, r3
 80052ce:	2109      	movs	r1, #9
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ff04 	bl	80050de <waitfor>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b09      	cmp	r3, #9
 80052da:	d140      	bne.n	800535e <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	f04f 33ff 	mov.w	r3, #4294967295
 80052e4:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	68d2      	ldr	r2, [r2, #12]
 80052ee:	4614      	mov	r4, r2
 80052f0:	f107 0114 	add.w	r1, r7, #20
 80052f4:	f107 0218 	add.w	r2, r7, #24
 80052f8:	f107 0012 	add.w	r0, r7, #18
 80052fc:	9401      	str	r4, [sp, #4]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	460b      	mov	r3, r1
 8005302:	2101      	movs	r1, #1
 8005304:	f001 f849 	bl	800639a <MQTTDeserialize_suback>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d02b      	beq.n	8005370 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005318:	2300      	movs	r3, #0
 800531a:	63bb      	str	r3, [r7, #56]	; 0x38
 800531c:	e01b      	b.n	8005356 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	3304      	adds	r3, #4
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d110      	bne.n	8005350 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	3304      	adds	r3, #4
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4413      	add	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	3304      	adds	r3, #4
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	609a      	str	r2, [r3, #8]
                    rc = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800534e:	e00f      	b.n	8005370 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	3301      	adds	r3, #1
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b04      	cmp	r3, #4
 800535a:	dde0      	ble.n	800531e <MQTTSubscribe+0xf6>
 800535c:	e008      	b.n	8005370 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005364:	e004      	b.n	8005370 <MQTTSubscribe+0x148>
		goto exit;
 8005366:	bf00      	nop
 8005368:	e002      	b.n	8005370 <MQTTSubscribe+0x148>
        goto exit;
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 800536e:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005372:	4618      	mov	r0, r3
 8005374:	3740      	adds	r7, #64	; 0x40
 8005376:	46bd      	mov	sp, r7
 8005378:	bdb0      	pop	{r4, r5, r7, pc}

0800537a <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800537a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537c:	b097      	sub	sp, #92	; 0x5c
 800537e:	af08      	add	r7, sp, #32
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
 8005394:	2300      	movs	r3, #0
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 809b 	beq.w	80054e0 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 80053aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f8b0 	bl	8005514 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f8cc 	bl	800555c <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d003      	beq.n	80053d4 <MQTTPublish+0x5a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d106      	bne.n	80053e2 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff fb15 	bl	8004a04 <getNextPacketId>
 80053da:	4603      	mov	r3, r0
 80053dc:	b29a      	uxth	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	469c      	mov	ip, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	469e      	mov	lr, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	785d      	ldrb	r5, [r3, #1]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8005404:	9206      	str	r2, [sp, #24]
 8005406:	9305      	str	r3, [sp, #20]
 8005408:	ac02      	add	r4, sp, #8
 800540a:	f107 031c 	add.w	r3, r7, #28
 800540e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005416:	9601      	str	r6, [sp, #4]
 8005418:	9500      	str	r5, [sp, #0]
 800541a:	4673      	mov	r3, lr
 800541c:	2200      	movs	r2, #0
 800541e:	4661      	mov	r1, ip
 8005420:	6838      	ldr	r0, [r7, #0]
 8005422:	f000 fe4e 	bl	80060c2 <MQTTSerialize_publish>
 8005426:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	2b00      	cmp	r3, #0
 800542c:	dd5a      	ble.n	80054e4 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800542e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005432:	461a      	mov	r2, r3
 8005434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fafd 	bl	8004a36 <sendPacket>
 800543c:	6378      	str	r0, [r7, #52]	; 0x34
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	2b00      	cmp	r3, #0
 8005442:	d151      	bne.n	80054e8 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d122      	bne.n	8005492 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800544c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005450:	461a      	mov	r2, r3
 8005452:	2104      	movs	r1, #4
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff fe42 	bl	80050de <waitfor>
 800545a:	4603      	mov	r3, r0
 800545c:	2b04      	cmp	r3, #4
 800545e:	d114      	bne.n	800548a <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	695c      	ldr	r4, [r3, #20]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f107 021a 	add.w	r2, r7, #26
 800546c:	f107 0119 	add.w	r1, r7, #25
 8005470:	f107 0018 	add.w	r0, r7, #24
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	4623      	mov	r3, r4
 8005478:	f000 fbb2 	bl	8005be0 <MQTTDeserialize_ack>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d035      	beq.n	80054ee <MQTTPublish+0x174>
                rc = FAILURE;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
 8005488:	e031      	b.n	80054ee <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
 8005490:	e02d      	b.n	80054ee <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d128      	bne.n	80054ec <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800549a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800549e:	461a      	mov	r2, r3
 80054a0:	2107      	movs	r1, #7
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff fe1b 	bl	80050de <waitfor>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	d114      	bne.n	80054d8 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	695c      	ldr	r4, [r3, #20]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f107 0216 	add.w	r2, r7, #22
 80054ba:	f107 0115 	add.w	r1, r7, #21
 80054be:	f107 0014 	add.w	r0, r7, #20
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	4623      	mov	r3, r4
 80054c6:	f000 fb8b 	bl	8005be0 <MQTTDeserialize_ack>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d00e      	beq.n	80054ee <MQTTPublish+0x174>
                rc = FAILURE;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
 80054d6:	e00a      	b.n	80054ee <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
 80054de:	e006      	b.n	80054ee <MQTTPublish+0x174>
		goto exit;
 80054e0:	bf00      	nop
 80054e2:	e004      	b.n	80054ee <MQTTPublish+0x174>
        goto exit;
 80054e4:	bf00      	nop
 80054e6:	e002      	b.n	80054ee <MQTTPublish+0x174>
        goto exit; // there was a problem
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <MQTTPublish+0x174>
    }

exit:
 80054ec:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	373c      	adds	r7, #60	; 0x3c
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054f8 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	MilliTimer++;
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <MilliTimer_Handler+0x18>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	4a03      	ldr	r2, [pc, #12]	; (8005510 <MilliTimer_Handler+0x18>)
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000178 	.word	0x20000178

08005514 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	605a      	str	r2, [r3, #4]
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <TimerIsExpired+0x28>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0fdb      	lsrs	r3, r3, #31
 8005548:	b2db      	uxtb	r3, r3
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000178 	.word	0x20000178

0800555c <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <TimerCountdownMS+0x24>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	441a      	add	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	605a      	str	r2, [r3, #4]
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000178 	.word	0x20000178

08005584 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <TimerCountdown+0x2c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	441a      	add	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	605a      	str	r2, [r3, #4]
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000178 	.word	0x20000178

080055b4 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <TimerLeftMS+0x28>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000178 	.word	0x20000178

080055e0 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a07      	ldr	r2, [pc, #28]	; (8005610 <NewNetwork+0x30>)
 80055f4:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a06      	ldr	r2, [pc, #24]	; (8005614 <NewNetwork+0x34>)
 80055fa:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a06      	ldr	r2, [pc, #24]	; (8005618 <NewNetwork+0x38>)
 8005600:	60da      	str	r2, [r3, #12]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	0800561d 	.word	0x0800561d
 8005614:	08005673 	.word	0x08005673
 8005618:	080056b7 	.word	0x080056b7

0800561c <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3304      	adds	r3, #4
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	3303      	adds	r3, #3
 8005634:	4618      	mov	r0, r3
 8005636:	f7fb fbbd 	bl	8000db4 <WIZCHIP_READ>
 800563a:	4603      	mov	r3, r0
 800563c:	2b17      	cmp	r3, #23
 800563e:	d113      	bne.n	8005668 <w5x00_read+0x4c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	4618      	mov	r0, r3
 8005648:	f7fb fcc1 	bl	8000fce <getSn_RX_RSR>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <w5x00_read+0x4c>
		return recv(n->my_socket, buffer, len);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	b292      	uxth	r2, r2
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fc faa2 	bl	8001ba8 <recv>
 8005664:	4603      	mov	r3, r0
 8005666:	e000      	b.n	800566a <w5x00_read+0x4e>

	return SOCK_ERROR;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3304      	adds	r3, #4
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	3303      	adds	r3, #3
 800568a:	4618      	mov	r0, r3
 800568c:	f7fb fb92 	bl	8000db4 <WIZCHIP_READ>
 8005690:	4603      	mov	r3, r0
 8005692:	2b17      	cmp	r3, #23
 8005694:	d10a      	bne.n	80056ac <w5x00_write+0x3a>
		return send(n->my_socket, buffer, len);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	b292      	uxth	r2, r2
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fc f98c 	bl	80019c0 <send>
 80056a8:	4603      	mov	r3, r0
 80056aa:	e000      	b.n	80056ae <w5x00_write+0x3c>

	return SOCK_ERROR;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc f90d 	bl	80018e4 <disconnect>
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	4613      	mov	r3, r2
 80056de:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 80056e0:	f243 0339 	movw	r3, #12345	; 0x3039
 80056e4:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	b2d8      	uxtb	r0, r3
 80056ec:	8afa      	ldrh	r2, [r7, #22]
 80056ee:	2300      	movs	r3, #0
 80056f0:	2101      	movs	r1, #1
 80056f2:	f7fb fec9 	bl	8001488 <socket>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d001      	beq.n	8005706 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8005702:	2300      	movs	r3, #0
 8005704:	e00d      	b.n	8005722 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f7fc f821 	bl	8001758 <connect>
 8005716:	4603      	mov	r3, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <ConnectNetwork+0x50>

	return SOCK_OK;
 8005720:	2301      	movs	r3, #1
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800572a:	b590      	push	{r4, r7, lr}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
	int len = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7a1b      	ldrb	r3, [r3, #8]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d102      	bne.n	8005744 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800573e:	230c      	movs	r3, #12
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e005      	b.n	8005750 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7a1b      	ldrb	r3, [r3, #8]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d101      	bne.n	8005750 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800574c:	230a      	movs	r3, #10
 800574e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	330c      	adds	r3, #12
 8005754:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005758:	f000 fc43 	bl	8005fe2 <MQTTstrlen>
 800575c:	4603      	mov	r3, r0
 800575e:	3302      	adds	r3, #2
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7edb      	ldrb	r3, [r3, #27]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d013      	beq.n	8005796 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3324      	adds	r3, #36	; 0x24
 8005772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005776:	f000 fc34 	bl	8005fe2 <MQTTstrlen>
 800577a:	4603      	mov	r3, r0
 800577c:	1c9c      	adds	r4, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3330      	adds	r3, #48	; 0x30
 8005782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005786:	f000 fc2c 	bl	8005fe2 <MQTTstrlen>
 800578a:	4603      	mov	r3, r0
 800578c:	4423      	add	r3, r4
 800578e:	3302      	adds	r3, #2
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <MQTTSerialize_connectLength+0x7c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3340      	adds	r3, #64	; 0x40
 80057aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057ae:	f000 fc18 	bl	8005fe2 <MQTTstrlen>
 80057b2:	4603      	mov	r3, r0
 80057b4:	3302      	adds	r3, #2
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <MQTTSerialize_connectLength+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	334c      	adds	r3, #76	; 0x4c
 80057d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057d4:	f000 fc05 	bl	8005fe2 <MQTTstrlen>
 80057d8:	4603      	mov	r3, r0
 80057da:	3302      	adds	r3, #2
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80057e2:	68fb      	ldr	r3, [r7, #12]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd90      	pop	{r4, r7, pc}

080057ec <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8005808:	f04f 33ff 	mov.w	r3, #4294967295
 800580c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff ff8b 	bl	800572a <MQTTSerialize_connectLength>
 8005814:	6238      	str	r0, [r7, #32]
 8005816:	6a38      	ldr	r0, [r7, #32]
 8005818:	f000 fa98 	bl	8005d4c <MQTTPacket_len>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4293      	cmp	r3, r2
 8005822:	da03      	bge.n	800582c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005824:	f06f 0301 	mvn.w	r3, #1
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800582a:	e0c2      	b.n	80059b2 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8005830:	7e3b      	ldrb	r3, [r7, #24]
 8005832:	2201      	movs	r2, #1
 8005834:	f362 1307 	bfi	r3, r2, #4, #4
 8005838:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800583a:	7e3a      	ldrb	r2, [r7, #24]
 800583c:	f107 031c 	add.w	r3, r7, #28
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb11 	bl	8005e6a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	6a39      	ldr	r1, [r7, #32]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fa12 	bl	8005c76 <MQTTPacket_encode>
 8005852:	4602      	mov	r2, r0
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7a1b      	ldrb	r3, [r3, #8]
 800585e:	2b04      	cmp	r3, #4
 8005860:	d10c      	bne.n	800587c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8005862:	f107 031c 	add.w	r3, r7, #28
 8005866:	4955      	ldr	r1, [pc, #340]	; (80059bc <MQTTSerialize_connect+0x1d0>)
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fb3c 	bl	8005ee6 <writeCString>
		writeChar(&ptr, (char) 4);
 800586e:	f107 031c 	add.w	r3, r7, #28
 8005872:	2104      	movs	r1, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f000 faf8 	bl	8005e6a <writeChar>
 800587a:	e00b      	b.n	8005894 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800587c:	f107 031c 	add.w	r3, r7, #28
 8005880:	494f      	ldr	r1, [pc, #316]	; (80059c0 <MQTTSerialize_connect+0x1d4>)
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb2f 	bl	8005ee6 <writeCString>
		writeChar(&ptr, (char) 3);
 8005888:	f107 031c 	add.w	r3, r7, #28
 800588c:	2103      	movs	r1, #3
 800588e:	4618      	mov	r0, r3
 8005890:	f000 faeb 	bl	8005e6a <writeChar>
	}

	flags.all = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	7e9b      	ldrb	r3, [r3, #26]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	7d3b      	ldrb	r3, [r7, #20]
 80058a4:	f362 0341 	bfi	r3, r2, #1, #1
 80058a8:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7edb      	ldrb	r3, [r3, #27]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	7d3b      	ldrb	r3, [r7, #20]
 80058ba:	f362 0382 	bfi	r3, r2, #2, #1
 80058be:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80058c0:	7d3b      	ldrb	r3, [r7, #20]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d013      	beq.n	80058f4 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	7d3b      	ldrb	r3, [r7, #20]
 80058da:	f362 03c4 	bfi	r3, r2, #3, #2
 80058de:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	7d3b      	ldrb	r3, [r7, #20]
 80058ee:	f362 1345 	bfi	r3, r2, #5, #1
 80058f2:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <MQTTSerialize_connect+0x118>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8005904:	7d3b      	ldrb	r3, [r7, #20]
 8005906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800590a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <MQTTSerialize_connect+0x130>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800591c:	7d3b      	ldrb	r3, [r7, #20]
 800591e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005922:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8005924:	7d3a      	ldrb	r2, [r7, #20]
 8005926:	f107 031c 	add.w	r3, r7, #28
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fa9c 	bl	8005e6a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	8b1b      	ldrh	r3, [r3, #24]
 8005936:	461a      	mov	r2, r3
 8005938:	f107 031c 	add.w	r3, r7, #28
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f000 faa8 	bl	8005e94 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f107 001c 	add.w	r0, r7, #28
 800594a:	330c      	adds	r3, #12
 800594c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800594e:	f000 fae9 	bl	8005f24 <writeMQTTString>
	if (options->willFlag)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	7edb      	ldrb	r3, [r3, #27]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f107 001c 	add.w	r0, r7, #28
 8005960:	3324      	adds	r3, #36	; 0x24
 8005962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005964:	f000 fade 	bl	8005f24 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f107 001c 	add.w	r0, r7, #28
 800596e:	3330      	adds	r3, #48	; 0x30
 8005970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005972:	f000 fad7 	bl	8005f24 <writeMQTTString>
	}
	if (flags.bits.username)
 8005976:	7d3b      	ldrb	r3, [r7, #20]
 8005978:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f107 001c 	add.w	r0, r7, #28
 8005988:	3340      	adds	r3, #64	; 0x40
 800598a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800598c:	f000 faca 	bl	8005f24 <writeMQTTString>
	if (flags.bits.password)
 8005990:	7d3b      	ldrb	r3, [r7, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f107 001c 	add.w	r0, r7, #28
 80059a2:	334c      	adds	r3, #76	; 0x4c
 80059a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a6:	f000 fabd 	bl	8005f24 <writeMQTTString>

	rc = ptr - buf;
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3728      	adds	r7, #40	; 0x28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	0800cc7c 	.word	0x0800cc7c
 80059c0:	0800cc84 	.word	0x0800cc84

080059c4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80059e6:	f107 0318 	add.w	r3, r7, #24
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fa29 	bl	8005e42 <readChar>
 80059f0:	4603      	mov	r3, r0
 80059f2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80059f4:	7f3b      	ldrb	r3, [r7, #28]
 80059f6:	f023 030f 	bic.w	r3, r3, #15
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d12e      	bne.n	8005a5e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f107 0214 	add.w	r2, r7, #20
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 f9e9 	bl	8005de0 <MQTTPacket_decodeBuf>
 8005a0e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	4413      	add	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	dd1b      	ble.n	8005a62 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8005a2a:	f107 0318 	add.w	r3, r7, #24
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fa07 	bl	8005e42 <readChar>
 8005a34:	4603      	mov	r3, r0
 8005a36:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8005a38:	7c3b      	ldrb	r3, [r7, #16]
 8005a3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8005a46:	f107 0318 	add.w	r3, r7, #24
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f9f9 	bl	8005e42 <readChar>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5c:	e002      	b.n	8005a64 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8005a5e:	bf00      	nop
 8005a60:	e000      	b.n	8005a64 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8005a62:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3728      	adds	r7, #40	; 0x28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b088      	sub	sp, #32
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295
 8005a84:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	dc03      	bgt.n	8005a98 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005a90:	f06f 0301 	mvn.w	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
		goto exit;
 8005a96:	e01d      	b.n	8005ad4 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	7e3b      	ldrb	r3, [r7, #24]
 8005aa6:	f362 1307 	bfi	r3, r2, #4, #4
 8005aaa:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8005aac:	7e3a      	ldrb	r2, [r7, #24]
 8005aae:	f107 0314 	add.w	r3, r7, #20
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f9d8 	bl	8005e6a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f8d9 	bl	8005c76 <MQTTPacket_encode>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8005ae8:	220c      	movs	r2, #12
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ffbe 	bl	8005a6e <MQTTSerialize_zero>
 8005af2:	4603      	mov	r3, r0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b10:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005b1e:	f107 0318 	add.w	r3, r7, #24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f98d 	bl	8005e42 <readChar>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8005b2c:	7f3b      	ldrb	r3, [r7, #28]
 8005b2e:	f023 030f 	bic.w	r3, r3, #15
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b30      	cmp	r3, #48	; 0x30
 8005b36:	d14b      	bne.n	8005bd0 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8005b38:	7f3b      	ldrb	r3, [r7, #28]
 8005b3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	461a      	mov	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8005b46:	7f3b      	ldrb	r3, [r7, #28]
 8005b48:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8005b54:	7f3b      	ldrb	r3, [r7, #28]
 8005b56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	f107 0214 	add.w	r2, r7, #20
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f938 	bl	8005de0 <MQTTPacket_decodeBuf>
 8005b70:	6278      	str	r0, [r7, #36]	; 0x24
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	4413      	add	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8005b82:	f107 0318 	add.w	r3, r7, #24
 8005b86:	6a3a      	ldr	r2, [r7, #32]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8c:	f000 f9f8 	bl	8005f80 <readMQTTLenString>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01e      	beq.n	8005bd4 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db19      	blt.n	8005bd4 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dd08      	ble.n	8005bba <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8005ba8:	f107 0318 	add.w	r3, r7, #24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f92d 	bl	8005e0c <readInt>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	601a      	str	r2, [r3, #0]
	rc = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bce:	e002      	b.n	8005bd6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <MQTTDeserialize_publish+0xda>
		goto exit;
 8005bd4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3728      	adds	r7, #40	; 0x28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005bfe:	f107 0318 	add.w	r3, r7, #24
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f91d 	bl	8005e42 <readChar>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8005c0c:	7f3b      	ldrb	r3, [r7, #28]
 8005c0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8005c1a:	7f3b      	ldrb	r3, [r7, #28]
 8005c1c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f107 0214 	add.w	r2, r7, #20
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f8d5 	bl	8005de0 <MQTTPacket_decodeBuf>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	dd0b      	ble.n	8005c6a <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8005c52:	f107 0318 	add.w	r3, r7, #24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f8d8 	bl	8005e0c <readInt>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8005c64:	2301      	movs	r3, #1
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
 8005c68:	e000      	b.n	8005c6c <MQTTDeserialize_ack+0x8c>
		goto exit;
 8005c6a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3728      	adds	r7, #40	; 0x28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	425a      	negs	r2, r3
 8005c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c90:	bf58      	it	pl
 8005c92:	4253      	negpl	r3, r2
 8005c94:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	da00      	bge.n	8005c9e <MQTTPacket_encode+0x28>
 8005c9c:	337f      	adds	r3, #127	; 0x7f
 8005c9e:	11db      	asrs	r3, r3, #7
 8005ca0:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dd03      	ble.n	8005cb0 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cae:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	60fa      	str	r2, [r7, #12]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	7afa      	ldrb	r2, [r7, #11]
 8005cbe:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dcde      	bgt.n	8005c84 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	dd03      	ble.n	8005d06 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005d02:	60fb      	str	r3, [r7, #12]
			goto exit;
 8005d04:	e01d      	b.n	8005d42 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8005d06:	f107 020b 	add.w	r2, r7, #11
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4798      	blx	r3
 8005d12:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d112      	bne.n	8005d40 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d24:	6979      	ldr	r1, [r7, #20]
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	441a      	add	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	dbd6      	blt.n	8005cec <MQTTPacket_decode+0x18>
exit:
 8005d3e:	e000      	b.n	8005d42 <MQTTPacket_decode+0x6e>
			goto exit;
 8005d40:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8005d42:	693b      	ldr	r3, [r7, #16]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3301      	adds	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5e:	dc03      	bgt.n	8005d68 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3301      	adds	r3, #1
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e012      	b.n	8005d8e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6e:	da03      	bge.n	8005d78 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3302      	adds	r3, #2
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	e00a      	b.n	8005d8e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <MQTTPacket_len+0x50>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	dc03      	bgt.n	8005d88 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3303      	adds	r3, #3
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e002      	b.n	8005d8e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	607b      	str	r3, [r7, #4]
	return rem_len;
 8005d8e:	687b      	ldr	r3, [r7, #4]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	001ffffe 	.word	0x001ffffe

08005da0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e00a      	b.n	8005dc6 <bufchar+0x26>
		*c = *bufptr++;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <bufchar+0x3c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	4909      	ldr	r1, [pc, #36]	; (8005ddc <bufchar+0x3c>)
 8005db8:	600a      	str	r2, [r1, #0]
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	dbf0      	blt.n	8005db0 <bufchar+0x10>
	return count;
 8005dce:	683b      	ldr	r3, [r7, #0]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	2000017c 	.word	0x2000017c

08005de0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8005dea:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <MQTTPacket_decodeBuf+0x24>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	4805      	ldr	r0, [pc, #20]	; (8005e08 <MQTTPacket_decodeBuf+0x28>)
 8005df4:	f7ff ff6e 	bl	8005cd4 <MQTTPacket_decode>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	2000017c 	.word	0x2000017c
 8005e08:	08005da1 	.word	0x08005da1

08005e0c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	3201      	adds	r2, #1
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	4413      	add	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	601a      	str	r2, [r3, #0]
	return len;
 8005e34:	68bb      	ldr	r3, [r7, #8]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
	return c;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	da00      	bge.n	8005ea6 <writeInt+0x12>
 8005ea4:	33ff      	adds	r3, #255	; 0xff
 8005ea6:	121b      	asrs	r3, r3, #8
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	425a      	negs	r2, r3
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	bf58      	it	pl
 8005ec6:	4253      	negpl	r3, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8005ef0:	6838      	ldr	r0, [r7, #0]
 8005ef2:	f7fa f9cd 	bl	8000290 <strlen>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ffc9 	bl	8005e94 <writeInt>
	memcpy(*pptr, string, len);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f006 fa10 	bl	800c330 <memcpy>
	*pptr += len;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	441a      	add	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dd12      	ble.n	8005f5e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ffa9 	bl	8005e94 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f006 f9f0 	bl	800c330 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8005f5c:	e00c      	b.n	8005f78 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4619      	mov	r1, r3
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff ffbc 	bl	8005ee6 <writeCString>
}
 8005f6e:	e003      	b.n	8005f78 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8005f70:	2100      	movs	r1, #0
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff ff8e 	bl	8005e94 <writeInt>
}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	dd1a      	ble.n	8005fd2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8005f9c:	68b8      	ldr	r0, [r7, #8]
 8005f9e:	f7ff ff35 	bl	8005e0c <readInt>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	6852      	ldr	r2, [r2, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d30c      	bcc.n	8005fd2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	6852      	ldr	r2, [r2, #4]
 8005fc8:	441a      	add	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	601a      	str	r2, [r3, #0]
			rc = 1;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8005fd8:	697b      	ldr	r3, [r7, #20]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	1d3b      	adds	r3, r7, #4
 8005fea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fa f948 	bl	8000290 <strlen>
 8006000:	4603      	mov	r3, r0
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e001      	b.n	800600a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	617b      	str	r3, [r7, #20]
	return rc;
 800600a:	697b      	ldr	r3, [r7, #20]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
		blen = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f7fa f929 	bl	8000290 <strlen>
 800603e:	4603      	mov	r3, r0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e005      	b.n	8006050 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8006050:	6838      	ldr	r0, [r7, #0]
 8006052:	f7fa f91d 	bl	8000290 <strlen>
 8006056:	4603      	mov	r3, r0
 8006058:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	429a      	cmp	r2, r3
 8006060:	d10a      	bne.n	8006078 <MQTTPacket_equals+0x64>
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	461a      	mov	r2, r3
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6938      	ldr	r0, [r7, #16]
 800606a:	f006 f86e 	bl	800c14a <strncmp>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <MQTTPacket_equals+0x64>
 8006074:	2301      	movs	r3, #1
 8006076:	e000      	b.n	800607a <MQTTPacket_equals+0x66>
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	4638      	mov	r0, r7
 800608c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8006094:	463b      	mov	r3, r7
 8006096:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800609a:	f7ff ffa2 	bl	8005fe2 <MQTTstrlen>
 800609e:	4603      	mov	r3, r0
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	4413      	add	r3, r2
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4413      	add	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd02      	ble.n	80060b8 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	3302      	adds	r3, #2
 80060b6:	617b      	str	r3, [r7, #20]
	return len;
 80060b8:	697b      	ldr	r3, [r7, #20]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08a      	sub	sp, #40	; 0x28
 80060c6:	af02      	add	r7, sp, #8
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80060e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060ec:	6838      	ldr	r0, [r7, #0]
 80060ee:	f7ff ffc8 	bl	8006082 <MQTTSerialize_publishLength>
 80060f2:	61b8      	str	r0, [r7, #24]
 80060f4:	69b8      	ldr	r0, [r7, #24]
 80060f6:	f7ff fe29 	bl	8005d4c <MQTTPacket_len>
 80060fa:	4602      	mov	r2, r0
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4293      	cmp	r3, r2
 8006100:	da03      	bge.n	800610a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006102:	f06f 0301 	mvn.w	r3, #1
 8006106:	61fb      	str	r3, [r7, #28]
		goto exit;
 8006108:	e04c      	b.n	80061a4 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800610a:	7c3b      	ldrb	r3, [r7, #16]
 800610c:	2203      	movs	r2, #3
 800610e:	f362 1307 	bfi	r3, r2, #4, #4
 8006112:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	7c3b      	ldrb	r3, [r7, #16]
 800611e:	f362 03c3 	bfi	r3, r2, #3, #1
 8006122:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	b2da      	uxtb	r2, r3
 800612c:	7c3b      	ldrb	r3, [r7, #16]
 800612e:	f362 0342 	bfi	r3, r2, #1, #2
 8006132:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8006134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	b2da      	uxtb	r2, r3
 800613e:	7c3b      	ldrb	r3, [r7, #16]
 8006140:	f362 0300 	bfi	r3, r2, #0, #1
 8006144:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8006146:	7c3a      	ldrb	r2, [r7, #16]
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fe8b 	bl	8005e6a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	69b9      	ldr	r1, [r7, #24]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fd8c 	bl	8005c76 <MQTTPacket_encode>
 800615e:	4602      	mov	r2, r0
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4413      	add	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8006166:	f107 0014 	add.w	r0, r7, #20
 800616a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800616e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006170:	f7ff fed8 	bl	8005f24 <writeMQTTString>

	if (qos > 0)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dd06      	ble.n	8006188 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800617a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fe86 	bl	8005e94 <writeInt>

	memcpy(ptr, payload, payloadlen);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800618c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800618e:	4618      	mov	r0, r3
 8006190:	f006 f8ce 	bl	800c330 <memcpy>
	ptr += payloadlen;
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	4611      	mov	r1, r2
 80061ba:	461a      	mov	r2, r3
 80061bc:	460b      	mov	r3, r1
 80061be:	71fb      	strb	r3, [r7, #7]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	dc03      	bgt.n	80061de <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80061d6:	f06f 0301 	mvn.w	r3, #1
 80061da:	61fb      	str	r3, [r7, #28]
		goto exit;
 80061dc:	e037      	b.n	800624e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	7e3b      	ldrb	r3, [r7, #24]
 80061e8:	f362 1307 	bfi	r3, r2, #4, #4
 80061ec:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 80061ee:	79bb      	ldrb	r3, [r7, #6]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	7e3b      	ldrb	r3, [r7, #24]
 80061f8:	f362 03c3 	bfi	r3, r2, #3, #1
 80061fc:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	2b06      	cmp	r3, #6
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	b2da      	uxtb	r2, r3
 8006210:	7e3b      	ldrb	r3, [r7, #24]
 8006212:	f362 0342 	bfi	r3, r2, #1, #2
 8006216:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006218:	7e3a      	ldrb	r2, [r7, #24]
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fe22 	bl	8005e6a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fd23 	bl	8005c76 <MQTTPacket_encode>
 8006230:	4602      	mov	r2, r0
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	4413      	add	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8006238:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fe27 	bl	8005e94 <writeInt>
	rc = ptr - buf;
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800624e:	69fb      	ldr	r3, [r7, #28]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8006262:	2302      	movs	r3, #2
 8006264:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e013      	b.n	8006294 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4613      	mov	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	461a      	mov	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	4413      	add	r3, r2
 800627c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006280:	f7ff feaf 	bl	8005fe2 <MQTTstrlen>
 8006284:	4603      	mov	r3, r0
 8006286:	3303      	adds	r3, #3
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	4413      	add	r3, r2
 800628c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	dbe7      	blt.n	800626c <MQTTSerialize_subscribeLength+0x14>
	return len;
 800629c:	68bb      	ldr	r3, [r7, #8]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b08a      	sub	sp, #40	; 0x28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	4611      	mov	r1, r2
 80062b2:	461a      	mov	r2, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	71fb      	strb	r3, [r7, #7]
 80062b8:	4613      	mov	r3, r2
 80062ba:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 80062d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d4:	f7ff ffc0 	bl	8006258 <MQTTSerialize_subscribeLength>
 80062d8:	61f8      	str	r0, [r7, #28]
 80062da:	69f8      	ldr	r0, [r7, #28]
 80062dc:	f7ff fd36 	bl	8005d4c <MQTTPacket_len>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	da03      	bge.n	80062f0 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80062e8:	f06f 0301 	mvn.w	r3, #1
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80062ee:	e04f      	b.n	8006390 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 80062f4:	7d3b      	ldrb	r3, [r7, #20]
 80062f6:	2208      	movs	r2, #8
 80062f8:	f362 1307 	bfi	r3, r2, #4, #4
 80062fc:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	b2da      	uxtb	r2, r3
 8006306:	7d3b      	ldrb	r3, [r7, #20]
 8006308:	f362 03c3 	bfi	r3, r2, #3, #1
 800630c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800630e:	7d3b      	ldrb	r3, [r7, #20]
 8006310:	2201      	movs	r2, #1
 8006312:	f362 0342 	bfi	r3, r2, #1, #2
 8006316:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8006318:	7d3a      	ldrb	r2, [r7, #20]
 800631a:	f107 0318 	add.w	r3, r7, #24
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fda2 	bl	8005e6a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	69f9      	ldr	r1, [r7, #28]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fca3 	bl	8005c76 <MQTTPacket_encode>
 8006330:	4602      	mov	r2, r0
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8006338:	88ba      	ldrh	r2, [r7, #4]
 800633a:	f107 0318 	add.w	r3, r7, #24
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fda7 	bl	8005e94 <writeInt>

	for (i = 0; i < count; ++i)
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	e019      	b.n	8006380 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	461a      	mov	r2, r3
 8006358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635a:	4413      	add	r3, r2
 800635c:	f107 0018 	add.w	r0, r7, #24
 8006360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006362:	f7ff fddf 	bl	8005f24 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636a:	4413      	add	r3, r2
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	f107 0318 	add.w	r3, r7, #24
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fd78 	bl	8005e6a <writeChar>
	for (i = 0; i < count; ++i)
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	3301      	adds	r3, #1
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	6a3a      	ldr	r2, [r7, #32]
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	429a      	cmp	r2, r3
 8006386:	dbe1      	blt.n	800634c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006392:	4618      	mov	r0, r3
 8006394:	3728      	adds	r7, #40	; 0x28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	; 0x28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80063b8:	f107 0318 	add.w	r3, r7, #24
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fd40 	bl	8005e42 <readChar>
 80063c2:	4603      	mov	r3, r0
 80063c4:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80063c6:	7f3b      	ldrb	r3, [r7, #28]
 80063c8:	f023 030f 	bic.w	r3, r3, #15
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b90      	cmp	r3, #144	; 0x90
 80063d0:	d142      	bne.n	8006458 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f107 0214 	add.w	r2, r7, #20
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fd00 	bl	8005de0 <MQTTPacket_decodeBuf>
 80063e0:	6278      	str	r0, [r7, #36]	; 0x24
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	4413      	add	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4413      	add	r3, r2
 80063f0:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	dd2f      	ble.n	800645c <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80063fc:	f107 0318 	add.w	r3, r7, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fd03 	bl	8005e0c <readInt>
 8006406:	4603      	mov	r3, r0
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8006414:	e019      	b.n	800644a <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	429a      	cmp	r2, r3
 800641e:	da03      	bge.n	8006428 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8006426:	e01a      	b.n	800645e <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8006428:	f107 0318 	add.w	r3, r7, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fd08 	bl	8005e42 <readChar>
 8006432:	4603      	mov	r3, r0
 8006434:	4618      	mov	r0, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6011      	str	r1, [r2, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4413      	add	r3, r2
 8006446:	4602      	mov	r2, r0
 8006448:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	6a3a      	ldr	r2, [r7, #32]
 800644e:	429a      	cmp	r2, r3
 8006450:	d8e1      	bhi.n	8006416 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
 8006456:	e002      	b.n	800645e <MQTTDeserialize_suback+0xc4>
		goto exit;
 8006458:	bf00      	nop
 800645a:	e000      	b.n	800645e <MQTTDeserialize_suback+0xc4>
		goto exit;
 800645c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <GetTick>:
/**
 * @brief Retorna el valor de la variabla ticks
 * @param none
 * @return ticks
 */
static uint32_t GetTick(void){
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0

	return uwTick;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <GetTick+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000180 	.word	0x20000180

08006480 <delay_init_it>:

/*Function defines ------------------------------------*/
void delay_init_it(void){
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
	uint32_t temp;
	/*deshabilitar la systick*/
	SysTick->CTRL = 0;
 8006486:	4b13      	ldr	r3, [pc, #76]	; (80064d4 <delay_init_it+0x54>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate();
 800648c:	f005 f99e 	bl	800b7cc <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000UL;
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <delay_init_it+0x58>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a11      	ldr	r2, [pc, #68]	; (80064dc <delay_init_it+0x5c>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	099b      	lsrs	r3, r3, #6
 800649c:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp - 1;
 800649e:	4a0d      	ldr	r2, [pc, #52]	; (80064d4 <delay_init_it+0x54>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	//SYSCLK
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <delay_init_it+0x54>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <delay_init_it+0x54>)
 80064ac:	f043 0304 	orr.w	r3, r3, #4
 80064b0:	6013      	str	r3, [r2, #0]

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		//habilitando la IT del systick
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <delay_init_it+0x54>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a07      	ldr	r2, [pc, #28]	; (80064d4 <delay_init_it+0x54>)
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	6013      	str	r3, [r2, #0]

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <delay_init_it+0x54>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <delay_init_it+0x54>)
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6013      	str	r3, [r2, #0]
	return;
 80064ca:	bf00      	nop
}
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	e000e010 	.word	0xe000e010
 80064d8:	200000a0 	.word	0x200000a0
 80064dc:	10624dd3 	.word	0x10624dd3

080064e0 <delay_ms>:

/**
 * @brief funcion encargada de generar retardos en ms
 * @param [delay]: tiempo de retado en ms deseado
 */
void delay_ms(uint32_t delay){
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTick();
 80064e8:	f7ff ffbe 	bl	8006468 <GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTick() - tickstart)<wait);
 80064f2:	bf00      	nop
 80064f4:	f7ff ffb8 	bl	8006468 <GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	429a      	cmp	r2, r3
 8006502:	d8f7      	bhi.n	80064f4 <delay_ms+0x14>

	return;
 8006504:	bf00      	nop
}
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <millis>:

/**
 * @brief funcion similar a la funcion de arduino
 */
uint32_t millis(void){
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
	return GetTick();
 8006510:	f7ff ffaa 	bl	8006468 <GetTick>
 8006514:	4603      	mov	r3, r0
}
 8006516:	4618      	mov	r0, r3
 8006518:	bd80      	pop	{r7, pc}

0800651a <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>:

class ZeroTerminatedRamString {
 public:
  static const size_t typeSortKey = 3;

  ZeroTerminatedRamString(const char* str) : str_(str) {}
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>:

  bool isNull() const {
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
    return !str_;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
  }
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>:

  size_t size() const {
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
    return str_ ? ::strlen(str_) : 0;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x1e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7f9 fe8e 	bl	8000290 <strlen>
 8006574:	4603      	mov	r3, r0
 8006576:	e000      	b.n	800657a <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x20>
 8006578:	2300      	movs	r3, #0
  }
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>:

  char operator[](size_t i) const {
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4413      	add	r3, r2
 8006594:	781b      	ldrb	r3, [r3, #0]
  }
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>:

  const char* data() const {
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
    return str_;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
  }
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>:
  }
};

class StaticStringAdapter : public ZeroTerminatedRamString {
 public:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff ffa6 	bl	800651a <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>:

  StringStoragePolicy::Link storagePolicy() const {
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
    return StringStoragePolicy::Link();
 80065e0:	bf00      	nop
  }
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>:

template <>
struct StringAdapter<const char*, void> {
  typedef StaticStringAdapter AdaptedString;

  static AdaptedString adapt(const char* p) {
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 80065f6:	f107 030c 	add.w	r3, r7, #12
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff ffdc 	bl	80065ba <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>
 8006602:	68fb      	ldr	r3, [r7, #12]
  }
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <_ZN11ArduinoJson8V6213HB26detail14SizedRamStringC1EPKcj>:

class SizedRamString {
 public:
  static const size_t typeSortKey = 2;

  SizedRamString(const char* str, size_t sz) : str_(str), size_(sz) {}
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>:

  bool isNull() const {
    return !str_;
  }

  size_t size() const {
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
    return size_;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
  }
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>:

  char operator[](size_t i) const {
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4413      	add	r3, r2
 800665c:	781b      	ldrb	r3, [r3, #0]
  }
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>:
  JsonString() : data_(0), size_(0), ownership_(Linked) {}

  JsonString(const char* data, Ownership ownership = Linked)
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}

  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	721a      	strb	r2, [r3, #8]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>:

  // Returns a pointer to the characters.
  const char* c_str() const {
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
    return data_;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
  }
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>:
    return !data_;
  }

  // Returns true if the string is stored by address.
  // Returns false if the string is stored by copy.
  bool isLinked() const {
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7a1b      	ldrb	r3, [r3, #8]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
  }
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>:

  // Returns length of the string.
  size_t size() const {
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
    return size_;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
  }
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>:

  // Returns true if the string is non-null
  explicit operator bool() const {
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
    return data_ != 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
  }
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>:
  VariantSlot* addSlot(MemoryPool*);
  void removeSlot(VariantSlot* slot);

  bool copyFrom(const CollectionData& src, MemoryPool* pool);

  VariantSlot* head() const {
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
    return head_;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
  }
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&content_);
 800672c:	687b      	ldr	r3, [r7, #4]
  }
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:

  const VariantData* data() const {
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(&content_);
 8006742:	687b      	ldr	r3, [r7, #4]
  }
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:

  VariantSlot* next() {
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
    return next_ ? this + next_ : 0;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d006      	beq.n	8006770 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x20>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	e000      	b.n	8006772 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x22>
 8006770:	2300      	movs	r3, #0
  }
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:

  const VariantSlot* next() const {
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
    return const_cast<VariantSlot*>(this)->next();
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff ffe2 	bl	8006750 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800678c:	4603      	mov	r3, r0
  }
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>:

  const VariantSlot* next(size_t distance) const {
    return const_cast<VariantSlot*>(this)->next(distance);
  }

  void setNext(VariantSlot* slot) {
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(!slot || slot - this >=
                                    numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(!slot || slot - this <=
                                    numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot ? slot - this : 0);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1c>
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	111b      	asrs	r3, r3, #4
 80067ae:	b21a      	sxth	r2, r3
 80067b0:	e000      	b.n	80067b4 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1e>
 80067b2:	2200      	movs	r2, #0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	815a      	strh	r2, [r3, #10]
  }
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>:

  void setNextNotNull(VariantSlot* slot) {
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    ARDUINOJSON_ASSERT(slot - this >=
                       numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(slot - this <=
                       numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot - this);
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	111b      	asrs	r3, r3, #4
 80067d6:	b21a      	sxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	815a      	strh	r2, [r3, #10]
  }
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>:

  void setKey(JsonString k) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	4638      	mov	r0, r7
 80067f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
 80067f6:	463b      	mov	r3, r7
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff ff59 	bl	80066b0 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d007      	beq.n	8006814 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x2c>
      flags_ &= VALUE_MASK;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	7a1b      	ldrb	r3, [r3, #8]
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	721a      	strb	r2, [r3, #8]
 8006812:	e006      	b.n	8006822 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x3a>
    else
      flags_ |= OWNED_KEY_BIT;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	7a1b      	ldrb	r3, [r3, #8]
 8006818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800681c:	b2da      	uxtb	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	721a      	strb	r2, [r3, #8]
    key_ = k.c_str();
 8006822:	463b      	mov	r3, r7
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff ff37 	bl	8006698 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800682a:	4602      	mov	r2, r0
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	60da      	str	r2, [r3, #12]
  }
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>:

  const char* key() const {
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
    return key_;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
  }
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>:

  bool ownsKey() const {
    return (flags_ & OWNED_KEY_BIT) != 0;
  }

  void clear() {
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
    next_ = 0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	815a      	strh	r2, [r3, #10]
    flags_ = 0;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	721a      	strb	r2, [r3, #8]
    key_ = 0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	60da      	str	r2, [r3, #12]
  }
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>:
//               ^              ^
//             left_          right_

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
      : begin_(buf),
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	601a      	str	r2, [r3, #0]
        left_(buf),
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	605a      	str	r2, [r3, #4]
        right_(buf ? buf + capa : 0),
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x26>
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	e000      	b.n	800689e <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x28>
 800689c:	2300      	movs	r3, #0
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	6093      	str	r3, [r2, #8]
        end_(buf ? buf + capa : 0),
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3a>
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	e000      	b.n	80068b2 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3c>
 80068b0:	2300      	movs	r3, #0
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	60d3      	str	r3, [r2, #12]
        overflowed_(false) {
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	741a      	strb	r2, [r3, #16]
    ARDUINOJSON_ASSERT(isAligned(begin_));
    ARDUINOJSON_ASSERT(isAligned(right_));
    ARDUINOJSON_ASSERT(isAligned(end_));
  }
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>:

  size_t size() const {
    return size_t(left_ - begin_ + end_ - right_);
  }

  bool overflowed() const {
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
    return overflowed_;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7c1b      	ldrb	r3, [r3, #16]
  }
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>:

  VariantSlot* allocVariant() {
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fea2 	bl	8008634 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>
 80068f0:	4603      	mov	r3, r0
  }
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool11getFreeZoneEPPcPj>:
      newCopy[n] = 0;  // force null-terminator
    }
    return newCopy;
  }

  void getFreeZone(char** zoneStart, size_t* zoneSize) const {
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
    *zoneStart = left_;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	601a      	str	r2, [r3, #0]
    *zoneSize = size_t(right_ - left_);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	461a      	mov	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
  }
 800691e:	bf00      	nop
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj>:

  const char* saveStringFromFreeZone(size_t len) {
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
#if ARDUINOJSON_ENABLE_STRING_DEDUPLICATION
    const char* dup = findString(adaptString(left_, len));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6859      	ldr	r1, [r3, #4]
 8006938:	f107 0308 	add.w	r3, r7, #8
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f001 fe85 	bl	800864e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 8006944:	f107 0308 	add.w	r3, r7, #8
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fe90 	bl	8008670 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>
 8006950:	6178      	str	r0, [r7, #20]
    if (dup)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj+0x32>
      return dup;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	e013      	b.n	8006984 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj+0x5a>
#endif

    const char* str = left_;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]
    left_ += len;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]
    *left_++ = 0;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6051      	str	r1, [r2, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
    checkInvariants();
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f83d 	bl	80069fc <_ZN11ArduinoJson8V6213HB26detail10MemoryPool15checkInvariantsEv>
    return str;
 8006982:	693b      	ldr	r3, [r7, #16]
  }
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>:

  void markAsOverflowed() {
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
    overflowed_ = true;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	741a      	strb	r2, [r3, #16]
  }
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool5clearEv>:

  void clear() {
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
    left_ = begin_;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	605a      	str	r2, [r3, #4]
    right_ = end_;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	609a      	str	r2, [r3, #8]
    overflowed_ = false;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	741a      	strb	r2, [r3, #16]
  }
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
    return left_ + bytes <= right_;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	441a      	add	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	bf94      	ite	ls
 80069ea:	2301      	movls	r3, #1
 80069ec:	2300      	movhi	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
  }
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <_ZN11ArduinoJson8V6213HB26detail10MemoryPool15checkInvariantsEv>:
    right_ += offset;
    end_ += offset;
  }

 private:
  void checkInvariants() {
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(begin_ <= left_);
    ARDUINOJSON_ASSERT(left_ <= right_);
    ARDUINOJSON_ASSERT(right_ <= end_);
    ARDUINOJSON_ASSERT(isAligned(right_));
  }
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) {
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ffd7 	bl	80069d0 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f083 0301 	eor.w	r3, r3, #1
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x28>
      overflowed_ = true;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	741a      	strb	r2, [r3, #16]
      return 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e008      	b.n	8006a4a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x3a>
    }
    right_ -= bytes;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	425b      	negs	r3, r3
 8006a40:	441a      	add	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	609a      	str	r2, [r3, #8]
    return right_;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
  }
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>:
class VariantData {
  VariantContent content_;  // must be first to allow cast from array to variant
  uint8_t flags_;

 public:
  VariantData() : flags_(VALUE_IS_NULL) {}
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	721a      	strb	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>:

  const CollectionData* asCollection() const {
    return isCollection() ? &content_.asCollection : 0;
  }

  CollectionData* asObject() {
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b082      	sub	sp, #8
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asCollection : 0;
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f829 	bl	8006ace <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv+0x18>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	e000      	b.n	8006a88 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv+0x1a>
 8006a86:	2300      	movs	r3, #0
  }
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>:

  const CollectionData* asObject() const {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff ffe8 	bl	8006a6e <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>
 8006a9e:	4603      	mov	r3, r0
  }
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData7isFloatEv>:
      default:
        return false;
    }
  }

  bool isFloat() const {
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
    return (flags_ & NUMBER_BIT) != 0;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7a1b      	ldrb	r3, [r3, #8]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bf14      	ite	ne
 8006abc:	2301      	movne	r3, #1
 8006abe:	2300      	moveq	r3, #0
 8006ac0:	b2db      	uxtb	r3, r3
  }
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
    return (flags_ & VALUE_IS_OBJECT) != 0;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7a1b      	ldrb	r3, [r3, #8]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bf14      	ite	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	2300      	moveq	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
  }
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>:

  bool isNull() const {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
    return type() == VALUE_IS_NULL;
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f894 	bl	8006c2a <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
  }
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <_ZNK11ArduinoJson8V6213HB26detail11VariantData10isEnclosedEv>:

  bool isEnclosed() const {
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
    return !isFloat();
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ffc2 	bl	8006aa8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData7isFloatEv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f083 0301 	eor.w	r3, r3, #1
 8006b2a:	b2db      	uxtb	r3, r3
  }
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>:
  void remove(TAdaptedString key) {
    if (isObject())
      content_.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8006b40:	2106      	movs	r1, #6
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f880 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asBoolean = value;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	78fa      	ldrb	r2, [r7, #3]
 8006b4c:	701a      	strb	r2, [r3, #0]
  }
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>:

  void setFloat(JsonFloat value) {
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8006b62:	210c      	movs	r1, #12
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f86f 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asFloat = value;
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b70:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    content_.asSignedInteger = value;
  }

  void setNull() {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8006b84:	2100      	movs	r1, #0
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f85e 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
  }
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>:

  void setString(JsonString s) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fd83 	bl	80066b0 <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x26>
      setType(VALUE_IS_LINKED_STRING);
 8006bb0:	2104      	movs	r1, #4
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f848 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
 8006bb8:	e003      	b.n	8006bc2 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x2e>
    else
      setType(VALUE_IS_OWNED_STRING);
 8006bba:	2105      	movs	r1, #5
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f843 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asString.data = s.c_str();
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff fd67 	bl	8006698 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	601a      	str	r2, [r3, #0]
    content_.asString.size = s.size();
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff fd7d 	bl	80066d2 <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]
  }
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>:

  CollectionData& toArray() {
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8006bee:	2140      	movs	r1, #64	; 0x40
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f829 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f94e 	bl	8006e9a <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 8006bfe:	687b      	ldr	r3, [r7, #4]
  }
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>:

  CollectionData& toObject() {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8006c10:	2120      	movs	r1, #32
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f818 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f93d 	bl	8006e9a <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 8006c20:	687b      	ldr	r3, [r7, #4]
  }
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>:
      content_.asString.data += stringDistance;
    if (flags_ & COLLECTION_MASK)
      content_.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
    return flags_ & VALUE_MASK;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	7a1b      	ldrb	r3, [r3, #8]
 8006c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3a:	b2db      	uxtb	r3, r3
  }
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>:

    return storeString(pool, value, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
    flags_ &= OWNED_KEY_BIT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	7a1b      	ldrb	r3, [r3, #8]
 8006c58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	721a      	strb	r2, [r3, #8]
    flags_ |= t;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7a1a      	ldrb	r2, [r3, #8]
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	721a      	strb	r2, [r3, #8]
  }
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>:

  struct VariantStringSetter {
    VariantStringSetter(VariantData* instance) : instance_(instance) {}
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(0) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data) : data_(data) {}
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4618      	mov	r0, r3
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>:
      containsKey(TChar* key) const {
    return variantGetMember(getData(), detail::adaptString(key)) != 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
    return data_;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
  }
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), pool_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
      : data_(data), pool_(pool) {}
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	605a      	str	r2, [r3, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <_ZN11ArduinoJson8V6213HB29ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>:
struct Converter<JsonVariantConst> : private detail::VariantAttorney {
  static void toJson(JsonVariantConst src, JsonVariant dst) {
    variantCopyFrom(getData(dst), getData(src), getPool(dst));
  }

  static JsonVariantConst fromJson(JsonVariantConst src) {
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  }

  template <typename TClient>
  FORCE_INLINE static typename ResultOfGetData<TClient>::type getData(
      TClient& client) {
    return client.getData();
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff ffd9 	bl	8006cb8 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 8006d06:	4602      	mov	r2, r0
 8006d08:	bf00      	nop
    return JsonVariantConst(getData(src));
 8006d0a:	f107 030c 	add.w	r3, r7, #12
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff ffc2 	bl	8006c9a <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8006d16:	68fb      	ldr	r3, [r7, #12]
  }
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

struct SlotKeySetter {
  SlotKeySetter(VariantSlot* instance) : instance_(instance) {}
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8006d46:	687b      	ldr	r3, [r7, #4]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <_ZN11ArduinoJson8V6213HB212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v6/api/jsondocument/clear/
  void clear() {
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
    pool_.clear();
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fe21 	bl	80069a6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool5clearEv>
    data_.setNull();
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3318      	adds	r3, #24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff ff07 	bl	8006b7c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
  }
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>:
 protected:
  JsonDocument() : pool_(0, 0) {}

  JsonDocument(detail::MemoryPool pool) : pool_(pool) {}

  JsonDocument(char* buf, size_t capa) : pool_(buf, capa) {}
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fd74 	bl	8006876 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3318      	adds	r3, #24
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fe5d 	bl	8006a52 <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <_ZN11ArduinoJson8V6213HB212JsonDocumentD1Ev>:

  ~JsonDocument() {}
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>:

  JsonVariant getVariant() {
    return JsonVariant(&pool_, &data_);
  }

  JsonVariantConst getVariant() const {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(&data_);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 0218 	add.w	r2, r3, #24
 8006dc6:	f107 030c 	add.w	r3, r7, #12
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ff64 	bl	8006c9a <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
  }
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>:

  detail::MemoryPool pool_;
  detail::VariantData data_;

 protected:
  detail::MemoryPool* getPool() {
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
    return &pool_;
 8006de4:	687b      	ldr	r3, [r7, #4]
  }
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
    return &data_;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3318      	adds	r3, #24
  }
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
    return &data_;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3318      	adds	r3, #24
  }
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>:
#include <ArduinoJson/Strings/StringAdapters.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8006e2c:	6838      	ldr	r0, [r7, #0]
 8006e2e:	f7ff fd58 	bl	80068e2 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>
 8006e32:	60f8      	str	r0, [r7, #12]
  if (!slot)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x1c>
    return 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e017      	b.n	8006e6e <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x4c>

  if (tail_) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x38>
    ARDUINOJSON_ASSERT(pool->owns(tail_));  // Can't alter a linked array/object
    tail_->setNextNotNull(slot);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fcb9 	bl	80067c4 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>
    tail_ = slot;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	605a      	str	r2, [r3, #4]
 8006e58:	e005      	b.n	8006e66 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x44>
  } else {
    head_ = slot;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]
    tail_ = slot;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fcf2 	bl	8006850 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>
  return slot;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>:

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff ffcd 	bl	8006e22 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff ff57 	bl	8006d3e <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>
 8006e90:	4603      	mov	r3, r0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>:
    return 0;
  }
  return slot->data();
}

inline void CollectionData::clear() {
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  head_ = 0;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
  tail_ = 0;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>:
  if (!head_)
    return 0;
  return head_->next(index);
}

inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  VariantSlot* current = head_;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]
  while (current) {
 8006eca:	e00b      	b.n	8006ee4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x2a>
    VariantSlot* next = current->next();
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff fc3f 	bl	8006750 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8006ed2:	60b8      	str	r0, [r7, #8]
    if (next == target)
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d101      	bne.n	8006ee0 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x26>
      return current;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e005      	b.n	8006eec <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x32>
    current = next;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	60fb      	str	r3, [r7, #12]
  while (current) {
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f0      	bne.n	8006ecc <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x12>
  }
  return 0;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>:
    index--;
  }
  return slotData(slot);
}

inline void CollectionData::removeSlot(VariantSlot* slot) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  if (!slot)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01a      	beq.n	8006f3a <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x46>
    return;
  VariantSlot* prev = getPreviousSlot(slot);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff ffd7 	bl	8006eba <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>
 8006f0c:	60f8      	str	r0, [r7, #12]
  VariantSlot* next = slot->next();
 8006f0e:	6838      	ldr	r0, [r7, #0]
 8006f10:	f7ff fc1e 	bl	8006750 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8006f14:	60b8      	str	r0, [r7, #8]
  if (prev)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x32>
    prev->setNext(next);
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff fc39 	bl	8006796 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>
 8006f24:	e002      	b.n	8006f2c <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x38>
  else
    head_ = next;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	601a      	str	r2, [r3, #0]
  if (!next)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d104      	bne.n	8006f3c <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    tail_ = prev;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
 8006f38:	e000      	b.n	8006f3c <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    return;
 8006f3a:	bf00      	nop
}
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	4603      	mov	r3, r0
 8006f4a:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	f000 f835 	bl	8006fbc <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 8006f52:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8006f54:	e002      	b.n	8006f5c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3302      	adds	r3, #2
 8006f5a:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	79fa      	ldrb	r2, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d1f2      	bne.n	8006f56 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x14>
    }
    return p[0];
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	781b      	ldrb	r3, [r3, #0]
  }
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc>:

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8006f86:	2000      	movs	r0, #0
 8006f88:	f000 f818 	bl	8006fbc <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 8006f8c:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e00c      	b.n	8006fb4 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	79fa      	ldrb	r2, [r7, #7]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d103      	bne.n	8006fac <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	e003      	b.n	8006fb4 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3302      	adds	r3, #2
 8006fb0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8006fb2:	e7ec      	b.n	8006f8e <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool excludeSolidus) {
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
    return &"//\"\"\\\\b\bf\fn\nr\rt\t"[excludeSolidus ? 2 : 0];
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x14>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e000      	b.n	8006fd2 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x16>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x28>)
 8006fd4:	4413      	add	r3, r2
  }
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	0800cc8c 	.word	0x0800cc8c

08006fe8 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE>:
  }
};

template <>
struct Converter<bool> : private detail::VariantAttorney {
  static void toJson(bool src, JsonVariant dst) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	1d3b      	adds	r3, r7, #4
 8006ff0:	e883 0006 	stmia.w	r3, {r1, r2}
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	613b      	str	r3, [r7, #16]
    return data_;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	bf00      	nop
    auto data = getData(dst);
 8007002:	617b      	str	r3, [r7, #20]
    if (data)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE+0x2c>
      data->setBoolean(src);
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	4619      	mov	r1, r3
 800700e:	6978      	ldr	r0, [r7, #20]
 8007010:	f7ff fd90 	bl	8006b34 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
  }
 8007014:	bf00      	nop
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
  }
};

template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	1d3b      	adds	r3, r7, #4
 8007026:	e883 0006 	stmia.w	r3, {r1, r2}
 800702a:	1d3b      	adds	r3, r7, #4
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	681c      	ldr	r4, [r3, #0]
 8007032:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f001 fb5c 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800703a:	4601      	mov	r1, r0
 800703c:	1d3b      	adds	r3, r7, #4
 800703e:	617b      	str	r3, [r7, #20]
    return pool_;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	685b      	ldr	r3, [r3, #4]
    return client.getPool();
 8007044:	bf00      	nop
 8007046:	461a      	mov	r2, r3
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fb5e 	bl	800870a <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>
  }
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	bd90      	pop	{r4, r7, pc}

08007056 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	4603      	mov	r3, r0
 800705e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	2b2f      	cmp	r3, #47	; 0x2f
 8007064:	d904      	bls.n	8007070 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1a>
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	2b39      	cmp	r3, #57	; 0x39
 800706a:	d801      	bhi.n	8007070 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1a>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1c>
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

inline bool parseNumber(const char* s, VariantData& result) {
 8007080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b02 	vpush	{d8}
 8007088:	b0a6      	sub	sp, #152	; 0x98
 800708a:	af00      	add	r7, sp, #0
 800708c:	6578      	str	r0, [r7, #84]	; 0x54
 800708e:	6539      	str	r1, [r7, #80]	; 0x50
  typedef choose_largest<traits::mantissa_type, JsonUInt>::type mantissa_t;
  typedef traits::exponent_type exponent_t;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  switch (*s) {
 8007096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b2b      	cmp	r3, #43	; 0x2b
 800709c:	d008      	beq.n	80070b0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x30>
 800709e:	2b2d      	cmp	r3, #45	; 0x2d
 80070a0:	d10a      	bne.n	80070b8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '-':
      is_negative = true;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      s++;
 80070a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070aa:	3301      	adds	r3, #1
 80070ac:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 80070ae:	e003      	b.n	80070b8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '+':
      s++;
 80070b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b2:	3301      	adds	r3, #1
 80070b4:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 80070b6:	bf00      	nop
    result.setFloat(is_negative ? -traits::inf() : traits::inf());
    return true;
  }
#endif

  if (!isdigit(*s) && *s != '.')
 80070b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff ffca 	bl	8007056 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f083 0301 	eor.w	r3, r3, #1
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 80070ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b2e      	cmp	r3, #46	; 0x2e
 80070d4:	d001      	beq.n	80070da <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5c>
 80070da:	2300      	movs	r3, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x64>
    return false;
 80070e0:	2300      	movs	r3, #0
 80070e2:	e1d5      	b.n	8007490 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  mantissa_t mantissa = 0;
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  exponent_t exponent_offset = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	f04f 33ff 	mov.w	r3, #4294967295
 80070fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  while (isdigit(*s)) {
 8007102:	e054      	b.n	80071ae <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8007104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	3b30      	subs	r3, #48	; 0x30
 800710a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (mantissa > maxUint / 10)
 800710e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007112:	f112 3f66 	cmn.w	r2, #1717986918	; 0x66666666
 8007116:	49ba      	ldr	r1, [pc, #744]	; (8007400 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x380>)
 8007118:	418b      	sbcs	r3, r1
 800711a:	d251      	bcs.n	80071c0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x140>
      break;
    mantissa *= 10;
 800711c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	f04f 0000 	mov.w	r0, #0
 8007128:	f04f 0100 	mov.w	r1, #0
 800712c:	0099      	lsls	r1, r3, #2
 800712e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8007132:	0090      	lsls	r0, r2, #2
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	eb12 0804 	adds.w	r8, r2, r4
 800713c:	eb43 0905 	adc.w	r9, r3, r5
 8007140:	eb18 0308 	adds.w	r3, r8, r8
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	eb49 0309 	adc.w	r3, r9, r9
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8007150:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    if (mantissa > maxUint - digit)
 8007154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007158:	2200      	movs	r2, #0
 800715a:	643b      	str	r3, [r7, #64]	; 0x40
 800715c:	647a      	str	r2, [r7, #68]	; 0x44
 800715e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007162:	460b      	mov	r3, r1
 8007164:	43db      	mvns	r3, r3
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
 8007168:	4613      	mov	r3, r2
 800716a:	43db      	mvns	r3, r3
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800716e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007172:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8007176:	4621      	mov	r1, r4
 8007178:	4291      	cmp	r1, r2
 800717a:	4629      	mov	r1, r5
 800717c:	eb71 0303 	sbcs.w	r3, r1, r3
 8007180:	d320      	bcc.n	80071c4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x144>
      break;
    mantissa += digit;
 8007182:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007186:	2200      	movs	r2, #0
 8007188:	633b      	str	r3, [r7, #48]	; 0x30
 800718a:	637a      	str	r2, [r7, #52]	; 0x34
 800718c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007190:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007194:	4621      	mov	r1, r4
 8007196:	1851      	adds	r1, r2, r1
 8007198:	6139      	str	r1, [r7, #16]
 800719a:	4629      	mov	r1, r5
 800719c:	414b      	adcs	r3, r1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071a4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    s++;
 80071a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071aa:	3301      	adds	r3, #1
 80071ac:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 80071ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7ff ff4f 	bl	8007056 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1a2      	bne.n	8007104 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x84>
 80071be:	e002      	b.n	80071c6 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 80071c4:	bf00      	nop
  }

  if (*s == '\0') {
 80071c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d138      	bne.n	8007240 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
    if (is_negative) {
 80071ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01a      	beq.n	800720c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x18c>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071de:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 80071e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80071e6:	2a01      	cmp	r2, #1
 80071e8:	f173 4300 	sbcs.w	r3, r3, #2147483648	; 0x80000000
 80071ec:	d228      	bcs.n	8007240 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
        result.setInteger(JsonInteger(~mantissa + 1));
 80071ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80071f2:	2100      	movs	r1, #0
 80071f4:	4250      	negs	r0, r2
 80071f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80071f8:	eb61 0303 	sbc.w	r3, r1, r3
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007202:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007204:	f001 faba 	bl	800877c <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>
        return true;
 8007208:	2301      	movs	r3, #1
 800720a:	e141      	b.n	8007490 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
      }
    } else {
      result.setInteger(JsonUInt(mantissa));
 800720c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007210:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007212:	f001 fac6 	bl	80087a2 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>
      return true;
 8007216:	2301      	movs	r3, #1
 8007218:	e13a      	b.n	8007490 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 800721a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800721e:	f04f 020a 	mov.w	r2, #10
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	f7f9 fc19 	bl	8000a5c <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    exponent_offset++;
 8007232:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8007236:	b29b      	uxth	r3, r3
 8007238:	3301      	adds	r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  while (mantissa > traits::mantissa_max) {
 8007240:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007248:	d2e7      	bcs.n	800721a <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x19a>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 800724a:	e009      	b.n	8007260 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1e0>
    exponent_offset++;
 800724c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8007250:	b29b      	uxth	r3, r3
 8007252:	3301      	adds	r3, #1
 8007254:	b29b      	uxth	r3, r3
 8007256:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    s++;
 800725a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725c:	3301      	adds	r3, #1
 800725e:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 8007260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fef6 	bl	8007056 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ed      	bne.n	800724c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1cc>
  }

  if (*s == '.') {
 8007270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b2e      	cmp	r3, #46	; 0x2e
 8007276:	d14c      	bne.n	8007312 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x292>
    s++;
 8007278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727a:	3301      	adds	r3, #1
 800727c:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800727e:	e040      	b.n	8007302 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x282>
      if (mantissa < traits::mantissa_max / 10) {
 8007280:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007284:	f1b2 3f99 	cmp.w	r2, #2576980377	; 0x99999999
 8007288:	495e      	ldr	r1, [pc, #376]	; (8007404 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x384>)
 800728a:	418b      	sbcs	r3, r1
 800728c:	d236      	bcs.n	80072fc <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x27c>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800728e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	f04f 0000 	mov.w	r0, #0
 800729a:	f04f 0100 	mov.w	r1, #0
 800729e:	0099      	lsls	r1, r3, #2
 80072a0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80072a4:	0090      	lsls	r0, r2, #2
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	eb12 0a04 	adds.w	sl, r2, r4
 80072ae:	eb43 0b05 	adc.w	fp, r3, r5
 80072b2:	eb1a 030a 	adds.w	r3, sl, sl
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	eb4b 030b 	adc.w	r3, fp, fp
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072c8:	7809      	ldrb	r1, [r1, #0]
 80072ca:	3930      	subs	r1, #48	; 0x30
 80072cc:	b2c9      	uxtb	r1, r1
 80072ce:	b2c9      	uxtb	r1, r1
 80072d0:	2000      	movs	r0, #0
 80072d2:	6239      	str	r1, [r7, #32]
 80072d4:	6278      	str	r0, [r7, #36]	; 0x24
 80072d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80072da:	4621      	mov	r1, r4
 80072dc:	1851      	adds	r1, r2, r1
 80072de:	6039      	str	r1, [r7, #0]
 80072e0:	4629      	mov	r1, r5
 80072e2:	414b      	adcs	r3, r1
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80072ea:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        exponent_offset--;
 80072ee:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      }
      s++;
 80072fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072fe:	3301      	adds	r3, #1
 8007300:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 8007302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fea5 	bl	8007056 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1b6      	bne.n	8007280 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x200>
    }
  }

  int exponent = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (*s == 'e' || *s == 'E') {
 8007318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b65      	cmp	r3, #101	; 0x65
 800731e:	d004      	beq.n	800732a <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2aa>
 8007320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b45      	cmp	r3, #69	; 0x45
 8007326:	f040 8083 	bne.w	8007430 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
    s++;
 800732a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732c:	3301      	adds	r3, #1
 800732e:	657b      	str	r3, [r7, #84]	; 0x54
    bool negative_exponent = false;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (*s == '-') {
 8007336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b2d      	cmp	r3, #45	; 0x2d
 800733c:	d106      	bne.n	800734c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2cc>
      negative_exponent = true;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      s++;
 8007344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007346:	3301      	adds	r3, #1
 8007348:	657b      	str	r3, [r7, #84]	; 0x54
 800734a:	e060      	b.n	800740e <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
    } else if (*s == '+') {
 800734c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b2b      	cmp	r3, #43	; 0x2b
 8007352:	d15c      	bne.n	800740e <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      s++;
 8007354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007356:	3301      	adds	r3, #1
 8007358:	657b      	str	r3, [r7, #84]	; 0x54
    }

    while (isdigit(*s)) {
 800735a:	e058      	b.n	800740e <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      exponent = exponent * 10 + (*s - '0');
 800735c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	461a      	mov	r2, r3
 800736a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	3b30      	subs	r3, #48	; 0x30
 8007370:	4413      	add	r3, r2
 8007372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8007376:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800737a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800737e:	4413      	add	r3, r2
 8007380:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8007384:	dd40      	ble.n	8007408 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x388>
        if (negative_exponent)
 8007386:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x330>
          result.setFloat(is_negative ? -0.0f : 0.0f);
 800738e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x31c>
 8007396:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80073f0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x370>
 800739a:	e001      	b.n	80073a0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x320>
 800739c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80073f8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x378>
 80073a0:	eeb0 0a47 	vmov.f32	s0, s14
 80073a4:	eef0 0a67 	vmov.f32	s1, s15
 80073a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80073aa:	f7ff fbd4 	bl	8006b56 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
 80073ae:	e01b      	b.n	80073e8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x368>
        else
          result.setFloat(is_negative ? -traits::inf() : traits::inf());
 80073b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x34e>
 80073b8:	f001 fa06 	bl	80087c8 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>
 80073bc:	ec53 2b10 	vmov	r2, r3, d0
 80073c0:	ee08 2a10 	vmov	s16, r2
 80073c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80073c8:	ee08 3a90 	vmov	s17, r3
 80073cc:	e005      	b.n	80073da <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x35a>
 80073ce:	f001 f9fb 	bl	80087c8 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>
 80073d2:	eeb0 8a40 	vmov.f32	s16, s0
 80073d6:	eef0 8a60 	vmov.f32	s17, s1
 80073da:	eeb0 0a48 	vmov.f32	s0, s16
 80073de:	eef0 0a68 	vmov.f32	s1, s17
 80073e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80073e4:	f7ff fbb7 	bl	8006b56 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
        return true;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e051      	b.n	8007490 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
 80073ec:	f3af 8000 	nop.w
 80073f0:	00000000 	.word	0x00000000
 80073f4:	80000000 	.word	0x80000000
	...
 8007400:	19999999 	.word	0x19999999
 8007404:	00019999 	.word	0x00019999
      }
      s++;
 8007408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800740a:	3301      	adds	r3, #1
 800740c:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800740e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fe1f 	bl	8007056 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d19e      	bne.n	800735c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2dc>
    }
    if (negative_exponent)
 800741e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d004      	beq.n	8007430 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
      exponent = -exponent;
 8007426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800742a:	425b      	negs	r3, r3
 800742c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  }
  exponent += exponent_offset;
 8007430:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8007434:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007438:	4413      	add	r3, r2
 800743a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 800743e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3ca>
    return false;
 8007446:	2300      	movs	r3, #0
 8007448:	e022      	b.n	8007490 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  JsonFloat final_result =
      make_float(static_cast<JsonFloat>(mantissa), exponent);
 800744a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800744e:	f7f9 f9d7 	bl	8000800 <__aeabi_ul2d>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800745a:	ec43 2b10 	vmov	d0, r2, r3
 800745e:	f001 f9c5 	bl	80087ec <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_>
 8007462:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

  result.setFloat(is_negative ? -final_result : final_result);
 8007466:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800746a:	2b00      	cmp	r3, #0
 800746c:	d006      	beq.n	800747c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3fc>
 800746e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
 8007472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8007478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800747a:	e003      	b.n	8007484 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x404>
 800747c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8007480:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 8007484:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8007488:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800748a:	f7ff fb64 	bl	8006b56 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
  return true;
 800748e:	2301      	movs	r3, #1
}
 8007490:	4618      	mov	r0, r3
 8007492:	3798      	adds	r7, #152	; 0x98
 8007494:	46bd      	mov	sp, r7
 8007496:	ecbd 8b02 	vpop	{d8}
 800749a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800749e:	bf00      	nop

080074a0 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1Ev>:
    InvalidInput,
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>:
  DeserializationError(Code c) : code_(c) {}
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <_ZNK11ArduinoJson8V6213HB220DeserializationErrorcvbEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs.code_;
  }

  // Returns true if there is an error
  explicit operator bool() const {
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
    return code_ != Ok;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
  }
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
    return true;
 8007500:	2301      	movs	r3, #1
  }
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
    return true;
 8007516:	2301      	movs	r3, #1
  }
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
    return true;
 800752c:	2301      	movs	r3, #1
  }
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
    return true;
 8007542:	2301      	movs	r3, #1
  }
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	220a      	movs	r2, #10
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	3b01      	subs	r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	f107 030c 	add.w	r3, r7, #12
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff ffe2 	bl	800756c <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Eh>
 80075a8:	7b3b      	ldrb	r3, [r7, #12]
  }
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bf0c      	ite	eq
 80075c2:	2301      	moveq	r3, #1
 80075c4:	2300      	movne	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
  }
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <_ZN11ArduinoJson8V6213HB26detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 80075dc:	793b      	ldrb	r3, [r7, #4]
 80075de:	737b      	strb	r3, [r7, #13]
 80075e0:	2300      	movs	r3, #0
 80075e2:	7b3a      	ldrb	r2, [r7, #12]
 80075e4:	f362 0307 	bfi	r3, r2, #0, #8
 80075e8:	7b7a      	ldrb	r2, [r7, #13]
 80075ea:	f362 230f 	bfi	r3, r2, #8, #8
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <_ZN11ArduinoJson8V6213HB26detail12StringCopierC1EPNS1_10MemoryPoolE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class StringCopier {
 public:
  StringCopier(MemoryPool* pool) : pool_(pool) {}
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>:

  void startString() {
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
    pool_->getFreeZone(&ptr_, &capacity_);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	1d19      	adds	r1, r3, #4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	330c      	adds	r3, #12
 800762c:	461a      	mov	r2, r3
 800762e:	f7ff f964 	bl	80068fa <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool11getFreeZoneEPPcPj>
    size_ = 0;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	609a      	str	r2, [r3, #8]
    if (capacity_ == 0)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv+0x32>
      pool_->markAsOverflowed();
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f9a1 	bl	800698c <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>
  }
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>:

  JsonString save() {
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(ptr_);
    ARDUINOJSON_ASSERT(size_ < capacity_);  // needs room for the terminator
    return JsonString(pool_->saveStringFromFreeZone(size_), size_,
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
                      JsonString::Copied);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7ff f95f 	bl	800692a <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj>
 800766c:	4601      	mov	r1, r0
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	2300      	movs	r3, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fe fff8 	bl	800666a <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  }
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)
      append(*s++);
  }

  void append(char c) {
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
    if (size_ + 1 < capacity_)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	429a      	cmp	r2, r3
 800769a:	d20a      	bcs.n	80076b2 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc+0x30>
      ptr_[size_++] = c;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	1c58      	adds	r0, r3, #1
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	6088      	str	r0, [r1, #8]
 80076aa:	4413      	add	r3, r2
 80076ac:	78fa      	ldrb	r2, [r7, #3]
 80076ae:	701a      	strb	r2, [r3, #0]
    else
      pool_->markAsOverflowed();
  }
 80076b0:	e004      	b.n	80076bc <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc+0x3a>
      pool_->markAsOverflowed();
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff f968 	bl	800698c <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>
  }
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>:

  bool isValid() const {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
    return !pool_->overflowed();
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff f8fa 	bl	80068ca <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f083 0301 	eor.w	r3, r3, #1
 80076dc:	b2db      	uxtb	r3, r3
  }
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(ptr_);
    ARDUINOJSON_ASSERT(size_ < capacity_);
    ptr_[size_] = 0;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
    return JsonString(ptr_, size_, JsonString::Copied);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	2300      	movs	r3, #0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fe ffae 	bl	800666a <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  }
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	4603      	mov	r3, r0
 800771e:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8007726:	d305      	bcc.n	8007734 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x1e>
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800772e:	d201      	bcs.n	8007734 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x1e>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x20>
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	4603      	mov	r3, r0
 800774a:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8007752:	d305      	bcc.n	8007760 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x1e>
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800775a:	d201      	bcs.n	8007760 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x1e>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x20>
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <_ZN11ArduinoJson8V6213HB26detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 800779c:	887b      	ldrh	r3, [r7, #2]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff ffb9 	bl	8007716 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d007      	beq.n	80077ba <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 80077aa:	887b      	ldrh	r3, [r7, #2]
 80077ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	801a      	strh	r2, [r3, #0]
      return false;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e018      	b.n	80077ec <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 80077ba:	887b      	ldrh	r3, [r7, #2]
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff ffc0 	bl	8007742 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	029a      	lsls	r2, r3, #10
 80077ce:	887b      	ldrh	r3, [r7, #2]
 80077d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80077da:	461a      	mov	r2, r3
      codepoint_ =
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	605a      	str	r2, [r3, #4]
      return true;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e003      	b.n	80077ec <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 80077e4:	887a      	ldrh	r2, [r7, #2]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	605a      	str	r2, [r3, #4]
    return true;
 80077ea:	2301      	movs	r3, #1
  }
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <_ZNK11ArduinoJson8V6213HB26detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    return codepoint_;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
  }
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <_Z13Error_Handlerv>:
void w5100_reset_deassert(void);
void w5100_reset(void);
void w5100_critical_enter(void);
void w5100_critical_exit(void);

void Error_Handler(void){
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
	printf("error\r\n");
 8007810:	4802      	ldr	r0, [pc, #8]	; (800781c <_Z13Error_Handlerv+0x10>)
 8007812:	f004 fba5 	bl	800bf60 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007816:	b672      	cpsid	i
}
 8007818:	bf00      	nop
	__disable_irq();
	while(1){
 800781a:	e7fe      	b.n	800781a <_Z13Error_Handlerv+0xe>
 800781c:	0800ccb4 	.word	0x0800ccb4

08007820 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JsonDocument with a memory pool on the stack.
template <size_t desiredCapacity>
class StaticJsonDocument : public JsonDocument {
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fab9 	bl	8006da2 <_ZN11ArduinoJson8V6213HB212JsonDocumentD1Ev>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <_Z17mqtt_publish_datav>:

	}
}

uint8_t mqtt_publish_data(void){
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	ed2d 8b02 	vpush	{d8}
 8007844:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007848:	af00      	add	r7, sp, #0
	std::string buff;
 800784a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800784e:	4618      	mov	r0, r3
 8007850:	f004 f8ef 	bl	800ba32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	StaticJsonDocument<256> doc;
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	4618      	mov	r0, r3
 800785a:	f001 f80c 	bl	8008876 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>
	MQTTMessage m;
	int rc = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	//message init
	m.qos = QOS0;
 8007864:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007868:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800786c:	2200      	movs	r2, #0
 800786e:	701a      	strb	r2, [r3, #0]
	m.retained = 0;
 8007870:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007874:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007878:	2200      	movs	r2, #0
 800787a:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 800787c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007880:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007884:	2200      	movs	r2, #0
 8007886:	709a      	strb	r2, [r3, #2]
 8007888:	4bec      	ldr	r3, [pc, #944]	; (8007c3c <_Z17mqtt_publish_datav+0x400>)
 800788a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800788e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007892:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8007896:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800789a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800789e:	f107 0210 	add.w	r2, r7, #16
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80078a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078ac:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80078b0:	601a      	str	r2, [r3, #0]
      public VariantOperators<MemberProxy<TUpstream, TStringRef>> {
  friend class VariantAttorney;

 public:
  FORCE_INLINE MemberProxy(TUpstream upstream, TStringRef key)
      : upstream_(upstream), key_(key) {}
 80078b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80078b6:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80078ba:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80078c6:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80078ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	605a      	str	r2, [r3, #4]
    return {*this, key};
 80078d2:	bf00      	nop
 80078d4:	4bda      	ldr	r3, [pc, #872]	; (8007c40 <_Z17mqtt_publish_datav+0x404>)
 80078d6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80078da:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80078de:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80078e2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80078e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80078ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80078ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80078f2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80078f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
  const TDerived& derived() const {
    return static_cast<const TDerived&>(*this);
  }

  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(derived());
 80078fa:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80078fe:	f001 fc4c 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007902:	4603      	mov	r3, r0
 8007904:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007908:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800790c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    return *this;
  }

 private:
  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(upstream_);
 8007910:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800791a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800791e:	f7ff fa5d 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007922:	4604      	mov	r4, r0
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007930:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
  FORCE_INLINE VariantData* getData() const {
    return VariantAttorney::getData(derived());
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return VariantAttorney::getOrCreateData(derived());
 8007934:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8007938:	f001 fc2f 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800793c:	4603      	mov	r3, r0
 800793e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007942:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007946:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    return variantGetMember(VariantAttorney::getData(upstream_),
                            adaptString(key_));
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800794a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  }

  template <typename TClient>
  FORCE_INLINE static VariantData* getOrCreateData(TClient& client) {
    return client.getOrCreateData();
 8007954:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8007958:	f7ff fa57 	bl	8006e0a <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800795c:	4605      	mov	r5, r0
 800795e:	bf00      	nop
                                 adaptString(key_),
 8007960:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007964:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fec3 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800796c:	4606      	mov	r6, r0
 800796e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    return client.getPool();
 8007978:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 800797c:	f7ff fa2e 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007980:	4603      	mov	r3, r0
 8007982:	bf00      	nop
 8007984:	461a      	mov	r2, r3
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	f003 f91a 	bl	800abc2 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800798e:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 8007990:	bf00      	nop
    return client.getOrCreateData();
 8007992:	bf00      	nop
 8007994:	bf00      	nop
  return JsonVariant(getPool(), getData());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
  return JsonVariant(getPool(), getOrCreateData());
 8007996:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800799a:	4621      	mov	r1, r4
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff f997 	bl	8006cd0 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T*>::toJson(value, getOrCreateVariant());
 80079a2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80079a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80079ae:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 80079b2:	f7ff fb33 	bl	800701c <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
 80079b6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80079ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    return VariantAttorney::getPool(derived());
 80079be:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 80079c2:	f001 fbea 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80079cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80079d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    return VariantAttorney::getPool(upstream_);
 80079d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    return client.getPool();
 80079de:	f8d7 0198 	ldr.w	r0, [r7, #408]	; 0x198
 80079e2:	f7ff f9fb 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 80079e6:	4603      	mov	r3, r0
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
    MemoryPool* pool = getPool();
 80079f0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    return pool && !pool->overflowed();
 80079f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <_Z17mqtt_publish_datav+0x1d2>
 80079fc:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8007a00:	f7fe ff63 	bl	80068ca <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f083 0301 	eor.w	r3, r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	4b8d      	ldr	r3, [pc, #564]	; (8007c44 <_Z17mqtt_publish_datav+0x408>)
 8007a10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8007a14:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007a18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007a24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007a28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
      : upstream_(upstream), key_(key) {}
 8007a2c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007a30:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007a3a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007a3e:	605a      	str	r2, [r3, #4]
 8007a40:	bf00      	nop
 8007a42:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007a46:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8007a4a:	4b7f      	ldr	r3, [pc, #508]	; (8007c48 <_Z17mqtt_publish_datav+0x40c>)
 8007a4c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    Converter<T>::toJson(value, getOrCreateVariant());
 8007a50:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8007a54:	781c      	ldrb	r4, [r3, #0]
 8007a56:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8007a5a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8007a5e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8007a62:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    return VariantAttorney::getPool(derived());
 8007a66:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007a6a:	f001 fb96 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8007a74:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007a78:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    return VariantAttorney::getPool(upstream_);
 8007a7c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8007a86:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8007a8a:	f7ff f9a7 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007a8e:	4605      	mov	r5, r0
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8007a9c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    return VariantAttorney::getOrCreateData(derived());
 8007aa0:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8007aa4:	f001 fb79 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8007aae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8007ab2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8007ab6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    return client.getOrCreateData();
 8007ac0:	f8d7 0204 	ldr.w	r0, [r7, #516]	; 0x204
 8007ac4:	f7ff f9a1 	bl	8006e0a <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 8007ac8:	4606      	mov	r6, r0
 8007aca:	bf00      	nop
                                 adaptString(key_),
 8007acc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8007ad0:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fe0d 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8007ad8:	4680      	mov	r8, r0
 8007ada:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    return client.getPool();
 8007ae4:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8007ae8:	f7ff f978 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007aec:	4603      	mov	r3, r0
 8007aee:	bf00      	nop
 8007af0:	461a      	mov	r2, r3
 8007af2:	4641      	mov	r1, r8
 8007af4:	4630      	mov	r0, r6
 8007af6:	f003 f864 	bl	800abc2 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 8007afa:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 8007afc:	bf00      	nop
    return client.getOrCreateData();
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007b06:	4629      	mov	r1, r5
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff f8e1 	bl	8006cd0 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 8007b0e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007b12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b16:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff fa64 	bl	8006fe8 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE>
 8007b20:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8007b24:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    return VariantAttorney::getPool(derived());
 8007b28:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 8007b2c:	f001 fb35 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8007b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    return VariantAttorney::getPool(upstream_);
 8007b3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    return client.getPool();
 8007b48:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8007b4c:	f7ff f946 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007b50:	4603      	mov	r3, r0
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
    MemoryPool* pool = getPool();
 8007b5a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    return pool && !pool->overflowed();
 8007b5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <_Z17mqtt_publish_datav+0x33c>
 8007b66:	f8d7 01ec 	ldr.w	r0, [r7, #492]	; 0x1ec
 8007b6a:	f7fe feae 	bl	80068ca <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f083 0301 	eor.w	r3, r3, #1
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	4b34      	ldr	r3, [pc, #208]	; (8007c4c <_Z17mqtt_publish_datav+0x410>)
 8007b7a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8007b7e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007b82:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8007b86:	f107 0310 	add.w	r3, r7, #16
 8007b8a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8007b8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8007b92:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
      : upstream_(upstream), key_(key) {}
 8007b96:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007b9a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007ba4:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8007ba8:	605a      	str	r2, [r3, #4]
 8007baa:	bf00      	nop
 8007bac:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8007bb0:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8007bb4:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <_Z17mqtt_publish_datav+0x414>)
 8007bb6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    Converter<T>::toJson(value, getOrCreateVariant());
 8007bba:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8007bbe:	ed93 8a00 	vldr	s16, [r3]
 8007bc2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8007bc6:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8007bca:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8007bce:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    return VariantAttorney::getPool(derived());
 8007bd2:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8007bd6:	f001 fae0 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8007be0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8007be4:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
    return VariantAttorney::getPool(upstream_);
 8007be8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8007bf2:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8007bf6:	f7ff f8f1 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8007c08:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
    return VariantAttorney::getOrCreateData(derived());
 8007c0c:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 8007c10:	f001 fac3 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007c14:	4603      	mov	r3, r0
 8007c16:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8007c1a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007c1e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8007c22:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    return client.getOrCreateData();
 8007c2c:	f8d7 0258 	ldr.w	r0, [r7, #600]	; 0x258
 8007c30:	f7ff f8eb 	bl	8006e0a <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 8007c34:	4605      	mov	r5, r0
 8007c36:	bf00      	nop
 8007c38:	e00c      	b.n	8007c54 <_Z17mqtt_publish_datav+0x418>
 8007c3a:	bf00      	nop
 8007c3c:	0800ccbc 	.word	0x0800ccbc
 8007c40:	0800ccc0 	.word	0x0800ccc0
 8007c44:	0800cccc 	.word	0x0800cccc
 8007c48:	20001bfc 	.word	0x20001bfc
 8007c4c:	0800ccd0 	.word	0x0800ccd0
 8007c50:	20001bf8 	.word	0x20001bf8
                                 adaptString(key_),
 8007c54:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007c58:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fd49 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8007c60:	4606      	mov	r6, r0
 8007c62:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    return client.getPool();
 8007c6c:	f8d7 0254 	ldr.w	r0, [r7, #596]	; 0x254
 8007c70:	f7ff f8b4 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007c74:	4603      	mov	r3, r0
 8007c76:	bf00      	nop
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	f002 ffa0 	bl	800abc2 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 8007c82:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 8007c84:	bf00      	nop
    return client.getOrCreateData();
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff f81d 	bl	8006cd0 <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 8007c96:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007c9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007c9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ca2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ca6:	f001 f91e 	bl	8008ee6 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 8007caa:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8007cae:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    return VariantAttorney::getPool(derived());
 8007cb2:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 8007cb6:	f001 fa70 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cc4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    return VariantAttorney::getPool(upstream_);
 8007cc8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    return client.getPool();
 8007cd2:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8007cd6:	f7ff f881 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
    MemoryPool* pool = getPool();
 8007ce4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    return pool && !pool->overflowed();
 8007ce8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <_Z17mqtt_publish_datav+0x4c6>
 8007cf0:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8007cf4:	f7fe fde9 	bl	80068ca <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f083 0301 	eor.w	r3, r3, #1
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b00      	cmp	r3, #0
    return getVariant();
 8007d02:	f107 0310 	add.w	r3, r7, #16
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff f856 	bl	8006db8 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	bf00      	nop
 8007d10:	461a      	mov	r2, r3
	//message json
	doc["id"] = "STM32F407VG";
	doc["led"] = led;
	doc["temperature"] = T;

	serializeJson(doc, buff);
 8007d12:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f000 fd11 	bl	8008740 <_ZN11ArduinoJson8V6213HB213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>
	//publish data
	m.payload = (void *)buff.c_str();
 8007d1e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007d22:	4618      	mov	r0, r3
 8007d24:	f003 feec 	bl	800bb00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007d2e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007d32:	609a      	str	r2, [r3, #8]
	m.payloadlen = buff.length();
 8007d34:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f003 fe8d 	bl	800ba58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8007d44:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007d48:	60da      	str	r2, [r3, #12]
	rc = MQTTPublish(&c, (const char*)"Led/estado", &m);
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4915      	ldr	r1, [pc, #84]	; (8007da4 <_Z17mqtt_publish_datav+0x568>)
 8007d50:	4815      	ldr	r0, [pc, #84]	; (8007da8 <_Z17mqtt_publish_datav+0x56c>)
 8007d52:	f7fd fb12 	bl	800537a <MQTTPublish>
 8007d56:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
	if(rc == SUCCESSS){
 8007d5a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <_Z17mqtt_publish_datav+0x532>
		printf("Published %d\r\n", rc);
 8007d62:	f8d7 1284 	ldr.w	r1, [r7, #644]	; 0x284
 8007d66:	4811      	ldr	r0, [pc, #68]	; (8007dac <_Z17mqtt_publish_datav+0x570>)
 8007d68:	f004 f894 	bl	800be94 <iprintf>
 8007d6c:	e004      	b.n	8007d78 <_Z17mqtt_publish_datav+0x53c>
	}else{
		printf("Published error! %d\r\n", rc);
 8007d6e:	f8d7 1284 	ldr.w	r1, [r7, #644]	; 0x284
 8007d72:	480f      	ldr	r0, [pc, #60]	; (8007db0 <_Z17mqtt_publish_datav+0x574>)
 8007d74:	f004 f88e 	bl	800be94 <iprintf>
	}
	return rc;
 8007d78:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8007d7c:	b2dc      	uxtb	r4, r3

}
 8007d7e:	f107 0310 	add.w	r3, r7, #16
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fd4c 	bl	8007820 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>
 8007d88:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f003 fe57 	bl	800ba40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return rc;
 8007d92:	4623      	mov	r3, r4
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	ecbd 8b02 	vpop	{d8}
 8007da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da4:	0800ccdc 	.word	0x0800ccdc
 8007da8:	20001b9c 	.word	0x20001b9c
 8007dac:	0800cce8 	.word	0x0800cce8
 8007db0:	0800ccf8 	.word	0x0800ccf8

08007db4 <_Z25print_network_informationv>:
void print_network_information(void)
{
 8007db4:	b5b0      	push	{r4, r5, r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af04      	add	r7, sp, #16
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 8007dba:	2217      	movs	r2, #23
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4831      	ldr	r0, [pc, #196]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dc0:	f004 f9ae 	bl	800c120 <memset>

	wizchip_getnetinfo(&gWIZNETINFO);
 8007dc4:	482f      	ldr	r0, [pc, #188]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dc6:	f7fa fe17 	bl	80029f8 <wizchip_getnetinfo>
	printf("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8007dca:	4b2e      	ldr	r3, [pc, #184]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	461c      	mov	r4, r3
 8007dd6:	4b2b      	ldr	r3, [pc, #172]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dd8:	789b      	ldrb	r3, [r3, #2]
 8007dda:	461d      	mov	r5, r3
 8007ddc:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dde:	78db      	ldrb	r3, [r3, #3]
 8007de0:	461a      	mov	r2, r3
 8007de2:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	4619      	mov	r1, r3
 8007de8:	4b26      	ldr	r3, [pc, #152]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007dea:	795b      	ldrb	r3, [r3, #5]
 8007dec:	9302      	str	r3, [sp, #8]
 8007dee:	9101      	str	r1, [sp, #4]
 8007df0:	9200      	str	r2, [sp, #0]
 8007df2:	462b      	mov	r3, r5
 8007df4:	4622      	mov	r2, r4
 8007df6:	4601      	mov	r1, r0
 8007df8:	4823      	ldr	r0, [pc, #140]	; (8007e88 <_Z25print_network_informationv+0xd4>)
 8007dfa:	f004 f84b 	bl	800be94 <iprintf>
	printf("IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8007dfe:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e00:	799b      	ldrb	r3, [r3, #6]
 8007e02:	4619      	mov	r1, r3
 8007e04:	4b1f      	ldr	r3, [pc, #124]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e06:	79db      	ldrb	r3, [r3, #7]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4b1e      	ldr	r3, [pc, #120]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e0c:	7a1b      	ldrb	r3, [r3, #8]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e12:	7a5b      	ldrb	r3, [r3, #9]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	4603      	mov	r3, r0
 8007e18:	481c      	ldr	r0, [pc, #112]	; (8007e8c <_Z25print_network_informationv+0xd8>)
 8007e1a:	f004 f83b 	bl	800be94 <iprintf>
	printf("Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8007e1e:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e20:	7a9b      	ldrb	r3, [r3, #10]
 8007e22:	4619      	mov	r1, r3
 8007e24:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e26:	7adb      	ldrb	r3, [r3, #11]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e2c:	7b1b      	ldrb	r3, [r3, #12]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	4b14      	ldr	r3, [pc, #80]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e32:	7b5b      	ldrb	r3, [r3, #13]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	4603      	mov	r3, r0
 8007e38:	4815      	ldr	r0, [pc, #84]	; (8007e90 <_Z25print_network_informationv+0xdc>)
 8007e3a:	f004 f82b 	bl	800be94 <iprintf>
	printf("Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8007e3e:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e40:	7b9b      	ldrb	r3, [r3, #14]
 8007e42:	4619      	mov	r1, r3
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e46:	7bdb      	ldrb	r3, [r3, #15]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e4c:	7c1b      	ldrb	r3, [r3, #16]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e52:	7c5b      	ldrb	r3, [r3, #17]
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	4603      	mov	r3, r0
 8007e58:	480e      	ldr	r0, [pc, #56]	; (8007e94 <_Z25print_network_informationv+0xe0>)
 8007e5a:	f004 f81b 	bl	800be94 <iprintf>
	printf("DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e60:	7c9b      	ldrb	r3, [r3, #18]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e66:	7cdb      	ldrb	r3, [r3, #19]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e6c:	7d1b      	ldrb	r3, [r3, #20]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <_Z25print_network_informationv+0xd0>)
 8007e72:	7d5b      	ldrb	r3, [r3, #21]
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	4603      	mov	r3, r0
 8007e78:	4807      	ldr	r0, [pc, #28]	; (8007e98 <_Z25print_network_informationv+0xe4>)
 8007e7a:	f004 f80b 	bl	800be94 <iprintf>
}
 8007e7e:	bf00      	nop
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bdb0      	pop	{r4, r5, r7, pc}
 8007e84:	2000004c 	.word	0x2000004c
 8007e88:	0800cd10 	.word	0x0800cd10
 8007e8c:	0800cd40 	.word	0x0800cd40
 8007e90:	0800cd5c 	.word	0x0800cd5c
 8007e94:	0800cd78 	.word	0x0800cd78
 8007e98:	0800cd94 	.word	0x0800cd94

08007e9c <_Z13proccess_dhcpv>:
int proccess_dhcp(void){
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	71fb      	strb	r3, [r7, #7]
	uint32_t timout = millis();
 8007ea6:	f7fe fb31 	bl	800650c <millis>
 8007eaa:	6038      	str	r0, [r7, #0]
	while(1){
		ret = DHCP_run();
 8007eac:	f7fb fed4 	bl	8003c58 <DHCP_run>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	71fb      	strb	r3, [r7, #7]

		if(ret == DHCP_IP_LEASED){
 8007eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d10a      	bne.n	8007ed2 <_Z13proccess_dhcpv+0x36>
			//printf information
			memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 8007ebc:	2217      	movs	r2, #23
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	480f      	ldr	r0, [pc, #60]	; (8007f00 <_Z13proccess_dhcpv+0x64>)
 8007ec2:	f004 f92d 	bl	800c120 <memset>

			wizchip_getnetinfo(&gWIZNETINFO);
 8007ec6:	480e      	ldr	r0, [pc, #56]	; (8007f00 <_Z13proccess_dhcpv+0x64>)
 8007ec8:	f7fa fd96 	bl	80029f8 <wizchip_getnetinfo>
			print_network_information();
 8007ecc:	f7ff ff72 	bl	8007db4 <_Z25print_network_informationv>
			break;
 8007ed0:	e00f      	b.n	8007ef2 <_Z13proccess_dhcpv+0x56>
			//todo

		}

		//check timeout
		if((millis() - timout) >= DHCP_TIMEOUT ){
 8007ed2:	f7fe fb1b 	bl	800650c <millis>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bf8c      	ite	hi
 8007ee4:	2301      	movhi	r3, #1
 8007ee6:	2300      	movls	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0de      	beq.n	8007eac <_Z13proccess_dhcpv+0x10>
			DHCP_stop();
 8007eee:	f7fb ffcb 	bl	8003e88 <DHCP_stop>
			break;
		}

	}
	return ret;
 8007ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	2000004c 	.word	0x2000004c

08007f04 <_Z14messageArrivedP11MessageData>:
void messageArrived(MessageData* md)
{
 8007f04:	b5b0      	push	{r4, r5, r7, lr}
 8007f06:	b0fa      	sub	sp, #488	; 0x1e8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8007f0e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007f12:	6018      	str	r0, [r3, #0]
	StaticJsonDocument<256> doc;
 8007f14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fcac 	bl	8008876 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>
	DeserializationError err;
 8007f1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fabc 	bl	80074a0 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1Ev>
	unsigned char topicSusc[100];
	uint32_t rd_size;
	uint32_t rd_pt;
	uint32_t rdmore_size;

	MQTTMessage* message = md->message;
 8007f28:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8007f2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	MQTTString* topic = md->topicName;
 8007f38:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8007f3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	rdmore_size = (int)topic->lenstring.len;
 8007f48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	rd_pt = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	while(rdmore_size != 0)
 8007f58:	e035      	b.n	8007fc6 <_Z14messageArrivedP11MessageData+0xc2>
	{
		if(rdmore_size > sizeof(topicSusc) - 1)
 8007f5a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8007f5e:	2b63      	cmp	r3, #99	; 0x63
 8007f60:	d903      	bls.n	8007f6a <_Z14messageArrivedP11MessageData+0x66>
		{
			rd_size = sizeof(topicSusc) - 1;
 8007f62:	2363      	movs	r3, #99	; 0x63
 8007f64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007f68:	e003      	b.n	8007f72 <_Z14messageArrivedP11MessageData+0x6e>
		}
		else
		{
			rd_size = rdmore_size;
 8007f6a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8007f6e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		}

		memset(topicSusc, 0, rd_size + 1);
 8007f72:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	f107 0320 	add.w	r3, r7, #32
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f004 f8ce 	bl	800c120 <memset>

		memcpy(topicSusc, ((char*)topic->lenstring.data) + rd_pt, rd_size);
 8007f84:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007f88:	689a      	ldr	r2, [r3, #8]
 8007f8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007f8e:	18d1      	adds	r1, r2, r3
 8007f90:	f107 0320 	add.w	r3, r7, #32
 8007f94:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f004 f9c9 	bl	800c330 <memcpy>
		printf("SubScribe Topic : %s\r\n", topicSusc);
 8007f9e:	f107 0320 	add.w	r3, r7, #32
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4854      	ldr	r0, [pc, #336]	; (80080f8 <_Z14messageArrivedP11MessageData+0x1f4>)
 8007fa6:	f003 ff75 	bl	800be94 <iprintf>
		rd_pt += rd_size;
 8007faa:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007fae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		rdmore_size -= rd_size;
 8007fb8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007fbc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	while(rdmore_size != 0)
 8007fc6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1c5      	bne.n	8007f5a <_Z14messageArrivedP11MessageData+0x56>
	}

	if (opts.nodelimiter)
 8007fce:	4b4b      	ldr	r3, [pc, #300]	; (80080fc <_Z14messageArrivedP11MessageData+0x1f8>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <_Z14messageArrivedP11MessageData+0xea>
	{
		printf("Message 1 : %.*s\r\n", (int)message->payloadlen, (char*)message->payload);
 8007fd6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4846      	ldr	r0, [pc, #280]	; (8008100 <_Z14messageArrivedP11MessageData+0x1fc>)
 8007fe8:	f003 ff54 	bl	800be94 <iprintf>
 8007fec:	e00b      	b.n	8008006 <_Z14messageArrivedP11MessageData+0x102>
	}
	else
	{
		printf("Message 2: %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 8007fee:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	4b3f      	ldr	r3, [pc, #252]	; (80080fc <_Z14messageArrivedP11MessageData+0x1f8>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	4840      	ldr	r0, [pc, #256]	; (8008104 <_Z14messageArrivedP11MessageData+0x200>)
 8008002:	f003 ff47 	bl	800be94 <iprintf>
	}
	//Procesar el json
	std::string msg((char*)message->payload, (int)message->payloadlen);
 8008006:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800800a:	689c      	ldr	r4, [r3, #8]
 800800c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8008010:	68dd      	ldr	r5, [r3, #12]
 8008012:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008016:	4618      	mov	r0, r3
 8008018:	f003 fc81 	bl	800b91e <_ZNSaIcEC1Ev>
 800801c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008020:	f107 0008 	add.w	r0, r7, #8
 8008024:	462a      	mov	r2, r5
 8008026:	4621      	mov	r1, r4
 8008028:	f003 fd90 	bl	800bb4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800802c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008030:	4618      	mov	r0, r3
 8008032:	f003 fc75 	bl	800b920 <_ZNSaIcED1Ev>
	err = deserializeJson(doc, msg);
 8008036:	f107 0208 	add.w	r2, r7, #8
 800803a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f000 fc29 	bl	8008898 <_ZN11ArduinoJson8V6213HB215deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>
 8008046:	4602      	mov	r2, r0
 8008048:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800804c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8008050:	701a      	strb	r2, [r3, #0]
	if(err){
 8008052:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fa3d 	bl	80074d6 <_ZNK11ArduinoJson8V6213HB220DeserializationErrorcvbEv>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <_Z14messageArrivedP11MessageData+0x166>
		printf("error deserialize json\r\n");
 8008062:	4829      	ldr	r0, [pc, #164]	; (8008108 <_Z14messageArrivedP11MessageData+0x204>)
 8008064:	f003 ff7c 	bl	800bf60 <puts>
			GPIOX_ODR(LED) = 0;
			led = false;
		}
		mqtt_publish_data();
	}
	return;
 8008068:	e036      	b.n	80080d8 <_Z14messageArrivedP11MessageData+0x1d4>
 800806a:	4b28      	ldr	r3, [pc, #160]	; (800810c <_Z14messageArrivedP11MessageData+0x208>)
 800806c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8008070:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8008074:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8008078:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800807c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008080:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008084:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
      : upstream_(upstream), key_(key) {}
 8008088:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800808c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008096:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800809a:	605a      	str	r2, [r3, #4]
    return {*this, key};
 800809c:	bf00      	nop
		if(doc["ledState"] == true){
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 80080a4:	f207 12c3 	addw	r2, r7, #451	; 0x1c3
 80080a8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fc04 	bl	80088bc <_ZN11ArduinoJson8V6213HB26detaileqIbEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS1_11MemberProxyIRNS0_12JsonDocumentEPKcEERKS6_>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d006      	beq.n	80080c8 <_Z14messageArrivedP11MessageData+0x1c4>
			GPIOX_ODR(LED) = 1;
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <_Z14messageArrivedP11MessageData+0x20c>)
 80080bc:	2201      	movs	r2, #1
 80080be:	601a      	str	r2, [r3, #0]
			led = true;
 80080c0:	4b14      	ldr	r3, [pc, #80]	; (8008114 <_Z14messageArrivedP11MessageData+0x210>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	701a      	strb	r2, [r3, #0]
 80080c6:	e005      	b.n	80080d4 <_Z14messageArrivedP11MessageData+0x1d0>
			GPIOX_ODR(LED) = 0;
 80080c8:	4b11      	ldr	r3, [pc, #68]	; (8008110 <_Z14messageArrivedP11MessageData+0x20c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
			led = false;
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <_Z14messageArrivedP11MessageData+0x210>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
		mqtt_publish_data();
 80080d4:	f7ff fbb2 	bl	800783c <_Z17mqtt_publish_datav>
	return;
 80080d8:	bf00      	nop
}
 80080da:	f107 0308 	add.w	r3, r7, #8
 80080de:	4618      	mov	r0, r3
 80080e0:	f003 fcae 	bl	800ba40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80080e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fb99 	bl	8007820 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>
	return;
 80080ee:	bf00      	nop
}
 80080f0:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bdb0      	pop	{r4, r5, r7, pc}
 80080f8:	0800cdb0 	.word	0x0800cdb0
 80080fc:	2000007c 	.word	0x2000007c
 8008100:	0800cdc8 	.word	0x0800cdc8
 8008104:	0800cddc 	.word	0x0800cddc
 8008108:	0800cdf0 	.word	0x0800cdf0
 800810c:	0800ce08 	.word	0x0800ce08
 8008110:	424182b0 	.word	0x424182b0
 8008114:	20001bfc 	.word	0x20001bfc

08008118 <_Z8MQTT_runv>:
void MQTT_run(void){
 8008118:	b580      	push	{r7, lr}
 800811a:	b09c      	sub	sp, #112	; 0x70
 800811c:	af04      	add	r7, sp, #16
	int rc = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	65bb      	str	r3, [r7, #88]	; 0x58


	uint32_t ck_timer;

	NewNetwork(&n, MQTT_SOCKET);
 8008122:	2100      	movs	r1, #0
 8008124:	484c      	ldr	r0, [pc, #304]	; (8008258 <_Z8MQTT_runv+0x140>)
 8008126:	f7fd fa5b 	bl	80055e0 <NewNetwork>
	ConnectNetwork(&n, mqtt_ip, mqtt_port);
 800812a:	f240 725b 	movw	r2, #1883	; 0x75b
 800812e:	494b      	ldr	r1, [pc, #300]	; (800825c <_Z8MQTT_runv+0x144>)
 8008130:	4849      	ldr	r0, [pc, #292]	; (8008258 <_Z8MQTT_runv+0x140>)
 8008132:	f7fd face 	bl	80056d2 <ConnectNetwork>
	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 8008136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800813a:	9302      	str	r3, [sp, #8]
 800813c:	4b48      	ldr	r3, [pc, #288]	; (8008260 <_Z8MQTT_runv+0x148>)
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	4b47      	ldr	r3, [pc, #284]	; (8008264 <_Z8MQTT_runv+0x14c>)
 8008148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800814c:	4942      	ldr	r1, [pc, #264]	; (8008258 <_Z8MQTT_runv+0x140>)
 800814e:	4846      	ldr	r0, [pc, #280]	; (8008268 <_Z8MQTT_runv+0x150>)
 8008150:	f7fc fcba 	bl	8004ac8 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8008154:	4a45      	ldr	r2, [pc, #276]	; (800826c <_Z8MQTT_runv+0x154>)
 8008156:	463b      	mov	r3, r7
 8008158:	4611      	mov	r1, r2
 800815a:	2258      	movs	r2, #88	; 0x58
 800815c:	4618      	mov	r0, r3
 800815e:	f004 f8e7 	bl	800c330 <memcpy>
	data.willFlag = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	76fb      	strb	r3, [r7, #27]
	data.MQTTVersion = 3;
 8008166:	2303      	movs	r3, #3
 8008168:	723b      	strb	r3, [r7, #8]
	data.clientID.cstring = opts.clientid;
 800816a:	4b41      	ldr	r3, [pc, #260]	; (8008270 <_Z8MQTT_runv+0x158>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]
	data.username.cstring = opts.username;
 8008170:	4b3f      	ldr	r3, [pc, #252]	; (8008270 <_Z8MQTT_runv+0x158>)
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	643b      	str	r3, [r7, #64]	; 0x40
	data.password.cstring = opts.password;
 8008176:	4b3e      	ldr	r3, [pc, #248]	; (8008270 <_Z8MQTT_runv+0x158>)
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	64fb      	str	r3, [r7, #76]	; 0x4c
	data.keepAliveInterval = 60;
 800817c:	233c      	movs	r3, #60	; 0x3c
 800817e:	833b      	strh	r3, [r7, #24]
	data.cleansession = 1;
 8008180:	2301      	movs	r3, #1
 8008182:	76bb      	strb	r3, [r7, #26]

	if(MQTTConnect(&c, &data) == SUCCESSS){
 8008184:	463b      	mov	r3, r7
 8008186:	4619      	mov	r1, r3
 8008188:	4837      	ldr	r0, [pc, #220]	; (8008268 <_Z8MQTT_runv+0x150>)
 800818a:	f7fc ffc7 	bl	800511c <MQTTConnect>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <_Z8MQTT_runv+0x8e>
		printf("connect server\r\n");
 800819e:	4835      	ldr	r0, [pc, #212]	; (8008274 <_Z8MQTT_runv+0x15c>)
 80081a0:	f003 fede 	bl	800bf60 <puts>
 80081a4:	e004      	b.n	80081b0 <_Z8MQTT_runv+0x98>
	}else{
		printf("disconnect\r\n");
 80081a6:	4834      	ldr	r0, [pc, #208]	; (8008278 <_Z8MQTT_runv+0x160>)
 80081a8:	f003 feda 	bl	800bf60 <puts>
		Error_Handler();
 80081ac:	f7ff fb2e 	bl	800780c <_Z13Error_Handlerv>
	}
	opts.showtopics = 1;
 80081b0:	4b2f      	ldr	r3, [pc, #188]	; (8008270 <_Z8MQTT_runv+0x158>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	621a      	str	r2, [r3, #32]

	printf("Subscribing to %s\r\n", MQTT_TOPIC);
 80081b6:	4931      	ldr	r1, [pc, #196]	; (800827c <_Z8MQTT_runv+0x164>)
 80081b8:	4831      	ldr	r0, [pc, #196]	; (8008280 <_Z8MQTT_runv+0x168>)
 80081ba:	f003 fe6b 	bl	800be94 <iprintf>
	rc = MQTTSubscribe(&c, ( const char*)MQTT_TOPIC, opts.qos, messageArrived);
 80081be:	4b2c      	ldr	r3, [pc, #176]	; (8008270 <_Z8MQTT_runv+0x158>)
 80081c0:	7b1a      	ldrb	r2, [r3, #12]
 80081c2:	4b30      	ldr	r3, [pc, #192]	; (8008284 <_Z8MQTT_runv+0x16c>)
 80081c4:	492d      	ldr	r1, [pc, #180]	; (800827c <_Z8MQTT_runv+0x164>)
 80081c6:	4828      	ldr	r0, [pc, #160]	; (8008268 <_Z8MQTT_runv+0x150>)
 80081c8:	f7fd f82e 	bl	8005228 <MQTTSubscribe>
 80081cc:	65b8      	str	r0, [r7, #88]	; 0x58
	printf("Subscribed %d\r\n", rc);
 80081ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081d0:	482d      	ldr	r0, [pc, #180]	; (8008288 <_Z8MQTT_runv+0x170>)
 80081d2:	f003 fe5f 	bl	800be94 <iprintf>



	ck_timer = millis();
 80081d6:	f7fe f999 	bl	800650c <millis>
 80081da:	65f8      	str	r0, [r7, #92]	; 0x5c

	while(1){
		MQTTYield(&c, data.keepAliveInterval);
 80081dc:	8b3b      	ldrh	r3, [r7, #24]
 80081de:	4619      	mov	r1, r3
 80081e0:	4821      	ldr	r0, [pc, #132]	; (8008268 <_Z8MQTT_runv+0x150>)
 80081e2:	f7fc ff57 	bl	8005094 <MQTTYield>

		//publish data

		if((millis() - ck_timer) >= 10000){
 80081e6:	f7fe f991 	bl	800650c <millis>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80081f4:	4293      	cmp	r3, r2
 80081f6:	bf8c      	ite	hi
 80081f8:	2301      	movhi	r3, #1
 80081fa:	2300      	movls	r3, #0
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0ec      	beq.n	80081dc <_Z8MQTT_runv+0xc4>
			ck_timer = millis();
 8008202:	f7fe f983 	bl	800650c <millis>
 8008206:	65f8      	str	r0, [r7, #92]	; 0x5c
			T += 2.3;
 8008208:	4b20      	ldr	r3, [pc, #128]	; (800828c <_Z8MQTT_runv+0x174>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f7f8 fad5 	bl	80007bc <__aeabi_f2d>
 8008212:	a30f      	add	r3, pc, #60	; (adr r3, 8008250 <_Z8MQTT_runv+0x138>)
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f7f8 f972 	bl	8000500 <__adddf3>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4610      	mov	r0, r2
 8008222:	4619      	mov	r1, r3
 8008224:	f7f8 fbca 	bl	80009bc <__aeabi_d2f>
 8008228:	4603      	mov	r3, r0
 800822a:	4a18      	ldr	r2, [pc, #96]	; (800828c <_Z8MQTT_runv+0x174>)
 800822c:	6013      	str	r3, [r2, #0]
			if(T > 30){
 800822e:	4b17      	ldr	r3, [pc, #92]	; (800828c <_Z8MQTT_runv+0x174>)
 8008230:	edd3 7a00 	vldr	s15, [r3]
 8008234:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008240:	dd03      	ble.n	800824a <_Z8MQTT_runv+0x132>
				T = 4;
 8008242:	4b12      	ldr	r3, [pc, #72]	; (800828c <_Z8MQTT_runv+0x174>)
 8008244:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008248:	601a      	str	r2, [r3, #0]
			}

			mqtt_publish_data();
 800824a:	f7ff faf7 	bl	800783c <_Z17mqtt_publish_datav>
		MQTTYield(&c, data.keepAliveInterval);
 800824e:	e7c5      	b.n	80081dc <_Z8MQTT_runv+0xc4>
 8008250:	66666666 	.word	0x66666666
 8008254:	40026666 	.word	0x40026666
 8008258:	20001b8c 	.word	0x20001b8c
 800825c:	20001184 	.word	0x20001184
 8008260:	2000138c 	.word	0x2000138c
 8008264:	20001188 	.word	0x20001188
 8008268:	20001b9c 	.word	0x20001b9c
 800826c:	0800ce54 	.word	0x0800ce54
 8008270:	2000007c 	.word	0x2000007c
 8008274:	0800ce14 	.word	0x0800ce14
 8008278:	0800ce24 	.word	0x0800ce24
 800827c:	0800ced4 	.word	0x0800ced4
 8008280:	0800ce30 	.word	0x0800ce30
 8008284:	08007f05 	.word	0x08007f05
 8008288:	0800ce44 	.word	0x0800ce44
 800828c:	20001bf8 	.word	0x20001bf8

08008290 <main>:
		}
	}
}
/*Main ----------------------------------------------------*/
int main(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
	//systick init
	delay_init_it();
 8008296:	f7fe f8f3 	bl	8006480 <delay_init_it>
	//spi init
	SPI1_Init();
 800829a:	f000 f8a7 	bl	80083ec <_Z9SPI1_Initv>
	//pinout
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(ETH_RST) | GPIOX_CLOCK(BUTTON);
 800829e:	4b41      	ldr	r3, [pc, #260]	; (80083a4 <main+0x114>)
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	4a40      	ldr	r2, [pc, #256]	; (80083a4 <main+0x114>)
 80082a4:	f043 030d 	orr.w	r3, r3, #13
 80082a8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, ETH_RST);
 80082aa:	4b3f      	ldr	r3, [pc, #252]	; (80083a8 <main+0x118>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80082b2:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <main+0x118>)
 80082b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082b8:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_OUT, LED);
 80082ba:	4b3c      	ldr	r3, [pc, #240]	; (80083ac <main+0x11c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80082c2:	4a3a      	ldr	r2, [pc, #232]	; (80083ac <main+0x11c>)
 80082c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082c8:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_DIGITAL_INPUT, BUTTON);
 80082ca:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <main+0x120>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a38      	ldr	r2, [pc, #224]	; (80083b0 <main+0x120>)
 80082d0:	f023 0303 	bic.w	r3, r3, #3
 80082d4:	6013      	str	r3, [r2, #0]

	//Ethernet W5100
	reg_wizchip_spi_cbfunc(w5100_ll_read_byte, w5100_ll_write_byte);
 80082d6:	4937      	ldr	r1, [pc, #220]	; (80083b4 <main+0x124>)
 80082d8:	4837      	ldr	r0, [pc, #220]	; (80083b8 <main+0x128>)
 80082da:	f7fa f8f5 	bl	80024c8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(w5100_cs_enable, w5100_cs_disable);
 80082de:	4937      	ldr	r1, [pc, #220]	; (80083bc <main+0x12c>)
 80082e0:	4837      	ldr	r0, [pc, #220]	; (80083c0 <main+0x130>)
 80082e2:	f7fa f8cb 	bl	800247c <reg_wizchip_cs_cbfunc>
	reg_wizchip_cris_cbfunc(w5100_critical_enter, w5100_critical_exit);
 80082e6:	4937      	ldr	r1, [pc, #220]	; (80083c4 <main+0x134>)
 80082e8:	4837      	ldr	r0, [pc, #220]	; (80083c8 <main+0x138>)
 80082ea:	f7fa f8a1 	bl	8002430 <reg_wizchip_cris_cbfunc>

	//reset
	w5100_reset();
 80082ee:	f000 f97d 	bl	80085ec <_Z11w5100_resetv>
	uint8_t temp = IK_DEST_UNREACH;
 80082f2:	2340      	movs	r3, #64	; 0x40
 80082f4:	73fb      	strb	r3, [r7, #15]
	uint8_t W5x00_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};
 80082f6:	4a35      	ldr	r2, [pc, #212]	; (80083cc <main+0x13c>)
 80082f8:	1d3b      	adds	r3, r7, #4
 80082fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082fe:	e883 0003 	stmia.w	r3, {r0, r1}

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)W5x00_AdrSet) == -1){
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	4619      	mov	r1, r3
 8008306:	2001      	movs	r0, #1
 8008308:	f7fa f90a 	bl	8002520 <ctlwizchip>
 800830c:	4603      	mov	r3, r0
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	bf0c      	ite	eq
 8008314:	2301      	moveq	r3, #1
 8008316:	2300      	movne	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <main+0x92>
			Error_Handler();
 800831e:	f7ff fa75 	bl	800780c <_Z13Error_Handlerv>
	}

	if(ctlwizchip(CW_SET_INTRMASK, &temp) == -1){
 8008322:	f107 030f 	add.w	r3, r7, #15
 8008326:	4619      	mov	r1, r3
 8008328:	2004      	movs	r0, #4
 800832a:	f7fa f8f9 	bl	8002520 <ctlwizchip>
 800832e:	4603      	mov	r3, r0
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	bf0c      	ite	eq
 8008336:	2301      	moveq	r3, #1
 8008338:	2300      	movne	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <main+0xb4>
		Error_Handler();
 8008340:	f7ff fa64 	bl	800780c <_Z13Error_Handlerv>
	}
	wizchip_setnetinfo(&gWIZNETINFO);
 8008344:	4822      	ldr	r0, [pc, #136]	; (80083d0 <main+0x140>)
 8008346:	f7fa fb1b 	bl	8002980 <wizchip_setnetinfo>
	delay_ms(3000);
 800834a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800834e:	f7fe f8c7 	bl	80064e0 <delay_ms>

	//DHCP
	DHCP_init(DHCP_SOCKET, ethBuf0);
 8008352:	4920      	ldr	r1, [pc, #128]	; (80083d4 <main+0x144>)
 8008354:	2000      	movs	r0, #0
 8008356:	f7fb fe43 	bl	8003fe0 <DHCP_init>
	while(1){
		if(proccess_dhcp() == DHCP_IP_LEASED){
 800835a:	f7ff fd9f 	bl	8007e9c <_Z13proccess_dhcpv>
 800835e:	4603      	mov	r3, r0
 8008360:	2b04      	cmp	r3, #4
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d100      	bne.n	8008370 <main+0xe0>
 800836e:	e7f4      	b.n	800835a <main+0xca>
		  break;
 8008370:	bf00      	nop
		}
	}
	//DNS
	DNS_init(DNS_SOCKET, ethBuf1);
 8008372:	4919      	ldr	r1, [pc, #100]	; (80083d8 <main+0x148>)
 8008374:	2001      	movs	r0, #1
 8008376:	f7fc fa91 	bl	800489c <DNS_init>
	IP_TYPE = 0x1c;
 800837a:	4b18      	ldr	r3, [pc, #96]	; (80083dc <main+0x14c>)
 800837c:	221c      	movs	r2, #28
 800837e:	701a      	strb	r2, [r3, #0]
	while(1){
	  if(DNS_run(dns_server_ip, URL, mqtt_ip) == 1){
 8008380:	4a17      	ldr	r2, [pc, #92]	; (80083e0 <main+0x150>)
 8008382:	4918      	ldr	r1, [pc, #96]	; (80083e4 <main+0x154>)
 8008384:	4818      	ldr	r0, [pc, #96]	; (80083e8 <main+0x158>)
 8008386:	f7fc faa5 	bl	80048d4 <DNS_run>
 800838a:	4603      	mov	r3, r0
 800838c:	2b01      	cmp	r3, #1
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d100      	bne.n	800839c <main+0x10c>
 800839a:	e7f1      	b.n	8008380 <main+0xf0>
		  break;
 800839c:	bf00      	nop
	  }
	}
	MQTT_run();
 800839e:	f7ff febb 	bl	8008118 <_Z8MQTT_runv>
    /* Loop forever */
	for(;;);
 80083a2:	e7fe      	b.n	80083a2 <main+0x112>
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40020800 	.word	0x40020800
 80083ac:	40020c00 	.word	0x40020c00
 80083b0:	40020000 	.word	0x40020000
 80083b4:	08008561 	.word	0x08008561
 80083b8:	0800850d 	.word	0x0800850d
 80083bc:	080085d5 	.word	0x080085d5
 80083c0:	080085bd 	.word	0x080085bd
 80083c4:	08008623 	.word	0x08008623
 80083c8:	08008611 	.word	0x08008611
 80083cc:	0800ceac 	.word	0x0800ceac
 80083d0:	2000004c 	.word	0x2000004c
 80083d4:	20000184 	.word	0x20000184
 80083d8:	20000984 	.word	0x20000984
 80083dc:	20001388 	.word	0x20001388
 80083e0:	20001184 	.word	0x20001184
 80083e4:	20000064 	.word	0x20000064
 80083e8:	20000078 	.word	0x20000078

080083ec <_Z9SPI1_Initv>:
}


/*Function definition -------------------------------------*/
void SPI1_Init(void){
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
	//PINOUT
	RCC->AHB1ENR |= GPIOX_CLOCK(SPI1_SCK) | GPIOX_CLOCK(SPI1_MISO) | GPIOX_CLOCK(SPI1_MOSI) |\
 80083f0:	4b42      	ldr	r3, [pc, #264]	; (80084fc <_Z9SPI1_Initv+0x110>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	4a41      	ldr	r2, [pc, #260]	; (80084fc <_Z9SPI1_Initv+0x110>)
 80083f6:	f043 0303 	orr.w	r3, r3, #3
 80083fa:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOX_CLOCK(SPI1_NSS);
	GPIOX_MODER(MODE_ALTER, SPI1_SCK);
 80083fc:	4b40      	ldr	r3, [pc, #256]	; (8008500 <_Z9SPI1_Initv+0x114>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008404:	4a3e      	ldr	r2, [pc, #248]	; (8008500 <_Z9SPI1_Initv+0x114>)
 8008406:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800840a:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_SCK);
 800840c:	4b3c      	ldr	r3, [pc, #240]	; (8008500 <_Z9SPI1_Initv+0x114>)
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008414:	4a3a      	ldr	r2, [pc, #232]	; (8008500 <_Z9SPI1_Initv+0x114>)
 8008416:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800841a:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_ALTER, SPI1_MISO);
 800841c:	4b38      	ldr	r3, [pc, #224]	; (8008500 <_Z9SPI1_Initv+0x114>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008424:	4a36      	ldr	r2, [pc, #216]	; (8008500 <_Z9SPI1_Initv+0x114>)
 8008426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800842a:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_MISO);
 800842c:	4b34      	ldr	r3, [pc, #208]	; (8008500 <_Z9SPI1_Initv+0x114>)
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008434:	4a32      	ldr	r2, [pc, #200]	; (8008500 <_Z9SPI1_Initv+0x114>)
 8008436:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 800843a:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_ALTER, SPI1_MOSI);
 800843c:	4b30      	ldr	r3, [pc, #192]	; (8008500 <_Z9SPI1_Initv+0x114>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008444:	4a2e      	ldr	r2, [pc, #184]	; (8008500 <_Z9SPI1_Initv+0x114>)
 8008446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844a:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_MOSI);
 800844c:	4b2c      	ldr	r3, [pc, #176]	; (8008500 <_Z9SPI1_Initv+0x114>)
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008454:	4a2a      	ldr	r2, [pc, #168]	; (8008500 <_Z9SPI1_Initv+0x114>)
 8008456:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800845a:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_OUT, SPI1_NSS);
 800845c:	4b29      	ldr	r3, [pc, #164]	; (8008504 <_Z9SPI1_Initv+0x118>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f023 030c 	bic.w	r3, r3, #12
 8008464:	4a27      	ldr	r2, [pc, #156]	; (8008504 <_Z9SPI1_Initv+0x118>)
 8008466:	f043 0304 	orr.w	r3, r3, #4
 800846a:	6013      	str	r3, [r2, #0]

	//SPI1
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800846c:	4b23      	ldr	r3, [pc, #140]	; (80084fc <_Z9SPI1_Initv+0x110>)
 800846e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008470:	4a22      	ldr	r2, [pc, #136]	; (80084fc <_Z9SPI1_Initv+0x110>)
 8008472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008476:	6453      	str	r3, [r2, #68]	; 0x44

	//1. configurar el baudrate
	SPI1->CR1 &=~ SPI_CR1_BR;
 8008478:	4b23      	ldr	r3, [pc, #140]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a22      	ldr	r2, [pc, #136]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 800847e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008482:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_0;		//Fpclk / 4 = 4MHZ
 8008484:	4b20      	ldr	r3, [pc, #128]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1f      	ldr	r2, [pc, #124]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 800848a:	f043 0308 	orr.w	r3, r3, #8
 800848e:	6013      	str	r3, [r2, #0]

	//2. Configurar la polaridad y la fase del reloj (SPI MODO 0)
	//CPOL
	SPI1->CR1 &=~ SPI_CR1_CPOL;    //CPOL = 0
 8008490:	4b1d      	ldr	r3, [pc, #116]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a1c      	ldr	r2, [pc, #112]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 8008496:	f023 0302 	bic.w	r3, r3, #2
 800849a:	6013      	str	r3, [r2, #0]
	//CPHA
	SPI1->CR1 &=~ SPI_CR1_CPHA;    //CPHA = 0
 800849c:	4b1a      	ldr	r3, [pc, #104]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a19      	ldr	r2, [pc, #100]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	6013      	str	r3, [r2, #0]

	//3. configurar la longitud de la trama
	SPI1->CR1 &=~ SPI_CR1_DFF;     //8bits
 80084a8:	4b17      	ldr	r3, [pc, #92]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a16      	ldr	r2, [pc, #88]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084b2:	6013      	str	r3, [r2, #0]

	//4. configurar el LSP o MSB firts
	SPI1->CR1 &=~ SPI_CR1_LSBFIRST;//MSB first
 80084b4:	4b14      	ldr	r3, [pc, #80]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a13      	ldr	r2, [pc, #76]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084be:	6013      	str	r3, [r2, #0]

	//5. Configurar el maneno del pin NSS
	SPI1->CR1 |= SPI_CR1_SSM;       //Software managment
 80084c0:	4b11      	ldr	r3, [pc, #68]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a10      	ldr	r2, [pc, #64]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ca:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0d      	ldr	r2, [pc, #52]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d6:	6013      	str	r3, [r2, #0]

	//6. configurar el modo TI si fuera necesario

	//7. habilitar el modo maestro
	SPI1->CR1 |= SPI_CR1_MSTR;
 80084d8:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a0a      	ldr	r2, [pc, #40]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084de:	f043 0304 	orr.w	r3, r3, #4
 80084e2:	6013      	str	r3, [r2, #0]

	//8. Habilitar el spi
	SPI1->CR1 |= SPI_CR1_SPE;
 80084e4:	4b08      	ldr	r3, [pc, #32]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a07      	ldr	r2, [pc, #28]	; (8008508 <_Z9SPI1_Initv+0x11c>)
 80084ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ee:	6013      	str	r3, [r2, #0]

	return;
 80084f0:	bf00      	nop
}
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40023800 	.word	0x40023800
 8008500:	40020000 	.word	0x40020000
 8008504:	40020400 	.word	0x40020400
 8008508:	40013000 	.word	0x40013000

0800850c <_Z18w5100_ll_read_bytev>:

uint8_t w5100_ll_read_byte(void){
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
	while(!(SPI1->SR & SPI_SR_TXE));
 8008510:	bf00      	nop
 8008512:	4b11      	ldr	r3, [pc, #68]	; (8008558 <_Z18w5100_ll_read_bytev+0x4c>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0302 	and.w	r3, r3, #2
 800851a:	2b00      	cmp	r3, #0
 800851c:	bf0c      	ite	eq
 800851e:	2301      	moveq	r3, #1
 8008520:	2300      	movne	r3, #0
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1f4      	bne.n	8008512 <_Z18w5100_ll_read_bytev+0x6>
	*((__IO uint8_t *)&SPI1->DR) = 0xFF;
 8008528:	4b0c      	ldr	r3, [pc, #48]	; (800855c <_Z18w5100_ll_read_bytev+0x50>)
 800852a:	22ff      	movs	r2, #255	; 0xff
 800852c:	701a      	strb	r2, [r3, #0]
	while(!(SPI1->SR & SPI_SR_RXNE));
 800852e:	bf00      	nop
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <_Z18w5100_ll_read_bytev+0x4c>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	bf0c      	ite	eq
 800853c:	2301      	moveq	r3, #1
 800853e:	2300      	movne	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f4      	bne.n	8008530 <_Z18w5100_ll_read_bytev+0x24>
	return (uint8_t)(SPI1->DR);
 8008546:	4b04      	ldr	r3, [pc, #16]	; (8008558 <_Z18w5100_ll_read_bytev+0x4c>)
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	b2db      	uxtb	r3, r3
}
 800854c:	4618      	mov	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40013000 	.word	0x40013000
 800855c:	4001300c 	.word	0x4001300c

08008560 <_Z19w5100_ll_write_byteh>:
void w5100_ll_write_byte(uint8_t byte){
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	while(!(SPI1->SR & SPI_SR_TXE));
 800856a:	bf00      	nop
 800856c:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <_Z19w5100_ll_write_byteh+0x54>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f4      	bne.n	800856c <_Z19w5100_ll_write_byteh+0xc>
	*((__IO uint8_t *)&SPI1->DR) = byte;
 8008582:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <_Z19w5100_ll_write_byteh+0x58>)
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	7013      	strb	r3, [r2, #0]
	while(!(SPI1->SR & SPI_SR_RXNE));
 8008588:	bf00      	nop
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <_Z19w5100_ll_write_byteh+0x54>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	bf0c      	ite	eq
 8008596:	2301      	moveq	r3, #1
 8008598:	2300      	movne	r3, #0
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1f4      	bne.n	800858a <_Z19w5100_ll_write_byteh+0x2a>
	temp = SPI1->DR;
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <_Z19w5100_ll_write_byteh+0x54>)
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	73fb      	strb	r3, [r7, #15]

	(void)temp;
	return;
 80085a6:	bf00      	nop
}
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	40013000 	.word	0x40013000
 80085b8:	4001300c 	.word	0x4001300c

080085bc <_Z15w5100_cs_enablev>:
void w5100_cs_enable(void){
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
	GPIOX_ODR(SPI1_NSS) = 0;
 80085c0:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <_Z15w5100_cs_enablev+0x14>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
	return;
 80085c6:	bf00      	nop
}
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	42408284 	.word	0x42408284

080085d4 <_Z16w5100_cs_disablev>:
void w5100_cs_disable(void){
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
	GPIOX_ODR(SPI1_NSS) = 1;
 80085d8:	4b03      	ldr	r3, [pc, #12]	; (80085e8 <_Z16w5100_cs_disablev+0x14>)
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
}
 80085de:	bf00      	nop
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	42408284 	.word	0x42408284

080085ec <_Z11w5100_resetv>:
	GPIOX_ODR(ETH_RST) = 0;
}
void w5100_reset_deassert(void){
	GPIOX_ODR(ETH_RST) = 1;
}
void w5100_reset(void){
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
	GPIOX_ODR(ETH_RST) = 0;
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <_Z11w5100_resetv+0x20>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 80085f6:	2064      	movs	r0, #100	; 0x64
 80085f8:	f7fd ff72 	bl	80064e0 <delay_ms>
	GPIOX_ODR(ETH_RST) = 1;
 80085fc:	4b03      	ldr	r3, [pc, #12]	; (800860c <_Z11w5100_resetv+0x20>)
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 8008602:	2064      	movs	r0, #100	; 0x64
 8008604:	f7fd ff6c 	bl	80064e0 <delay_ms>
	return;
 8008608:	bf00      	nop
}
 800860a:	bd80      	pop	{r7, pc}
 800860c:	42410294 	.word	0x42410294

08008610 <_Z20w5100_critical_enterv>:
void w5100_critical_enter(void){
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008614:	b672      	cpsid	i
}
 8008616:	bf00      	nop
	__disable_irq();
}
 8008618:	bf00      	nop
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <_Z19w5100_critical_exitv>:
void w5100_critical_exit(void){
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8008626:	b662      	cpsie	i
}
 8008628:	bf00      	nop
	__enable_irq();
}
 800862a:	bf00      	nop
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 800863c:	2110      	movs	r1, #16
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fe f9e6 	bl	8006a10 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>
 8008644:	4603      	mov	r3, r0
  }
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
                                                               size_t n) {
  return SizedStringAdapter<TChar*>::adapt(p, n);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f970 	bl	8008946 <_ZN11ArduinoJson8V6213HB26detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8008666:	bf00      	nop
}
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>:
  const char* findString(const TAdaptedString& str) const {
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
    size_t n = str.size();
 800867a:	6838      	ldr	r0, [r7, #0]
 800867c:	f7fd ffd9 	bl	8006632 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 8008680:	6138      	str	r0, [r7, #16]
    for (char* next = begin_; next + n < left_; ++next) {
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e027      	b.n	80086da <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x6a>
      if (next[n] == '\0' && stringEquals(str, adaptString(next, n)))
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d112      	bne.n	80086bc <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 8008696:	f107 0308 	add.w	r3, r7, #8
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	6979      	ldr	r1, [r7, #20]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff ffd5 	bl	800864e <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	f107 0308 	add.w	r3, r7, #8
 80086aa:	cb0c      	ldmia	r3, {r2, r3}
 80086ac:	c903      	ldmia	r1, {r0, r1}
 80086ae:	f000 f959 	bl	8008964 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4e>
 80086bc:	2300      	movs	r3, #0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x5c>
        return next;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	e011      	b.n	80086ea <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x7a>
        ++next;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	3301      	adds	r3, #1
 80086ca:	617b      	str	r3, [r7, #20]
      while (*next)
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1f8      	bne.n	80086c6 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x56>
    for (char* next = begin_; next + n < left_; ++next) {
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	3301      	adds	r3, #1
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	441a      	add	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d3d0      	bcc.n	800868a <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x1a>
    return 0;
 80086e8:	2300      	movs	r3, #0
  }
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7fd ff77 	bl	80065ee <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
    return;
  var->setNull();
}

template <typename TAdaptedString>
inline bool variantSetString(VariantData* var, TAdaptedString value,
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]
                             MemoryPool* pool) {
  return var != 0 ? var->setString(value, pool) : 0;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x22>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f95f 	bl	80089e6 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>
 8008728:	4603      	mov	r3, r0
 800872a:	e000      	b.n	800872e <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x24>
 800872c:	2300      	movs	r3, #0
 800872e:	2b00      	cmp	r3, #0
 8008730:	bf14      	ite	ne
 8008732:	2301      	movne	r3, #1
 8008734:	2300      	moveq	r3, #0
 8008736:	b2db      	uxtb	r3, r3
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <_ZN11ArduinoJson8V6213HB213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Produces a minified JSON document.
// https://arduinojson.org/v6/api/json/serializejson/
template <typename TDestination>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f96e 	bl	8008a2e <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 8008752:	4603      	mov	r3, r0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvEC1Eb>:
struct Comparer<T, typename enable_if<is_integral<T>::value ||
                                      is_floating_point<T>::value>::type>
    : ComparerBase {
  T rhs;

  explicit Comparer(T value) : rhs(value) {}
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_SIGNED_INTEGER);
 8008788:	210a      	movs	r1, #10
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7fe fa5c 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asSignedInteger = value;
 8008790:	68f9      	ldr	r1, [r7, #12]
 8008792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008796:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_unsigned<T>::value>::type setInteger(T value) {
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_UNSIGNED_INTEGER);
 80087ae:	2108      	movs	r1, #8
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7fe fa49 	bl	8006c48 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asUnsignedInteger = static_cast<JsonUInt>(value);
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087bc:	e9c1 2300 	strd	r2, r3, [r1]
  }
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 80087cc:	f04f 0000 	mov.w	r0, #0
 80087d0:	4905      	ldr	r1, [pc, #20]	; (80087e8 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv+0x20>)
 80087d2:	f000 f957 	bl	8008a84 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE5forgeEy>
 80087d6:	eeb0 7a40 	vmov.f32	s14, s0
 80087da:	eef0 7a60 	vmov.f32	s15, s1
  }
 80087de:	eeb0 0a47 	vmov.f32	s0, s14
 80087e2:	eef0 0a67 	vmov.f32	s1, s15
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	7ff00000 	.word	0x7ff00000

080087ec <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	ed87 0b02 	vstr	d0, [r7, #8]
 80087f6:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dd04      	ble.n	8008808 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x1c>
 80087fe:	f000 f955 	bl	8008aac <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8008802:	4603      	mov	r3, r0
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	e003      	b.n	8008810 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8008808:	f000 f960 	bl	8008acc <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800880c:	4603      	mov	r3, r0
 800880e:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	dc02      	bgt.n	800881c <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	425b      	negs	r3, r3
 800881a:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]
 8008820:	e01b      	b.n	800885a <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x6e>
    if (e & 1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x62>
      m *= powersOfTen[index];
 800882c:	7dfa      	ldrb	r2, [r7, #23]
 800882e:	f107 0310 	add.w	r3, r7, #16
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f959 	bl	8008aec <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800883a:	ec53 2b10 	vmov	r2, r3, d0
 800883e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008842:	f7f7 fd2d 	bl	80002a0 <__aeabi_dmul>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    e >>= 1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	105b      	asrs	r3, r3, #1
 8008852:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	3301      	adds	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e0      	bne.n	8008822 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8008860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008864:	ec43 2b17 	vmov	d7, r2, r3
}
 8008868:	eeb0 0a47 	vmov.f32	s0, s14
 800886c:	eef0 0a67 	vmov.f32	s1, s15
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>:
  static const size_t capacity_ =
      detail::AddPadding<detail::Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(buffer_, capacity_) {}
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3328      	adds	r3, #40	; 0x28
 8008884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008888:	4619      	mov	r1, r3
 800888a:	f7fe fa74 	bl	8006d76 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <_ZN11ArduinoJson8V6213HB215deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v6/api/json/deserializejson/
template <typename... Args>
DeserializationError deserializeJson(JsonDocument& doc, Args&&... args) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return deserialize<JsonDeserializer>(doc, detail::forward<Args>(args)...);
 80088a2:	6838      	ldr	r0, [r7, #0]
 80088a4:	f000 f958 	bl	8008b58 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 80088a8:	4603      	mov	r3, r0
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f95e 	bl	8008b6e <_ZN11ArduinoJson8V6213HB26detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>
 80088b2:	4603      	mov	r3, r0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <_ZN11ArduinoJson8V6213HB26detaileqIbEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS1_11MemberProxyIRNS0_12JsonDocumentEPKcEERKS6_>:
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
  }
  template <typename T>
  friend
      typename enable_if<!is_base_of<VariantOperatorTag, T>::value, bool>::type
      operator==(TVariant lhs, const T& rhs) {
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b08b      	sub	sp, #44	; 0x2c
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	623b      	str	r3, [r7, #32]
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	61fb      	str	r3, [r7, #28]
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	61bb      	str	r3, [r7, #24]
    return VariantAttorney::getData(derived());
 80088d6:	69b8      	ldr	r0, [r7, #24]
 80088d8:	f000 fc5f 	bl	800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 80088dc:	4603      	mov	r3, r0
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	613b      	str	r3, [r7, #16]
    return variantGetMember(VariantAttorney::getData(upstream_),
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60fb      	str	r3, [r7, #12]
    return client.getData();
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7fe fa81 	bl	8006df2 <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>
 80088f0:	4604      	mov	r4, r0
 80088f2:	bf00      	nop
                            adaptString(key_));
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(upstream_),
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fefa 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 80088fe:	4603      	mov	r3, r0
 8008900:	4619      	mov	r1, r3
 8008902:	4620      	mov	r0, r4
 8008904:	f002 fcc5 	bl	800b292 <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 8008908:	4602      	mov	r2, r0
                            adaptString(key_));
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	bf00      	nop

 private:
  FORCE_INLINE ArduinoJson::JsonVariant getVariant() const;

  FORCE_INLINE ArduinoJson::JsonVariantConst getVariantConst() const {
    return ArduinoJson::JsonVariantConst(getData());
 8008910:	f107 0308 	add.w	r3, r7, #8
 8008914:	4611      	mov	r1, r2
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe f9bf 	bl	8006c9a <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800891c:	68bb      	ldr	r3, [r7, #8]
    return Converter<T>::fromJson(getVariantConst());
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe f9e9 	bl	8006cf6 <_ZN11ArduinoJson8V6213HB29ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>
 8008924:	4603      	mov	r3, r0
 8008926:	bf00      	nop
    return as<T>();
 8008928:	bf00      	nop
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f8f5 	bl	8008b1c <_ZN11ArduinoJson8V6213HB26detail7compareIbEENS1_13CompareResultENS0_16JsonVariantConstERKT_>
 8008932:	4603      	mov	r3, r0
 8008934:	2b01      	cmp	r3, #1
 8008936:	bf0c      	ite	eq
 8008938:	2301      	moveq	r3, #1
 800893a:	2300      	movne	r3, #0
 800893c:	b2db      	uxtb	r3, r3
  }
 800893e:	4618      	mov	r0, r3
 8008940:	372c      	adds	r7, #44	; 0x2c
 8008942:	46bd      	mov	sp, r7
 8008944:	bd90      	pop	{r4, r7, pc}

08008946 <_ZN11ArduinoJson8V6213HB26detail18SizedStringAdapterIPcvE5adaptEPKcj>:
template <typename TChar>
struct SizedStringAdapter<TChar*,
                          typename enable_if<IsChar<TChar>::value>::type> {
  typedef SizedRamString AdaptedString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7fd fe58 	bl	800660c <_ZN11ArduinoJson8V6213HB26detail14SizedRamStringC1EPKcj>
  }
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
}

template <typename TAdaptedString1, typename TAdaptedString2>
typename enable_if<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey,
                   bool>::type
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8008964:	b590      	push	{r4, r7, lr}
 8008966:	b089      	sub	sp, #36	; 0x24
 8008968:	af00      	add	r7, sp, #0
 800896a:	f107 0408 	add.w	r4, r7, #8
 800896e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008972:	4639      	mov	r1, r7
 8008974:	e881 000c 	stmia.w	r1, {r2, r3}
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8008978:	f107 0308 	add.w	r3, r7, #8
 800897c:	4618      	mov	r0, r3
 800897e:	f7fd fe58 	bl	8006632 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 8008982:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 8008984:	463b      	mov	r3, r7
 8008986:	4618      	mov	r0, r3
 8008988:	f7fd fe53 	bl	8006632 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800898c:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	429a      	cmp	r2, r3
 8008994:	d001      	beq.n	800899a <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x36>
    return false;
 8008996:	2300      	movs	r3, #0
 8008998:	e021      	b.n	80089de <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]
 800899e:	e019      	b.n	80089d4 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x70>
    if (s1[i] != s2[i])
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	69f9      	ldr	r1, [r7, #28]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fd fe4f 	bl	800664a <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461c      	mov	r4, r3
 80089b0:	463b      	mov	r3, r7
 80089b2:	69f9      	ldr	r1, [r7, #28]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fd fe48 	bl	800664a <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>
 80089ba:	4603      	mov	r3, r0
 80089bc:	429c      	cmp	r4, r3
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
      return false;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e007      	b.n	80089de <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	3301      	adds	r3, #1
 80089d2:	61fb      	str	r3, [r7, #28]
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d3e1      	bcc.n	80089a0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x3c>
  }
  return true;
 80089dc:	2301      	movs	r3, #1
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3724      	adds	r7, #36	; 0x24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}

080089e6 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>:
  inline bool setString(TAdaptedString value, MemoryPool* pool) {
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b086      	sub	sp, #24
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
    if (value.isNull()) {
 80089f2:	f107 0308 	add.w	r3, r7, #8
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fd fd9e 	bl	8006538 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x26>
      setNull();
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7fe f8ba 	bl	8006b7c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
      return true;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e00c      	b.n	8008a26 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x40>
    return storeString(pool, value, VariantStringSetter(this));
 8008a0c:	f107 0314 	add.w	r3, r7, #20
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe f932 	bl	8006c7c <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f8fd 	bl	8008c1c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>
 8008a22:	4603      	mov	r3, r0
 8008a24:	bf00      	nop
  }
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer);
  return variantAccept(VariantAttorney::getData(source), serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 8008a38:	f107 030c 	add.w	r3, r7, #12
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f902 	bl	8008c48 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 8008a44:	68f9      	ldr	r1, [r7, #12]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f90d 	bl	8008c66 <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 8008a4c:	4603      	mov	r3, r0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  if (var != 0)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f923 	bl	8008cb4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	e004      	b.n	8008a7c <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 8008a72:	6838      	ldr	r0, [r7, #0]
 8008a74:	f000 f913 	bl	8008c9e <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	bf00      	nop
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8008a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a92:	f000 f9f1 	bl	8008e78 <_ZN11ArduinoJson8V6213HB26detail10alias_castIdyEET_T0_>
 8008a96:	eeb0 7a40 	vmov.f32	s14, s0
 8008a9a:	eef0 7a60 	vmov.f32	s15, s1
  }
 8008a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8008aa2:	eef0 0a67 	vmov.f32	s1, s15
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8008ab2:	1d3b      	adds	r3, r7, #4
 8008ab4:	4904      	ldr	r1, [pc, #16]	; (8008ac8 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f9f4 	bl	8008ea4 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 8008abc:	687b      	ldr	r3, [r7, #4]
  }
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	0800cee0 	.word	0x0800cee0

08008acc <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8008ad2:	1d3b      	adds	r3, r7, #4
 8008ad4:	4904      	ldr	r1, [pc, #16]	; (8008ae8 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f9e4 	bl	8008ea4 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 8008adc:	687b      	ldr	r3, [r7, #4]
  }
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	0800cf28 	.word	0x0800cf28

08008aec <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	4413      	add	r3, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 f9de 	bl	8008ec2 <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>
 8008b06:	eeb0 7a40 	vmov.f32	s14, s0
 8008b0a:	eef0 7a60 	vmov.f32	s15, s1
  }
 8008b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8008b12:	eef0 0a67 	vmov.f32	s1, s15
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <_ZN11ArduinoJson8V6213HB26detail7compareIbEENS1_13CompareResultENS0_16JsonVariantConstERKT_>:
  explicit Comparer(const T& value)
      : VariantComparer(VariantAttorney::getData(value)) {}
};

template <typename T>
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  Comparer<T> comparer(rhs);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fe13 	bl	800875c <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvEC1Eb>
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe f8bd 	bl	8006cb8 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	bf00      	nop
  return variantAccept(VariantAttorney::getData(lhs), comparer);
 8008b42:	f107 030c 	add.w	r3, r7, #12
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f7ff ff84 	bl	8008a56 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 8008b4e:	4603      	mov	r3, r0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>:
#include "type_traits.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <class T>
T&& forward(typename remove_reference<T>::type& t) noexcept {
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008b60:	687b      	ldr	r3, [r7, #4]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <_ZN11ArduinoJson8V6213HB26detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>:

template <template <typename, typename> class TDeserializer, typename TStream,
          typename... Args,
          typename = typename enable_if<  // issue #1897
              !is_integral<typename first_or_void<Args...>::type>::value>::type>
DeserializationError deserialize(JsonDocument& doc, TStream&& input,
 8008b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b70:	b0ad      	sub	sp, #180	; 0xb4
 8008b72:	af04      	add	r7, sp, #16
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  auto reader = makeReader(detail::forward<TStream>(input));
 8008b78:	6838      	ldr	r0, [r7, #0]
 8008b7a:	f7ff ffed 	bl	8008b58 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f9cc 	bl	8008f24 <_ZN11ArduinoJson8V6213HB26detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b92:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008b96:	f7fe f92c 	bl	8006df2 <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	bf00      	nop
  auto data = VariantAttorney::getData(doc);
 8008b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return client.getPool();
 8008ba8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008bac:	f7fe f916 	bl	8006ddc <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	bf00      	nop
  auto pool = VariantAttorney::getPool(doc);
 8008bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  auto options = makeDeserializationOptions(args...);
 8008bb8:	f107 0318 	add.w	r3, r7, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fcc7 	bl	8007550 <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Ev>
 8008bc2:	7e38      	ldrb	r0, [r7, #24]
 8008bc4:	f7fe fd06 	bl	80075d4 <_ZN11ArduinoJson8V6213HB26detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	81bb      	strh	r3, [r7, #12]
  doc.clear();
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7fe f8c1 	bl	8006d54 <_ZN11ArduinoJson8V6213HB212JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(pool, reader,
 8008bd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008bd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f9b2 	bl	8008f46 <_ZN11ArduinoJson8V6213HB26detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>
 8008be2:	f107 051c 	add.w	r5, r7, #28
 8008be6:	466c      	mov	r4, sp
 8008be8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008bf2:	f107 0310 	add.w	r3, r7, #16
 8008bf6:	cb0c      	ldmia	r3, {r2, r3}
 8008bf8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f000 f9b0 	bl	8008f62 <_ZN11ArduinoJson8V6213HB26detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>
                                         makeStringStorage(input, pool))
      .parse(*data, options.filter, options.nestingLimit);
 8008c02:	f107 001c 	add.w	r0, r7, #28
 8008c06:	7b7b      	ldrb	r3, [r7, #13]
 8008c08:	4632      	mov	r2, r6
 8008c0a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008c0e:	f000 f9c0 	bl	8008f92 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008c12:	4603      	mov	r3, r0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	37a4      	adds	r7, #164	; 0xa4
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c1c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>:
  else
    return storeString(pool, str, StringStoragePolicy::Copy(), callback);
}

template <typename TAdaptedString, typename TCallback>
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 8008c1c:	b590      	push	{r4, r7, lr}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 8008c28:	f107 0308 	add.w	r3, r7, #8
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fd fcd3 	bl	80065d8 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4622      	mov	r2, r4
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 f9e6 	bl	800900a <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 8008c3e:	4603      	mov	r3, r0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd90      	pop	{r4, r7, pc}

08008c48 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:

template <typename TDestination>
class Writer<TDestination,
             typename enable_if<is_std_string<TDestination>::value>::type> {
 public:
  Writer(TDestination& str) : str_(&str) {}
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  TSerializer<TWriter> serializer(writer);
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f9f3 	bl	8009062 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
    return client.getData();
 8008c7c:	1d3b      	adds	r3, r7, #4
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe f81a 	bl	8006cb8 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 8008c84:	4602      	mov	r2, r0
 8008c86:	bf00      	nop
  return variantAccept(VariantAttorney::getData(source), serializer);
 8008c88:	f107 0308 	add.w	r3, r7, #8
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f000 f9f6 	bl	8009080 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>
 8008c94:	4603      	mov	r3, r0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>:

  TResult visitSignedInteger(JsonInteger) {
    return TResult();
  }

  TResult visitNull() {
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
    return TResult();
 8008ca6:	2300      	movs	r3, #0
  }
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
    switch (type()) {
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fd ffb3 	bl	8006c2a <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	3b02      	subs	r3, #2
 8008cc8:	2b3e      	cmp	r3, #62	; 0x3e
 8008cca:	f200 80cc 	bhi.w	8008e66 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1b2>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x20>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008e19 	.word	0x08008e19
 8008cd8:	08008e19 	.word	0x08008e19
 8008cdc:	08008e05 	.word	0x08008e05
 8008ce0:	08008e05 	.word	0x08008e05
 8008ce4:	08008e4d 	.word	0x08008e4d
 8008ce8:	08008e67 	.word	0x08008e67
 8008cec:	08008e3d 	.word	0x08008e3d
 8008cf0:	08008e67 	.word	0x08008e67
 8008cf4:	08008e2d 	.word	0x08008e2d
 8008cf8:	08008e67 	.word	0x08008e67
 8008cfc:	08008dd1 	.word	0x08008dd1
 8008d00:	08008e67 	.word	0x08008e67
 8008d04:	08008e67 	.word	0x08008e67
 8008d08:	08008e67 	.word	0x08008e67
 8008d0c:	08008e67 	.word	0x08008e67
 8008d10:	08008e67 	.word	0x08008e67
 8008d14:	08008e67 	.word	0x08008e67
 8008d18:	08008e67 	.word	0x08008e67
 8008d1c:	08008e67 	.word	0x08008e67
 8008d20:	08008e67 	.word	0x08008e67
 8008d24:	08008e67 	.word	0x08008e67
 8008d28:	08008e67 	.word	0x08008e67
 8008d2c:	08008e67 	.word	0x08008e67
 8008d30:	08008e67 	.word	0x08008e67
 8008d34:	08008e67 	.word	0x08008e67
 8008d38:	08008e67 	.word	0x08008e67
 8008d3c:	08008e67 	.word	0x08008e67
 8008d40:	08008e67 	.word	0x08008e67
 8008d44:	08008e67 	.word	0x08008e67
 8008d48:	08008e67 	.word	0x08008e67
 8008d4c:	08008df7 	.word	0x08008df7
 8008d50:	08008e67 	.word	0x08008e67
 8008d54:	08008e67 	.word	0x08008e67
 8008d58:	08008e67 	.word	0x08008e67
 8008d5c:	08008e67 	.word	0x08008e67
 8008d60:	08008e67 	.word	0x08008e67
 8008d64:	08008e67 	.word	0x08008e67
 8008d68:	08008e67 	.word	0x08008e67
 8008d6c:	08008e67 	.word	0x08008e67
 8008d70:	08008e67 	.word	0x08008e67
 8008d74:	08008e67 	.word	0x08008e67
 8008d78:	08008e67 	.word	0x08008e67
 8008d7c:	08008e67 	.word	0x08008e67
 8008d80:	08008e67 	.word	0x08008e67
 8008d84:	08008e67 	.word	0x08008e67
 8008d88:	08008e67 	.word	0x08008e67
 8008d8c:	08008e67 	.word	0x08008e67
 8008d90:	08008e67 	.word	0x08008e67
 8008d94:	08008e67 	.word	0x08008e67
 8008d98:	08008e67 	.word	0x08008e67
 8008d9c:	08008e67 	.word	0x08008e67
 8008da0:	08008e67 	.word	0x08008e67
 8008da4:	08008e67 	.word	0x08008e67
 8008da8:	08008e67 	.word	0x08008e67
 8008dac:	08008e67 	.word	0x08008e67
 8008db0:	08008e67 	.word	0x08008e67
 8008db4:	08008e67 	.word	0x08008e67
 8008db8:	08008e67 	.word	0x08008e67
 8008dbc:	08008e67 	.word	0x08008e67
 8008dc0:	08008e67 	.word	0x08008e67
 8008dc4:	08008e67 	.word	0x08008e67
 8008dc8:	08008e67 	.word	0x08008e67
 8008dcc:	08008de9 	.word	0x08008de9
        return visitor.visitFloat(content_.asFloat);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	ed93 7b00 	vldr	d7, [r3]
 8008dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8008dda:	eef0 0a67 	vmov.f32	s1, s15
 8008dde:	6838      	ldr	r0, [r7, #0]
 8008de0:	f000 f997 	bl	8009112 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE10visitFloatEd>
 8008de4:	4603      	mov	r3, r0
 8008de6:	e043      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(content_.asCollection);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6838      	ldr	r0, [r7, #0]
 8008dee:	f000 f984 	bl	80090fa <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 8008df2:	4603      	mov	r3, r0
 8008df4:	e03c      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(content_.asCollection);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6838      	ldr	r0, [r7, #0]
 8008dfc:	f000 f957 	bl	80090ae <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 8008e00:	4603      	mov	r3, r0
 8008e02:	e035      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(content_.asString.data,
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6838      	ldr	r0, [r7, #0]
 8008e10:	f000 f959 	bl	80090c6 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 8008e14:	4603      	mov	r3, r0
                                   content_.asString.size);
 8008e16:	e02b      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(content_.asString.data,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 8008e20:	461a      	mov	r2, r3
 8008e22:	6838      	ldr	r0, [r7, #0]
 8008e24:	f000 f95c 	bl	80090e0 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 8008e28:	4603      	mov	r3, r0
                                    content_.asString.size);
 8008e2a:	e021      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	6838      	ldr	r0, [r7, #0]
 8008e34:	f000 f97e 	bl	8009134 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE18visitSignedIntegerEx>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e019      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	6838      	ldr	r0, [r7, #0]
 8008e44:	f000 f987 	bl	8009156 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	e011      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(content_.asBoolean != 0);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bf14      	ite	ne
 8008e54:	2301      	movne	r3, #1
 8008e56:	2300      	moveq	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6838      	ldr	r0, [r7, #0]
 8008e5e:	f000 f98b 	bl	8009178 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE12visitBooleanEb>
 8008e62:	4603      	mov	r3, r0
 8008e64:	e004      	b.n	8008e70 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 8008e66:	6838      	ldr	r0, [r7, #0]
 8008e68:	f7ff ff19 	bl	8008c9e <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	bf00      	nop
  }
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZN11ArduinoJson8V6213HB26detail10alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8008e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e86:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8008e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e8e:	ec43 2b17 	vmov	d7, r2, r3
}
 8008e92:	eeb0 0a47 	vmov.f32	s0, s14
 8008e96:	eef0 0a67 	vmov.f32	s1, s15
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  return *p;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	ec43 2b17 	vmov	d7, r2, r3
}
 8008ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8008ed8:	eef0 0a67 	vmov.f32	s1, s15
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	ed87 0a03 	vstr	s0, [r7, #12]
 8008ef0:	1d3b      	adds	r3, r7, #4
 8008ef2:	e883 0003 	stmia.w	r3, {r0, r1}
 8008ef6:	1d3b      	adds	r3, r7, #4
 8008ef8:	613b      	str	r3, [r7, #16]
    return data_;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	bf00      	nop
    auto data = getData(dst);
 8008f00:	617b      	str	r3, [r7, #20]
    if (data)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d009      	beq.n	8008f1c <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE+0x36>
      data->setFloat(static_cast<JsonFloat>(src));
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7f7 fc57 	bl	80007bc <__aeabi_f2d>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	ec43 2b10 	vmov	d0, r2, r3
 8008f16:	6978      	ldr	r0, [r7, #20]
 8008f18:	f7fd fe1d 	bl	8006b56 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
  }
 8008f1c:	bf00      	nop
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <_ZN11ArduinoJson8V6213HB26detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<typename remove_reference<TInput>::type> makeReader(TInput&& input) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  return Reader<typename remove_reference<TInput>::type>{
      detail::forward<TInput>(input)};
 8008f2e:	6838      	ldr	r0, [r7, #0]
 8008f30:	f7ff fe12 	bl	8008b58 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 8008f34:	4603      	mov	r3, r0
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f939 	bl	80091b0 <_ZN11ArduinoJson8V6213HB26detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>
}
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <_ZN11ArduinoJson8V6213HB26detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>:
#include <ArduinoJson/StringStorage/StringMover.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
StringCopier makeStringStorage(TInput&, MemoryPool* pool) {
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(pool != 0);
  return StringCopier(pool);
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7fe fb50 	bl	80075fa <_ZN11ArduinoJson8V6213HB26detail12StringCopierC1EPNS1_10MemoryPoolE>
}
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <_ZN11ArduinoJson8V6213HB26detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool* pool,
 8008f62:	b590      	push	{r4, r7, lr}
 8008f64:	b089      	sub	sp, #36	; 0x24
 8008f66:	af04      	add	r7, sp, #16
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	e881 000c 	stmia.w	r1, {r2, r3}
  return TDeserializer<TReader, TWriter>(pool, reader, writer);
 8008f72:	466c      	mov	r4, sp
 8008f74:	f107 0320 	add.w	r3, r7, #32
 8008f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f7e:	463b      	mov	r3, r7
 8008f80:	cb0c      	ldmia	r3, {r2, r3}
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 f92b 	bl	80091e0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>
}
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd90      	pop	{r4, r7, pc}

08008f92 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8008f92:	b590      	push	{r4, r7, lr}
 8008f94:	b089      	sub	sp, #36	; 0x24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	713a      	strb	r2, [r7, #4]
 8008f9e:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8008fa0:	783b      	ldrb	r3, [r7, #0]
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f93c 	bl	8009224 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008fac:	4603      	mov	r3, r0
 8008fae:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && !variant.isEnclosed()) {
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d112      	bne.n	8008fdc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3314      	adds	r3, #20
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fa20 	bl	8009400 <_ZNK11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 8008fc6:	68b8      	ldr	r0, [r7, #8]
 8008fc8:	f7fd fda5 	bl	8006b16 <_ZNK11ArduinoJson8V6213HB26detail11VariantData10isEnclosedEv>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f083 0301 	eor.w	r3, r3, #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d007      	beq.n	8008ff2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x60>
      return DeserializationError::InvalidInput;
 8008fe2:	f107 0318 	add.w	r3, r7, #24
 8008fe6:	2103      	movs	r1, #3
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe fa64 	bl	80074b6 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>
 8008fee:	7e3b      	ldrb	r3, [r7, #24]
 8008ff0:	e007      	b.n	8009002 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x70>
    return err;
 8008ff2:	7dfa      	ldrb	r2, [r7, #23]
 8008ff4:	f107 031c 	add.w	r3, r7, #28
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fa5b 	bl	80074b6 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>
 8009000:	7f3b      	ldrb	r3, [r7, #28]
  }
 8009002:	4618      	mov	r0, r3
 8009004:	3724      	adds	r7, #36	; 0x24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd90      	pop	{r4, r7, pc}

0800900a <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 800900a:	b590      	push	{r4, r7, lr}
 800900c:	b089      	sub	sp, #36	; 0x24
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	713a      	strb	r2, [r7, #4]
 8009016:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 8009018:	f107 0308 	add.w	r3, r7, #8
 800901c:	4618      	mov	r0, r3
 800901e:	f7fd fac0 	bl	80065a2 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 8009022:	4604      	mov	r4, r0
 8009024:	f107 0308 	add.w	r3, r7, #8
 8009028:	4618      	mov	r0, r3
 800902a:	f7fd fa96 	bl	800655a <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800902e:	4602      	mov	r2, r0
 8009030:	f107 0014 	add.w	r0, r7, #20
 8009034:	2301      	movs	r3, #1
 8009036:	4621      	mov	r1, r4
 8009038:	f7fd fb17 	bl	800666a <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 800903c:	4638      	mov	r0, r7
 800903e:	f107 0314 	add.w	r3, r7, #20
 8009042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009044:	f000 f9e8 	bl	8009418 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fa73 	bl	8006538 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 8009052:	4603      	mov	r3, r0
 8009054:	f083 0301 	eor.w	r3, r3, #1
 8009058:	b2db      	uxtb	r3, r3
}
 800905a:	4618      	mov	r0, r3
 800905c:	3724      	adds	r7, #36	; 0x24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd90      	pop	{r4, r7, pc}

08009062 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  JsonSerializer(TWriter writer) : formatter_(writer) {}
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f000 f9ef 	bl	8009454 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x1c>
    return var->accept(visitor);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9ee 	bl	8009474 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
 8009098:	4603      	mov	r3, r0
 800909a:	e004      	b.n	80090a6 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x26>
    return visitor.visitNull();
 800909c:	6838      	ldr	r0, [r7, #0]
 800909e:	f000 faf3 	bl	8009688 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 80090a2:	4603      	mov	r3, r0
 80090a4:	bf00      	nop
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>:

  TResult visitObject(const CollectionData&) {
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
    return TResult();
 80090b8:	2300      	movs	r3, #0
  }
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>:

  TResult visitRawJson(const char*, size_t) {
    return TResult();
  }

  TResult visitString(const char*, size_t) {
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
    return TResult();
 80090d2:	2300      	movs	r3, #0
  }
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>:
  TResult visitRawJson(const char*, size_t) {
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
    return TResult();
 80090ec:	2300      	movs	r3, #0
  }
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>:
  TResult visitArray(const CollectionData&) {
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
    return TResult();
 8009104:	2300      	movs	r3, #0
  }
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	463b      	mov	r3, r7
 8009122:	2200      	movs	r2, #0
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fb2f 	bl	8009788 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800912a:	4603      	mov	r3, r0
  }
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 8009140:	68f9      	ldr	r1, [r7, #12]
 8009142:	463b      	mov	r3, r7
 8009144:	2200      	movs	r2, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f000 fb3f 	bl	80097ca <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800914c:	4603      	mov	r3, r0
  }
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	463b      	mov	r3, r7
 8009166:	2200      	movs	r2, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fb47 	bl	80097fc <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800916e:	4603      	mov	r3, r0
  }
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 8009182:	78f9      	ldrb	r1, [r7, #3]
 8009184:	2000      	movs	r0, #0
 8009186:	460a      	mov	r2, r1
 8009188:	4603      	mov	r3, r0
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff ffe3 	bl	8009156 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>
 8009190:	4603      	mov	r3, r0
  }
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80091a2:	687b      	ldr	r3, [r7, #4]
  }
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <_ZN11ArduinoJson8V6213HB26detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>:
};

template <typename TSource>
struct Reader<TSource, typename void_<typename TSource::const_iterator>::type>
    : IteratorReader<typename TSource::const_iterator> {
  explicit Reader(const TSource& source)
 80091b0:	b5b0      	push	{r4, r5, r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
      : IteratorReader<typename TSource::const_iterator>(source.begin(),
                                                         source.end()) {}
 80091ba:	687c      	ldr	r4, [r7, #4]
 80091bc:	6838      	ldr	r0, [r7, #0]
 80091be:	f002 fc45 	bl	800ba4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80091c2:	4605      	mov	r5, r0
 80091c4:	6838      	ldr	r0, [r7, #0]
 80091c6:	f002 fc43 	bl	800ba50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	4629      	mov	r1, r5
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fb2c 	bl	800982e <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bdb0      	pop	{r4, r5, r7, pc}

080091e0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>:
  JsonDeserializer(MemoryPool* pool, TReader reader,
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	4639      	mov	r1, r7
 80091ec:	e881 000c 	stmia.w	r1, {r2, r3}
      : stringStorage_(stringStorage),
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	461c      	mov	r4, r3
 80091f4:	f107 0320 	add.w	r3, r7, #32
 80091f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        foundSomething_(false),
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	741a      	strb	r2, [r3, #16]
        latch_(reader),
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f103 0014 	add.w	r0, r3, #20
 800920a:	463b      	mov	r3, r7
 800920c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009210:	f000 fb20 	bl	8009854 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
        pool_(pool) {}
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	621a      	str	r2, [r3, #32]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	bd90      	pop	{r4, r7, pc}

08009224 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8009224:	b5b0      	push	{r4, r5, r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	713a      	strb	r2, [r7, #4]
 8009230:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fb26 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]
    if (err)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	e0d2      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fb52 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800924c:	4603      	mov	r3, r0
 800924e:	2b7b      	cmp	r3, #123	; 0x7b
 8009250:	f300 80ba 	bgt.w	80093c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8009254:	2b5b      	cmp	r3, #91	; 0x5b
 8009256:	da04      	bge.n	8009262 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8009258:	2b22      	cmp	r3, #34	; 0x22
 800925a:	d07b      	beq.n	8009354 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800925c:	2b27      	cmp	r3, #39	; 0x27
 800925e:	d079      	beq.n	8009354 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8009260:	e0b2      	b.n	80093c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8009262:	3b5b      	subs	r3, #91	; 0x5b
 8009264:	2b20      	cmp	r3, #32
 8009266:	f200 80af 	bhi.w	80093c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092f5 	.word	0x080092f5
 8009274:	080093c9 	.word	0x080093c9
 8009278:	080093c9 	.word	0x080093c9
 800927c:	080093c9 	.word	0x080093c9
 8009280:	080093c9 	.word	0x080093c9
 8009284:	080093c9 	.word	0x080093c9
 8009288:	080093c9 	.word	0x080093c9
 800928c:	080093c9 	.word	0x080093c9
 8009290:	080093c9 	.word	0x080093c9
 8009294:	080093c9 	.word	0x080093c9
 8009298:	080093c9 	.word	0x080093c9
 800929c:	0800939b 	.word	0x0800939b
 80092a0:	080093c9 	.word	0x080093c9
 80092a4:	080093c9 	.word	0x080093c9
 80092a8:	080093c9 	.word	0x080093c9
 80092ac:	080093c9 	.word	0x080093c9
 80092b0:	080093c9 	.word	0x080093c9
 80092b4:	080093c9 	.word	0x080093c9
 80092b8:	080093c9 	.word	0x080093c9
 80092bc:	080093bd 	.word	0x080093bd
 80092c0:	080093c9 	.word	0x080093c9
 80092c4:	080093c9 	.word	0x080093c9
 80092c8:	080093c9 	.word	0x080093c9
 80092cc:	080093c9 	.word	0x080093c9
 80092d0:	080093c9 	.word	0x080093c9
 80092d4:	08009379 	.word	0x08009379
 80092d8:	080093c9 	.word	0x080093c9
 80092dc:	080093c9 	.word	0x080093c9
 80092e0:	080093c9 	.word	0x080093c9
 80092e4:	080093c9 	.word	0x080093c9
 80092e8:	080093c9 	.word	0x080093c9
 80092ec:	080093c9 	.word	0x080093c9
 80092f0:	08009325 	.word	0x08009325
        if (filter.allowArray())
 80092f4:	1d3b      	adds	r3, r7, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe f909 	bl	800750e <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowArrayEv>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8009302:	68b8      	ldr	r0, [r7, #8]
 8009304:	f7fd fc6f 	bl	8006be6 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>
 8009308:	4601      	mov	r1, r0
 800930a:	783b      	ldrb	r3, [r7, #0]
 800930c:	462a      	mov	r2, r5
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fb05 	bl	800991e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 8009314:	4603      	mov	r3, r0
 8009316:	e069      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8009318:	7839      	ldrb	r1, [r7, #0]
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fb85 	bl	8009a2a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8009320:	4603      	mov	r3, r0
 8009322:	e063      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8009324:	1d3b      	adds	r3, r7, #4
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe f8fc 	bl	8007524 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter11allowObjectEv>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8009332:	68b8      	ldr	r0, [r7, #8]
 8009334:	f7fd fc68 	bl	8006c08 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
 8009338:	4601      	mov	r1, r0
 800933a:	783b      	ldrb	r3, [r7, #0]
 800933c:	4622      	mov	r2, r4
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fbb6 	bl	8009ab0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 8009344:	4603      	mov	r3, r0
 8009346:	e051      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8009348:	7839      	ldrb	r1, [r7, #0]
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fcac 	bl	8009ca8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8009350:	4603      	mov	r3, r0
 8009352:	e04b      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8009354:	1d3b      	adds	r3, r7, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe f8ef 	bl	800753a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 fd1f 	bl	8009da8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>
 800936a:	4603      	mov	r3, r0
 800936c:	e03e      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fd3f 	bl	8009df2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 8009374:	4603      	mov	r3, r0
 8009376:	e039      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8009378:	1d3b      	adds	r3, r7, #4
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe f8dd 	bl	800753a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8009386:	2101      	movs	r1, #1
 8009388:	68b8      	ldr	r0, [r7, #8]
 800938a:	f7fd fbd3 	bl	8006b34 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800938e:	4919      	ldr	r1, [pc, #100]	; (80093f4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 fd63 	bl	8009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 8009396:	4603      	mov	r3, r0
 8009398:	e028      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f8cc 	bl	800753a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 80093a8:	2100      	movs	r1, #0
 80093aa:	68b8      	ldr	r0, [r7, #8]
 80093ac:	f7fd fbc2 	bl	8006b34 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 80093b0:	4911      	ldr	r1, [pc, #68]	; (80093f8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 fd52 	bl	8009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 80093b8:	4603      	mov	r3, r0
 80093ba:	e017      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 80093bc:	490f      	ldr	r1, [pc, #60]	; (80093fc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fd4c 	bl	8009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 80093c4:	4603      	mov	r3, r0
 80093c6:	e011      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 80093c8:	1d3b      	adds	r3, r7, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe f8b5 	bl	800753a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 fd65 	bl	8009ea8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>
 80093de:	4603      	mov	r3, r0
 80093e0:	e004      	b.n	80093ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fda6 	bl	8009f34 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 80093e8:	4603      	mov	r3, r0
 80093ea:	bf00      	nop
  }
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bdb0      	pop	{r4, r5, r7, pc}
 80093f4:	0800ceb4 	.word	0x0800ceb4
 80093f8:	0800cebc 	.word	0x0800cebc
 80093fc:	0800cec4 	.word	0x0800cec4

08009400 <_ZNK11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
    return current_;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7a1b      	ldrb	r3, [r3, #8]
  }
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>:

    template <typename TStoredString>
    void operator()(TStoredString s) {
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	4638      	mov	r0, r7
 8009422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      if (s)
 8009426:	463b      	mov	r3, r7
 8009428:	4618      	mov	r0, r3
 800942a:	f7fd f95e 	bl	80066ea <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d006      	beq.n	8009442 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x2a>
        instance_->setString(s);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	463b      	mov	r3, r7
 800943a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800943c:	f7fd fbaa 	bl	8006b94 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
      else
        instance_->setNull();
    }
 8009440:	e004      	b.n	800944c <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x34>
        instance_->setNull();
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd fb98 	bl	8006b7c <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
    }
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	463a      	mov	r2, r7
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f000 feab 	bl	800a1c0 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7fd fbd3 	bl	8006c2a <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 8009484:	4603      	mov	r3, r0
 8009486:	3b02      	subs	r3, #2
 8009488:	2b3e      	cmp	r3, #62	; 0x3e
 800948a:	f200 80f4 	bhi.w	8009676 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x202>
 800948e:	a201      	add	r2, pc, #4	; (adr r2, 8009494 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20>)
 8009490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009494:	08009629 	.word	0x08009629
 8009498:	08009629 	.word	0x08009629
 800949c:	08009615 	.word	0x08009615
 80094a0:	08009615 	.word	0x08009615
 80094a4:	0800965d 	.word	0x0800965d
 80094a8:	08009677 	.word	0x08009677
 80094ac:	0800964d 	.word	0x0800964d
 80094b0:	08009677 	.word	0x08009677
 80094b4:	0800963d 	.word	0x0800963d
 80094b8:	08009677 	.word	0x08009677
 80094bc:	08009591 	.word	0x08009591
 80094c0:	08009677 	.word	0x08009677
 80094c4:	08009677 	.word	0x08009677
 80094c8:	08009677 	.word	0x08009677
 80094cc:	08009677 	.word	0x08009677
 80094d0:	08009677 	.word	0x08009677
 80094d4:	08009677 	.word	0x08009677
 80094d8:	08009677 	.word	0x08009677
 80094dc:	08009677 	.word	0x08009677
 80094e0:	08009677 	.word	0x08009677
 80094e4:	08009677 	.word	0x08009677
 80094e8:	08009677 	.word	0x08009677
 80094ec:	08009677 	.word	0x08009677
 80094f0:	08009677 	.word	0x08009677
 80094f4:	08009677 	.word	0x08009677
 80094f8:	08009677 	.word	0x08009677
 80094fc:	08009677 	.word	0x08009677
 8009500:	08009677 	.word	0x08009677
 8009504:	08009677 	.word	0x08009677
 8009508:	08009677 	.word	0x08009677
 800950c:	08009607 	.word	0x08009607
 8009510:	08009677 	.word	0x08009677
 8009514:	08009677 	.word	0x08009677
 8009518:	08009677 	.word	0x08009677
 800951c:	08009677 	.word	0x08009677
 8009520:	08009677 	.word	0x08009677
 8009524:	08009677 	.word	0x08009677
 8009528:	08009677 	.word	0x08009677
 800952c:	08009677 	.word	0x08009677
 8009530:	08009677 	.word	0x08009677
 8009534:	08009677 	.word	0x08009677
 8009538:	08009677 	.word	0x08009677
 800953c:	08009677 	.word	0x08009677
 8009540:	08009677 	.word	0x08009677
 8009544:	08009677 	.word	0x08009677
 8009548:	08009677 	.word	0x08009677
 800954c:	08009677 	.word	0x08009677
 8009550:	08009677 	.word	0x08009677
 8009554:	08009677 	.word	0x08009677
 8009558:	08009677 	.word	0x08009677
 800955c:	08009677 	.word	0x08009677
 8009560:	08009677 	.word	0x08009677
 8009564:	08009677 	.word	0x08009677
 8009568:	08009677 	.word	0x08009677
 800956c:	08009677 	.word	0x08009677
 8009570:	08009677 	.word	0x08009677
 8009574:	08009677 	.word	0x08009677
 8009578:	08009677 	.word	0x08009677
 800957c:	08009677 	.word	0x08009677
 8009580:	08009677 	.word	0x08009677
 8009584:	08009677 	.word	0x08009677
 8009588:	08009677 	.word	0x08009677
 800958c:	080095a9 	.word	0x080095a9
        return visitor.visitFloat(content_.asFloat);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	ed93 7b00 	vldr	d7, [r3]
 8009596:	eeb0 0a47 	vmov.f32	s0, s14
 800959a:	eef0 0a67 	vmov.f32	s1, s15
 800959e:	6838      	ldr	r0, [r7, #0]
 80095a0:	f000 fe21 	bl	800a1e6 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>
 80095a4:	4603      	mov	r3, r0
 80095a6:	e06b      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitArray(content_.asCollection);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	617a      	str	r2, [r7, #20]
 80095ae:	613b      	str	r3, [r7, #16]
    write('[');
 80095b0:	215b      	movs	r1, #91	; 0x5b
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	f001 fa0c 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = array.head();
 80095b8:	6938      	ldr	r0, [r7, #16]
 80095ba:	f7fd f8a7 	bl	800670c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 80095be:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 80095c0:	e012      	b.n	80095e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x174>
      slot->data()->accept(*this);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7fd f8b9 	bl	800673a <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 80095c8:	4603      	mov	r3, r0
 80095ca:	6979      	ldr	r1, [r7, #20]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff ff51 	bl	8009474 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f7fd f8d3 	bl	800677e <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 80095d8:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17c>
      write(',');
 80095e0:	212c      	movs	r1, #44	; 0x2c
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	f001 f9f4 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e9      	bne.n	80095c2 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x14e>
 80095ee:	e000      	b.n	80095f2 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17e>
        break;
 80095f0:	bf00      	nop
    write(']');
 80095f2:	215d      	movs	r1, #93	; 0x5d
 80095f4:	6978      	ldr	r0, [r7, #20]
 80095f6:	f001 f9eb 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 80095fa:	6978      	ldr	r0, [r7, #20]
 80095fc:	f000 febd 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8009600:	4603      	mov	r3, r0
 8009602:	bf00      	nop
 8009604:	e03c      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitObject(content_.asCollection);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4619      	mov	r1, r3
 800960a:	6838      	ldr	r0, [r7, #0]
 800960c:	f000 fdff 	bl	800a20e <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>
 8009610:	4603      	mov	r3, r0
 8009612:	e035      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitString(content_.asString.data,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 800961c:	461a      	mov	r2, r3
 800961e:	6838      	ldr	r0, [r7, #0]
 8009620:	f000 fe34 	bl	800a28c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>
 8009624:	4603      	mov	r3, r0
                                   content_.asString.size);
 8009626:	e02b      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitRawJson(content_.asString.data,
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 8009630:	461a      	mov	r2, r3
 8009632:	6838      	ldr	r0, [r7, #0]
 8009634:	f000 fe3e 	bl	800a2b4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>
 8009638:	4603      	mov	r3, r0
                                    content_.asString.size);
 800963a:	e021      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	6838      	ldr	r0, [r7, #0]
 8009644:	f000 fe4a 	bl	800a2dc <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>
 8009648:	4603      	mov	r3, r0
 800964a:	e019      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	6838      	ldr	r0, [r7, #0]
 8009654:	f000 fe56 	bl	800a304 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>
 8009658:	4603      	mov	r3, r0
 800965a:	e011      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitBoolean(content_.asBoolean != 0);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bf14      	ite	ne
 8009664:	2301      	movne	r3, #1
 8009666:	2300      	moveq	r3, #0
 8009668:	b2db      	uxtb	r3, r3
 800966a:	4619      	mov	r1, r3
 800966c:	6838      	ldr	r0, [r7, #0]
 800966e:	f000 fe5d 	bl	800a32c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>
 8009672:	4603      	mov	r3, r0
 8009674:	e004      	b.n	8009680 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitNull();
 8009676:	6838      	ldr	r0, [r7, #0]
 8009678:	f000 f806 	bl	8009688 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800967c:	4603      	mov	r3, r0
 800967e:	bf00      	nop
  }
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>:
  size_t visitNull() {
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
    formatter_.writeRaw("null");
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4906      	ldr	r1, [pc, #24]	; (80096ac <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv+0x24>)
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fe5d 	bl	800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fe6d 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80096a0:	4603      	mov	r3, r0
  }
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	0800cec4 	.word	0x0800cec4

080096b0 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>:
  COMPARE_RESULT_GREATER_OR_EQUAL = 3,
  COMPARE_RESULT_LESS_OR_EQUAL = 5
};

template <typename T>
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f7f7 f931 	bl	800092c <__aeabi_dcmplt>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x24>
    return COMPARE_RESULT_LESS;
 80096d0:	2304      	movs	r3, #4
 80096d2:	e00d      	b.n	80096f0 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else if (lhs > rhs)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f7 f942 	bl	8000968 <__aeabi_dcmpgt>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x3e>
    return COMPARE_RESULT_GREATER;
 80096ea:	2302      	movs	r3, #2
 80096ec:	e000      	b.n	80096f0 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else
    return COMPARE_RESULT_EQUAL;
 80096ee:	2301      	movs	r3, #1
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	4290      	cmp	r0, r2
 8009710:	eb71 0303 	sbcs.w	r3, r1, r3
 8009714:	da01      	bge.n	800971a <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 8009716:	2304      	movs	r3, #4
 8009718:	e00c      	b.n	8009734 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009726:	4290      	cmp	r0, r2
 8009728:	eb71 0303 	sbcs.w	r3, r1, r3
 800972c:	da01      	bge.n	8009732 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800972e:	2302      	movs	r3, #2
 8009730:	e000      	b.n	8009734 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 8009732:	2301      	movs	r3, #1
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	4290      	cmp	r0, r2
 8009758:	eb71 0303 	sbcs.w	r3, r1, r3
 800975c:	d201      	bcs.n	8009762 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800975e:	2304      	movs	r3, #4
 8009760:	e00c      	b.n	800977c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800976e:	4290      	cmp	r0, r2
 8009770:	eb71 0303 	sbcs.w	r3, r1, r3
 8009774:	d201      	bcs.n	800977a <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 8009776:	2302      	movs	r3, #2
 8009778:	e000      	b.n	800977c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800977a:	2301      	movs	r3, #1
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
    return COMPARE_RESULT_LESS;
  return arithmeticCompare<T2>(static_cast<T2>(lhs), rhs);
}

template <typename T1, typename T2>
CompareResult arithmeticCompare(
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
    const T1& lhs, const T2& rhs,
    typename enable_if<is_floating_point<T1>::value ||
                       is_floating_point<T2>::value>::type* = 0) {
  return arithmeticCompare<double>(static_cast<double>(lhs),
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f6 ffe8 	bl	8000778 <__aeabi_ui2d>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 80097b0:	f107 0218 	add.w	r2, r7, #24
 80097b4:	f107 0310 	add.w	r3, r7, #16
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff ff78 	bl	80096b0 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 80097c0:	4603      	mov	r3, r0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 80097ca:	b5b0      	push	{r4, r5, r7, lr}
 80097cc:	b086      	sub	sp, #24
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2200      	movs	r2, #0
 80097de:	461c      	mov	r4, r3
 80097e0:	4615      	mov	r5, r2
 80097e2:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80097e6:	f107 0310 	add.w	r3, r7, #16
 80097ea:	4619      	mov	r1, r3
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff ff83 	bl	80096f8 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>
 80097f2:	4603      	mov	r3, r0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bdb0      	pop	{r4, r5, r7, pc}

080097fc <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 80097fc:	b5b0      	push	{r4, r5, r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2200      	movs	r2, #0
 8009810:	461c      	mov	r4, r3
 8009812:	4615      	mov	r5, r2
 8009814:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8009818:	f107 0310 	add.w	r3, r7, #16
 800981c:	4619      	mov	r1, r3
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff ff8e 	bl	8009740 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 8009824:	4603      	mov	r3, r0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bdb0      	pop	{r4, r5, r7, pc}

0800982e <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>:
  explicit IteratorReader(TIterator begin, TIterator end)
 800982e:	b480      	push	{r7}
 8009830:	b085      	sub	sp, #20
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
      : ptr_(begin), end_(end) {}
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	605a      	str	r2, [r3, #4]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	1d3b      	adds	r3, r7, #4
 800985e:	e883 0006 	stmia.w	r3, {r1, r2}
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	461a      	mov	r2, r3
 8009866:	1d3b      	adds	r3, r7, #4
 8009868:	e893 0003 	ldmia.w	r3, {r0, r1}
 800986c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	725a      	strb	r2, [r3, #9]
  }
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f82f 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d013      	beq.n	80098c0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x3c>
 8009898:	2b00      	cmp	r3, #0
 800989a:	db1d      	blt.n	80098d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800989c:	2b20      	cmp	r3, #32
 800989e:	dc1b      	bgt.n	80098d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 80098a0:	2b09      	cmp	r3, #9
 80098a2:	db19      	blt.n	80098d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 80098a4:	3b09      	subs	r3, #9
 80098a6:	4a11      	ldr	r2, [pc, #68]	; (80098ec <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x68>)
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bf14      	ite	ne
 80098b4:	2301      	movne	r3, #1
 80098b6:	2300      	moveq	r3, #0
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d108      	bne.n	80098d0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x4c>
 80098be:	e00b      	b.n	80098d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7c1b      	ldrb	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x48>
 80098c8:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 80098ca:	e00b      	b.n	80098e4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 80098cc:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 80098ce:	e009      	b.n	80098e4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          move();
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fd6f 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          continue;
 80098d6:	e004      	b.n	80098e2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	741a      	strb	r2, [r3, #16]
          return DeserializationError::Ok;
 80098de:	2300      	movs	r3, #0
 80098e0:	e000      	b.n	80098e4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 80098e2:	e7d3      	b.n	800988c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	00800013 	.word	0x00800013

080098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>:
  char current() {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    return latch_.current();
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3314      	adds	r3, #20
 80098fc:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	7a5b      	ldrb	r3, [r3, #9]
 8009902:	f083 0301 	eor.w	r3, r3, #1
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv+0x22>
      load();
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f001 f97c 	bl	800ac0a <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>
    }
    return current_;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	7a1b      	ldrb	r3, [r3, #8]
  }
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800991e:	b590      	push	{r4, r7, lr}
 8009920:	b089      	sub	sp, #36	; 0x24
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	713a      	strb	r2, [r7, #4]
 800992a:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800992c:	463b      	mov	r3, r7
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd fe3f 	bl	80075b2 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800993a:	2305      	movs	r3, #5
 800993c:	e071      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 fd38 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f7ff ff9d 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800994a:	4603      	mov	r3, r0
 800994c:	77fb      	strb	r3, [r7, #31]
    if (err)
 800994e:	7ffb      	ldrb	r3, [r7, #31]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 8009954:	7ffb      	ldrb	r3, [r7, #31]
 8009956:	e064      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8009958:	215d      	movs	r1, #93	; 0x5d
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 fd37 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8009966:	2300      	movs	r3, #0
 8009968:	e05b      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter memberFilter = filter[0UL];
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	f107 0214 	add.w	r2, r7, #20
 8009972:	1d3b      	adds	r3, r7, #4
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fd46 	bl	800a408 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixImEES2_RKT_>
      if (memberFilter.allow()) {
 800997c:	f107 0310 	add.w	r3, r7, #16
 8009980:	4618      	mov	r0, r3
 8009982:	f7fd fdb9 	bl	80074f8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01c      	beq.n	80099c6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(pool_);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	4619      	mov	r1, r3
 8009992:	68b8      	ldr	r0, [r7, #8]
 8009994:	f7fd fa6f 	bl	8006e76 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>
 8009998:	61b8      	str	r0, [r7, #24]
        if (!value)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 80099a0:	2304      	movs	r3, #4
 80099a2:	e03e      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, memberFilter, nestingLimit.decrement());
 80099a4:	463b      	mov	r3, r7
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fd fdf0 	bl	800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 80099ac:	4603      	mov	r3, r0
 80099ae:	4622      	mov	r2, r4
 80099b0:	69b9      	ldr	r1, [r7, #24]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f7ff fc36 	bl	8009224 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80099b8:	4603      	mov	r3, r0
 80099ba:	77fb      	strb	r3, [r7, #31]
        if (err)
 80099bc:	7ffb      	ldrb	r3, [r7, #31]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d011      	beq.n	80099e6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80099c2:	7ffb      	ldrb	r3, [r7, #31]
 80099c4:	e02d      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 80099c6:	463b      	mov	r3, r7
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd fddf 	bl	800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fd24 	bl	800a420 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80099d8:	4603      	mov	r3, r0
 80099da:	77fb      	strb	r3, [r7, #31]
        if (err)
 80099dc:	7ffb      	ldrb	r3, [r7, #31]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 80099e2:	7ffb      	ldrb	r3, [r7, #31]
 80099e4:	e01d      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff ff4c 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 80099ec:	4603      	mov	r3, r0
 80099ee:	77fb      	strb	r3, [r7, #31]
      if (err)
 80099f0:	7ffb      	ldrb	r3, [r7, #31]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80099f6:	7ffb      	ldrb	r3, [r7, #31]
 80099f8:	e013      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80099fa:	215d      	movs	r1, #93	; 0x5d
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fce6 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e00a      	b.n	8009a22 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 8009a0c:	212c      	movs	r1, #44	; 0x2c
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fcdd 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f083 0301 	eor.w	r3, r3, #1
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0ad      	beq.n	800997c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8009a20:	2303      	movs	r3, #3
  }
 8009a22:	4618      	mov	r0, r3
 8009a24:	3724      	adds	r7, #36	; 0x24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd90      	pop	{r4, r7, pc}

08009a2a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8009a34:	463b      	mov	r3, r7
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fd fdbb 	bl	80075b2 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8009a42:	2305      	movs	r3, #5
 8009a44:	e030      	b.n	8009aa8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fcb4 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fd fd9c 	bl	800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 8009a54:	4603      	mov	r3, r0
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fce1 	bl	800a420 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	e01d      	b.n	8009aa8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff ff09 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009a72:	4603      	mov	r3, r0
 8009a74:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	e013      	b.n	8009aa8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 8009a80:	215d      	movs	r1, #93	; 0x5d
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fca3 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e00a      	b.n	8009aa8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 8009a92:	212c      	movs	r1, #44	; 0x2c
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc9a 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f083 0301 	eor.w	r3, r3, #1
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0d2      	beq.n	8009a4c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8009aa6:	2303      	movs	r3, #3
  }
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b091      	sub	sp, #68	; 0x44
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	713a      	strb	r2, [r7, #4]
 8009abc:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8009abe:	463b      	mov	r3, r7
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fd fd76 	bl	80075b2 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8009acc:	2305      	movs	r3, #5
 8009ace:	e0e7      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    move();
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 fc6f 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7ff fed4 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 8009ae2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 8009aea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009aee:	e0d7      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    if (eat('}'))
 8009af0:	217d      	movs	r1, #125	; 0x7d
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 fc6b 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e0ce      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = parseKey();
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 fd22 	bl	800a54c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 8009b0e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 8009b16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b1a:	e0c1      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7ff feb1 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 8009b28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8009b30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b34:	e0b4      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(':'))
 8009b36:	213a      	movs	r1, #58	; 0x3a
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fc48 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f083 0301 	eor.w	r3, r3, #1
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e0a8      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      JsonString key = stringStorage_.str();
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	f107 0318 	add.w	r3, r7, #24
 8009b54:	4611      	mov	r1, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fd fdc5 	bl	80076e6 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier3strEv>
      TFilter memberFilter = filter[key.c_str()];
 8009b5c:	f107 0318 	add.w	r3, r7, #24
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fc fd99 	bl	8006698 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 8009b66:	4603      	mov	r3, r0
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009b6e:	1d3b      	adds	r3, r7, #4
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fd0a 	bl	800a58c <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixIPKcEES2_RKT_>
      if (memberFilter.allow()) {
 8009b78:	f107 0314 	add.w	r3, r7, #20
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd fcbb 	bl	80074f8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d049      	beq.n	8009c1c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x16c>
        VariantData* variant = object.getMember(adaptString(key.c_str()));
 8009b88:	f107 0318 	add.w	r3, r7, #24
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fc fd83 	bl	8006698 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 8009b92:	4603      	mov	r3, r0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fe fdac 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68b8      	ldr	r0, [r7, #8]
 8009ba0:	f000 fd00 	bl	800a5a4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 8009ba4:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (!variant) {
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d123      	bne.n	8009bf4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x144>
          key = stringStorage_.save();
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fd fd4c 	bl	8007652 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>
 8009bba:	f107 0318 	add.w	r3, r7, #24
 8009bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009bc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8009bc4:	c303      	stmia	r3!, {r0, r1}
 8009bc6:	701a      	strb	r2, [r3, #0]
          VariantSlot* slot = object.addSlot(pool_);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	68b8      	ldr	r0, [r7, #8]
 8009bd0:	f7fd f927 	bl	8006e22 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8009bd4:	6378      	str	r0, [r7, #52]	; 0x34
          if (!slot)
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
            return DeserializationError::NoMemory;
 8009bdc:	2304      	movs	r3, #4
 8009bde:	e05f      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
          slot->setKey(key);
 8009be0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009be2:	f107 0318 	add.w	r3, r7, #24
 8009be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009be8:	f7fc fdfe 	bl	80067e8 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
          variant = slot->data();
 8009bec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bee:	f7fc fd99 	bl	8006724 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 8009bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
        err = parseVariant(*variant, memberFilter, nestingLimit.decrement());
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fd fcc8 	bl	800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	4622      	mov	r2, r4
 8009c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff fb0e 	bl	8009224 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 8009c0e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d015      	beq.n	8009c42 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 8009c16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c1a:	e041      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
        err = skipVariant(nestingLimit.decrement());
 8009c1c:	463b      	mov	r3, r7
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd fcb4 	bl	800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 8009c24:	4603      	mov	r3, r0
 8009c26:	4619      	mov	r1, r3
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fbf9 	bl	800a420 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 8009c34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 8009c3c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c40:	e02e      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fe1e 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 8009c4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1ac>
        return err;
 8009c56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c5a:	e021      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (eat('}'))
 8009c5c:	217d      	movs	r1, #125	; 0x7d
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 fbb5 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
        return DeserializationError::Ok;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e018      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(','))
 8009c6e:	212c      	movs	r1, #44	; 0x2c
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fbac 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f083 0301 	eor.w	r3, r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1d6>
        return DeserializationError::InvalidInput;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e00c      	b.n	8009ca0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f7ff fdfc 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 8009c92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f43f af33 	beq.w	8009b02 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8009c9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  }
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3744      	adds	r7, #68	; 0x44
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd90      	pop	{r4, r7, pc}

08009ca8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8009cb2:	463b      	mov	r3, r7
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fd fc7c 	bl	80075b2 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8009cc0:	2305      	movs	r3, #5
 8009cc2:	e06d      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fb75 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff fdda 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	e060      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8009cde:	217d      	movs	r1, #125	; 0x7d
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fb74 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e057      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc6e 	bl	800a5d2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	e04d      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff fdbd 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	e043      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8009d18:	213a      	movs	r1, #58	; 0x3a
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb57 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f083 0301 	eor.w	r3, r3, #1
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e037      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8009d30:	463b      	mov	r3, r7
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fd fc2a 	bl	800758c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fb6f 	bl	800a420 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	e027      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff fd97 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	e01d      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8009d64:	217d      	movs	r1, #125	; 0x7d
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fb31 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 8009d72:	2300      	movs	r3, #0
 8009d74:	e014      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8009d76:	212c      	movs	r1, #44	; 0x2c
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb28 	bl	800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f083 0301 	eor.w	r3, r3, #1
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e008      	b.n	8009da0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff fd78 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0a8      	beq.n	8009cf0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
  }
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
    stringStorage_.startString();
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fd fc2f 	bl	8007618 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>
    err = parseQuotedString();
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fc25 	bl	800a60a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]
    if (err)
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d001      	beq.n	8009dce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	e00d      	b.n	8009dea <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x42>
    variant.setString(stringStorage_.save());
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	f107 0308 	add.w	r3, r7, #8
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fd fc3b 	bl	8007652 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>
 8009ddc:	f107 0308 	add.w	r3, r7, #8
 8009de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009de2:	6838      	ldr	r0, [r7, #0]
 8009de4:	f7fc fed6 	bl	8006b94 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
    return DeserializationError::Ok;
 8009de8:	2300      	movs	r3, #0
  }
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff fd78 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]
    move();
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fad5 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff fd70 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73bb      	strb	r3, [r7, #14]
      move();
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 facd 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 8009e1a:	7bba      	ldrb	r2, [r7, #14]
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d016      	beq.n	8009e50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	e013      	b.n	8009e54 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	2b5c      	cmp	r3, #92	; 0x5c
 8009e30:	d1eb      	bne.n	8009e0a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fd5c 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bf14      	ite	ne
 8009e3e:	2301      	movne	r3, #1
 8009e40:	2300      	moveq	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0e0      	beq.n	8009e0a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
          move();
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fab3 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (;;) {
 8009e4e:	e7dc      	b.n	8009e0a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        break;
 8009e50:	bf00      	nop
    return DeserializationError::Ok;
 8009e52:	2300      	movs	r3, #0
  }
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>:
  DeserializationError::Code skipKeyword(const char* s) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
    while (*s) {
 8009e66:	e016      	b.n	8009e96 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x3a>
      char c = current();
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff fd41 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x20>
        return DeserializationError::IncompleteInput;
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e011      	b.n	8009ea0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      if (*s != c)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	7bfa      	ldrb	r2, [r7, #15]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d001      	beq.n	8009e8a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x2e>
        return DeserializationError::InvalidInput;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e00a      	b.n	8009ea0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      ++s;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
      move();
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa8f 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    while (*s) {
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1e4      	bne.n	8009e68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0xc>
    return DeserializationError::Ok;
 8009e9e:	2300      	movs	r3, #0
  }
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
    char c = current();
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff fd1a 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 8009ec0:	e010      	b.n	8009ee4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x3c>
      move();
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa76 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      buffer_[n++] = c;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	73fa      	strb	r2, [r7, #15]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	7bba      	ldrb	r2, [r7, #14]
 8009ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      c = current();
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff fd08 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 fc10 	bl	800a70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ef6:	d801      	bhi.n	8009efc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e000      	b.n	8009efe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x56>
 8009efc:	2300      	movs	r3, #0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1df      	bne.n	8009ec2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	4413      	add	r3, r2
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (!parseNumber(buffer_, result))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	3324      	adds	r3, #36	; 0x24
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fd f8b3 	bl	8007080 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f083 0301 	eor.w	r3, r3, #1
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x82>
      return DeserializationError::InvalidInput;
 8009f26:	2303      	movs	r3, #3
 8009f28:	e000      	b.n	8009f2c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x84>
    return DeserializationError::Ok;
 8009f2a:	2300      	movs	r3, #0
  }
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
    char c = current();
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fcd7 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8009f46:	e007      	b.n	8009f58 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x24>
      move();
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fa33 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff fcce 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8009f58:	7bfb      	ldrb	r3, [r7, #15]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 fbd6 	bl	800a70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1f0      	bne.n	8009f48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8009f66:	2300      	movs	r3, #0
  }
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>:
  void operator()(TStoredString s) {
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	4638      	mov	r0, r7
 8009f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!s)
 8009f7e:	463b      	mov	r3, r7
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fc fbb2 	bl	80066ea <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f083 0301 	eor.w	r3, r3, #1
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d106      	bne.n	8009fa0 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x30>
    instance_->setKey(s);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	463b      	mov	r3, r7
 8009f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f9a:	f7fc fc25 	bl	80067e8 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
 8009f9e:	e000      	b.n	8009fa2 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x32>
      return;
 8009fa0:	bf00      	nop
  }
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	461c      	mov	r4, r3
 8009fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fbe:	f7f6 fcab 	bl	8000918 <__aeabi_dcmpeq>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_+0x24>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	461c      	mov	r4, r3
 8009fcc:	b2e3      	uxtb	r3, r4
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd90      	pop	{r4, r7, pc}

08009fd6 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b082      	sub	sp, #8
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fec:	f7f6 fc94 	bl	8000918 <__aeabi_dcmpeq>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d110      	bne.n	800a018 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 8009ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	f7f6 fa7f 	bl	8000500 <__adddf3>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a00a:	f7f6 fc85 	bl	8000918 <__aeabi_dcmpeq>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x44>
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 800a024:	b5b0      	push	{r4, r5, r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	ed87 0b00 	vstr	d0, [r7]
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 800a030:	4b61      	ldr	r3, [pc, #388]	; (800a1b8 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x194>)
 800a032:	61fb      	str	r3, [r7, #28]
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2209      	movs	r2, #9
 800a038:	729a      	strb	r2, [r3, #10]

    exponent = normalize(value);
 800a03a:	463b      	mov	r3, r7
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fb8b 	bl	800a758 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>
 800a042:	4603      	mov	r3, r0
 800a044:	461a      	mov	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	811a      	strh	r2, [r3, #8]

    integral = uint32_t(value);
 800a04a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	f7f6 fc93 	bl	800097c <__aeabi_d2uiz>
 800a056:	4602      	mov	r2, r0
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	601a      	str	r2, [r3, #0]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	61bb      	str	r3, [r7, #24]
 800a062:	e014      	b.n	800a08e <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x6a>
      maxDecimalPart /= 10;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	4a55      	ldr	r2, [pc, #340]	; (800a1bc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800a068:	fba2 2303 	umull	r2, r3, r2, r3
 800a06c:	08db      	lsrs	r3, r3, #3
 800a06e:	61fb      	str	r3, [r7, #28]
      decimalPlaces--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	3b01      	subs	r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	b25a      	sxtb	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	729a      	strb	r2, [r3, #10]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	4a4d      	ldr	r2, [pc, #308]	; (800a1bc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800a086:	fba2 2303 	umull	r2, r3, r2, r3
 800a08a:	08db      	lsrs	r3, r3, #3
 800a08c:	61bb      	str	r3, [r7, #24]
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	2b09      	cmp	r3, #9
 800a092:	d8e7      	bhi.n	800a064 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x40>
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 800a094:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7f6 fb6b 	bl	8000778 <__aeabi_ui2d>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7f6 fa27 	bl	80004fc <__aeabi_dsub>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4614      	mov	r4, r2
 800a0b4:	461d      	mov	r5, r3
 800a0b6:	69f8      	ldr	r0, [r7, #28]
 800a0b8:	f7f6 fb5e 	bl	8000778 <__aeabi_ui2d>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7f6 f8ec 	bl	80002a0 <__aeabi_dmul>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    decimal = uint32_t(remainder);
 800a0d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0d4:	f7f6 fc52 	bl	800097c <__aeabi_d2uiz>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	605a      	str	r2, [r3, #4]
    remainder = remainder - TFloat(decimal);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f6 fb48 	bl	8000778 <__aeabi_ui2d>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a0f0:	f7f6 fa04 	bl	80004fc <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	685c      	ldr	r4, [r3, #4]
 800a100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	f7f6 f9fa 	bl	8000500 <__adddf3>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4610      	mov	r0, r2
 800a112:	4619      	mov	r1, r3
 800a114:	f7f6 fc32 	bl	800097c <__aeabi_d2uiz>
 800a118:	4603      	mov	r3, r0
 800a11a:	18e2      	adds	r2, r4, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	605a      	str	r2, [r3, #4]
    if (decimal >= maxDecimalPart) {
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	429a      	cmp	r2, r3
 800a128:	d82e      	bhi.n	800a188 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
      decimal = 0;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	605a      	str	r2, [r3, #4]
      integral++;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]
      if (exponent && integral >= 10) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d021      	beq.n	800a188 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b09      	cmp	r3, #9
 800a14a:	d91d      	bls.n	800a188 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
        exponent++;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a152:	b29b      	uxth	r3, r3
 800a154:	3301      	adds	r3, #1
 800a156:	b29b      	uxth	r3, r3
 800a158:	b21a      	sxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	811a      	strh	r2, [r3, #8]
        integral = 1;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2201      	movs	r2, #1
 800a162:	601a      	str	r2, [r3, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800a164:	e010      	b.n	800a188 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
      decimal /= 10;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	4a14      	ldr	r2, [pc, #80]	; (800a1bc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800a16c:	fba2 2303 	umull	r2, r3, r2, r3
 800a170:	08da      	lsrs	r2, r3, #3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	605a      	str	r2, [r3, #4]
      decimalPlaces--;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	3b01      	subs	r3, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	b25a      	sxtb	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	729a      	strb	r2, [r3, #10]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6859      	ldr	r1, [r3, #4]
 800a18c:	4b0b      	ldr	r3, [pc, #44]	; (800a1bc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800a18e:	fba3 2301 	umull	r2, r3, r3, r1
 800a192:	08da      	lsrs	r2, r3, #3
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	1aca      	subs	r2, r1, r3
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	d104      	bne.n	800a1ac <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dcdc      	bgt.n	800a166 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x142>
    }
  }
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	3b9aca00 	.word	0x3b9aca00
 800a1bc:	cccccccd 	.word	0xcccccccd

0800a1c0 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	6812      	ldr	r2, [r2, #0]
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	605a      	str	r2, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>:
  size_t visitFloat(JsonFloat value) {
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	ed97 0b00 	vldr	d0, [r7]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fb8b 	bl	800a914 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 f8bb 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a204:	4603      	mov	r3, r0
  }
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>:
  size_t visitObject(const CollectionData& object) {
 800a20e:	b590      	push	{r4, r7, lr}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
    write('{');
 800a218:	217b      	movs	r1, #123	; 0x7b
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fbd8 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = object.head();
 800a220:	6838      	ldr	r0, [r7, #0]
 800a222:	f7fc fa73 	bl	800670c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 800a226:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 800a228:	e01f      	b.n	800a26a <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x5c>
      formatter_.writeString(slot->key());
 800a22a:	687c      	ldr	r4, [r7, #4]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7fc fb03 	bl	8006838 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 800a232:	4603      	mov	r3, r0
 800a234:	4619      	mov	r1, r3
 800a236:	4620      	mov	r0, r4
 800a238:	f000 fbda 	bl	800a9f0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>
      write(':');
 800a23c:	213a      	movs	r1, #58	; 0x3a
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fbc6 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      slot->data()->accept(*this);
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7fc fa78 	bl	800673a <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800a24a:	4603      	mov	r3, r0
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff f910 	bl	8009474 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7fc fa92 	bl	800677e <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800a25a:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d007      	beq.n	800a272 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x64>
      write(',');
 800a262:	212c      	movs	r1, #44	; 0x2c
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fbb3 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1dc      	bne.n	800a22a <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x1c>
 800a270:	e000      	b.n	800a274 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x66>
        break;
 800a272:	bf00      	nop
    write('}');
 800a274:	217d      	movs	r1, #125	; 0x7d
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fbaa 	bl	800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f87c 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a282:	4603      	mov	r3, r0
  }
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd90      	pop	{r4, r7, pc}

0800a28c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>:
  size_t visitString(const char* value, size_t n) {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
    formatter_.writeString(value, n);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fbc4 	bl	800aa2c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 f868 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a2aa:	4603      	mov	r3, r0
  }
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>:
  size_t visitRawJson(const char* data, size_t n) {
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
    formatter_.writeRaw(data, n);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fbd5 	bl	800aa76 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f854 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a2d2:	4603      	mov	r3, r0
  }
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>:
  size_t visitSignedInteger(JsonInteger value) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800a2e8:	68f9      	ldr	r1, [r7, #12]
 800a2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	f000 fbd1 	bl	800aa96 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f840 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a2fa:	4603      	mov	r3, r0
  }
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>:
  size_t visitUnsignedInteger(JsonUInt value) {
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800a310:	68f9      	ldr	r1, [r7, #12]
 800a312:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a316:	4608      	mov	r0, r1
 800a318:	f000 fbe1 	bl	800aade <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 f82c 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a322:	4603      	mov	r3, r0
  }
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>:
  size_t visitBoolean(bool value) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	78fa      	ldrb	r2, [r7, #3]
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fc02 	bl	800ab48 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f818 	bl	800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a34a:	4603      	mov	r3, r0
  }
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 800a354:	b590      	push	{r4, r7, lr}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 800a35e:	687c      	ldr	r4, [r7, #4]
 800a360:	6838      	ldr	r0, [r7, #0]
 800a362:	f7f5 ff95 	bl	8000290 <strlen>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 fc05 	bl	800ab7c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	bd90      	pop	{r4, r7, pc}

0800a37a <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fc0f 	bl	800aba8 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800a38a:	4603      	mov	r3, r0
  }
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>:
  void move() {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
    latch_.clear();
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3314      	adds	r3, #20
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fc15 	bl	800abf0 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>
  }
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>:
  bool eat(char charToSkip) {
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7ff fa88 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	78fb      	ldrb	r3, [r7, #3]
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	bf14      	ite	ne
 800a3ea:	2301      	movne	r3, #1
 800a3ec:	2300      	moveq	r3, #0
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x2a>
      return false;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e003      	b.n	800a400 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x32>
    move();
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff ffdb 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    return true;
 800a3fe:	2301      	movs	r3, #1
  }
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 800a412:	bf00      	nop
  }
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff fa2a 	bl	8009884 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
    if (err)
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	e07c      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7ff fa56 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a444:	4603      	mov	r3, r0
 800a446:	2b7b      	cmp	r3, #123	; 0x7b
 800a448:	dc71      	bgt.n	800a52e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800a44a:	2b5b      	cmp	r3, #91	; 0x5b
 800a44c:	da04      	bge.n	800a458 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 800a44e:	2b22      	cmp	r3, #34	; 0x22
 800a450:	d056      	beq.n	800a500 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800a452:	2b27      	cmp	r3, #39	; 0x27
 800a454:	d054      	beq.n	800a500 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800a456:	e06a      	b.n	800a52e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800a458:	3b5b      	subs	r3, #91	; 0x5b
 800a45a:	2b20      	cmp	r3, #32
 800a45c:	d867      	bhi.n	800a52e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800a45e:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a4e9 	.word	0x0800a4e9
 800a468:	0800a52f 	.word	0x0800a52f
 800a46c:	0800a52f 	.word	0x0800a52f
 800a470:	0800a52f 	.word	0x0800a52f
 800a474:	0800a52f 	.word	0x0800a52f
 800a478:	0800a52f 	.word	0x0800a52f
 800a47c:	0800a52f 	.word	0x0800a52f
 800a480:	0800a52f 	.word	0x0800a52f
 800a484:	0800a52f 	.word	0x0800a52f
 800a488:	0800a52f 	.word	0x0800a52f
 800a48c:	0800a52f 	.word	0x0800a52f
 800a490:	0800a517 	.word	0x0800a517
 800a494:	0800a52f 	.word	0x0800a52f
 800a498:	0800a52f 	.word	0x0800a52f
 800a49c:	0800a52f 	.word	0x0800a52f
 800a4a0:	0800a52f 	.word	0x0800a52f
 800a4a4:	0800a52f 	.word	0x0800a52f
 800a4a8:	0800a52f 	.word	0x0800a52f
 800a4ac:	0800a52f 	.word	0x0800a52f
 800a4b0:	0800a523 	.word	0x0800a523
 800a4b4:	0800a52f 	.word	0x0800a52f
 800a4b8:	0800a52f 	.word	0x0800a52f
 800a4bc:	0800a52f 	.word	0x0800a52f
 800a4c0:	0800a52f 	.word	0x0800a52f
 800a4c4:	0800a52f 	.word	0x0800a52f
 800a4c8:	0800a50b 	.word	0x0800a50b
 800a4cc:	0800a52f 	.word	0x0800a52f
 800a4d0:	0800a52f 	.word	0x0800a52f
 800a4d4:	0800a52f 	.word	0x0800a52f
 800a4d8:	0800a52f 	.word	0x0800a52f
 800a4dc:	0800a52f 	.word	0x0800a52f
 800a4e0:	0800a52f 	.word	0x0800a52f
 800a4e4:	0800a4f5 	.word	0x0800a4f5
        return skipArray(nestingLimit);
 800a4e8:	7839      	ldrb	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fa9d 	bl	8009a2a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	e021      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 800a4f4:	7839      	ldrb	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff fbd6 	bl	8009ca8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	e01b      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff fc76 	bl	8009df2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800a506:	4603      	mov	r3, r0
 800a508:	e016      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 800a50a:	490d      	ldr	r1, [pc, #52]	; (800a540 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fca5 	bl	8009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800a512:	4603      	mov	r3, r0
 800a514:	e010      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 800a516:	490b      	ldr	r1, [pc, #44]	; (800a544 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7ff fc9f 	bl	8009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800a51e:	4603      	mov	r3, r0
 800a520:	e00a      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 800a522:	4909      	ldr	r1, [pc, #36]	; (800a548 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fc99 	bl	8009e5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800a52a:	4603      	mov	r3, r0
 800a52c:	e004      	b.n	800a538 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fd00 	bl	8009f34 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 800a534:	4603      	mov	r3, r0
 800a536:	bf00      	nop
  }
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	0800ceb4 	.word	0x0800ceb4
 800a544:	0800cebc 	.word	0x0800cebc
 800a548:	0800cec4 	.word	0x0800cec4

0800a54c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
    stringStorage_.startString();
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4618      	mov	r0, r3
 800a558:	f7fd f85e 	bl	8007618 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>
    if (isQuote(current())) {
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff f9c7 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a562:	4603      	mov	r3, r0
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fb66 	bl	800ac36 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f84a 	bl	800a60a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 800a576:	4603      	mov	r3, r0
 800a578:	e004      	b.n	800a584 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fb6f 	bl	800ac5e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>
 800a580:	4603      	mov	r3, r0
 800a582:	bf00      	nop
  }
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixIPKcEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 800a596:	bf00      	nop
  }
 800a598:	4618      	mov	r0, r3
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>:
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fb8d 	bl	800acd0 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 800a5b6:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x24>
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7fc f8b0 	bl	8006724 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	e000      	b.n	800a5ca <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x26>
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff f988 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fb27 	bl	800ac36 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d004      	beq.n	800a5f8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x26>
      return skipQuotedString();
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f7ff fbff 	bl	8009df2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	e004      	b.n	800a602 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fb98 	bl	800ad2e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>
 800a5fe:	4603      	mov	r3, r0
 800a600:	bf00      	nop
  }
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 800a612:	f107 030c 	add.w	r3, r7, #12
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd f8a9 	bl	800776e <_ZN11ArduinoJson8V6213HB26detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff f967 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a622:	4603      	mov	r3, r0
 800a624:	75bb      	strb	r3, [r7, #22]
    move();
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fec4 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff f95f 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a632:	4603      	mov	r3, r0
 800a634:	75fb      	strb	r3, [r7, #23]
      move();
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff febc 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 800a63c:	7dfa      	ldrb	r2, [r7, #23]
 800a63e:	7dbb      	ldrb	r3, [r7, #22]
 800a640:	429a      	cmp	r2, r3
 800a642:	d051      	beq.n	800a6e8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 800a64a:	2302      	movs	r3, #2
 800a64c:	e05a      	b.n	800a704 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
 800a650:	2b5c      	cmp	r3, #92	; 0x5c
 800a652:	d140      	bne.n	800a6d6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xcc>
        c = current();
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff f94b 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800a65a:	4603      	mov	r3, r0
 800a65c:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 800a664:	2302      	movs	r3, #2
 800a666:	e04d      	b.n	800a704 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	2b75      	cmp	r3, #117	; 0x75
 800a66c:	d125      	bne.n	800a6ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xb0>
          move();
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff fea0 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          err = parseHex4(codeunit);
 800a674:	f107 030a 	add.w	r3, r7, #10
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fb75 	bl	800ad6a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>
 800a680:	4603      	mov	r3, r0
 800a682:	757b      	strb	r3, [r7, #21]
          if (err)
 800a684:	7d7b      	ldrb	r3, [r7, #21]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x84>
            return err;
 800a68a:	7d7b      	ldrb	r3, [r7, #21]
 800a68c:	e03a      	b.n	800a704 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 800a68e:	897a      	ldrh	r2, [r7, #10]
 800a690:	f107 030c 	add.w	r3, r7, #12
 800a694:	4611      	mov	r1, r2
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd f87a 	bl	8007790 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d020      	beq.n	800a6e4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringStorage_);
 800a6a2:	f107 030c 	add.w	r3, r7, #12
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fd f8a4 	bl	80077f4 <_ZNK11ArduinoJson8V6213HB26detail5Utf169Codepoint5valueEv>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	f000 fb92 	bl	800addc <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>
 800a6b8:	e7b8      	b.n	800a62c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fc fc5d 	bl	8006f7c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e019      	b.n	800a704 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        move();
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fe6f 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      stringStorage_.append(c);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	7dfa      	ldrb	r2, [r7, #23]
 800a6da:	4611      	mov	r1, r2
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fc ffd0 	bl	8007682 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
 800a6e2:	e7a3      	b.n	800a62c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
          continue;
 800a6e4:	bf00      	nop
    for (;;) {
 800a6e6:	e7a1      	b.n	800a62c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        break;
 800a6e8:	bf00      	nop
    if (!stringStorage_.isValid())
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fc ffe9 	bl	80076c4 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	f083 0301 	eor.w	r3, r3, #1
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 800a6fe:	2304      	movs	r3, #4
 800a700:	e000      	b.n	800a704 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800a702:	2300      	movs	r3, #0
  }
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	2239      	movs	r2, #57	; 0x39
 800a71a:	2130      	movs	r1, #48	; 0x30
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fbdb 	bl	800aed8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800a722:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10e      	bne.n	800a746 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	2b2b      	cmp	r3, #43	; 0x2b
 800a72c:	d00b      	beq.n	800a746 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	2b2d      	cmp	r3, #45	; 0x2d
 800a732:	d008      	beq.n	800a746 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	2b2e      	cmp	r3, #46	; 0x2e
 800a738:	d005      	beq.n	800a746 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	2b65      	cmp	r3, #101	; 0x65
 800a73e:	d002      	beq.n	800a746 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	2b45      	cmp	r3, #69	; 0x45
 800a744:	d101      	bne.n	800a74a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3e>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x40>
 800a74a:	2300      	movs	r3, #0
  }
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	0000      	movs	r0, r0
	...

0800a758 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>:

  static int16_t normalize(TFloat& value) {
 800a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75a:	b089      	sub	sp, #36	; 0x24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	83fb      	strh	r3, [r7, #30]

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 800a764:	2308      	movs	r3, #8
 800a766:	777b      	strb	r3, [r7, #29]
    int bit = 1 << index;
 800a768:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a76c:	2201      	movs	r2, #1
 800a76e:	fa02 f303 	lsl.w	r3, r2, r3
 800a772:	61bb      	str	r3, [r7, #24]

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a77a:	a362      	add	r3, pc, #392	; (adr r3, 800a904 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1ac>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f6 f8e8 	bl	8000954 <__aeabi_dcmpge>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d04a      	beq.n	800a820 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
      for (; index >= 0; index--) {
 800a78a:	e045      	b.n	800a818 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc0>
        if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a792:	f7fe f98b 	bl	8008aac <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800a796:	4603      	mov	r3, r0
 800a798:	60bb      	str	r3, [r7, #8]
 800a79a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800a79e:	f107 0308 	add.w	r3, r7, #8
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe f9a1 	bl	8008aec <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800a7aa:	ec53 2b10 	vmov	r2, r3, d0
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	460e      	mov	r6, r1
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f6 f8cd 	bl	8000954 <__aeabi_dcmpge>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x6c>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	461e      	mov	r6, r3
 800a7c4:	b2f3      	uxtb	r3, r6
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01d      	beq.n	800a806 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xae>
          value *= traits::negativeBinaryPowersOfTen()[index];
 800a7ca:	f7fe f97f 	bl	8008acc <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	60fb      	str	r3, [r7, #12]
 800a7d2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fe f985 	bl	8008aec <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800a7e2:	ec51 0b10 	vmov	r0, r1, d0
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7f5 fd58 	bl	80002a0 <__aeabi_dmul>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 + bit);
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	8bfb      	ldrh	r3, [r7, #30]
 800a800:	4413      	add	r3, r2
 800a802:	b29b      	uxth	r3, r3
 800a804:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	105b      	asrs	r3, r3, #1
 800a80a:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 800a80c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	3b01      	subs	r3, #1
 800a814:	b2db      	uxtb	r3, r3
 800a816:	777b      	strb	r3, [r7, #29]
 800a818:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dab5      	bge.n	800a78c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x34>
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a826:	f04f 0200 	mov.w	r2, #0
 800a82a:	f04f 0300 	mov.w	r3, #0
 800a82e:	f7f6 f89b 	bl	8000968 <__aeabi_dcmpgt>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d05c      	beq.n	800a8f2 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a83e:	a333      	add	r3, pc, #204	; (adr r3, 800a90c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1b4>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f6 f87c 	bl	8000940 <__aeabi_dcmple>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d051      	beq.n	800a8f2 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
      for (; index >= 0; index--) {
 800a84e:	e04c      	b.n	800a8ea <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x192>
        if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a856:	f7fe f939 	bl	8008acc <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800a85a:	4603      	mov	r3, r0
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800a862:	f107 0310 	add.w	r3, r7, #16
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe f93f 	bl	8008aec <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800a86e:	ec51 0b10 	vmov	r0, r1, d0
 800a872:	f04f 0200 	mov.w	r2, #0
 800a876:	4b22      	ldr	r3, [pc, #136]	; (800a900 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1a8>)
 800a878:	f7f5 fd12 	bl	80002a0 <__aeabi_dmul>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	2101      	movs	r1, #1
 800a882:	460e      	mov	r6, r1
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f6 f850 	bl	800092c <__aeabi_dcmplt>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x13e>
 800a892:	2300      	movs	r3, #0
 800a894:	461e      	mov	r6, r3
 800a896:	b2f3      	uxtb	r3, r6
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01d      	beq.n	800a8d8 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x180>
          value *= traits::positiveBinaryPowersOfTen()[index];
 800a89c:	f7fe f906 	bl	8008aac <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800a8a8:	f107 0314 	add.w	r3, r7, #20
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe f91c 	bl	8008aec <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800a8b4:	ec51 0b10 	vmov	r0, r1, d0
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fcef 	bl	80002a0 <__aeabi_dmul>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 - bit);
 800a8cc:	8bfa      	ldrh	r2, [r7, #30]
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	105b      	asrs	r3, r3, #1
 800a8dc:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 800a8de:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	777b      	strb	r3, [r7, #29]
 800a8ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	daae      	bge.n	800a850 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xf8>
      }
    }

    return powersOf10;
 800a8f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  }
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3724      	adds	r7, #36	; 0x24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fe:	bf00      	nop
 800a900:	40240000 	.word	0x40240000
 800a904:	00000000 	.word	0x00000000
 800a908:	416312d0 	.word	0x416312d0
 800a90c:	88e368f1 	.word	0x88e368f1
 800a910:	3ee4f8b5 	.word	0x3ee4f8b5

0800a914 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 800a914:	b5b0      	push	{r4, r5, r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	ed87 0b00 	vstr	d0, [r7]
    if (isnan(value))
 800a920:	ed97 0b00 	vldr	d0, [r7]
 800a924:	f7ff fb40 	bl	8009fa8 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x24>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 800a92e:	4927      	ldr	r1, [pc, #156]	; (800a9cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7ff fd0f 	bl	800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 800a936:	e045      	b.n	800a9c4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (isinf(value))
 800a938:	ed97 0b00 	vldr	d0, [r7]
 800a93c:	f7ff fb4b 	bl	8009fd6 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x3c>
      return writeRaw("null");
 800a946:	4921      	ldr	r1, [pc, #132]	; (800a9cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7ff fd03 	bl	800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 800a94e:	e039      	b.n	800a9c4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (value < 0.0) {
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	f04f 0300 	mov.w	r3, #0
 800a958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a95c:	f7f5 ffe6 	bl	800092c <__aeabi_dcmplt>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d009      	beq.n	800a97a <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x66>
      writeRaw('-');
 800a966:	212d      	movs	r1, #45	; 0x2d
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f000 facf 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 800a96e:	683c      	ldr	r4, [r7, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800a976:	e9c7 4500 	strd	r4, r5, [r7]
    FloatParts<T> parts(value);
 800a97a:	f107 0314 	add.w	r3, r7, #20
 800a97e:	ed97 0b00 	vldr	d0, [r7]
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff fb4e 	bl	800a024 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>
    writeInteger(parts.integral);
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	4619      	mov	r1, r3
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f000 facd 	bl	800af2c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 800a992:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d006      	beq.n	800a9a8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x94>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 faf4 	bl	800af90 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 800a9a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
      writeRaw('e');
 800a9b0:	2165      	movs	r1, #101	; 0x65
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 faaa 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 800a9b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 fb2a 	bl	800b018 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	0800cec4 	.word	0x0800cec4

0800a9d0 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 fa92 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>:
  void writeString(const char* value) {
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
    writeRaw('\"');
 800a9fa:	2122      	movs	r1, #34	; 0x22
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fa85 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (*value)
 800aa02:	e007      	b.n	800aa14 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x24>
      writeChar(*value++);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	603a      	str	r2, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fb20 	bl	800b054 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (*value)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1f3      	bne.n	800aa04 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x14>
    writeRaw('\"');
 800aa1c:	2122      	movs	r1, #34	; 0x22
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fa74 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 800aa38:	2122      	movs	r1, #34	; 0x22
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 fa66 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 800aa40:	e007      	b.n	800aa52 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	60ba      	str	r2, [r7, #8]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 fb01 	bl	800b054 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	1e5a      	subs	r2, r3, #1
 800aa56:	607a      	str	r2, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bf14      	ite	ne
 800aa5c:	2301      	movne	r3, #1
 800aa5e:	2300      	moveq	r3, #0
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1ed      	bne.n	800aa42 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 800aa66:	2122      	movs	r1, #34	; 0x22
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 fa4f 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800aa6e:	bf00      	nop
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 f877 	bl	800ab7c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800aa8e:	bf00      	nop
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 800aa96:	b5b0      	push	{r4, r5, r7, lr}
 800aa98:	b086      	sub	sp, #24
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 800aaa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da0c      	bge.n	800aac4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 800aaaa:	212d      	movs	r1, #45	; 0x2d
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fa2d 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 800aab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aab6:	2100      	movs	r1, #0
 800aab8:	4254      	negs	r4, r2
 800aaba:	eb61 0503 	sbc.w	r5, r1, r3
 800aabe:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800aac2:	e003      	b.n	800aacc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 800aac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 800aacc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 f804 	bl	800aade <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 800aad6:	bf00      	nop
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bdb0      	pop	{r4, r5, r7, pc}

0800aade <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 800aade:	b580      	push	{r7, lr}
 800aae0:	b08c      	sub	sp, #48	; 0x30
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 800aaea:	f107 0310 	add.w	r3, r7, #16
 800aaee:	3316      	adds	r3, #22
 800aaf0:	62bb      	str	r3, [r7, #40]	; 0x28
    char* begin = end;
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      *--begin = char(value % 10 + '0');
 800aaf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aafa:	f04f 020a 	mov.w	r2, #10
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	f7f5 ffab 	bl	8000a5c <__aeabi_uldivmod>
 800ab06:	b2d3      	uxtb	r3, r2
 800ab08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab0a:	3a01      	subs	r2, #1
 800ab0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab0e:	3330      	adds	r3, #48	; 0x30
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800ab16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab1a:	f04f 020a 	mov.w	r2, #10
 800ab1e:	f04f 0300 	mov.w	r3, #0
 800ab22:	f7f5 ff9b 	bl	8000a5c <__aeabi_uldivmod>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 800ab2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	d1df      	bne.n	800aaf6 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 800ab36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 fab6 	bl	800b0ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800ab40:	bf00      	nop
 800ab42:	3730      	adds	r7, #48	; 0x30
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
    if (value)
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d004      	beq.n	800ab64 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 800ab5a:	4906      	ldr	r1, [pc, #24]	; (800ab74 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff fbf9 	bl	800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800ab62:	e003      	b.n	800ab6c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 800ab64:	4904      	ldr	r1, [pc, #16]	; (800ab78 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff fbf4 	bl	800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	0800ceb4 	.word	0x0800ceb4
 800ab78:	0800cebc 	.word	0x0800cebc

0800ab7c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	68b9      	ldr	r1, [r7, #8]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fa9e 	bl	800b0d0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 800ab94:	4602      	mov	r2, r0
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	441a      	add	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	605a      	str	r2, [r3, #4]
  }
 800aba0:	bf00      	nop
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
    return writer_.count();
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fa9e 	bl	800b0f4 <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 800abb8:	4603      	mov	r3, r0
  }
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>:
    return 0;
  return var->getMember(key);
}

template <typename TAdaptedString>
VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
                                   MemoryPool* pool) {
  if (!var)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x16>
    return 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	e007      	b.n	800abe8 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x26>
  return var->getOrAddMember(key, pool);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 fa94 	bl	800b10c <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>
 800abe4:	4603      	mov	r3, r0
 800abe6:	bf00      	nop
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>:
  void clear() {
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	725a      	strb	r2, [r3, #9]
  }
 800abfe:	bf00      	nop
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>:
  }

 private:
  void load() {
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fa9f 	bl	800b158 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>
 800ac1a:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	721a      	strb	r2, [r3, #8]
    loaded_ = true;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	725a      	strb	r2, [r3, #9]
  }
 800ac2e:	bf00      	nop
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800ac36:	b480      	push	{r7}
 800ac38:	b083      	sub	sp, #12
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	2b27      	cmp	r3, #39	; 0x27
 800ac44:	d002      	beq.n	800ac4c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x16>
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	2b22      	cmp	r3, #34	; 0x22
 800ac4a:	d101      	bne.n	800ac50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1a>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e000      	b.n	800ac52 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1c>
 800ac50:	2300      	movs	r3, #0
  }
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
    char c = current();
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7fe fe42 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 fa93 	bl	800b19e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d015      	beq.n	800acaa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x4c>
        move();
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fb98 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
        stringStorage_.append(c);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7bfa      	ldrb	r2, [r7, #15]
 800ac88:	4611      	mov	r1, r2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fc fcf9 	bl	8007682 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
        c = current();
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7fe fe2d 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fa7e 	bl	800b19e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1ea      	bne.n	800ac7e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x20>
 800aca8:	e001      	b.n	800acae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 800acaa:	2303      	movs	r3, #3
 800acac:	e00c      	b.n	800acc8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    if (!stringStorage_.isValid())
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fc fd07 	bl	80076c4 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f083 0301 	eor.w	r3, r3, #1
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 800acc2:	2304      	movs	r3, #4
 800acc4:	e000      	b.n	800acc8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 800acc6:	2300      	movs	r3, #0
  }
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  if (key.isNull())
 800acda:	463b      	mov	r3, r7
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fb fc2b 	bl	8006538 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x1c>
    return 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	e01c      	b.n	800ad26 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x56>
  VariantSlot* slot = head_;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60fb      	str	r3, [r7, #12]
  while (slot) {
 800acf2:	e012      	b.n	800ad1a <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x4a>
    if (stringEquals(key, adaptString(slot->key())))
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7fb fd9f 	bl	8006838 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 800acfa:	4603      	mov	r3, r0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fd fcf8 	bl	80086f2 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800ad02:	4603      	mov	r3, r0
 800ad04:	4619      	mov	r1, r3
 800ad06:	6838      	ldr	r0, [r7, #0]
 800ad08:	f000 fa70 	bl	800b1ec <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d107      	bne.n	800ad22 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x52>
    slot = slot->next();
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7fb fd1c 	bl	8006750 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800ad18:	60f8      	str	r0, [r7, #12]
  while (slot) {
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e9      	bne.n	800acf4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x24>
 800ad20:	e000      	b.n	800ad24 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x54>
      break;
 800ad22:	bf00      	nop
  return slot;
 800ad24:	68fb      	ldr	r3, [r7, #12]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b084      	sub	sp, #16
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
    char c = current();
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7fe fdda 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800ad40:	e007      	b.n	800ad52 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x24>
      move();
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff fb36 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7fe fdd1 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fa22 	bl	800b19e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1f0      	bne.n	800ad42 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 800ad60:	2300      	movs	r3, #0
  }
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
    result = 0;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	2200      	movs	r2, #0
 800ad78:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]
 800ad7e:	e025      	b.n	800adcc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x62>
      char digit = current();
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7fe fdb5 	bl	80098f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800ad90:	2302      	movs	r3, #2
 800ad92:	e01f      	b.n	800add4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fa62 	bl	800b260 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800ada0:	7b7b      	ldrb	r3, [r7, #13]
 800ada2:	2b0f      	cmp	r3, #15
 800ada4:	d901      	bls.n	800adaa <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e014      	b.n	800add4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	b21a      	sxth	r2, r3
 800adb2:	7b7b      	ldrb	r3, [r7, #13]
 800adb4:	b21b      	sxth	r3, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b21b      	sxth	r3, r3
 800adba:	b29a      	uxth	r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	801a      	strh	r2, [r3, #0]
      move();
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff faf7 	bl	800a3b4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	3301      	adds	r3, #1
 800adca:	73fb      	strb	r3, [r7, #15]
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	2b03      	cmp	r3, #3
 800add0:	d9d6      	bls.n	800ad80 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800add2:	2300      	movs	r3, #0
  }
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b7f      	cmp	r3, #127	; 0x7f
 800adea:	d806      	bhi.n	800adfa <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	4619      	mov	r1, r3
 800adf2:	6838      	ldr	r0, [r7, #0]
 800adf4:	f7fc fc45 	bl	8007682 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 800adf8:	e06a      	b.n	800aed0 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xf4>
    char* p = buf;
 800adfa:	f107 030c 	add.w	r3, r7, #12
 800adfe:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	617a      	str	r2, [r7, #20]
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	1c59      	adds	r1, r3, #1
 800ae18:	6179      	str	r1, [r7, #20]
 800ae1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	099b      	lsrs	r3, r3, #6
 800ae26:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 800ae28:	8a7b      	ldrh	r3, [r7, #18]
 800ae2a:	2b1f      	cmp	r3, #31
 800ae2c:	d809      	bhi.n	800ae42 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x66>
      *(p++) = char(codepoint16 | 0xC0);
 800ae2e:	8a7b      	ldrh	r3, [r7, #18]
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	1c59      	adds	r1, r3, #1
 800ae36:	6179      	str	r1, [r7, #20]
 800ae38:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800ae3c:	b2d2      	uxtb	r2, r2
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	e03a      	b.n	800aeb8 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800ae42:	8a7b      	ldrh	r3, [r7, #18]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	6179      	str	r1, [r7, #20]
 800ae52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae56:	b2d2      	uxtb	r2, r2
 800ae58:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800ae5a:	8a7b      	ldrh	r3, [r7, #18]
 800ae5c:	099b      	lsrs	r3, r3, #6
 800ae5e:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800ae60:	8a7b      	ldrh	r3, [r7, #18]
 800ae62:	2b0f      	cmp	r3, #15
 800ae64:	d809      	bhi.n	800ae7a <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x9e>
        *(p++) = char(codepoint16 | 0xE0);
 800ae66:	8a7b      	ldrh	r3, [r7, #18]
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	1c59      	adds	r1, r3, #1
 800ae6e:	6179      	str	r1, [r7, #20]
 800ae70:	f062 021f 	orn	r2, r2, #31
 800ae74:	b2d2      	uxtb	r2, r2
 800ae76:	701a      	strb	r2, [r3, #0]
 800ae78:	e01e      	b.n	800aeb8 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800ae7a:	8a7b      	ldrh	r3, [r7, #18]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	1c59      	adds	r1, r3, #1
 800ae88:	6179      	str	r1, [r7, #20]
 800ae8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800ae92:	8a7b      	ldrh	r3, [r7, #18]
 800ae94:	099b      	lsrs	r3, r3, #6
 800ae96:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800ae98:	8a7b      	ldrh	r3, [r7, #18]
 800ae9a:	b2da      	uxtb	r2, r3
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	1c59      	adds	r1, r3, #1
 800aea0:	6179      	str	r1, [r7, #20]
 800aea2:	f062 020f 	orn	r2, r2, #15
 800aea6:	b2d2      	uxtb	r2, r2
 800aea8:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 800aeaa:	e005      	b.n	800aeb8 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      str.append(*p);
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6838      	ldr	r0, [r7, #0]
 800aeb4:	f7fc fbe5 	bl	8007682 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
    while (*(--p)) {
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	617b      	str	r3, [r7, #20]
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bf14      	ite	ne
 800aec6:	2301      	movne	r3, #1
 800aec8:	2300      	moveq	r3, #0
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1ed      	bne.n	800aeac <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xd0>
}
 800aed0:	bf00      	nop
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	71fb      	strb	r3, [r7, #7]
 800aee2:	460b      	mov	r3, r1
 800aee4:	71bb      	strb	r3, [r7, #6]
 800aee6:	4613      	mov	r3, r2
 800aee8:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800aeea:	79ba      	ldrb	r2, [r7, #6]
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d805      	bhi.n	800aefe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 800aef2:	79fa      	ldrb	r2, [r7, #7]
 800aef4:	797b      	ldrb	r3, [r7, #5]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d801      	bhi.n	800aefe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 800aefa:	2301      	movs	r3, #1
 800aefc:	e000      	b.n	800af00 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x28>
 800aefe:	2300      	movs	r3, #0
  }
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	78fa      	ldrb	r2, [r7, #3]
 800af1c:	4611      	mov	r1, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f9cc 	bl	800b2bc <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08a      	sub	sp, #40	; 0x28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 800af36:	f107 0308 	add.w	r3, r7, #8
 800af3a:	3316      	adds	r3, #22
 800af3c:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	4b11      	ldr	r3, [pc, #68]	; (800af8c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 800af46:	fba3 2301 	umull	r2, r3, r3, r1
 800af4a:	08da      	lsrs	r2, r3, #3
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	1aca      	subs	r2, r1, r3
 800af56:	b2d3      	uxtb	r3, r2
 800af58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5a:	3a01      	subs	r2, #1
 800af5c:	627a      	str	r2, [r7, #36]	; 0x24
 800af5e:	3330      	adds	r3, #48	; 0x30
 800af60:	b2da      	uxtb	r2, r3
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	4a08      	ldr	r2, [pc, #32]	; (800af8c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 800af6a:	fba2 2303 	umull	r2, r3, r2, r3
 800af6e:	08db      	lsrs	r3, r3, #3
 800af70:	603b      	str	r3, [r7, #0]
    } while (value);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e4      	bne.n	800af42 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 800af78:	6a3a      	ldr	r2, [r7, #32]
 800af7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f895 	bl	800b0ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800af82:	bf00      	nop
 800af84:	3728      	adds	r7, #40	; 0x28
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	cccccccd 	.word	0xcccccccd

0800af90 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 800af90:	b580      	push	{r7, lr}
 800af92:	b08a      	sub	sp, #40	; 0x28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	4613      	mov	r3, r2
 800af9c:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 800af9e:	f107 0310 	add.w	r3, r7, #16
 800afa2:	3310      	adds	r3, #16
 800afa4:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	627b      	str	r3, [r7, #36]	; 0x24
    while (width--) {
 800afaa:	e017      	b.n	800afdc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 800afac:	68b9      	ldr	r1, [r7, #8]
 800afae:	4b19      	ldr	r3, [pc, #100]	; (800b014 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 800afb0:	fba3 2301 	umull	r2, r3, r3, r1
 800afb4:	08da      	lsrs	r2, r3, #3
 800afb6:	4613      	mov	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	1aca      	subs	r2, r1, r3
 800afc0:	b2d3      	uxtb	r3, r2
 800afc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc4:	3a01      	subs	r2, #1
 800afc6:	627a      	str	r2, [r7, #36]	; 0x24
 800afc8:	3330      	adds	r3, #48	; 0x30
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	701a      	strb	r2, [r3, #0]
      value /= 10;
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4a10      	ldr	r2, [pc, #64]	; (800b014 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 800afd4:	fba2 2303 	umull	r2, r3, r2, r3
 800afd8:	08db      	lsrs	r3, r3, #3
 800afda:	60bb      	str	r3, [r7, #8]
    while (width--) {
 800afdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	3a01      	subs	r2, #1
 800afe4:	b2d2      	uxtb	r2, r2
 800afe6:	71fa      	strb	r2, [r7, #7]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bf14      	ite	ne
 800afec:	2301      	movne	r3, #1
 800afee:	2300      	moveq	r3, #0
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1da      	bne.n	800afac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	3b01      	subs	r3, #1
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	222e      	movs	r2, #46	; 0x2e
 800b000:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 800b002:	6a3a      	ldr	r2, [r7, #32]
 800b004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 f850 	bl	800b0ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800b00c:	bf00      	nop
 800b00e:	3728      	adds	r7, #40	; 0x28
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	cccccccd 	.word	0xcccccccd

0800b018 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 800b024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da07      	bge.n	800b03c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 800b02c:	212d      	movs	r1, #45	; 0x2d
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff ff6c 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 800b034:	887b      	ldrh	r3, [r7, #2]
 800b036:	425b      	negs	r3, r3
 800b038:	81fb      	strh	r3, [r7, #14]
 800b03a:	e001      	b.n	800b040 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 800b03c:	887b      	ldrh	r3, [r7, #2]
 800b03e:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 800b040:	89fb      	ldrh	r3, [r7, #14]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f94f 	bl	800b2e8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 800b04a:	bf00      	nop
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	460b      	mov	r3, r1
 800b05e:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	4618      	mov	r0, r3
 800b064:	f7fb ff6d 	bl	8006f42 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d009      	beq.n	800b086 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 800b072:	215c      	movs	r1, #92	; 0x5c
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff ff49 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	4619      	mov	r1, r3
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff ff44 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800b084:	e00c      	b.n	800b0a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d005      	beq.n	800b098 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7ff ff3b 	bl	800af0c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800b096:	e003      	b.n	800b0a0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 800b098:	4903      	ldr	r1, [pc, #12]	; (800b0a8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f7ff f95a 	bl	800a354 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	0800cecc 	.word	0x0800cecc

0800b0ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 800b0b8:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	f7ff fd5a 	bl	800ab7c <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 fcfb 	bl	800bae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 800b0ea:	687b      	ldr	r3, [r7, #4]
  }
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
    return count_;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
  }
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>:
  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
    if (isNull())
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7fb fceb 	bl	8006af4 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x1e>
      toObject();
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7fb fd6f 	bl	8006c08 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
    if (!isObject())
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f7fb fccf 	bl	8006ace <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 800b130:	4603      	mov	r3, r0
 800b132:	f083 0301 	eor.w	r3, r3, #1
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x34>
      return 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	e007      	b.n	800b150 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x44>
    return content_.asCollection.getOrAddMember(key, pool);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	4618      	mov	r0, r3
 800b148:	f000 f902 	bl	800b350 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 800b14c:	4603      	mov	r3, r0
 800b14e:	bf00      	nop
  }
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>:
  int read() {
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
    if (ptr_ < end_)
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4610      	mov	r0, r2
 800b16a:	f000 f919 	bl	800b3a0 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00e      	beq.n	800b192 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3a>
      return static_cast<unsigned char>(*ptr_++);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2100      	movs	r1, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f929 	bl	800b3d0 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>
 800b17e:	4603      	mov	r3, r0
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	f107 030c 	add.w	r3, r7, #12
 800b186:	4618      	mov	r0, r3
 800b188:	f000 f93a 	bl	800b400 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800b18c:	4603      	mov	r3, r0
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	e001      	b.n	800b196 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3e>
      return -1;
 800b192:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
 800b1aa:	2239      	movs	r2, #57	; 0x39
 800b1ac:	2130      	movs	r1, #48	; 0x30
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff fe92 	bl	800aed8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d111      	bne.n	800b1de <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	227a      	movs	r2, #122	; 0x7a
 800b1be:	215f      	movs	r1, #95	; 0x5f
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fe89 	bl	800aed8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d108      	bne.n	800b1de <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	225a      	movs	r2, #90	; 0x5a
 800b1d0:	2141      	movs	r1, #65	; 0x41
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7ff fe80 	bl	800aed8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800b1d8:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x44>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x46>
 800b1e2:	2300      	movs	r3, #0
  }
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 800b1ec:	b590      	push	{r4, r7, lr}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  size_t size1 = s1.size();
 800b1f6:	1d3b      	adds	r3, r7, #4
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fb f9ae 	bl	800655a <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800b1fe:	6138      	str	r0, [r7, #16]
  size_t size2 = s2.size();
 800b200:	463b      	mov	r3, r7
 800b202:	4618      	mov	r0, r3
 800b204:	f7fb f9a9 	bl	800655a <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800b208:	60f8      	str	r0, [r7, #12]
  if (size1 != size2)
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d001      	beq.n	800b216 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2a>
    return false;
 800b212:	2300      	movs	r3, #0
 800b214:	e020      	b.n	800b258 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	e018      	b.n	800b24e <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x62>
    if (s1[i] != s2[i])
 800b21c:	1d3b      	adds	r3, r7, #4
 800b21e:	6979      	ldr	r1, [r7, #20]
 800b220:	4618      	mov	r0, r3
 800b222:	f7fb f9ae 	bl	8006582 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 800b226:	4603      	mov	r3, r0
 800b228:	461c      	mov	r4, r3
 800b22a:	463b      	mov	r3, r7
 800b22c:	6979      	ldr	r1, [r7, #20]
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fb f9a7 	bl	8006582 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 800b234:	4603      	mov	r3, r0
 800b236:	429c      	cmp	r4, r3
 800b238:	bf14      	ite	ne
 800b23a:	2301      	movne	r3, #1
 800b23c:	2300      	moveq	r3, #0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x5c>
      return false;
 800b244:	2300      	movs	r3, #0
 800b246:	e007      	b.n	800b258 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	3301      	adds	r3, #1
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	429a      	cmp	r2, r3
 800b254:	d3e2      	bcc.n	800b21c <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x30>
  return true;
 800b256:	2301      	movs	r3, #1
}
 800b258:	4618      	mov	r0, r3
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd90      	pop	{r4, r7, pc}

0800b260 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 800b26a:	79fb      	ldrb	r3, [r7, #7]
 800b26c:	2b40      	cmp	r3, #64	; 0x40
 800b26e:	d803      	bhi.n	800b278 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	3b30      	subs	r3, #48	; 0x30
 800b274:	b2db      	uxtb	r3, r3
 800b276:	e006      	b.n	800b286 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	f023 0320 	bic.w	r3, r3, #32
 800b27e:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	3b37      	subs	r3, #55	; 0x37
 800b284:	b2db      	uxtb	r3, r3
  }
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>:
VariantData* variantGetMember(const VariantData* var, TAdaptedString key) {
 800b292:	b580      	push	{r7, lr}
 800b294:	b082      	sub	sp, #8
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
  if (!var)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x14>
    return 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e006      	b.n	800b2b4 <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x22>
  return var->getMember(key);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 f8b4 	bl	800b418 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	bf00      	nop
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	78fa      	ldrb	r2, [r7, #3]
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 f8ba 	bl	800b448 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	441a      	add	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	605a      	str	r2, [r3, #4]
  }
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	; 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 800b2f4:	f107 0308 	add.w	r3, r7, #8
 800b2f8:	3316      	adds	r3, #22
 800b2fa:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 800b300:	887a      	ldrh	r2, [r7, #2]
 800b302:	4b12      	ldr	r3, [pc, #72]	; (800b34c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 800b304:	fba3 1302 	umull	r1, r3, r3, r2
 800b308:	08d9      	lsrs	r1, r3, #3
 800b30a:	460b      	mov	r3, r1
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	440b      	add	r3, r1
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	b29b      	uxth	r3, r3
 800b316:	b2db      	uxtb	r3, r3
 800b318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b31a:	3a01      	subs	r2, #1
 800b31c:	627a      	str	r2, [r7, #36]	; 0x24
 800b31e:	3330      	adds	r3, #48	; 0x30
 800b320:	b2da      	uxtb	r2, r3
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800b326:	887b      	ldrh	r3, [r7, #2]
 800b328:	4a08      	ldr	r2, [pc, #32]	; (800b34c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 800b32a:	fba2 2303 	umull	r2, r3, r2, r3
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	807b      	strh	r3, [r7, #2]
    } while (value);
 800b332:	887b      	ldrh	r3, [r7, #2]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1e3      	bne.n	800b300 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 800b338:	6a3a      	ldr	r2, [r7, #32]
 800b33a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff feb5 	bl	800b0ac <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800b342:	bf00      	nop
 800b344:	3728      	adds	r7, #40	; 0x28
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	cccccccd 	.word	0xcccccccd

0800b350 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  if (key.isNull())
 800b35c:	f107 0308 	add.w	r3, r7, #8
 800b360:	4618      	mov	r0, r3
 800b362:	f7fb f8e9 	bl	8006538 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
    return 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	e013      	b.n	800b398 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  VariantSlot* slot = getSlot(key);
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7ff fcac 	bl	800acd0 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 800b378:	6178      	str	r0, [r7, #20]
  if (slot)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d004      	beq.n	800b38a <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x3a>
    return slot->data();
 800b380:	6978      	ldr	r0, [r7, #20]
 800b382:	f7fb f9cf 	bl	8006724 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800b386:	4603      	mov	r3, r0
 800b388:	e006      	b.n	800b398 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  return addMember(key, pool);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 f86c 	bl	800b46c <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 800b394:	4603      	mov	r3, r0
 800b396:	bf00      	nop
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() < __rhs.base(); }
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f883 	bl	800b4b6 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	681c      	ldr	r4, [r3, #0]
 800b3b4:	6838      	ldr	r0, [r7, #0]
 800b3b6:	f000 f87e 	bl	800b4b6 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	bf34      	ite	cc
 800b3c2:	2301      	movcc	r3, #1
 800b3c4:	2300      	movcs	r3, #0
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd90      	pop	{r4, r7, pc}

0800b3d0 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current++); }
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	1c59      	adds	r1, r3, #1
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	6011      	str	r1, [r2, #0]
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	f107 020c 	add.w	r2, r7, #12
 800b3ea:	f107 0308 	add.w	r3, r7, #8
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fe ffcf 	bl	800a394 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>:
  VariantData* getMember(TAdaptedString key) const {
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
    const CollectionData* col = asObject();
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fb fb34 	bl	8006a90 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>
 800b428:	60f8      	str	r0, [r7, #12]
    return col ? col->getMember(key) : 0;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d006      	beq.n	800b43e <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x26>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff f8b5 	bl	800a5a4 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 800b43a:	4603      	mov	r3, r0
 800b43c:	e000      	b.n	800b440 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x28>
 800b43e:	2300      	movs	r3, #0
  }
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	460b      	mov	r3, r1
 800b452:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	78fa      	ldrb	r2, [r7, #3]
 800b45a:	4611      	mov	r1, r2
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 fafd 	bl	800ba5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 800b462:	2301      	movs	r3, #1
  }
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addMember(TAdaptedString key,
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
  VariantSlot* slot = addSlot(pool);
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7fb fcd1 	bl	8006e22 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 800b480:	6178      	str	r0, [r7, #20]
  if (!slotSetKey(slot, key, pool)) {
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	68b9      	ldr	r1, [r7, #8]
 800b486:	6978      	ldr	r0, [r7, #20]
 800b488:	f000 f820 	bl	800b4cc <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>
 800b48c:	4603      	mov	r3, r0
 800b48e:	f083 0301 	eor.w	r3, r3, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d005      	beq.n	800b4a4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x38>
    removeSlot(slot);
 800b498:	6979      	ldr	r1, [r7, #20]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7fb fd2a 	bl	8006ef4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>
    return 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e004      	b.n	800b4ae <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x42>
  return slot->data();
 800b4a4:	6978      	ldr	r0, [r7, #20]
 800b4a6:	f7fb f93d 	bl	8006724 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	bf00      	nop
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>:
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
  if (!var)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x16>
    return false;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e00c      	b.n	800b4fc <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x30>
  return storeString(pool, key, SlotKeySetter(var));
 800b4e2:	f107 0314 	add.w	r3, r7, #20
 800b4e6:	68f9      	ldr	r1, [r7, #12]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fb fc19 	bl	8006d20 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	68b9      	ldr	r1, [r7, #8]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f806 	bl	800b504 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	bf00      	nop
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 800b510:	f107 0308 	add.w	r3, r7, #8
 800b514:	4618      	mov	r0, r3
 800b516:	f7fb f85f 	bl	80065d8 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4622      	mov	r2, r4
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 f805 	bl	800b530 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 800b526:	4603      	mov	r3, r0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd90      	pop	{r4, r7, pc}

0800b530 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 800b530:	b590      	push	{r4, r7, lr}
 800b532:	b089      	sub	sp, #36	; 0x24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	713a      	strb	r2, [r7, #4]
 800b53c:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 800b53e:	f107 0308 	add.w	r3, r7, #8
 800b542:	4618      	mov	r0, r3
 800b544:	f7fb f82d 	bl	80065a2 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 800b548:	4604      	mov	r4, r0
 800b54a:	f107 0308 	add.w	r3, r7, #8
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fb f803 	bl	800655a <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800b554:	4602      	mov	r2, r0
 800b556:	f107 0014 	add.w	r0, r7, #20
 800b55a:	2301      	movs	r3, #1
 800b55c:	4621      	mov	r1, r4
 800b55e:	f7fb f884 	bl	800666a <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 800b562:	4638      	mov	r0, r7
 800b564:	f107 0314 	add.w	r3, r7, #20
 800b568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b56a:	f7fe fd01 	bl	8009f70 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4618      	mov	r0, r3
 800b574:	f7fa ffe0 	bl	8006538 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800b578:	4603      	mov	r3, r0
 800b57a:	f083 0301 	eor.w	r3, r3, #1
 800b57e:	b2db      	uxtb	r3, r3
}
 800b580:	4618      	mov	r0, r3
 800b582:	3724      	adds	r7, #36	; 0x24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd90      	pop	{r4, r7, pc}

0800b588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800b590:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d013      	beq.n	800b5c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800b5a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b5a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800b5a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00b      	beq.n	800b5c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800b5b0:	e000      	b.n	800b5b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 800b5b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800b5b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0f9      	beq.n	800b5b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800b5be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	b2d2      	uxtb	r2, r2
 800b5c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800b5c8:	687b      	ldr	r3, [r7, #4]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <__io_putchar>:
 *  Created on: Oct 25, 2023
 *      Author: jeffr
 */

#include "stm32f4xx.h"
int __io_putchar(int ch){
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff ffd1 	bl	800b588 <ITM_SendChar>
	return ch;
 800b5e6:	687b      	ldr	r3, [r7, #4]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <SysTick_Handler>:
#include <MQTT/mqtt_interface.h>

extern volatile uint32_t uwTick;
/*ISR---------------------------------------*/

void SysTick_Handler(void){
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 800b5f4:	4b07      	ldr	r3, [pc, #28]	; (800b614 <SysTick_Handler+0x24>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <SysTick_Handler+0x20>
		uwTick += 1;
 800b600:	4b05      	ldr	r3, [pc, #20]	; (800b618 <SysTick_Handler+0x28>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	4a04      	ldr	r2, [pc, #16]	; (800b618 <SysTick_Handler+0x28>)
 800b608:	6013      	str	r3, [r2, #0]
		//mqtt inteface tick counter
		MilliTimer_Handler();
 800b60a:	f7f9 ff75 	bl	80054f8 <MilliTimer_Handler>
	}
	return;
 800b60e:	bf00      	nop
 800b610:	bf00      	nop
}
 800b612:	bd80      	pop	{r7, pc}
 800b614:	e000e010 	.word	0xe000e010
 800b618:	20000180 	.word	0x20000180

0800b61c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
  return 1;
 800b620:	2301      	movs	r3, #1
}
 800b622:	4618      	mov	r0, r3
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <_kill>:

int _kill(int pid, int sig)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b636:	f000 fe47 	bl	800c2c8 <__errno>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2216      	movs	r2, #22
 800b63e:	601a      	str	r2, [r3, #0]
  return -1;
 800b640:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_exit>:

void _exit (int status)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b654:	f04f 31ff 	mov.w	r1, #4294967295
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ffe7 	bl	800b62c <_kill>
  while (1) {}    /* Make sure we hang here */
 800b65e:	e7fe      	b.n	800b65e <_exit+0x12>

0800b660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b66c:	2300      	movs	r3, #0
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	e00a      	b.n	800b688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b672:	f3af 8000 	nop.w
 800b676:	4601      	mov	r1, r0
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	60ba      	str	r2, [r7, #8]
 800b67e:	b2ca      	uxtb	r2, r1
 800b680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	3301      	adds	r3, #1
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	dbf0      	blt.n	800b672 <_read+0x12>
  }

  return len;
 800b690:	687b      	ldr	r3, [r7, #4]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b086      	sub	sp, #24
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	e009      	b.n	800b6c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	60ba      	str	r2, [r7, #8]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff ff8e 	bl	800b5d6 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	617b      	str	r3, [r7, #20]
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	dbf1      	blt.n	800b6ac <_write+0x12>
  }
  return len;
 800b6c8:	687b      	ldr	r3, [r7, #4]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <_close>:

int _close(int file)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b6da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b083      	sub	sp, #12
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6fa:	605a      	str	r2, [r3, #4]
  return 0;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <_isatty>:

int _isatty(int file)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b712:	2301      	movs	r3, #1
}
 800b714:	4618      	mov	r0, r3
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
	...

0800b73c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b744:	4a14      	ldr	r2, [pc, #80]	; (800b798 <_sbrk+0x5c>)
 800b746:	4b15      	ldr	r3, [pc, #84]	; (800b79c <_sbrk+0x60>)
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b750:	4b13      	ldr	r3, [pc, #76]	; (800b7a0 <_sbrk+0x64>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b758:	4b11      	ldr	r3, [pc, #68]	; (800b7a0 <_sbrk+0x64>)
 800b75a:	4a12      	ldr	r2, [pc, #72]	; (800b7a4 <_sbrk+0x68>)
 800b75c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b75e:	4b10      	ldr	r3, [pc, #64]	; (800b7a0 <_sbrk+0x64>)
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d207      	bcs.n	800b77c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b76c:	f000 fdac 	bl	800c2c8 <__errno>
 800b770:	4603      	mov	r3, r0
 800b772:	220c      	movs	r2, #12
 800b774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295
 800b77a:	e009      	b.n	800b790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b77c:	4b08      	ldr	r3, [pc, #32]	; (800b7a0 <_sbrk+0x64>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b782:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <_sbrk+0x64>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4413      	add	r3, r2
 800b78a:	4a05      	ldr	r2, [pc, #20]	; (800b7a0 <_sbrk+0x64>)
 800b78c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b78e:	68fb      	ldr	r3, [r7, #12]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20020000 	.word	0x20020000
 800b79c:	00000400 	.word	0x00000400
 800b7a0:	20001c00 	.word	0x20001c00
 800b7a4:	20001d58 	.word	0x20001d58

0800b7a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <SystemInit+0x20>)
 800b7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7b2:	4a05      	ldr	r2, [pc, #20]	; (800b7c8 <SystemInit+0x20>)
 800b7b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b7bc:	bf00      	nop
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	e000ed00 	.word	0xe000ed00

0800b7cc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	2302      	movs	r3, #2
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60bb      	str	r3, [r7, #8]
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b7e6:	4b34      	ldr	r3, [pc, #208]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f003 030c 	and.w	r3, r3, #12
 800b7ee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2b08      	cmp	r3, #8
 800b7f4:	d011      	beq.n	800b81a <SystemCoreClockUpdate+0x4e>
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d844      	bhi.n	800b886 <SystemCoreClockUpdate+0xba>
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <SystemCoreClockUpdate+0x3e>
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b04      	cmp	r3, #4
 800b806:	d004      	beq.n	800b812 <SystemCoreClockUpdate+0x46>
 800b808:	e03d      	b.n	800b886 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800b80a:	4b2c      	ldr	r3, [pc, #176]	; (800b8bc <SystemCoreClockUpdate+0xf0>)
 800b80c:	4a2c      	ldr	r2, [pc, #176]	; (800b8c0 <SystemCoreClockUpdate+0xf4>)
 800b80e:	601a      	str	r2, [r3, #0]
      break;
 800b810:	e03d      	b.n	800b88e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800b812:	4b2a      	ldr	r3, [pc, #168]	; (800b8bc <SystemCoreClockUpdate+0xf0>)
 800b814:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <SystemCoreClockUpdate+0xf8>)
 800b816:	601a      	str	r2, [r3, #0]
      break;
 800b818:	e039      	b.n	800b88e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800b81a:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	0d9b      	lsrs	r3, r3, #22
 800b820:	f003 0301 	and.w	r3, r3, #1
 800b824:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b826:	4b24      	ldr	r3, [pc, #144]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b82e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00c      	beq.n	800b850 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800b836:	4a23      	ldr	r2, [pc, #140]	; (800b8c4 <SystemCoreClockUpdate+0xf8>)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83e:	4a1e      	ldr	r2, [pc, #120]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b840:	6852      	ldr	r2, [r2, #4]
 800b842:	0992      	lsrs	r2, r2, #6
 800b844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b848:	fb02 f303 	mul.w	r3, r2, r3
 800b84c:	617b      	str	r3, [r7, #20]
 800b84e:	e00b      	b.n	800b868 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800b850:	4a1b      	ldr	r2, [pc, #108]	; (800b8c0 <SystemCoreClockUpdate+0xf4>)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	fbb2 f3f3 	udiv	r3, r2, r3
 800b858:	4a17      	ldr	r2, [pc, #92]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b85a:	6852      	ldr	r2, [r2, #4]
 800b85c:	0992      	lsrs	r2, r2, #6
 800b85e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b862:	fb02 f303 	mul.w	r3, r2, r3
 800b866:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	0c1b      	lsrs	r3, r3, #16
 800b86e:	f003 0303 	and.w	r3, r3, #3
 800b872:	3301      	adds	r3, #1
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b880:	4a0e      	ldr	r2, [pc, #56]	; (800b8bc <SystemCoreClockUpdate+0xf0>)
 800b882:	6013      	str	r3, [r2, #0]
      break;
 800b884:	e003      	b.n	800b88e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800b886:	4b0d      	ldr	r3, [pc, #52]	; (800b8bc <SystemCoreClockUpdate+0xf0>)
 800b888:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <SystemCoreClockUpdate+0xf4>)
 800b88a:	601a      	str	r2, [r3, #0]
      break;
 800b88c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800b88e:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <SystemCoreClockUpdate+0xec>)
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	091b      	lsrs	r3, r3, #4
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	4a0b      	ldr	r2, [pc, #44]	; (800b8c8 <SystemCoreClockUpdate+0xfc>)
 800b89a:	5cd3      	ldrb	r3, [r2, r3]
 800b89c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800b89e:	4b07      	ldr	r3, [pc, #28]	; (800b8bc <SystemCoreClockUpdate+0xf0>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a8:	4a04      	ldr	r2, [pc, #16]	; (800b8bc <SystemCoreClockUpdate+0xf0>)
 800b8aa:	6013      	str	r3, [r2, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	371c      	adds	r7, #28
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	40023800 	.word	0x40023800
 800b8bc:	200000a0 	.word	0x200000a0
 800b8c0:	00f42400 	.word	0x00f42400
 800b8c4:	017d7840 	.word	0x017d7840
 800b8c8:	0800cf70 	.word	0x0800cf70

0800b8cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b8cc:	480d      	ldr	r0, [pc, #52]	; (800b904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b8ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800b8d0:	f7ff ff6a 	bl	800b7a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b8d4:	480c      	ldr	r0, [pc, #48]	; (800b908 <LoopForever+0x6>)
  ldr r1, =_edata
 800b8d6:	490d      	ldr	r1, [pc, #52]	; (800b90c <LoopForever+0xa>)
  ldr r2, =_sidata
 800b8d8:	4a0d      	ldr	r2, [pc, #52]	; (800b910 <LoopForever+0xe>)
  movs r3, #0
 800b8da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b8dc:	e002      	b.n	800b8e4 <LoopCopyDataInit>

0800b8de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b8de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b8e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b8e2:	3304      	adds	r3, #4

0800b8e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b8e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b8e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b8e8:	d3f9      	bcc.n	800b8de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b8ea:	4a0a      	ldr	r2, [pc, #40]	; (800b914 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b8ec:	4c0a      	ldr	r4, [pc, #40]	; (800b918 <LoopForever+0x16>)
  movs r3, #0
 800b8ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b8f0:	e001      	b.n	800b8f6 <LoopFillZerobss>

0800b8f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b8f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b8f4:	3204      	adds	r2, #4

0800b8f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b8f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b8f8:	d3fb      	bcc.n	800b8f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b8fa:	f000 fceb 	bl	800c2d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b8fe:	f7fc fcc7 	bl	8008290 <main>

0800b902 <LoopForever>:

LoopForever:
  b LoopForever
 800b902:	e7fe      	b.n	800b902 <LoopForever>
  ldr   r0, =_estack
 800b904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b90c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800b910:	0800d01c 	.word	0x0800d01c
  ldr r2, =_sbss
 800b914:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800b918:	20001d54 	.word	0x20001d54

0800b91c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b91c:	e7fe      	b.n	800b91c <ADC_IRQHandler>

0800b91e <_ZNSaIcEC1Ev>:
 800b91e:	4770      	bx	lr

0800b920 <_ZNSaIcED1Ev>:
 800b920:	4770      	bx	lr

0800b922 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b922:	b10a      	cbz	r2, 800b928 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b924:	f000 bd04 	b.w	800c330 <memcpy>
 800b928:	4770      	bx	lr
	...

0800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b92c:	b508      	push	{r3, lr}
 800b92e:	680b      	ldr	r3, [r1, #0]
 800b930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b934:	d302      	bcc.n	800b93c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b936:	480d      	ldr	r0, [pc, #52]	; (800b96c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b938:	f000 f92d 	bl	800bb96 <_ZSt20__throw_length_errorPKc>
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d90b      	bls.n	800b958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b940:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b944:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b948:	d206      	bcs.n	800b958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b94a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b94e:	bf2a      	itet	cs
 800b950:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b954:	6008      	strcc	r0, [r1, #0]
 800b956:	600b      	strcs	r3, [r1, #0]
 800b958:	6808      	ldr	r0, [r1, #0]
 800b95a:	3001      	adds	r0, #1
 800b95c:	d501      	bpl.n	800b962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b95e:	f000 f914 	bl	800bb8a <_ZSt17__throw_bad_allocv>
 800b962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b966:	f000 b8ff 	b.w	800bb68 <_Znwj>
 800b96a:	bf00      	nop
 800b96c:	0800cf80 	.word	0x0800cf80

0800b970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b970:	f850 3b08 	ldr.w	r3, [r0], #8
 800b974:	4283      	cmp	r3, r0
 800b976:	d002      	beq.n	800b97e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 b8f3 	b.w	800bb64 <_ZdlPv>
 800b97e:	4770      	bx	lr

0800b980 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b980:	6840      	ldr	r0, [r0, #4]
 800b982:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b986:	3901      	subs	r1, #1
 800b988:	1a09      	subs	r1, r1, r0
 800b98a:	4291      	cmp	r1, r2
 800b98c:	b508      	push	{r3, lr}
 800b98e:	d202      	bcs.n	800b996 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f900 	bl	800bb96 <_ZSt20__throw_length_errorPKc>
 800b996:	bd08      	pop	{r3, pc}

0800b998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b998:	2a01      	cmp	r2, #1
 800b99a:	b410      	push	{r4}
 800b99c:	d104      	bne.n	800b9a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b99e:	780a      	ldrb	r2, [r1, #0]
 800b9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a4:	7002      	strb	r2, [r0, #0]
 800b9a6:	4770      	bx	lr
 800b9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ac:	f7ff bfb9 	b.w	800b922 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b9b0:	b508      	push	{r3, lr}
 800b9b2:	1a52      	subs	r2, r2, r1
 800b9b4:	f7ff fff0 	bl	800b998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b9b8:	bd08      	pop	{r3, pc}

0800b9ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b9ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b9c0:	461f      	mov	r7, r3
 800b9c2:	6843      	ldr	r3, [r0, #4]
 800b9c4:	eb01 0802 	add.w	r8, r1, r2
 800b9c8:	1ab2      	subs	r2, r6, r2
 800b9ca:	441a      	add	r2, r3
 800b9cc:	eba3 0908 	sub.w	r9, r3, r8
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	9201      	str	r2, [sp, #4]
 800b9d4:	f853 2b08 	ldr.w	r2, [r3], #8
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	bf18      	it	ne
 800b9dc:	6882      	ldrne	r2, [r0, #8]
 800b9de:	460d      	mov	r5, r1
 800b9e0:	bf08      	it	eq
 800b9e2:	220f      	moveq	r2, #15
 800b9e4:	a901      	add	r1, sp, #4
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	f7ff ffa0 	bl	800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	b11d      	cbz	r5, 800b9f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b9f0:	6821      	ldr	r1, [r4, #0]
 800b9f2:	462a      	mov	r2, r5
 800b9f4:	f7ff ffd0 	bl	800b998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b9f8:	b137      	cbz	r7, 800ba08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b9fa:	b12e      	cbz	r6, 800ba08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	eb0a 0005 	add.w	r0, sl, r5
 800ba04:	f7ff ffc8 	bl	800b998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ba08:	f1b9 0f00 	cmp.w	r9, #0
 800ba0c:	d007      	beq.n	800ba1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800ba0e:	6821      	ldr	r1, [r4, #0]
 800ba10:	4435      	add	r5, r6
 800ba12:	464a      	mov	r2, r9
 800ba14:	4441      	add	r1, r8
 800ba16:	eb0a 0005 	add.w	r0, sl, r5
 800ba1a:	f7ff ffbd 	bl	800b998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f7ff ffa6 	bl	800b970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ba24:	9b01      	ldr	r3, [sp, #4]
 800ba26:	f8c4 a000 	str.w	sl, [r4]
 800ba2a:	60a3      	str	r3, [r4, #8]
 800ba2c:	b002      	add	sp, #8
 800ba2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ba32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800ba32:	f100 0208 	add.w	r2, r0, #8
 800ba36:	6002      	str	r2, [r0, #0]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	6042      	str	r2, [r0, #4]
 800ba3c:	7202      	strb	r2, [r0, #8]
 800ba3e:	4770      	bx	lr

0800ba40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	4604      	mov	r4, r0
 800ba44:	f7ff ff94 	bl	800b970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ba48:	4620      	mov	r0, r4
 800ba4a:	bd10      	pop	{r4, pc}

0800ba4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 800ba4c:	6800      	ldr	r0, [r0, #0]
 800ba4e:	4770      	bx	lr

0800ba50 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 800ba50:	e9d0 2000 	ldrd	r2, r0, [r0]
 800ba54:	4410      	add	r0, r2
 800ba56:	4770      	bx	lr

0800ba58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800ba58:	6840      	ldr	r0, [r0, #4]
 800ba5a:	4770      	bx	lr

0800ba5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba60:	f853 2b08 	ldr.w	r2, [r3], #8
 800ba64:	6846      	ldr	r6, [r0, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	bf18      	it	ne
 800ba6a:	6883      	ldrne	r3, [r0, #8]
 800ba6c:	f106 0501 	add.w	r5, r6, #1
 800ba70:	bf08      	it	eq
 800ba72:	230f      	moveq	r3, #15
 800ba74:	429d      	cmp	r5, r3
 800ba76:	4604      	mov	r4, r0
 800ba78:	460f      	mov	r7, r1
 800ba7a:	d906      	bls.n	800ba8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	2300      	movs	r3, #0
 800ba82:	461a      	mov	r2, r3
 800ba84:	4631      	mov	r1, r6
 800ba86:	f7ff ff98 	bl	800b9ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	559f      	strb	r7, [r3, r6]
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	6065      	str	r5, [r4, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	555a      	strb	r2, [r3, r5]
 800ba96:	b003      	add	sp, #12
 800ba98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800ba9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	4623      	mov	r3, r4
 800baa0:	6840      	ldr	r0, [r0, #4]
 800baa2:	f853 6b08 	ldr.w	r6, [r3], #8
 800baa6:	429e      	cmp	r6, r3
 800baa8:	bf18      	it	ne
 800baaa:	68a3      	ldrne	r3, [r4, #8]
 800baac:	eb00 0502 	add.w	r5, r0, r2
 800bab0:	bf08      	it	eq
 800bab2:	230f      	moveq	r3, #15
 800bab4:	429d      	cmp	r5, r3
 800bab6:	d80a      	bhi.n	800bace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800bab8:	b112      	cbz	r2, 800bac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800baba:	4430      	add	r0, r6
 800babc:	f7ff ff6c 	bl	800b998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	6065      	str	r5, [r4, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	4620      	mov	r0, r4
 800bac8:	555a      	strb	r2, [r3, r5]
 800baca:	b002      	add	sp, #8
 800bacc:	bd70      	pop	{r4, r5, r6, pc}
 800bace:	9200      	str	r2, [sp, #0]
 800bad0:	460b      	mov	r3, r1
 800bad2:	2200      	movs	r2, #0
 800bad4:	4601      	mov	r1, r0
 800bad6:	4620      	mov	r0, r4
 800bad8:	f7ff ff6f 	bl	800b9ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800badc:	e7f0      	b.n	800bac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

0800bae0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4b06      	ldr	r3, [pc, #24]	; (800bafc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800bae4:	4604      	mov	r4, r0
 800bae6:	460d      	mov	r5, r1
 800bae8:	4616      	mov	r6, r2
 800baea:	2100      	movs	r1, #0
 800baec:	f7ff ff48 	bl	800b980 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800baf0:	4632      	mov	r2, r6
 800baf2:	4629      	mov	r1, r5
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7ff ffd0 	bl	800ba9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	0800cf98 	.word	0x0800cf98

0800bb00 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800bb00:	6800      	ldr	r0, [r0, #0]
 800bb02:	4770      	bx	lr

0800bb04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800bb04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb06:	4604      	mov	r4, r0
 800bb08:	4616      	mov	r6, r2
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	b919      	cbnz	r1, 800bb16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800bb0e:	b112      	cbz	r2, 800bb16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800bb10:	480d      	ldr	r0, [pc, #52]	; (800bb48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800bb12:	f000 f83d 	bl	800bb90 <_ZSt19__throw_logic_errorPKc>
 800bb16:	1b73      	subs	r3, r6, r5
 800bb18:	2b0f      	cmp	r3, #15
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	d907      	bls.n	800bb2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800bb1e:	2200      	movs	r2, #0
 800bb20:	a901      	add	r1, sp, #4
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7ff ff02 	bl	800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bb28:	9b01      	ldr	r3, [sp, #4]
 800bb2a:	6020      	str	r0, [r4, #0]
 800bb2c:	60a3      	str	r3, [r4, #8]
 800bb2e:	4632      	mov	r2, r6
 800bb30:	4629      	mov	r1, r5
 800bb32:	6820      	ldr	r0, [r4, #0]
 800bb34:	f7ff ff3c 	bl	800b9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	6063      	str	r3, [r4, #4]
 800bb3e:	2100      	movs	r1, #0
 800bb40:	54d1      	strb	r1, [r2, r3]
 800bb42:	b002      	add	sp, #8
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	bf00      	nop
 800bb48:	0800cfad 	.word	0x0800cfad

0800bb4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	f100 0308 	add.w	r3, r0, #8
 800bb52:	4604      	mov	r4, r0
 800bb54:	6003      	str	r3, [r0, #0]
 800bb56:	440a      	add	r2, r1
 800bb58:	f04f 0300 	mov.w	r3, #0
 800bb5c:	f7ff ffd2 	bl	800bb04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800bb60:	4620      	mov	r0, r4
 800bb62:	bd10      	pop	{r4, pc}

0800bb64 <_ZdlPv>:
 800bb64:	f000 b832 	b.w	800bbcc <free>

0800bb68 <_Znwj>:
 800bb68:	2801      	cmp	r0, #1
 800bb6a:	bf38      	it	cc
 800bb6c:	2001      	movcc	r0, #1
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	4604      	mov	r4, r0
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 f822 	bl	800bbbc <malloc>
 800bb78:	b100      	cbz	r0, 800bb7c <_Znwj+0x14>
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	f000 f80e 	bl	800bb9c <_ZSt15get_new_handlerv>
 800bb80:	b908      	cbnz	r0, 800bb86 <_Znwj+0x1e>
 800bb82:	f000 f813 	bl	800bbac <abort>
 800bb86:	4780      	blx	r0
 800bb88:	e7f3      	b.n	800bb72 <_Znwj+0xa>

0800bb8a <_ZSt17__throw_bad_allocv>:
 800bb8a:	b508      	push	{r3, lr}
 800bb8c:	f000 f80e 	bl	800bbac <abort>

0800bb90 <_ZSt19__throw_logic_errorPKc>:
 800bb90:	b508      	push	{r3, lr}
 800bb92:	f000 f80b 	bl	800bbac <abort>

0800bb96 <_ZSt20__throw_length_errorPKc>:
 800bb96:	b508      	push	{r3, lr}
 800bb98:	f000 f808 	bl	800bbac <abort>

0800bb9c <_ZSt15get_new_handlerv>:
 800bb9c:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <_ZSt15get_new_handlerv+0xc>)
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	f3bf 8f5b 	dmb	ish
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	20001c04 	.word	0x20001c04

0800bbac <abort>:
 800bbac:	b508      	push	{r3, lr}
 800bbae:	2006      	movs	r0, #6
 800bbb0:	f000 fb18 	bl	800c1e4 <raise>
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	f7ff fd49 	bl	800b64c <_exit>
	...

0800bbbc <malloc>:
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <malloc+0xc>)
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	6818      	ldr	r0, [r3, #0]
 800bbc2:	f000 b82b 	b.w	800bc1c <_malloc_r>
 800bbc6:	bf00      	nop
 800bbc8:	200000fc 	.word	0x200000fc

0800bbcc <free>:
 800bbcc:	4b02      	ldr	r3, [pc, #8]	; (800bbd8 <free+0xc>)
 800bbce:	4601      	mov	r1, r0
 800bbd0:	6818      	ldr	r0, [r3, #0]
 800bbd2:	f000 bbbb 	b.w	800c34c <_free_r>
 800bbd6:	bf00      	nop
 800bbd8:	200000fc 	.word	0x200000fc

0800bbdc <sbrk_aligned>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	4e0e      	ldr	r6, [pc, #56]	; (800bc18 <sbrk_aligned+0x3c>)
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	6831      	ldr	r1, [r6, #0]
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	b911      	cbnz	r1, 800bbee <sbrk_aligned+0x12>
 800bbe8:	f000 fb4c 	bl	800c284 <_sbrk_r>
 800bbec:	6030      	str	r0, [r6, #0]
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f000 fb47 	bl	800c284 <_sbrk_r>
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	d00a      	beq.n	800bc10 <sbrk_aligned+0x34>
 800bbfa:	1cc4      	adds	r4, r0, #3
 800bbfc:	f024 0403 	bic.w	r4, r4, #3
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d007      	beq.n	800bc14 <sbrk_aligned+0x38>
 800bc04:	1a21      	subs	r1, r4, r0
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 fb3c 	bl	800c284 <_sbrk_r>
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d101      	bne.n	800bc14 <sbrk_aligned+0x38>
 800bc10:	f04f 34ff 	mov.w	r4, #4294967295
 800bc14:	4620      	mov	r0, r4
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	20001c0c 	.word	0x20001c0c

0800bc1c <_malloc_r>:
 800bc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc20:	1ccd      	adds	r5, r1, #3
 800bc22:	f025 0503 	bic.w	r5, r5, #3
 800bc26:	3508      	adds	r5, #8
 800bc28:	2d0c      	cmp	r5, #12
 800bc2a:	bf38      	it	cc
 800bc2c:	250c      	movcc	r5, #12
 800bc2e:	2d00      	cmp	r5, #0
 800bc30:	4607      	mov	r7, r0
 800bc32:	db01      	blt.n	800bc38 <_malloc_r+0x1c>
 800bc34:	42a9      	cmp	r1, r5
 800bc36:	d905      	bls.n	800bc44 <_malloc_r+0x28>
 800bc38:	230c      	movs	r3, #12
 800bc3a:	603b      	str	r3, [r7, #0]
 800bc3c:	2600      	movs	r6, #0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd18 <_malloc_r+0xfc>
 800bc48:	f000 f868 	bl	800bd1c <__malloc_lock>
 800bc4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc50:	461c      	mov	r4, r3
 800bc52:	bb5c      	cbnz	r4, 800bcac <_malloc_r+0x90>
 800bc54:	4629      	mov	r1, r5
 800bc56:	4638      	mov	r0, r7
 800bc58:	f7ff ffc0 	bl	800bbdc <sbrk_aligned>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	4604      	mov	r4, r0
 800bc60:	d155      	bne.n	800bd0e <_malloc_r+0xf2>
 800bc62:	f8d8 4000 	ldr.w	r4, [r8]
 800bc66:	4626      	mov	r6, r4
 800bc68:	2e00      	cmp	r6, #0
 800bc6a:	d145      	bne.n	800bcf8 <_malloc_r+0xdc>
 800bc6c:	2c00      	cmp	r4, #0
 800bc6e:	d048      	beq.n	800bd02 <_malloc_r+0xe6>
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	4631      	mov	r1, r6
 800bc74:	4638      	mov	r0, r7
 800bc76:	eb04 0903 	add.w	r9, r4, r3
 800bc7a:	f000 fb03 	bl	800c284 <_sbrk_r>
 800bc7e:	4581      	cmp	r9, r0
 800bc80:	d13f      	bne.n	800bd02 <_malloc_r+0xe6>
 800bc82:	6821      	ldr	r1, [r4, #0]
 800bc84:	1a6d      	subs	r5, r5, r1
 800bc86:	4629      	mov	r1, r5
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff ffa7 	bl	800bbdc <sbrk_aligned>
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d037      	beq.n	800bd02 <_malloc_r+0xe6>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	442b      	add	r3, r5
 800bc96:	6023      	str	r3, [r4, #0]
 800bc98:	f8d8 3000 	ldr.w	r3, [r8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d038      	beq.n	800bd12 <_malloc_r+0xf6>
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	42a2      	cmp	r2, r4
 800bca4:	d12b      	bne.n	800bcfe <_malloc_r+0xe2>
 800bca6:	2200      	movs	r2, #0
 800bca8:	605a      	str	r2, [r3, #4]
 800bcaa:	e00f      	b.n	800bccc <_malloc_r+0xb0>
 800bcac:	6822      	ldr	r2, [r4, #0]
 800bcae:	1b52      	subs	r2, r2, r5
 800bcb0:	d41f      	bmi.n	800bcf2 <_malloc_r+0xd6>
 800bcb2:	2a0b      	cmp	r2, #11
 800bcb4:	d917      	bls.n	800bce6 <_malloc_r+0xca>
 800bcb6:	1961      	adds	r1, r4, r5
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	6025      	str	r5, [r4, #0]
 800bcbc:	bf18      	it	ne
 800bcbe:	6059      	strne	r1, [r3, #4]
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	bf08      	it	eq
 800bcc4:	f8c8 1000 	streq.w	r1, [r8]
 800bcc8:	5162      	str	r2, [r4, r5]
 800bcca:	604b      	str	r3, [r1, #4]
 800bccc:	4638      	mov	r0, r7
 800bcce:	f104 060b 	add.w	r6, r4, #11
 800bcd2:	f000 f829 	bl	800bd28 <__malloc_unlock>
 800bcd6:	f026 0607 	bic.w	r6, r6, #7
 800bcda:	1d23      	adds	r3, r4, #4
 800bcdc:	1af2      	subs	r2, r6, r3
 800bcde:	d0ae      	beq.n	800bc3e <_malloc_r+0x22>
 800bce0:	1b9b      	subs	r3, r3, r6
 800bce2:	50a3      	str	r3, [r4, r2]
 800bce4:	e7ab      	b.n	800bc3e <_malloc_r+0x22>
 800bce6:	42a3      	cmp	r3, r4
 800bce8:	6862      	ldr	r2, [r4, #4]
 800bcea:	d1dd      	bne.n	800bca8 <_malloc_r+0x8c>
 800bcec:	f8c8 2000 	str.w	r2, [r8]
 800bcf0:	e7ec      	b.n	800bccc <_malloc_r+0xb0>
 800bcf2:	4623      	mov	r3, r4
 800bcf4:	6864      	ldr	r4, [r4, #4]
 800bcf6:	e7ac      	b.n	800bc52 <_malloc_r+0x36>
 800bcf8:	4634      	mov	r4, r6
 800bcfa:	6876      	ldr	r6, [r6, #4]
 800bcfc:	e7b4      	b.n	800bc68 <_malloc_r+0x4c>
 800bcfe:	4613      	mov	r3, r2
 800bd00:	e7cc      	b.n	800bc9c <_malloc_r+0x80>
 800bd02:	230c      	movs	r3, #12
 800bd04:	603b      	str	r3, [r7, #0]
 800bd06:	4638      	mov	r0, r7
 800bd08:	f000 f80e 	bl	800bd28 <__malloc_unlock>
 800bd0c:	e797      	b.n	800bc3e <_malloc_r+0x22>
 800bd0e:	6025      	str	r5, [r4, #0]
 800bd10:	e7dc      	b.n	800bccc <_malloc_r+0xb0>
 800bd12:	605b      	str	r3, [r3, #4]
 800bd14:	deff      	udf	#255	; 0xff
 800bd16:	bf00      	nop
 800bd18:	20001c08 	.word	0x20001c08

0800bd1c <__malloc_lock>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__malloc_lock+0x8>)
 800bd1e:	f000 bafd 	b.w	800c31c <__retarget_lock_acquire_recursive>
 800bd22:	bf00      	nop
 800bd24:	20001d50 	.word	0x20001d50

0800bd28 <__malloc_unlock>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__malloc_unlock+0x8>)
 800bd2a:	f000 baf8 	b.w	800c31e <__retarget_lock_release_recursive>
 800bd2e:	bf00      	nop
 800bd30:	20001d50 	.word	0x20001d50

0800bd34 <std>:
 800bd34:	2300      	movs	r3, #0
 800bd36:	b510      	push	{r4, lr}
 800bd38:	4604      	mov	r4, r0
 800bd3a:	e9c0 3300 	strd	r3, r3, [r0]
 800bd3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd42:	6083      	str	r3, [r0, #8]
 800bd44:	8181      	strh	r1, [r0, #12]
 800bd46:	6643      	str	r3, [r0, #100]	; 0x64
 800bd48:	81c2      	strh	r2, [r0, #14]
 800bd4a:	6183      	str	r3, [r0, #24]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	2208      	movs	r2, #8
 800bd50:	305c      	adds	r0, #92	; 0x5c
 800bd52:	f000 f9e5 	bl	800c120 <memset>
 800bd56:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <std+0x38>)
 800bd58:	6263      	str	r3, [r4, #36]	; 0x24
 800bd5a:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <std+0x3c>)
 800bd5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd5e:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <std+0x40>)
 800bd60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <std+0x44>)
 800bd64:	6224      	str	r4, [r4, #32]
 800bd66:	6323      	str	r3, [r4, #48]	; 0x30
 800bd68:	bd10      	pop	{r4, pc}
 800bd6a:	bf00      	nop
 800bd6c:	0800bf71 	.word	0x0800bf71
 800bd70:	0800bf93 	.word	0x0800bf93
 800bd74:	0800bfcb 	.word	0x0800bfcb
 800bd78:	0800bfef 	.word	0x0800bfef

0800bd7c <stdio_exit_handler>:
 800bd7c:	4a02      	ldr	r2, [pc, #8]	; (800bd88 <stdio_exit_handler+0xc>)
 800bd7e:	4903      	ldr	r1, [pc, #12]	; (800bd8c <stdio_exit_handler+0x10>)
 800bd80:	4803      	ldr	r0, [pc, #12]	; (800bd90 <stdio_exit_handler+0x14>)
 800bd82:	f000 b869 	b.w	800be58 <_fwalk_sglue>
 800bd86:	bf00      	nop
 800bd88:	200000a4 	.word	0x200000a4
 800bd8c:	0800ca99 	.word	0x0800ca99
 800bd90:	200000b0 	.word	0x200000b0

0800bd94 <cleanup_stdio>:
 800bd94:	6841      	ldr	r1, [r0, #4]
 800bd96:	4b0c      	ldr	r3, [pc, #48]	; (800bdc8 <cleanup_stdio+0x34>)
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	d001      	beq.n	800bda4 <cleanup_stdio+0x10>
 800bda0:	f000 fe7a 	bl	800ca98 <_fflush_r>
 800bda4:	68a1      	ldr	r1, [r4, #8]
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <cleanup_stdio+0x38>)
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d002      	beq.n	800bdb2 <cleanup_stdio+0x1e>
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fe73 	bl	800ca98 <_fflush_r>
 800bdb2:	68e1      	ldr	r1, [r4, #12]
 800bdb4:	4b06      	ldr	r3, [pc, #24]	; (800bdd0 <cleanup_stdio+0x3c>)
 800bdb6:	4299      	cmp	r1, r3
 800bdb8:	d004      	beq.n	800bdc4 <cleanup_stdio+0x30>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdc0:	f000 be6a 	b.w	800ca98 <_fflush_r>
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20001c10 	.word	0x20001c10
 800bdcc:	20001c78 	.word	0x20001c78
 800bdd0:	20001ce0 	.word	0x20001ce0

0800bdd4 <global_stdio_init.part.0>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	; (800be04 <global_stdio_init.part.0+0x30>)
 800bdd8:	4c0b      	ldr	r4, [pc, #44]	; (800be08 <global_stdio_init.part.0+0x34>)
 800bdda:	4a0c      	ldr	r2, [pc, #48]	; (800be0c <global_stdio_init.part.0+0x38>)
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	4620      	mov	r0, r4
 800bde0:	2200      	movs	r2, #0
 800bde2:	2104      	movs	r1, #4
 800bde4:	f7ff ffa6 	bl	800bd34 <std>
 800bde8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bdec:	2201      	movs	r2, #1
 800bdee:	2109      	movs	r1, #9
 800bdf0:	f7ff ffa0 	bl	800bd34 <std>
 800bdf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfe:	2112      	movs	r1, #18
 800be00:	f7ff bf98 	b.w	800bd34 <std>
 800be04:	20001d48 	.word	0x20001d48
 800be08:	20001c10 	.word	0x20001c10
 800be0c:	0800bd7d 	.word	0x0800bd7d

0800be10 <__sfp_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	; (800be18 <__sfp_lock_acquire+0x8>)
 800be12:	f000 ba83 	b.w	800c31c <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	20001d51 	.word	0x20001d51

0800be1c <__sfp_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__sfp_lock_release+0x8>)
 800be1e:	f000 ba7e 	b.w	800c31e <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	20001d51 	.word	0x20001d51

0800be28 <__sinit>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7ff fff0 	bl	800be10 <__sfp_lock_acquire>
 800be30:	6a23      	ldr	r3, [r4, #32]
 800be32:	b11b      	cbz	r3, 800be3c <__sinit+0x14>
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f7ff bff0 	b.w	800be1c <__sfp_lock_release>
 800be3c:	4b04      	ldr	r3, [pc, #16]	; (800be50 <__sinit+0x28>)
 800be3e:	6223      	str	r3, [r4, #32]
 800be40:	4b04      	ldr	r3, [pc, #16]	; (800be54 <__sinit+0x2c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f5      	bne.n	800be34 <__sinit+0xc>
 800be48:	f7ff ffc4 	bl	800bdd4 <global_stdio_init.part.0>
 800be4c:	e7f2      	b.n	800be34 <__sinit+0xc>
 800be4e:	bf00      	nop
 800be50:	0800bd95 	.word	0x0800bd95
 800be54:	20001d48 	.word	0x20001d48

0800be58 <_fwalk_sglue>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	4607      	mov	r7, r0
 800be5e:	4688      	mov	r8, r1
 800be60:	4614      	mov	r4, r2
 800be62:	2600      	movs	r6, #0
 800be64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be68:	f1b9 0901 	subs.w	r9, r9, #1
 800be6c:	d505      	bpl.n	800be7a <_fwalk_sglue+0x22>
 800be6e:	6824      	ldr	r4, [r4, #0]
 800be70:	2c00      	cmp	r4, #0
 800be72:	d1f7      	bne.n	800be64 <_fwalk_sglue+0xc>
 800be74:	4630      	mov	r0, r6
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d907      	bls.n	800be90 <_fwalk_sglue+0x38>
 800be80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be84:	3301      	adds	r3, #1
 800be86:	d003      	beq.n	800be90 <_fwalk_sglue+0x38>
 800be88:	4629      	mov	r1, r5
 800be8a:	4638      	mov	r0, r7
 800be8c:	47c0      	blx	r8
 800be8e:	4306      	orrs	r6, r0
 800be90:	3568      	adds	r5, #104	; 0x68
 800be92:	e7e9      	b.n	800be68 <_fwalk_sglue+0x10>

0800be94 <iprintf>:
 800be94:	b40f      	push	{r0, r1, r2, r3}
 800be96:	b507      	push	{r0, r1, r2, lr}
 800be98:	4906      	ldr	r1, [pc, #24]	; (800beb4 <iprintf+0x20>)
 800be9a:	ab04      	add	r3, sp, #16
 800be9c:	6808      	ldr	r0, [r1, #0]
 800be9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea2:	6881      	ldr	r1, [r0, #8]
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	f000 fac7 	bl	800c438 <_vfiprintf_r>
 800beaa:	b003      	add	sp, #12
 800beac:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb0:	b004      	add	sp, #16
 800beb2:	4770      	bx	lr
 800beb4:	200000fc 	.word	0x200000fc

0800beb8 <_puts_r>:
 800beb8:	6a03      	ldr	r3, [r0, #32]
 800beba:	b570      	push	{r4, r5, r6, lr}
 800bebc:	6884      	ldr	r4, [r0, #8]
 800bebe:	4605      	mov	r5, r0
 800bec0:	460e      	mov	r6, r1
 800bec2:	b90b      	cbnz	r3, 800bec8 <_puts_r+0x10>
 800bec4:	f7ff ffb0 	bl	800be28 <__sinit>
 800bec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800beca:	07db      	lsls	r3, r3, #31
 800becc:	d405      	bmi.n	800beda <_puts_r+0x22>
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	0598      	lsls	r0, r3, #22
 800bed2:	d402      	bmi.n	800beda <_puts_r+0x22>
 800bed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed6:	f000 fa21 	bl	800c31c <__retarget_lock_acquire_recursive>
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	0719      	lsls	r1, r3, #28
 800bede:	d513      	bpl.n	800bf08 <_puts_r+0x50>
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	b18b      	cbz	r3, 800bf08 <_puts_r+0x50>
 800bee4:	3e01      	subs	r6, #1
 800bee6:	68a3      	ldr	r3, [r4, #8]
 800bee8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800beec:	3b01      	subs	r3, #1
 800beee:	60a3      	str	r3, [r4, #8]
 800bef0:	b9e9      	cbnz	r1, 800bf2e <_puts_r+0x76>
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	da2e      	bge.n	800bf54 <_puts_r+0x9c>
 800bef6:	4622      	mov	r2, r4
 800bef8:	210a      	movs	r1, #10
 800befa:	4628      	mov	r0, r5
 800befc:	f000 f87b 	bl	800bff6 <__swbuf_r>
 800bf00:	3001      	adds	r0, #1
 800bf02:	d007      	beq.n	800bf14 <_puts_r+0x5c>
 800bf04:	250a      	movs	r5, #10
 800bf06:	e007      	b.n	800bf18 <_puts_r+0x60>
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f000 f8b0 	bl	800c070 <__swsetup_r>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d0e7      	beq.n	800bee4 <_puts_r+0x2c>
 800bf14:	f04f 35ff 	mov.w	r5, #4294967295
 800bf18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf1a:	07da      	lsls	r2, r3, #31
 800bf1c:	d405      	bmi.n	800bf2a <_puts_r+0x72>
 800bf1e:	89a3      	ldrh	r3, [r4, #12]
 800bf20:	059b      	lsls	r3, r3, #22
 800bf22:	d402      	bmi.n	800bf2a <_puts_r+0x72>
 800bf24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf26:	f000 f9fa 	bl	800c31e <__retarget_lock_release_recursive>
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	bd70      	pop	{r4, r5, r6, pc}
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	da04      	bge.n	800bf3c <_puts_r+0x84>
 800bf32:	69a2      	ldr	r2, [r4, #24]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	dc06      	bgt.n	800bf46 <_puts_r+0x8e>
 800bf38:	290a      	cmp	r1, #10
 800bf3a:	d004      	beq.n	800bf46 <_puts_r+0x8e>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	6022      	str	r2, [r4, #0]
 800bf42:	7019      	strb	r1, [r3, #0]
 800bf44:	e7cf      	b.n	800bee6 <_puts_r+0x2e>
 800bf46:	4622      	mov	r2, r4
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f000 f854 	bl	800bff6 <__swbuf_r>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	d1c9      	bne.n	800bee6 <_puts_r+0x2e>
 800bf52:	e7df      	b.n	800bf14 <_puts_r+0x5c>
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	250a      	movs	r5, #10
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	6022      	str	r2, [r4, #0]
 800bf5c:	701d      	strb	r5, [r3, #0]
 800bf5e:	e7db      	b.n	800bf18 <_puts_r+0x60>

0800bf60 <puts>:
 800bf60:	4b02      	ldr	r3, [pc, #8]	; (800bf6c <puts+0xc>)
 800bf62:	4601      	mov	r1, r0
 800bf64:	6818      	ldr	r0, [r3, #0]
 800bf66:	f7ff bfa7 	b.w	800beb8 <_puts_r>
 800bf6a:	bf00      	nop
 800bf6c:	200000fc 	.word	0x200000fc

0800bf70 <__sread>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	460c      	mov	r4, r1
 800bf74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf78:	f000 f95e 	bl	800c238 <_read_r>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	bfab      	itete	ge
 800bf80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf82:	89a3      	ldrhlt	r3, [r4, #12]
 800bf84:	181b      	addge	r3, r3, r0
 800bf86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf8a:	bfac      	ite	ge
 800bf8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf8e:	81a3      	strhlt	r3, [r4, #12]
 800bf90:	bd10      	pop	{r4, pc}

0800bf92 <__swrite>:
 800bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	461f      	mov	r7, r3
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	05db      	lsls	r3, r3, #23
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	d505      	bpl.n	800bfb0 <__swrite+0x1e>
 800bfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f000 f932 	bl	800c214 <_lseek_r>
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfba:	81a3      	strh	r3, [r4, #12]
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	463b      	mov	r3, r7
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc6:	f000 b96d 	b.w	800c2a4 <_write_r>

0800bfca <__sseek>:
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	460c      	mov	r4, r1
 800bfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd2:	f000 f91f 	bl	800c214 <_lseek_r>
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	bf15      	itete	ne
 800bfdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfe6:	81a3      	strheq	r3, [r4, #12]
 800bfe8:	bf18      	it	ne
 800bfea:	81a3      	strhne	r3, [r4, #12]
 800bfec:	bd10      	pop	{r4, pc}

0800bfee <__sclose>:
 800bfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff2:	f000 b8ff 	b.w	800c1f4 <_close_r>

0800bff6 <__swbuf_r>:
 800bff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff8:	460e      	mov	r6, r1
 800bffa:	4614      	mov	r4, r2
 800bffc:	4605      	mov	r5, r0
 800bffe:	b118      	cbz	r0, 800c008 <__swbuf_r+0x12>
 800c000:	6a03      	ldr	r3, [r0, #32]
 800c002:	b90b      	cbnz	r3, 800c008 <__swbuf_r+0x12>
 800c004:	f7ff ff10 	bl	800be28 <__sinit>
 800c008:	69a3      	ldr	r3, [r4, #24]
 800c00a:	60a3      	str	r3, [r4, #8]
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	071a      	lsls	r2, r3, #28
 800c010:	d525      	bpl.n	800c05e <__swbuf_r+0x68>
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	b31b      	cbz	r3, 800c05e <__swbuf_r+0x68>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	6922      	ldr	r2, [r4, #16]
 800c01a:	1a98      	subs	r0, r3, r2
 800c01c:	6963      	ldr	r3, [r4, #20]
 800c01e:	b2f6      	uxtb	r6, r6
 800c020:	4283      	cmp	r3, r0
 800c022:	4637      	mov	r7, r6
 800c024:	dc04      	bgt.n	800c030 <__swbuf_r+0x3a>
 800c026:	4621      	mov	r1, r4
 800c028:	4628      	mov	r0, r5
 800c02a:	f000 fd35 	bl	800ca98 <_fflush_r>
 800c02e:	b9e0      	cbnz	r0, 800c06a <__swbuf_r+0x74>
 800c030:	68a3      	ldr	r3, [r4, #8]
 800c032:	3b01      	subs	r3, #1
 800c034:	60a3      	str	r3, [r4, #8]
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	6022      	str	r2, [r4, #0]
 800c03c:	701e      	strb	r6, [r3, #0]
 800c03e:	6962      	ldr	r2, [r4, #20]
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	429a      	cmp	r2, r3
 800c044:	d004      	beq.n	800c050 <__swbuf_r+0x5a>
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	07db      	lsls	r3, r3, #31
 800c04a:	d506      	bpl.n	800c05a <__swbuf_r+0x64>
 800c04c:	2e0a      	cmp	r6, #10
 800c04e:	d104      	bne.n	800c05a <__swbuf_r+0x64>
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	f000 fd20 	bl	800ca98 <_fflush_r>
 800c058:	b938      	cbnz	r0, 800c06a <__swbuf_r+0x74>
 800c05a:	4638      	mov	r0, r7
 800c05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c05e:	4621      	mov	r1, r4
 800c060:	4628      	mov	r0, r5
 800c062:	f000 f805 	bl	800c070 <__swsetup_r>
 800c066:	2800      	cmp	r0, #0
 800c068:	d0d5      	beq.n	800c016 <__swbuf_r+0x20>
 800c06a:	f04f 37ff 	mov.w	r7, #4294967295
 800c06e:	e7f4      	b.n	800c05a <__swbuf_r+0x64>

0800c070 <__swsetup_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4b2a      	ldr	r3, [pc, #168]	; (800c11c <__swsetup_r+0xac>)
 800c074:	4605      	mov	r5, r0
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	460c      	mov	r4, r1
 800c07a:	b118      	cbz	r0, 800c084 <__swsetup_r+0x14>
 800c07c:	6a03      	ldr	r3, [r0, #32]
 800c07e:	b90b      	cbnz	r3, 800c084 <__swsetup_r+0x14>
 800c080:	f7ff fed2 	bl	800be28 <__sinit>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c08a:	0718      	lsls	r0, r3, #28
 800c08c:	d422      	bmi.n	800c0d4 <__swsetup_r+0x64>
 800c08e:	06d9      	lsls	r1, r3, #27
 800c090:	d407      	bmi.n	800c0a2 <__swsetup_r+0x32>
 800c092:	2309      	movs	r3, #9
 800c094:	602b      	str	r3, [r5, #0]
 800c096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a0:	e034      	b.n	800c10c <__swsetup_r+0x9c>
 800c0a2:	0758      	lsls	r0, r3, #29
 800c0a4:	d512      	bpl.n	800c0cc <__swsetup_r+0x5c>
 800c0a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0a8:	b141      	cbz	r1, 800c0bc <__swsetup_r+0x4c>
 800c0aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	d002      	beq.n	800c0b8 <__swsetup_r+0x48>
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f000 f94a 	bl	800c34c <_free_r>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	6363      	str	r3, [r4, #52]	; 0x34
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6063      	str	r3, [r4, #4]
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	f043 0308 	orr.w	r3, r3, #8
 800c0d2:	81a3      	strh	r3, [r4, #12]
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	b94b      	cbnz	r3, 800c0ec <__swsetup_r+0x7c>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0e2:	d003      	beq.n	800c0ec <__swsetup_r+0x7c>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 fd24 	bl	800cb34 <__smakebuf_r>
 800c0ec:	89a0      	ldrh	r0, [r4, #12]
 800c0ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0f2:	f010 0301 	ands.w	r3, r0, #1
 800c0f6:	d00a      	beq.n	800c10e <__swsetup_r+0x9e>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60a3      	str	r3, [r4, #8]
 800c0fc:	6963      	ldr	r3, [r4, #20]
 800c0fe:	425b      	negs	r3, r3
 800c100:	61a3      	str	r3, [r4, #24]
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	b943      	cbnz	r3, 800c118 <__swsetup_r+0xa8>
 800c106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c10a:	d1c4      	bne.n	800c096 <__swsetup_r+0x26>
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
 800c10e:	0781      	lsls	r1, r0, #30
 800c110:	bf58      	it	pl
 800c112:	6963      	ldrpl	r3, [r4, #20]
 800c114:	60a3      	str	r3, [r4, #8]
 800c116:	e7f4      	b.n	800c102 <__swsetup_r+0x92>
 800c118:	2000      	movs	r0, #0
 800c11a:	e7f7      	b.n	800c10c <__swsetup_r+0x9c>
 800c11c:	200000fc 	.word	0x200000fc

0800c120 <memset>:
 800c120:	4402      	add	r2, r0
 800c122:	4603      	mov	r3, r0
 800c124:	4293      	cmp	r3, r2
 800c126:	d100      	bne.n	800c12a <memset+0xa>
 800c128:	4770      	bx	lr
 800c12a:	f803 1b01 	strb.w	r1, [r3], #1
 800c12e:	e7f9      	b.n	800c124 <memset+0x4>

0800c130 <strchr>:
 800c130:	b2c9      	uxtb	r1, r1
 800c132:	4603      	mov	r3, r0
 800c134:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c138:	b11a      	cbz	r2, 800c142 <strchr+0x12>
 800c13a:	428a      	cmp	r2, r1
 800c13c:	d1f9      	bne.n	800c132 <strchr+0x2>
 800c13e:	4618      	mov	r0, r3
 800c140:	4770      	bx	lr
 800c142:	2900      	cmp	r1, #0
 800c144:	bf18      	it	ne
 800c146:	2300      	movne	r3, #0
 800c148:	e7f9      	b.n	800c13e <strchr+0xe>

0800c14a <strncmp>:
 800c14a:	b510      	push	{r4, lr}
 800c14c:	b16a      	cbz	r2, 800c16a <strncmp+0x20>
 800c14e:	3901      	subs	r1, #1
 800c150:	1884      	adds	r4, r0, r2
 800c152:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c156:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d103      	bne.n	800c166 <strncmp+0x1c>
 800c15e:	42a0      	cmp	r0, r4
 800c160:	d001      	beq.n	800c166 <strncmp+0x1c>
 800c162:	2a00      	cmp	r2, #0
 800c164:	d1f5      	bne.n	800c152 <strncmp+0x8>
 800c166:	1ad0      	subs	r0, r2, r3
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	4610      	mov	r0, r2
 800c16c:	e7fc      	b.n	800c168 <strncmp+0x1e>

0800c16e <strncpy>:
 800c16e:	b510      	push	{r4, lr}
 800c170:	3901      	subs	r1, #1
 800c172:	4603      	mov	r3, r0
 800c174:	b132      	cbz	r2, 800c184 <strncpy+0x16>
 800c176:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c17a:	f803 4b01 	strb.w	r4, [r3], #1
 800c17e:	3a01      	subs	r2, #1
 800c180:	2c00      	cmp	r4, #0
 800c182:	d1f7      	bne.n	800c174 <strncpy+0x6>
 800c184:	441a      	add	r2, r3
 800c186:	2100      	movs	r1, #0
 800c188:	4293      	cmp	r3, r2
 800c18a:	d100      	bne.n	800c18e <strncpy+0x20>
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	f803 1b01 	strb.w	r1, [r3], #1
 800c192:	e7f9      	b.n	800c188 <strncpy+0x1a>

0800c194 <_raise_r>:
 800c194:	291f      	cmp	r1, #31
 800c196:	b538      	push	{r3, r4, r5, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	d904      	bls.n	800c1a8 <_raise_r+0x14>
 800c19e:	2316      	movs	r3, #22
 800c1a0:	6003      	str	r3, [r0, #0]
 800c1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c1aa:	b112      	cbz	r2, 800c1b2 <_raise_r+0x1e>
 800c1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b0:	b94b      	cbnz	r3, 800c1c6 <_raise_r+0x32>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f864 	bl	800c280 <_getpid_r>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	4620      	mov	r0, r4
 800c1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1c2:	f000 b84b 	b.w	800c25c <_kill_r>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d00a      	beq.n	800c1e0 <_raise_r+0x4c>
 800c1ca:	1c59      	adds	r1, r3, #1
 800c1cc:	d103      	bne.n	800c1d6 <_raise_r+0x42>
 800c1ce:	2316      	movs	r3, #22
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	e7e7      	b.n	800c1a6 <_raise_r+0x12>
 800c1d6:	2400      	movs	r4, #0
 800c1d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1dc:	4628      	mov	r0, r5
 800c1de:	4798      	blx	r3
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	e7e0      	b.n	800c1a6 <_raise_r+0x12>

0800c1e4 <raise>:
 800c1e4:	4b02      	ldr	r3, [pc, #8]	; (800c1f0 <raise+0xc>)
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f7ff bfd3 	b.w	800c194 <_raise_r>
 800c1ee:	bf00      	nop
 800c1f0:	200000fc 	.word	0x200000fc

0800c1f4 <_close_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d06      	ldr	r5, [pc, #24]	; (800c210 <_close_r+0x1c>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	f7ff fa67 	bl	800b6d2 <_close>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_close_r+0x1a>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_close_r+0x1a>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	20001d4c 	.word	0x20001d4c

0800c214 <_lseek_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4d07      	ldr	r5, [pc, #28]	; (800c234 <_lseek_r+0x20>)
 800c218:	4604      	mov	r4, r0
 800c21a:	4608      	mov	r0, r1
 800c21c:	4611      	mov	r1, r2
 800c21e:	2200      	movs	r2, #0
 800c220:	602a      	str	r2, [r5, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	f7ff fa7c 	bl	800b720 <_lseek>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_lseek_r+0x1e>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_lseek_r+0x1e>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	20001d4c 	.word	0x20001d4c

0800c238 <_read_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d07      	ldr	r5, [pc, #28]	; (800c258 <_read_r+0x20>)
 800c23c:	4604      	mov	r4, r0
 800c23e:	4608      	mov	r0, r1
 800c240:	4611      	mov	r1, r2
 800c242:	2200      	movs	r2, #0
 800c244:	602a      	str	r2, [r5, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	f7ff fa0a 	bl	800b660 <_read>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_read_r+0x1e>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_read_r+0x1e>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	20001d4c 	.word	0x20001d4c

0800c25c <_kill_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d07      	ldr	r5, [pc, #28]	; (800c27c <_kill_r+0x20>)
 800c260:	2300      	movs	r3, #0
 800c262:	4604      	mov	r4, r0
 800c264:	4608      	mov	r0, r1
 800c266:	4611      	mov	r1, r2
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	f7ff f9df 	bl	800b62c <_kill>
 800c26e:	1c43      	adds	r3, r0, #1
 800c270:	d102      	bne.n	800c278 <_kill_r+0x1c>
 800c272:	682b      	ldr	r3, [r5, #0]
 800c274:	b103      	cbz	r3, 800c278 <_kill_r+0x1c>
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	bd38      	pop	{r3, r4, r5, pc}
 800c27a:	bf00      	nop
 800c27c:	20001d4c 	.word	0x20001d4c

0800c280 <_getpid_r>:
 800c280:	f7ff b9cc 	b.w	800b61c <_getpid>

0800c284 <_sbrk_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d06      	ldr	r5, [pc, #24]	; (800c2a0 <_sbrk_r+0x1c>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	f7ff fa54 	bl	800b73c <_sbrk>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_sbrk_r+0x1a>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_sbrk_r+0x1a>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	20001d4c 	.word	0x20001d4c

0800c2a4 <_write_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_write_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7ff f9f1 	bl	800b69a <_write>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_write_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_write_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20001d4c 	.word	0x20001d4c

0800c2c8 <__errno>:
 800c2c8:	4b01      	ldr	r3, [pc, #4]	; (800c2d0 <__errno+0x8>)
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	200000fc 	.word	0x200000fc

0800c2d4 <__libc_init_array>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	4d0d      	ldr	r5, [pc, #52]	; (800c30c <__libc_init_array+0x38>)
 800c2d8:	4c0d      	ldr	r4, [pc, #52]	; (800c310 <__libc_init_array+0x3c>)
 800c2da:	1b64      	subs	r4, r4, r5
 800c2dc:	10a4      	asrs	r4, r4, #2
 800c2de:	2600      	movs	r6, #0
 800c2e0:	42a6      	cmp	r6, r4
 800c2e2:	d109      	bne.n	800c2f8 <__libc_init_array+0x24>
 800c2e4:	4d0b      	ldr	r5, [pc, #44]	; (800c314 <__libc_init_array+0x40>)
 800c2e6:	4c0c      	ldr	r4, [pc, #48]	; (800c318 <__libc_init_array+0x44>)
 800c2e8:	f000 fc82 	bl	800cbf0 <_init>
 800c2ec:	1b64      	subs	r4, r4, r5
 800c2ee:	10a4      	asrs	r4, r4, #2
 800c2f0:	2600      	movs	r6, #0
 800c2f2:	42a6      	cmp	r6, r4
 800c2f4:	d105      	bne.n	800c302 <__libc_init_array+0x2e>
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2fc:	4798      	blx	r3
 800c2fe:	3601      	adds	r6, #1
 800c300:	e7ee      	b.n	800c2e0 <__libc_init_array+0xc>
 800c302:	f855 3b04 	ldr.w	r3, [r5], #4
 800c306:	4798      	blx	r3
 800c308:	3601      	adds	r6, #1
 800c30a:	e7f2      	b.n	800c2f2 <__libc_init_array+0x1e>
 800c30c:	0800d014 	.word	0x0800d014
 800c310:	0800d014 	.word	0x0800d014
 800c314:	0800d014 	.word	0x0800d014
 800c318:	0800d018 	.word	0x0800d018

0800c31c <__retarget_lock_acquire_recursive>:
 800c31c:	4770      	bx	lr

0800c31e <__retarget_lock_release_recursive>:
 800c31e:	4770      	bx	lr

0800c320 <strcpy>:
 800c320:	4603      	mov	r3, r0
 800c322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c326:	f803 2b01 	strb.w	r2, [r3], #1
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	d1f9      	bne.n	800c322 <strcpy+0x2>
 800c32e:	4770      	bx	lr

0800c330 <memcpy>:
 800c330:	440a      	add	r2, r1
 800c332:	4291      	cmp	r1, r2
 800c334:	f100 33ff 	add.w	r3, r0, #4294967295
 800c338:	d100      	bne.n	800c33c <memcpy+0xc>
 800c33a:	4770      	bx	lr
 800c33c:	b510      	push	{r4, lr}
 800c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c342:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c346:	4291      	cmp	r1, r2
 800c348:	d1f9      	bne.n	800c33e <memcpy+0xe>
 800c34a:	bd10      	pop	{r4, pc}

0800c34c <_free_r>:
 800c34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c34e:	2900      	cmp	r1, #0
 800c350:	d044      	beq.n	800c3dc <_free_r+0x90>
 800c352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c356:	9001      	str	r0, [sp, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f1a1 0404 	sub.w	r4, r1, #4
 800c35e:	bfb8      	it	lt
 800c360:	18e4      	addlt	r4, r4, r3
 800c362:	f7ff fcdb 	bl	800bd1c <__malloc_lock>
 800c366:	4a1e      	ldr	r2, [pc, #120]	; (800c3e0 <_free_r+0x94>)
 800c368:	9801      	ldr	r0, [sp, #4]
 800c36a:	6813      	ldr	r3, [r2, #0]
 800c36c:	b933      	cbnz	r3, 800c37c <_free_r+0x30>
 800c36e:	6063      	str	r3, [r4, #4]
 800c370:	6014      	str	r4, [r2, #0]
 800c372:	b003      	add	sp, #12
 800c374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c378:	f7ff bcd6 	b.w	800bd28 <__malloc_unlock>
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	d908      	bls.n	800c392 <_free_r+0x46>
 800c380:	6825      	ldr	r5, [r4, #0]
 800c382:	1961      	adds	r1, r4, r5
 800c384:	428b      	cmp	r3, r1
 800c386:	bf01      	itttt	eq
 800c388:	6819      	ldreq	r1, [r3, #0]
 800c38a:	685b      	ldreq	r3, [r3, #4]
 800c38c:	1949      	addeq	r1, r1, r5
 800c38e:	6021      	streq	r1, [r4, #0]
 800c390:	e7ed      	b.n	800c36e <_free_r+0x22>
 800c392:	461a      	mov	r2, r3
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	b10b      	cbz	r3, 800c39c <_free_r+0x50>
 800c398:	42a3      	cmp	r3, r4
 800c39a:	d9fa      	bls.n	800c392 <_free_r+0x46>
 800c39c:	6811      	ldr	r1, [r2, #0]
 800c39e:	1855      	adds	r5, r2, r1
 800c3a0:	42a5      	cmp	r5, r4
 800c3a2:	d10b      	bne.n	800c3bc <_free_r+0x70>
 800c3a4:	6824      	ldr	r4, [r4, #0]
 800c3a6:	4421      	add	r1, r4
 800c3a8:	1854      	adds	r4, r2, r1
 800c3aa:	42a3      	cmp	r3, r4
 800c3ac:	6011      	str	r1, [r2, #0]
 800c3ae:	d1e0      	bne.n	800c372 <_free_r+0x26>
 800c3b0:	681c      	ldr	r4, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	6053      	str	r3, [r2, #4]
 800c3b6:	440c      	add	r4, r1
 800c3b8:	6014      	str	r4, [r2, #0]
 800c3ba:	e7da      	b.n	800c372 <_free_r+0x26>
 800c3bc:	d902      	bls.n	800c3c4 <_free_r+0x78>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	e7d6      	b.n	800c372 <_free_r+0x26>
 800c3c4:	6825      	ldr	r5, [r4, #0]
 800c3c6:	1961      	adds	r1, r4, r5
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	bf04      	itt	eq
 800c3cc:	6819      	ldreq	r1, [r3, #0]
 800c3ce:	685b      	ldreq	r3, [r3, #4]
 800c3d0:	6063      	str	r3, [r4, #4]
 800c3d2:	bf04      	itt	eq
 800c3d4:	1949      	addeq	r1, r1, r5
 800c3d6:	6021      	streq	r1, [r4, #0]
 800c3d8:	6054      	str	r4, [r2, #4]
 800c3da:	e7ca      	b.n	800c372 <_free_r+0x26>
 800c3dc:	b003      	add	sp, #12
 800c3de:	bd30      	pop	{r4, r5, pc}
 800c3e0:	20001c08 	.word	0x20001c08

0800c3e4 <__sfputc_r>:
 800c3e4:	6893      	ldr	r3, [r2, #8]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	b410      	push	{r4}
 800c3ec:	6093      	str	r3, [r2, #8]
 800c3ee:	da08      	bge.n	800c402 <__sfputc_r+0x1e>
 800c3f0:	6994      	ldr	r4, [r2, #24]
 800c3f2:	42a3      	cmp	r3, r4
 800c3f4:	db01      	blt.n	800c3fa <__sfputc_r+0x16>
 800c3f6:	290a      	cmp	r1, #10
 800c3f8:	d103      	bne.n	800c402 <__sfputc_r+0x1e>
 800c3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3fe:	f7ff bdfa 	b.w	800bff6 <__swbuf_r>
 800c402:	6813      	ldr	r3, [r2, #0]
 800c404:	1c58      	adds	r0, r3, #1
 800c406:	6010      	str	r0, [r2, #0]
 800c408:	7019      	strb	r1, [r3, #0]
 800c40a:	4608      	mov	r0, r1
 800c40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <__sfputs_r>:
 800c412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c414:	4606      	mov	r6, r0
 800c416:	460f      	mov	r7, r1
 800c418:	4614      	mov	r4, r2
 800c41a:	18d5      	adds	r5, r2, r3
 800c41c:	42ac      	cmp	r4, r5
 800c41e:	d101      	bne.n	800c424 <__sfputs_r+0x12>
 800c420:	2000      	movs	r0, #0
 800c422:	e007      	b.n	800c434 <__sfputs_r+0x22>
 800c424:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c428:	463a      	mov	r2, r7
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7ff ffda 	bl	800c3e4 <__sfputc_r>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d1f3      	bne.n	800c41c <__sfputs_r+0xa>
 800c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c438 <_vfiprintf_r>:
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	460d      	mov	r5, r1
 800c43e:	b09d      	sub	sp, #116	; 0x74
 800c440:	4614      	mov	r4, r2
 800c442:	4698      	mov	r8, r3
 800c444:	4606      	mov	r6, r0
 800c446:	b118      	cbz	r0, 800c450 <_vfiprintf_r+0x18>
 800c448:	6a03      	ldr	r3, [r0, #32]
 800c44a:	b90b      	cbnz	r3, 800c450 <_vfiprintf_r+0x18>
 800c44c:	f7ff fcec 	bl	800be28 <__sinit>
 800c450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c452:	07d9      	lsls	r1, r3, #31
 800c454:	d405      	bmi.n	800c462 <_vfiprintf_r+0x2a>
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	059a      	lsls	r2, r3, #22
 800c45a:	d402      	bmi.n	800c462 <_vfiprintf_r+0x2a>
 800c45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c45e:	f7ff ff5d 	bl	800c31c <__retarget_lock_acquire_recursive>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	071b      	lsls	r3, r3, #28
 800c466:	d501      	bpl.n	800c46c <_vfiprintf_r+0x34>
 800c468:	692b      	ldr	r3, [r5, #16]
 800c46a:	b99b      	cbnz	r3, 800c494 <_vfiprintf_r+0x5c>
 800c46c:	4629      	mov	r1, r5
 800c46e:	4630      	mov	r0, r6
 800c470:	f7ff fdfe 	bl	800c070 <__swsetup_r>
 800c474:	b170      	cbz	r0, 800c494 <_vfiprintf_r+0x5c>
 800c476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c478:	07dc      	lsls	r4, r3, #31
 800c47a:	d504      	bpl.n	800c486 <_vfiprintf_r+0x4e>
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	b01d      	add	sp, #116	; 0x74
 800c482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c486:	89ab      	ldrh	r3, [r5, #12]
 800c488:	0598      	lsls	r0, r3, #22
 800c48a:	d4f7      	bmi.n	800c47c <_vfiprintf_r+0x44>
 800c48c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c48e:	f7ff ff46 	bl	800c31e <__retarget_lock_release_recursive>
 800c492:	e7f3      	b.n	800c47c <_vfiprintf_r+0x44>
 800c494:	2300      	movs	r3, #0
 800c496:	9309      	str	r3, [sp, #36]	; 0x24
 800c498:	2320      	movs	r3, #32
 800c49a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c49e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4a2:	2330      	movs	r3, #48	; 0x30
 800c4a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c658 <_vfiprintf_r+0x220>
 800c4a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4ac:	f04f 0901 	mov.w	r9, #1
 800c4b0:	4623      	mov	r3, r4
 800c4b2:	469a      	mov	sl, r3
 800c4b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4b8:	b10a      	cbz	r2, 800c4be <_vfiprintf_r+0x86>
 800c4ba:	2a25      	cmp	r2, #37	; 0x25
 800c4bc:	d1f9      	bne.n	800c4b2 <_vfiprintf_r+0x7a>
 800c4be:	ebba 0b04 	subs.w	fp, sl, r4
 800c4c2:	d00b      	beq.n	800c4dc <_vfiprintf_r+0xa4>
 800c4c4:	465b      	mov	r3, fp
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f7ff ffa1 	bl	800c412 <__sfputs_r>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	f000 80a9 	beq.w	800c628 <_vfiprintf_r+0x1f0>
 800c4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d8:	445a      	add	r2, fp
 800c4da:	9209      	str	r2, [sp, #36]	; 0x24
 800c4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 80a1 	beq.w	800c628 <_vfiprintf_r+0x1f0>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4f0:	f10a 0a01 	add.w	sl, sl, #1
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	9307      	str	r3, [sp, #28]
 800c4f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c4fe:	4654      	mov	r4, sl
 800c500:	2205      	movs	r2, #5
 800c502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c506:	4854      	ldr	r0, [pc, #336]	; (800c658 <_vfiprintf_r+0x220>)
 800c508:	f7f3 fe72 	bl	80001f0 <memchr>
 800c50c:	9a04      	ldr	r2, [sp, #16]
 800c50e:	b9d8      	cbnz	r0, 800c548 <_vfiprintf_r+0x110>
 800c510:	06d1      	lsls	r1, r2, #27
 800c512:	bf44      	itt	mi
 800c514:	2320      	movmi	r3, #32
 800c516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c51a:	0713      	lsls	r3, r2, #28
 800c51c:	bf44      	itt	mi
 800c51e:	232b      	movmi	r3, #43	; 0x2b
 800c520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c524:	f89a 3000 	ldrb.w	r3, [sl]
 800c528:	2b2a      	cmp	r3, #42	; 0x2a
 800c52a:	d015      	beq.n	800c558 <_vfiprintf_r+0x120>
 800c52c:	9a07      	ldr	r2, [sp, #28]
 800c52e:	4654      	mov	r4, sl
 800c530:	2000      	movs	r0, #0
 800c532:	f04f 0c0a 	mov.w	ip, #10
 800c536:	4621      	mov	r1, r4
 800c538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c53c:	3b30      	subs	r3, #48	; 0x30
 800c53e:	2b09      	cmp	r3, #9
 800c540:	d94d      	bls.n	800c5de <_vfiprintf_r+0x1a6>
 800c542:	b1b0      	cbz	r0, 800c572 <_vfiprintf_r+0x13a>
 800c544:	9207      	str	r2, [sp, #28]
 800c546:	e014      	b.n	800c572 <_vfiprintf_r+0x13a>
 800c548:	eba0 0308 	sub.w	r3, r0, r8
 800c54c:	fa09 f303 	lsl.w	r3, r9, r3
 800c550:	4313      	orrs	r3, r2
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	46a2      	mov	sl, r4
 800c556:	e7d2      	b.n	800c4fe <_vfiprintf_r+0xc6>
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	1d19      	adds	r1, r3, #4
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	9103      	str	r1, [sp, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	bfbb      	ittet	lt
 800c564:	425b      	neglt	r3, r3
 800c566:	f042 0202 	orrlt.w	r2, r2, #2
 800c56a:	9307      	strge	r3, [sp, #28]
 800c56c:	9307      	strlt	r3, [sp, #28]
 800c56e:	bfb8      	it	lt
 800c570:	9204      	strlt	r2, [sp, #16]
 800c572:	7823      	ldrb	r3, [r4, #0]
 800c574:	2b2e      	cmp	r3, #46	; 0x2e
 800c576:	d10c      	bne.n	800c592 <_vfiprintf_r+0x15a>
 800c578:	7863      	ldrb	r3, [r4, #1]
 800c57a:	2b2a      	cmp	r3, #42	; 0x2a
 800c57c:	d134      	bne.n	800c5e8 <_vfiprintf_r+0x1b0>
 800c57e:	9b03      	ldr	r3, [sp, #12]
 800c580:	1d1a      	adds	r2, r3, #4
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	9203      	str	r2, [sp, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfb8      	it	lt
 800c58a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c58e:	3402      	adds	r4, #2
 800c590:	9305      	str	r3, [sp, #20]
 800c592:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c668 <_vfiprintf_r+0x230>
 800c596:	7821      	ldrb	r1, [r4, #0]
 800c598:	2203      	movs	r2, #3
 800c59a:	4650      	mov	r0, sl
 800c59c:	f7f3 fe28 	bl	80001f0 <memchr>
 800c5a0:	b138      	cbz	r0, 800c5b2 <_vfiprintf_r+0x17a>
 800c5a2:	9b04      	ldr	r3, [sp, #16]
 800c5a4:	eba0 000a 	sub.w	r0, r0, sl
 800c5a8:	2240      	movs	r2, #64	; 0x40
 800c5aa:	4082      	lsls	r2, r0
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	3401      	adds	r4, #1
 800c5b0:	9304      	str	r3, [sp, #16]
 800c5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b6:	4829      	ldr	r0, [pc, #164]	; (800c65c <_vfiprintf_r+0x224>)
 800c5b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5bc:	2206      	movs	r2, #6
 800c5be:	f7f3 fe17 	bl	80001f0 <memchr>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d03f      	beq.n	800c646 <_vfiprintf_r+0x20e>
 800c5c6:	4b26      	ldr	r3, [pc, #152]	; (800c660 <_vfiprintf_r+0x228>)
 800c5c8:	bb1b      	cbnz	r3, 800c612 <_vfiprintf_r+0x1da>
 800c5ca:	9b03      	ldr	r3, [sp, #12]
 800c5cc:	3307      	adds	r3, #7
 800c5ce:	f023 0307 	bic.w	r3, r3, #7
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	9303      	str	r3, [sp, #12]
 800c5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d8:	443b      	add	r3, r7
 800c5da:	9309      	str	r3, [sp, #36]	; 0x24
 800c5dc:	e768      	b.n	800c4b0 <_vfiprintf_r+0x78>
 800c5de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	2001      	movs	r0, #1
 800c5e6:	e7a6      	b.n	800c536 <_vfiprintf_r+0xfe>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	3401      	adds	r4, #1
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	f04f 0c0a 	mov.w	ip, #10
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5fa:	3a30      	subs	r2, #48	; 0x30
 800c5fc:	2a09      	cmp	r2, #9
 800c5fe:	d903      	bls.n	800c608 <_vfiprintf_r+0x1d0>
 800c600:	2b00      	cmp	r3, #0
 800c602:	d0c6      	beq.n	800c592 <_vfiprintf_r+0x15a>
 800c604:	9105      	str	r1, [sp, #20]
 800c606:	e7c4      	b.n	800c592 <_vfiprintf_r+0x15a>
 800c608:	fb0c 2101 	mla	r1, ip, r1, r2
 800c60c:	4604      	mov	r4, r0
 800c60e:	2301      	movs	r3, #1
 800c610:	e7f0      	b.n	800c5f4 <_vfiprintf_r+0x1bc>
 800c612:	ab03      	add	r3, sp, #12
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	462a      	mov	r2, r5
 800c618:	4b12      	ldr	r3, [pc, #72]	; (800c664 <_vfiprintf_r+0x22c>)
 800c61a:	a904      	add	r1, sp, #16
 800c61c:	4630      	mov	r0, r6
 800c61e:	f3af 8000 	nop.w
 800c622:	4607      	mov	r7, r0
 800c624:	1c78      	adds	r0, r7, #1
 800c626:	d1d6      	bne.n	800c5d6 <_vfiprintf_r+0x19e>
 800c628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c62a:	07d9      	lsls	r1, r3, #31
 800c62c:	d405      	bmi.n	800c63a <_vfiprintf_r+0x202>
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	059a      	lsls	r2, r3, #22
 800c632:	d402      	bmi.n	800c63a <_vfiprintf_r+0x202>
 800c634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c636:	f7ff fe72 	bl	800c31e <__retarget_lock_release_recursive>
 800c63a:	89ab      	ldrh	r3, [r5, #12]
 800c63c:	065b      	lsls	r3, r3, #25
 800c63e:	f53f af1d 	bmi.w	800c47c <_vfiprintf_r+0x44>
 800c642:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c644:	e71c      	b.n	800c480 <_vfiprintf_r+0x48>
 800c646:	ab03      	add	r3, sp, #12
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	462a      	mov	r2, r5
 800c64c:	4b05      	ldr	r3, [pc, #20]	; (800c664 <_vfiprintf_r+0x22c>)
 800c64e:	a904      	add	r1, sp, #16
 800c650:	4630      	mov	r0, r6
 800c652:	f000 f879 	bl	800c748 <_printf_i>
 800c656:	e7e4      	b.n	800c622 <_vfiprintf_r+0x1ea>
 800c658:	0800cfd7 	.word	0x0800cfd7
 800c65c:	0800cfe1 	.word	0x0800cfe1
 800c660:	00000000 	.word	0x00000000
 800c664:	0800c413 	.word	0x0800c413
 800c668:	0800cfdd 	.word	0x0800cfdd

0800c66c <_printf_common>:
 800c66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c670:	4616      	mov	r6, r2
 800c672:	4699      	mov	r9, r3
 800c674:	688a      	ldr	r2, [r1, #8]
 800c676:	690b      	ldr	r3, [r1, #16]
 800c678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c67c:	4293      	cmp	r3, r2
 800c67e:	bfb8      	it	lt
 800c680:	4613      	movlt	r3, r2
 800c682:	6033      	str	r3, [r6, #0]
 800c684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c688:	4607      	mov	r7, r0
 800c68a:	460c      	mov	r4, r1
 800c68c:	b10a      	cbz	r2, 800c692 <_printf_common+0x26>
 800c68e:	3301      	adds	r3, #1
 800c690:	6033      	str	r3, [r6, #0]
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	0699      	lsls	r1, r3, #26
 800c696:	bf42      	ittt	mi
 800c698:	6833      	ldrmi	r3, [r6, #0]
 800c69a:	3302      	addmi	r3, #2
 800c69c:	6033      	strmi	r3, [r6, #0]
 800c69e:	6825      	ldr	r5, [r4, #0]
 800c6a0:	f015 0506 	ands.w	r5, r5, #6
 800c6a4:	d106      	bne.n	800c6b4 <_printf_common+0x48>
 800c6a6:	f104 0a19 	add.w	sl, r4, #25
 800c6aa:	68e3      	ldr	r3, [r4, #12]
 800c6ac:	6832      	ldr	r2, [r6, #0]
 800c6ae:	1a9b      	subs	r3, r3, r2
 800c6b0:	42ab      	cmp	r3, r5
 800c6b2:	dc26      	bgt.n	800c702 <_printf_common+0x96>
 800c6b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6b8:	1e13      	subs	r3, r2, #0
 800c6ba:	6822      	ldr	r2, [r4, #0]
 800c6bc:	bf18      	it	ne
 800c6be:	2301      	movne	r3, #1
 800c6c0:	0692      	lsls	r2, r2, #26
 800c6c2:	d42b      	bmi.n	800c71c <_printf_common+0xb0>
 800c6c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6c8:	4649      	mov	r1, r9
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	47c0      	blx	r8
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	d01e      	beq.n	800c710 <_printf_common+0xa4>
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	6922      	ldr	r2, [r4, #16]
 800c6d6:	f003 0306 	and.w	r3, r3, #6
 800c6da:	2b04      	cmp	r3, #4
 800c6dc:	bf02      	ittt	eq
 800c6de:	68e5      	ldreq	r5, [r4, #12]
 800c6e0:	6833      	ldreq	r3, [r6, #0]
 800c6e2:	1aed      	subeq	r5, r5, r3
 800c6e4:	68a3      	ldr	r3, [r4, #8]
 800c6e6:	bf0c      	ite	eq
 800c6e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6ec:	2500      	movne	r5, #0
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	bfc4      	itt	gt
 800c6f2:	1a9b      	subgt	r3, r3, r2
 800c6f4:	18ed      	addgt	r5, r5, r3
 800c6f6:	2600      	movs	r6, #0
 800c6f8:	341a      	adds	r4, #26
 800c6fa:	42b5      	cmp	r5, r6
 800c6fc:	d11a      	bne.n	800c734 <_printf_common+0xc8>
 800c6fe:	2000      	movs	r0, #0
 800c700:	e008      	b.n	800c714 <_printf_common+0xa8>
 800c702:	2301      	movs	r3, #1
 800c704:	4652      	mov	r2, sl
 800c706:	4649      	mov	r1, r9
 800c708:	4638      	mov	r0, r7
 800c70a:	47c0      	blx	r8
 800c70c:	3001      	adds	r0, #1
 800c70e:	d103      	bne.n	800c718 <_printf_common+0xac>
 800c710:	f04f 30ff 	mov.w	r0, #4294967295
 800c714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c718:	3501      	adds	r5, #1
 800c71a:	e7c6      	b.n	800c6aa <_printf_common+0x3e>
 800c71c:	18e1      	adds	r1, r4, r3
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	2030      	movs	r0, #48	; 0x30
 800c722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c726:	4422      	add	r2, r4
 800c728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c72c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c730:	3302      	adds	r3, #2
 800c732:	e7c7      	b.n	800c6c4 <_printf_common+0x58>
 800c734:	2301      	movs	r3, #1
 800c736:	4622      	mov	r2, r4
 800c738:	4649      	mov	r1, r9
 800c73a:	4638      	mov	r0, r7
 800c73c:	47c0      	blx	r8
 800c73e:	3001      	adds	r0, #1
 800c740:	d0e6      	beq.n	800c710 <_printf_common+0xa4>
 800c742:	3601      	adds	r6, #1
 800c744:	e7d9      	b.n	800c6fa <_printf_common+0x8e>
	...

0800c748 <_printf_i>:
 800c748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c74c:	7e0f      	ldrb	r7, [r1, #24]
 800c74e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c750:	2f78      	cmp	r7, #120	; 0x78
 800c752:	4691      	mov	r9, r2
 800c754:	4680      	mov	r8, r0
 800c756:	460c      	mov	r4, r1
 800c758:	469a      	mov	sl, r3
 800c75a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c75e:	d807      	bhi.n	800c770 <_printf_i+0x28>
 800c760:	2f62      	cmp	r7, #98	; 0x62
 800c762:	d80a      	bhi.n	800c77a <_printf_i+0x32>
 800c764:	2f00      	cmp	r7, #0
 800c766:	f000 80d4 	beq.w	800c912 <_printf_i+0x1ca>
 800c76a:	2f58      	cmp	r7, #88	; 0x58
 800c76c:	f000 80c0 	beq.w	800c8f0 <_printf_i+0x1a8>
 800c770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c778:	e03a      	b.n	800c7f0 <_printf_i+0xa8>
 800c77a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c77e:	2b15      	cmp	r3, #21
 800c780:	d8f6      	bhi.n	800c770 <_printf_i+0x28>
 800c782:	a101      	add	r1, pc, #4	; (adr r1, 800c788 <_printf_i+0x40>)
 800c784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c788:	0800c7e1 	.word	0x0800c7e1
 800c78c:	0800c7f5 	.word	0x0800c7f5
 800c790:	0800c771 	.word	0x0800c771
 800c794:	0800c771 	.word	0x0800c771
 800c798:	0800c771 	.word	0x0800c771
 800c79c:	0800c771 	.word	0x0800c771
 800c7a0:	0800c7f5 	.word	0x0800c7f5
 800c7a4:	0800c771 	.word	0x0800c771
 800c7a8:	0800c771 	.word	0x0800c771
 800c7ac:	0800c771 	.word	0x0800c771
 800c7b0:	0800c771 	.word	0x0800c771
 800c7b4:	0800c8f9 	.word	0x0800c8f9
 800c7b8:	0800c821 	.word	0x0800c821
 800c7bc:	0800c8b3 	.word	0x0800c8b3
 800c7c0:	0800c771 	.word	0x0800c771
 800c7c4:	0800c771 	.word	0x0800c771
 800c7c8:	0800c91b 	.word	0x0800c91b
 800c7cc:	0800c771 	.word	0x0800c771
 800c7d0:	0800c821 	.word	0x0800c821
 800c7d4:	0800c771 	.word	0x0800c771
 800c7d8:	0800c771 	.word	0x0800c771
 800c7dc:	0800c8bb 	.word	0x0800c8bb
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	1d1a      	adds	r2, r3, #4
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	602a      	str	r2, [r5, #0]
 800c7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e09f      	b.n	800c934 <_printf_i+0x1ec>
 800c7f4:	6820      	ldr	r0, [r4, #0]
 800c7f6:	682b      	ldr	r3, [r5, #0]
 800c7f8:	0607      	lsls	r7, r0, #24
 800c7fa:	f103 0104 	add.w	r1, r3, #4
 800c7fe:	6029      	str	r1, [r5, #0]
 800c800:	d501      	bpl.n	800c806 <_printf_i+0xbe>
 800c802:	681e      	ldr	r6, [r3, #0]
 800c804:	e003      	b.n	800c80e <_printf_i+0xc6>
 800c806:	0646      	lsls	r6, r0, #25
 800c808:	d5fb      	bpl.n	800c802 <_printf_i+0xba>
 800c80a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c80e:	2e00      	cmp	r6, #0
 800c810:	da03      	bge.n	800c81a <_printf_i+0xd2>
 800c812:	232d      	movs	r3, #45	; 0x2d
 800c814:	4276      	negs	r6, r6
 800c816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c81a:	485a      	ldr	r0, [pc, #360]	; (800c984 <_printf_i+0x23c>)
 800c81c:	230a      	movs	r3, #10
 800c81e:	e012      	b.n	800c846 <_printf_i+0xfe>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	6820      	ldr	r0, [r4, #0]
 800c824:	1d19      	adds	r1, r3, #4
 800c826:	6029      	str	r1, [r5, #0]
 800c828:	0605      	lsls	r5, r0, #24
 800c82a:	d501      	bpl.n	800c830 <_printf_i+0xe8>
 800c82c:	681e      	ldr	r6, [r3, #0]
 800c82e:	e002      	b.n	800c836 <_printf_i+0xee>
 800c830:	0641      	lsls	r1, r0, #25
 800c832:	d5fb      	bpl.n	800c82c <_printf_i+0xe4>
 800c834:	881e      	ldrh	r6, [r3, #0]
 800c836:	4853      	ldr	r0, [pc, #332]	; (800c984 <_printf_i+0x23c>)
 800c838:	2f6f      	cmp	r7, #111	; 0x6f
 800c83a:	bf0c      	ite	eq
 800c83c:	2308      	moveq	r3, #8
 800c83e:	230a      	movne	r3, #10
 800c840:	2100      	movs	r1, #0
 800c842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c846:	6865      	ldr	r5, [r4, #4]
 800c848:	60a5      	str	r5, [r4, #8]
 800c84a:	2d00      	cmp	r5, #0
 800c84c:	bfa2      	ittt	ge
 800c84e:	6821      	ldrge	r1, [r4, #0]
 800c850:	f021 0104 	bicge.w	r1, r1, #4
 800c854:	6021      	strge	r1, [r4, #0]
 800c856:	b90e      	cbnz	r6, 800c85c <_printf_i+0x114>
 800c858:	2d00      	cmp	r5, #0
 800c85a:	d04b      	beq.n	800c8f4 <_printf_i+0x1ac>
 800c85c:	4615      	mov	r5, r2
 800c85e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c862:	fb03 6711 	mls	r7, r3, r1, r6
 800c866:	5dc7      	ldrb	r7, [r0, r7]
 800c868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c86c:	4637      	mov	r7, r6
 800c86e:	42bb      	cmp	r3, r7
 800c870:	460e      	mov	r6, r1
 800c872:	d9f4      	bls.n	800c85e <_printf_i+0x116>
 800c874:	2b08      	cmp	r3, #8
 800c876:	d10b      	bne.n	800c890 <_printf_i+0x148>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	07de      	lsls	r6, r3, #31
 800c87c:	d508      	bpl.n	800c890 <_printf_i+0x148>
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	6861      	ldr	r1, [r4, #4]
 800c882:	4299      	cmp	r1, r3
 800c884:	bfde      	ittt	le
 800c886:	2330      	movle	r3, #48	; 0x30
 800c888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c88c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c890:	1b52      	subs	r2, r2, r5
 800c892:	6122      	str	r2, [r4, #16]
 800c894:	f8cd a000 	str.w	sl, [sp]
 800c898:	464b      	mov	r3, r9
 800c89a:	aa03      	add	r2, sp, #12
 800c89c:	4621      	mov	r1, r4
 800c89e:	4640      	mov	r0, r8
 800c8a0:	f7ff fee4 	bl	800c66c <_printf_common>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	d14a      	bne.n	800c93e <_printf_i+0x1f6>
 800c8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ac:	b004      	add	sp, #16
 800c8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	f043 0320 	orr.w	r3, r3, #32
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	4833      	ldr	r0, [pc, #204]	; (800c988 <_printf_i+0x240>)
 800c8bc:	2778      	movs	r7, #120	; 0x78
 800c8be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	6829      	ldr	r1, [r5, #0]
 800c8c6:	061f      	lsls	r7, r3, #24
 800c8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8cc:	d402      	bmi.n	800c8d4 <_printf_i+0x18c>
 800c8ce:	065f      	lsls	r7, r3, #25
 800c8d0:	bf48      	it	mi
 800c8d2:	b2b6      	uxthmi	r6, r6
 800c8d4:	07df      	lsls	r7, r3, #31
 800c8d6:	bf48      	it	mi
 800c8d8:	f043 0320 	orrmi.w	r3, r3, #32
 800c8dc:	6029      	str	r1, [r5, #0]
 800c8de:	bf48      	it	mi
 800c8e0:	6023      	strmi	r3, [r4, #0]
 800c8e2:	b91e      	cbnz	r6, 800c8ec <_printf_i+0x1a4>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	f023 0320 	bic.w	r3, r3, #32
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	2310      	movs	r3, #16
 800c8ee:	e7a7      	b.n	800c840 <_printf_i+0xf8>
 800c8f0:	4824      	ldr	r0, [pc, #144]	; (800c984 <_printf_i+0x23c>)
 800c8f2:	e7e4      	b.n	800c8be <_printf_i+0x176>
 800c8f4:	4615      	mov	r5, r2
 800c8f6:	e7bd      	b.n	800c874 <_printf_i+0x12c>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	6826      	ldr	r6, [r4, #0]
 800c8fc:	6961      	ldr	r1, [r4, #20]
 800c8fe:	1d18      	adds	r0, r3, #4
 800c900:	6028      	str	r0, [r5, #0]
 800c902:	0635      	lsls	r5, r6, #24
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	d501      	bpl.n	800c90c <_printf_i+0x1c4>
 800c908:	6019      	str	r1, [r3, #0]
 800c90a:	e002      	b.n	800c912 <_printf_i+0x1ca>
 800c90c:	0670      	lsls	r0, r6, #25
 800c90e:	d5fb      	bpl.n	800c908 <_printf_i+0x1c0>
 800c910:	8019      	strh	r1, [r3, #0]
 800c912:	2300      	movs	r3, #0
 800c914:	6123      	str	r3, [r4, #16]
 800c916:	4615      	mov	r5, r2
 800c918:	e7bc      	b.n	800c894 <_printf_i+0x14c>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	1d1a      	adds	r2, r3, #4
 800c91e:	602a      	str	r2, [r5, #0]
 800c920:	681d      	ldr	r5, [r3, #0]
 800c922:	6862      	ldr	r2, [r4, #4]
 800c924:	2100      	movs	r1, #0
 800c926:	4628      	mov	r0, r5
 800c928:	f7f3 fc62 	bl	80001f0 <memchr>
 800c92c:	b108      	cbz	r0, 800c932 <_printf_i+0x1ea>
 800c92e:	1b40      	subs	r0, r0, r5
 800c930:	6060      	str	r0, [r4, #4]
 800c932:	6863      	ldr	r3, [r4, #4]
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	2300      	movs	r3, #0
 800c938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c93c:	e7aa      	b.n	800c894 <_printf_i+0x14c>
 800c93e:	6923      	ldr	r3, [r4, #16]
 800c940:	462a      	mov	r2, r5
 800c942:	4649      	mov	r1, r9
 800c944:	4640      	mov	r0, r8
 800c946:	47d0      	blx	sl
 800c948:	3001      	adds	r0, #1
 800c94a:	d0ad      	beq.n	800c8a8 <_printf_i+0x160>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	079b      	lsls	r3, r3, #30
 800c950:	d413      	bmi.n	800c97a <_printf_i+0x232>
 800c952:	68e0      	ldr	r0, [r4, #12]
 800c954:	9b03      	ldr	r3, [sp, #12]
 800c956:	4298      	cmp	r0, r3
 800c958:	bfb8      	it	lt
 800c95a:	4618      	movlt	r0, r3
 800c95c:	e7a6      	b.n	800c8ac <_printf_i+0x164>
 800c95e:	2301      	movs	r3, #1
 800c960:	4632      	mov	r2, r6
 800c962:	4649      	mov	r1, r9
 800c964:	4640      	mov	r0, r8
 800c966:	47d0      	blx	sl
 800c968:	3001      	adds	r0, #1
 800c96a:	d09d      	beq.n	800c8a8 <_printf_i+0x160>
 800c96c:	3501      	adds	r5, #1
 800c96e:	68e3      	ldr	r3, [r4, #12]
 800c970:	9903      	ldr	r1, [sp, #12]
 800c972:	1a5b      	subs	r3, r3, r1
 800c974:	42ab      	cmp	r3, r5
 800c976:	dcf2      	bgt.n	800c95e <_printf_i+0x216>
 800c978:	e7eb      	b.n	800c952 <_printf_i+0x20a>
 800c97a:	2500      	movs	r5, #0
 800c97c:	f104 0619 	add.w	r6, r4, #25
 800c980:	e7f5      	b.n	800c96e <_printf_i+0x226>
 800c982:	bf00      	nop
 800c984:	0800cfe8 	.word	0x0800cfe8
 800c988:	0800cff9 	.word	0x0800cff9

0800c98c <__sflush_r>:
 800c98c:	898a      	ldrh	r2, [r1, #12]
 800c98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	4605      	mov	r5, r0
 800c994:	0710      	lsls	r0, r2, #28
 800c996:	460c      	mov	r4, r1
 800c998:	d458      	bmi.n	800ca4c <__sflush_r+0xc0>
 800c99a:	684b      	ldr	r3, [r1, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dc05      	bgt.n	800c9ac <__sflush_r+0x20>
 800c9a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dc02      	bgt.n	800c9ac <__sflush_r+0x20>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	d0f9      	beq.n	800c9a6 <__sflush_r+0x1a>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9b8:	682f      	ldr	r7, [r5, #0]
 800c9ba:	6a21      	ldr	r1, [r4, #32]
 800c9bc:	602b      	str	r3, [r5, #0]
 800c9be:	d032      	beq.n	800ca26 <__sflush_r+0x9a>
 800c9c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	075a      	lsls	r2, r3, #29
 800c9c6:	d505      	bpl.n	800c9d4 <__sflush_r+0x48>
 800c9c8:	6863      	ldr	r3, [r4, #4]
 800c9ca:	1ac0      	subs	r0, r0, r3
 800c9cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9ce:	b10b      	cbz	r3, 800c9d4 <__sflush_r+0x48>
 800c9d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9d2:	1ac0      	subs	r0, r0, r3
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9da:	6a21      	ldr	r1, [r4, #32]
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b0      	blx	r6
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	d106      	bne.n	800c9f4 <__sflush_r+0x68>
 800c9e6:	6829      	ldr	r1, [r5, #0]
 800c9e8:	291d      	cmp	r1, #29
 800c9ea:	d82b      	bhi.n	800ca44 <__sflush_r+0xb8>
 800c9ec:	4a29      	ldr	r2, [pc, #164]	; (800ca94 <__sflush_r+0x108>)
 800c9ee:	410a      	asrs	r2, r1
 800c9f0:	07d6      	lsls	r6, r2, #31
 800c9f2:	d427      	bmi.n	800ca44 <__sflush_r+0xb8>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	6062      	str	r2, [r4, #4]
 800c9f8:	04d9      	lsls	r1, r3, #19
 800c9fa:	6922      	ldr	r2, [r4, #16]
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	d504      	bpl.n	800ca0a <__sflush_r+0x7e>
 800ca00:	1c42      	adds	r2, r0, #1
 800ca02:	d101      	bne.n	800ca08 <__sflush_r+0x7c>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	b903      	cbnz	r3, 800ca0a <__sflush_r+0x7e>
 800ca08:	6560      	str	r0, [r4, #84]	; 0x54
 800ca0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca0c:	602f      	str	r7, [r5, #0]
 800ca0e:	2900      	cmp	r1, #0
 800ca10:	d0c9      	beq.n	800c9a6 <__sflush_r+0x1a>
 800ca12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca16:	4299      	cmp	r1, r3
 800ca18:	d002      	beq.n	800ca20 <__sflush_r+0x94>
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f7ff fc96 	bl	800c34c <_free_r>
 800ca20:	2000      	movs	r0, #0
 800ca22:	6360      	str	r0, [r4, #52]	; 0x34
 800ca24:	e7c0      	b.n	800c9a8 <__sflush_r+0x1c>
 800ca26:	2301      	movs	r3, #1
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b0      	blx	r6
 800ca2c:	1c41      	adds	r1, r0, #1
 800ca2e:	d1c8      	bne.n	800c9c2 <__sflush_r+0x36>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0c5      	beq.n	800c9c2 <__sflush_r+0x36>
 800ca36:	2b1d      	cmp	r3, #29
 800ca38:	d001      	beq.n	800ca3e <__sflush_r+0xb2>
 800ca3a:	2b16      	cmp	r3, #22
 800ca3c:	d101      	bne.n	800ca42 <__sflush_r+0xb6>
 800ca3e:	602f      	str	r7, [r5, #0]
 800ca40:	e7b1      	b.n	800c9a6 <__sflush_r+0x1a>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca48:	81a3      	strh	r3, [r4, #12]
 800ca4a:	e7ad      	b.n	800c9a8 <__sflush_r+0x1c>
 800ca4c:	690f      	ldr	r7, [r1, #16]
 800ca4e:	2f00      	cmp	r7, #0
 800ca50:	d0a9      	beq.n	800c9a6 <__sflush_r+0x1a>
 800ca52:	0793      	lsls	r3, r2, #30
 800ca54:	680e      	ldr	r6, [r1, #0]
 800ca56:	bf08      	it	eq
 800ca58:	694b      	ldreq	r3, [r1, #20]
 800ca5a:	600f      	str	r7, [r1, #0]
 800ca5c:	bf18      	it	ne
 800ca5e:	2300      	movne	r3, #0
 800ca60:	eba6 0807 	sub.w	r8, r6, r7
 800ca64:	608b      	str	r3, [r1, #8]
 800ca66:	f1b8 0f00 	cmp.w	r8, #0
 800ca6a:	dd9c      	ble.n	800c9a6 <__sflush_r+0x1a>
 800ca6c:	6a21      	ldr	r1, [r4, #32]
 800ca6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca70:	4643      	mov	r3, r8
 800ca72:	463a      	mov	r2, r7
 800ca74:	4628      	mov	r0, r5
 800ca76:	47b0      	blx	r6
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	dc06      	bgt.n	800ca8a <__sflush_r+0xfe>
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	e78e      	b.n	800c9a8 <__sflush_r+0x1c>
 800ca8a:	4407      	add	r7, r0
 800ca8c:	eba8 0800 	sub.w	r8, r8, r0
 800ca90:	e7e9      	b.n	800ca66 <__sflush_r+0xda>
 800ca92:	bf00      	nop
 800ca94:	dfbffffe 	.word	0xdfbffffe

0800ca98 <_fflush_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	690b      	ldr	r3, [r1, #16]
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	b913      	cbnz	r3, 800caa8 <_fflush_r+0x10>
 800caa2:	2500      	movs	r5, #0
 800caa4:	4628      	mov	r0, r5
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	b118      	cbz	r0, 800cab2 <_fflush_r+0x1a>
 800caaa:	6a03      	ldr	r3, [r0, #32]
 800caac:	b90b      	cbnz	r3, 800cab2 <_fflush_r+0x1a>
 800caae:	f7ff f9bb 	bl	800be28 <__sinit>
 800cab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0f3      	beq.n	800caa2 <_fflush_r+0xa>
 800caba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cabc:	07d0      	lsls	r0, r2, #31
 800cabe:	d404      	bmi.n	800caca <_fflush_r+0x32>
 800cac0:	0599      	lsls	r1, r3, #22
 800cac2:	d402      	bmi.n	800caca <_fflush_r+0x32>
 800cac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cac6:	f7ff fc29 	bl	800c31c <__retarget_lock_acquire_recursive>
 800caca:	4628      	mov	r0, r5
 800cacc:	4621      	mov	r1, r4
 800cace:	f7ff ff5d 	bl	800c98c <__sflush_r>
 800cad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cad4:	07da      	lsls	r2, r3, #31
 800cad6:	4605      	mov	r5, r0
 800cad8:	d4e4      	bmi.n	800caa4 <_fflush_r+0xc>
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	059b      	lsls	r3, r3, #22
 800cade:	d4e1      	bmi.n	800caa4 <_fflush_r+0xc>
 800cae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cae2:	f7ff fc1c 	bl	800c31e <__retarget_lock_release_recursive>
 800cae6:	e7dd      	b.n	800caa4 <_fflush_r+0xc>

0800cae8 <__swhatbuf_r>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	460c      	mov	r4, r1
 800caec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf0:	2900      	cmp	r1, #0
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	4615      	mov	r5, r2
 800caf6:	461e      	mov	r6, r3
 800caf8:	da0d      	bge.n	800cb16 <__swhatbuf_r+0x2e>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb00:	f04f 0100 	mov.w	r1, #0
 800cb04:	bf0c      	ite	eq
 800cb06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb0a:	2340      	movne	r3, #64	; 0x40
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	6031      	str	r1, [r6, #0]
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	b016      	add	sp, #88	; 0x58
 800cb14:	bd70      	pop	{r4, r5, r6, pc}
 800cb16:	466a      	mov	r2, sp
 800cb18:	f000 f848 	bl	800cbac <_fstat_r>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	dbec      	blt.n	800cafa <__swhatbuf_r+0x12>
 800cb20:	9901      	ldr	r1, [sp, #4]
 800cb22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb2a:	4259      	negs	r1, r3
 800cb2c:	4159      	adcs	r1, r3
 800cb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb32:	e7eb      	b.n	800cb0c <__swhatbuf_r+0x24>

0800cb34 <__smakebuf_r>:
 800cb34:	898b      	ldrh	r3, [r1, #12]
 800cb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb38:	079d      	lsls	r5, r3, #30
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	d507      	bpl.n	800cb50 <__smakebuf_r+0x1c>
 800cb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	6123      	str	r3, [r4, #16]
 800cb48:	2301      	movs	r3, #1
 800cb4a:	6163      	str	r3, [r4, #20]
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	ab01      	add	r3, sp, #4
 800cb52:	466a      	mov	r2, sp
 800cb54:	f7ff ffc8 	bl	800cae8 <__swhatbuf_r>
 800cb58:	9900      	ldr	r1, [sp, #0]
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7ff f85d 	bl	800bc1c <_malloc_r>
 800cb62:	b948      	cbnz	r0, 800cb78 <__smakebuf_r+0x44>
 800cb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb68:	059a      	lsls	r2, r3, #22
 800cb6a:	d4ef      	bmi.n	800cb4c <__smakebuf_r+0x18>
 800cb6c:	f023 0303 	bic.w	r3, r3, #3
 800cb70:	f043 0302 	orr.w	r3, r3, #2
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e7e3      	b.n	800cb40 <__smakebuf_r+0xc>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	6020      	str	r0, [r4, #0]
 800cb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	9b00      	ldr	r3, [sp, #0]
 800cb84:	6163      	str	r3, [r4, #20]
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	6120      	str	r0, [r4, #16]
 800cb8a:	b15b      	cbz	r3, 800cba4 <__smakebuf_r+0x70>
 800cb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb90:	4630      	mov	r0, r6
 800cb92:	f000 f81d 	bl	800cbd0 <_isatty_r>
 800cb96:	b128      	cbz	r0, 800cba4 <__smakebuf_r+0x70>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	f023 0303 	bic.w	r3, r3, #3
 800cb9e:	f043 0301 	orr.w	r3, r3, #1
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	431d      	orrs	r5, r3
 800cba8:	81a5      	strh	r5, [r4, #12]
 800cbaa:	e7cf      	b.n	800cb4c <__smakebuf_r+0x18>

0800cbac <_fstat_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d07      	ldr	r5, [pc, #28]	; (800cbcc <_fstat_r+0x20>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	602b      	str	r3, [r5, #0]
 800cbba:	f7fe fd96 	bl	800b6ea <_fstat>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	d102      	bne.n	800cbc8 <_fstat_r+0x1c>
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	b103      	cbz	r3, 800cbc8 <_fstat_r+0x1c>
 800cbc6:	6023      	str	r3, [r4, #0]
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
 800cbca:	bf00      	nop
 800cbcc:	20001d4c 	.word	0x20001d4c

0800cbd0 <_isatty_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d06      	ldr	r5, [pc, #24]	; (800cbec <_isatty_r+0x1c>)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	602b      	str	r3, [r5, #0]
 800cbdc:	f7fe fd95 	bl	800b70a <_isatty>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_isatty_r+0x1a>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_isatty_r+0x1a>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	20001d4c 	.word	0x20001d4c

0800cbf0 <_init>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr

0800cbfc <_fini>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr
