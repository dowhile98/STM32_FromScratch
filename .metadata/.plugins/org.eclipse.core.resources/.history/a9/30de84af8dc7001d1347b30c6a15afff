/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*Includes -------------------------------------------------------------------*/
#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx.h"
#include <stdbool.h>
#include "defines.h"
#include "delay.h"
#include "button.h"
/*Typedef --------------------------------------------------------------------*/
typedef enum{
	UART_OK,
	UART_TIMOUT,
	UART_ERROR
}UART_Status_t;

/*Defines ------------------------------------------------------------------- */
/**
 * Calculo de BRR
 */
#define UART_DIV_SAMPLING16(_PCLK_, _BAUD_)            ((uint32_t)((((uint64_t)(_PCLK_))*25U)/(4U*((uint64_t)(_BAUD_)))))
#define UART_DIVMANT_SAMPLING16(_PCLK_, _BAUD_)        (UART_DIV_SAMPLING16((_PCLK_), (_BAUD_))/100U)
#define UART_DIVFRAQ_SAMPLING16(_PCLK_, _BAUD_)        ((((UART_DIV_SAMPLING16((_PCLK_), (_BAUD_)) - (UART_DIVMANT_SAMPLING16((_PCLK_), (_BAUD_)) * 100U)) * 16U)\
                                                         + 50U) / 100U)
/* UART BRR = mantissa + overflow + fraction
            = (UART DIVMANT << 4) + (UART DIVFRAQ & 0xF0) + (UART DIVFRAQ & 0x0FU) */
#define UART_BRR_SAMPLING16(_PCLK_, _BAUD_)            ((UART_DIVMANT_SAMPLING16((_PCLK_), (_BAUD_)) << 4U) + \
                                                        (UART_DIVFRAQ_SAMPLING16((_PCLK_), (_BAUD_)) & 0xF0U) + \
                                                        (UART_DIVFRAQ_SAMPLING16((_PCLK_), (_BAUD_)) & 0x0FU))

#define UART_DIV_SAMPLING8(_PCLK_, _BAUD_)             ((uint32_t)((((uint64_t)(_PCLK_))*25U)/(2U*((uint64_t)(_BAUD_)))))
#define UART_DIVMANT_SAMPLING8(_PCLK_, _BAUD_)         (UART_DIV_SAMPLING8((_PCLK_), (_BAUD_))/100U)
#define UART_DIVFRAQ_SAMPLING8(_PCLK_, _BAUD_)         ((((UART_DIV_SAMPLING8((_PCLK_), (_BAUD_)) - (UART_DIVMANT_SAMPLING8((_PCLK_), (_BAUD_)) * 100U)) * 8U)\
                                                         + 50U) / 100U)
/* UART BRR = mantissa + overflow + fraction
            = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07U) */
#define UART_BRR_SAMPLING8(_PCLK_, _BAUD_)             ((UART_DIVMANT_SAMPLING8((_PCLK_), (_BAUD_)) << 4U) + \
                                                        ((UART_DIVFRAQ_SAMPLING8((_PCLK_), (_BAUD_)) & 0xF8U) << 1U) + \
                                                        (UART_DIVFRAQ_SAMPLING8((_PCLK_), (_BAUD_)) & 0x07U))
/* Private user code ---------------------------------------------------------*/



#define LED		D , 12
#define SW		A , 0

#define USART1_TX	B, 6
#define USART1_RX 	B, 7
/*Global variables ---------------------------------------------------------- */
Button_t button1;
Button_t button2;
uint32_t count = 0;
/*function prototype ---------------------------------------------------------*/

void button1_callback(void);

void USART1_Init(void);

/**
 * @brief transmitir datos por USART
 * @param [USARTX]: Instancia al usart a utilizar para realizar la transferencia
 * @param [pData] : puntero a los datos a transmitir
 * @param [len]: tamaño de datos a transmitir
 * @param [timeout] tiempo maximo para transimitir los datos
 * @return UART_Status_t
 */
UART_Status_t UART_SendData(USART_TypeDef *USARTx, uint8_t *pData, uint32_t len, uint32_t timeout);

/*main function --------------------------------------------------------------*/

int main(void)
{
	printf("EJEMPLO GPIO1\r\n");
	printf("%s, %s\r\n", __DATE__, __TIME__);
	//PD12 (LED1)
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
	GPIOX_MODER(MODE_OUT, LED);
	GPIOX_OTYPER(MODE_OT_PP, LED);
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED);
	GPIOX_PUPDR(MODE_PU_NONE, LED);

	//PA0
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
	GPIOX_PUPDR(MODE_PU_NONE, SW);
	//systick
	SysTickInit();

	//inicializar
	ButtonInit(&button1, GPIOA, 0, &button1_callback);
	ButtonInit(&button2, GPIOD, 13, NULL);

	//USART1
	USART1_Init();
    /* Loop forever */
	for(;;){
		ButtonRead(&button1, PIN_TO_LOW);
		if(ButtonRead(&button2, PIN_TO_HIGH)){
			//todo
		}
		if(GPIOX_IDR(SW) == 1){
			//todo

		}

	}
}

/*Function definition ---------------------------------------------------------*/
void button1_callback(void){
	GPIOX_ODR(LED) ^= 0x1;
	count++;
	printf("pulsador se presiono..%u\r\n", count);
}

void USART1_Init(void){
	//1. RCC
	RCC->AHB1ENR |= GPIOX_CLOCK(USART1_RX);
	GPIOX_MODER(MODE_ALTER, USART1_TX);
	GPIOX_MODER(MODE_ALTER, USART1_RX);
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART1_TX);
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART1_RX);
	GPIOX_AFR(7, USART1_TX);
//	GPIOB->AFR[0] &=~ (GPIO_AFRL_AFRL7);
//	GPIOB->AFR[0] |= 0x7U<<GPIO_AFRL_AFSEL7_Pos;
	GPIOX_AFR(7, USART1_RX);
	//USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
	//deshabilitar el USART
	USART1->CR1 = 0x0U;						//reset state
	/**
	 * PCLK2 = 16MHz
	 * baudios = 115200
	 * USARTDIV = PCLCK2 / (16 * Buudios)
	 * USARTDIV = 16E+6 / (16 * 115200)
	 * USARTDIV = 8.68
	 * MANTISA = 8
	 * FRACTION = 0.68 * 16 = > 10.88 ~~~ 11
	 *
	 */
	USART1->BRR = 0x8<<4 | 0xB;				//115200 Baudios
	//USART1->BRR = UART_BRR_SAMPLING16(16E+6, 115200);
	//Paridad (PS, PCE)

	//bit parada (STOP)

	//longitud de los datos (M)

	//habilitar RX, TX (RE, DE)
	USART1->CR1 |= USART_CR1_RE | USART_CR1_DE;


	//habilitas el uart
	USART1->CR1 |= USART_CR1_UE;

	return;
}
/**
 * @brief transmitir datos por USART
 * @param [USARTX]: Instancia al usart a utilizar para realizar la transferencia
 * @param [pData] : puntero a los datos a transmitir
 * @param [len]: tamaño de datos a transmitir
 * @param [timeout] tiempo maximo para transimitir los datos
 * @return UART_Status_t
 */
UART_Status_t UART_SendData(USART_TypeDef *USARTx, uint8_t *pData, uint32_t len, uint32_t timeout){

	uint32_t tickStart = GetTicks();
	if(pData == NULL){
		return UART_ERROR;
	}

	while((GetTicks() - tickStart) <= timeout){
		if(USARTx->SR & USART_SR_TXE){			//buffer listo para recibir otro dato
			USARTx->DR = *pData;
			pData++;
			len--;
			if(len <= 0){
				return UART_OK;					//termina de transmitir los datos
			}
		}
	}
	//timout
	return UART_TIMOUT;
}


int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
