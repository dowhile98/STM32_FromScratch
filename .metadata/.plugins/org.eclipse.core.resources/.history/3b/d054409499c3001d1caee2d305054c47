/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*Includes -------------------------------------------------------------------*/
#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx.h"
#include <stdbool.h>
#include "defines.h"
/*Typedef --------------------------------------------------------------------*/


/*Defines ------------------------------------------------------------------- */
#define LED		D , 12
#define SW		A , 0

/*Global variables ---------------------------------------------------------- */

/*function prototype ---------------------------------------------------------*/
void SysTickInit(void);
/**
 * @brief funcion para generar retardos en ms
 */
void delay_ms(uint32_t delay);
/*main function --------------------------------------------------------------*/

int main(void)
{
	printf("EJEMPLO GPIO1\r\n");
	printf("%s, %s\r\n", __DATE__, __TIME__);
	//PD12 (LED1)
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
	GPIOX_MODER(MODE_OUT, LED);
	GPIOX_OTYPER(MODE_OT_PP, LED);
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED);
	GPIOX_PUPDR(MODE_PU_NONE, LED);

	//PA0
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
	GPIOX_PUPDR(MODE_PU_NONE, SW);
	//systick
	SysTickInit();
    /* Loop forever */
	for(;;){
		GPIOX_ODR(LED) ^= 1;
		delay_ms(100);
	}
}

/*Function definition ---------------------------------------------------------*/
void SysTickInit(void){
	uint32_t temp;
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
	temp = SystemCoreClock / 1000 - 1;
	SysTick->LOAD = temp;
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
	return;
}
/**
 * @brief funcion para generar retardos en ms
 */
void delay_ms(uint32_t delay){
	uint32_t i;
	SysTick->VAL = 0;
	for(i = 0; i<delay; i++){
		while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); //1ms
	}
	return;
}





int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
