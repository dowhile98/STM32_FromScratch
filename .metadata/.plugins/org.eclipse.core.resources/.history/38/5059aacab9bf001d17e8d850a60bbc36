/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*Includes -------------------------------------------------------------------*/
#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx.h"

/*Typedef --------------------------------------------------------------------*/


/*Defines ------------------------------------------------------------------- */

/*Global variables ---------------------------------------------------------- */

/*function prototype ---------------------------------------------------------*/

/*main function --------------------------------------------------------------*/

int main(void)
{
	printf("EJEMPLO GPIO1\r\n");
	printf("%s, %s\r\n", __DATE__, __TIME__);
	//PD12 (LED1)
	//1. HABILITAR EL RELOJ
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
	//2. Configurar el modo
	GPIOD->MODER &=~ GPIO_MODER_MODE12;		//CLEAR
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//salida de proposito general
	//3. definir el modo de salida
	GPIOD->OTYPER &=~ GPIO_OTYPER_OT12;		//SALIDA PUSH PULL
	//4. VELODIDAD CONMUTACION
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12;	//VERY HIGH SPEED
	//5. RESISTENCIA PULL UP
	GPIOD->PUPDR &=~ GPIO_PUPDR_PUPD12;		//SIN RESISTENCIAS

	printf("configuracion termida\r\n");

	GPIOD->ODR |= GPIO_ODR_OD12;			//PONE EN ALTO EL PIN
	GPIOD->ODR &=~ GPIO_ODR_OD12;			//PONE EN BAJO
    /* Loop forever */
	for(;;){

	}
}

/*Function definition ---------------------------------------------------------*/
int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
